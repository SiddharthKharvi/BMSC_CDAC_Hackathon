
Indus_Board_all_Peripherals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b640  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800b820  0800b820  0001b820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc74  0800bc74  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc74  0800bc74  0001bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc7c  0800bc7c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc80  0800bc80  0001bc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bc84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200001dc  0800be60  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800be60  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001efef  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039c8  00000000  00000000  0003f23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc0  00000000  00000000  00042c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015a8  00000000  00000000  000447c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004999  00000000  00000000  00045d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002074f  00000000  00000000  0004a709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4d03  00000000  00000000  0006ae58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089c0  00000000  00000000  0014fb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0015851c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b808 	.word	0x0800b808

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800b808 	.word	0x0800b808

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <__io_putchar>:
 * @brief //Modified Function Prototype for Printf
 * @param none
 * @return None
 **************************************************************************/
PUTCHAR_PROTOTYPE
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f02:	2201      	movs	r2, #1
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <__io_putchar+0x20>)
 8000f06:	f006 fbe1 	bl	80076cc <HAL_UART_Transmit>
  return ch;
 8000f0a:	687b      	ldr	r3, [r7, #4]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000040c 	.word	0x2000040c

08000f18 <getinput>:
uint16_t B1 = 0;
uint16_t B2 = 0;



void getinput(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
	char *t1 = "Temperature: ";
 8000f1e:	4b4c      	ldr	r3, [pc, #304]	; (8001050 <getinput+0x138>)
 8000f20:	61fb      	str	r3, [r7, #28]
	char *t2 = "Humidity: ";
 8000f22:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <getinput+0x13c>)
 8000f24:	61bb      	str	r3, [r7, #24]
	char temp1[10];
	char humd1[10];

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000f26:	2140      	movs	r1, #64	; 0x40
 8000f28:	484b      	ldr	r0, [pc, #300]	; (8001058 <getinput+0x140>)
 8000f2a:	f003 fb33 	bl	8004594 <HAL_GPIO_ReadPin>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d11d      	bne.n	8000f70 <getinput+0x58>
		HAL_ADC_Start(&hadc1);
 8000f34:	4849      	ldr	r0, [pc, #292]	; (800105c <getinput+0x144>)
 8000f36:	f001 ff53 	bl	8002de0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,1000);
 8000f3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f3e:	4847      	ldr	r0, [pc, #284]	; (800105c <getinput+0x144>)
 8000f40:	f002 f80a 	bl	8002f58 <HAL_ADC_PollForConversion>
		TTemp = (HAL_ADC_GetValue(&hadc1) / 160) + 16;
 8000f44:	4845      	ldr	r0, [pc, #276]	; (800105c <getinput+0x144>)
 8000f46:	f002 f8df 	bl	8003108 <HAL_ADC_GetValue>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a44      	ldr	r2, [pc, #272]	; (8001060 <getinput+0x148>)
 8000f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f52:	09db      	lsrs	r3, r3, #7
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	3310      	adds	r3, #16
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b42      	ldr	r3, [pc, #264]	; (8001064 <getinput+0x14c>)
 8000f5c:	801a      	strh	r2, [r3, #0]
		sprintf(temp1, "%d", TTemp);
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <getinput+0x14c>)
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	493f      	ldr	r1, [pc, #252]	; (8001068 <getinput+0x150>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f008 faee 	bl	800954c <siprintf>
//		lcd_write_string(temp1);


	}

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	4839      	ldr	r0, [pc, #228]	; (8001058 <getinput+0x140>)
 8000f74:	f003 fb0e 	bl	8004594 <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d11a      	bne.n	8000fb4 <getinput+0x9c>
			HAL_ADC_Start(&hadc1);
 8000f7e:	4837      	ldr	r0, [pc, #220]	; (800105c <getinput+0x144>)
 8000f80:	f001 ff2e 	bl	8002de0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1,1000);
 8000f84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f88:	4834      	ldr	r0, [pc, #208]	; (800105c <getinput+0x144>)
 8000f8a:	f001 ffe5 	bl	8002f58 <HAL_ADC_PollForConversion>
			THumd = HAL_ADC_GetValue(&hadc1) / 40;
 8000f8e:	4833      	ldr	r0, [pc, #204]	; (800105c <getinput+0x144>)
 8000f90:	f002 f8ba 	bl	8003108 <HAL_ADC_GetValue>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a32      	ldr	r2, [pc, #200]	; (8001060 <getinput+0x148>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b32      	ldr	r3, [pc, #200]	; (800106c <getinput+0x154>)
 8000fa2:	801a      	strh	r2, [r3, #0]
			sprintf(humd1, "%d", THumd);
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <getinput+0x154>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	463b      	mov	r3, r7
 8000fac:	492e      	ldr	r1, [pc, #184]	; (8001068 <getinput+0x150>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f008 facc 	bl	800954c <siprintf>
//			lcd_set_cursor(0, 0);
//			lcd_write_string("SET Humidity:");
//			lcd_write_string(humd1);
		}

	GetDeviceIDSht21();
 8000fb4:	f000 fdd0 	bl	8001b58 <GetDeviceIDSht21>
	GetSlaveAcknowledgment();
 8000fb8:	f000 fda4 	bl	8001b04 <GetSlaveAcknowledgment>
	GetTempratureSht21();
 8000fbc:	f000 fdfa 	bl	8001bb4 <GetTempratureSht21>
	GetHumidyShtc3();
 8000fc0:	f000 fe40 	bl	8001c44 <GetHumidyShtc3>
	temp = Read_Temprature() / 1000;
 8000fc4:	f000 feac 	bl	8001d20 <Read_Temprature>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a29      	ldr	r2, [pc, #164]	; (8001070 <getinput+0x158>)
 8000fcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd0:	1192      	asrs	r2, r2, #6
 8000fd2:	17db      	asrs	r3, r3, #31
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b26      	ldr	r3, [pc, #152]	; (8001074 <getinput+0x15c>)
 8000fda:	801a      	strh	r2, [r3, #0]
	humd = Read_Humidity() / 1000;
 8000fdc:	f000 fecc 	bl	8001d78 <Read_Humidity>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a23      	ldr	r2, [pc, #140]	; (8001070 <getinput+0x158>)
 8000fe4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe8:	1192      	asrs	r2, r2, #6
 8000fea:	17db      	asrs	r3, r3, #31
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <getinput+0x160>)
 8000ff2:	801a      	strh	r2, [r3, #0]

	sprintf(temp1, "%d", temp);
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <getinput+0x15c>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	491a      	ldr	r1, [pc, #104]	; (8001068 <getinput+0x150>)
 8001000:	4618      	mov	r0, r3
 8001002:	f008 faa3 	bl	800954c <siprintf>
	sprintf(humd1, "%d", humd);
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <getinput+0x160>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	463b      	mov	r3, r7
 800100e:	4916      	ldr	r1, [pc, #88]	; (8001068 <getinput+0x150>)
 8001010:	4618      	mov	r0, r3
 8001012:	f008 fa9b 	bl	800954c <siprintf>

	lcd_clear();
 8001016:	f000 f959 	bl	80012cc <lcd_clear>
	lcd_set_cursor(0, 0);
 800101a:	2100      	movs	r1, #0
 800101c:	2000      	movs	r0, #0
 800101e:	f000 f930 	bl	8001282 <lcd_set_cursor>
	lcd_write_string("Temperature ");
 8001022:	4816      	ldr	r0, [pc, #88]	; (800107c <getinput+0x164>)
 8001024:	f000 f918 	bl	8001258 <lcd_write_string>
	lcd_write_string(temp1);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f913 	bl	8001258 <lcd_write_string>
	lcd_set_cursor(1, 0);
 8001032:	2100      	movs	r1, #0
 8001034:	2001      	movs	r0, #1
 8001036:	f000 f924 	bl	8001282 <lcd_set_cursor>
	lcd_write_string("Humidity ");
 800103a:	4811      	ldr	r0, [pc, #68]	; (8001080 <getinput+0x168>)
 800103c:	f000 f90c 	bl	8001258 <lcd_write_string>
	lcd_write_string(humd1);
 8001040:	463b      	mov	r3, r7
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f908 	bl	8001258 <lcd_write_string>


}
 8001048:	bf00      	nop
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0800b820 	.word	0x0800b820
 8001054:	0800b830 	.word	0x0800b830
 8001058:	48000400 	.word	0x48000400
 800105c:	200001f8 	.word	0x200001f8
 8001060:	cccccccd 	.word	0xcccccccd
 8001064:	20000002 	.word	0x20000002
 8001068:	0800b83c 	.word	0x0800b83c
 800106c:	20000004 	.word	0x20000004
 8001070:	10624dd3 	.word	0x10624dd3
 8001074:	2000049c 	.word	0x2000049c
 8001078:	2000049e 	.word	0x2000049e
 800107c:	0800b840 	.word	0x0800b840
 8001080:	0800b850 	.word	0x0800b850

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108a:	f001 fa5c 	bl	8002546 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108e:	f000 f93f 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001092:	f000 fc61 	bl	8001958 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001096:	f000 f97b 	bl	8001390 <MX_ADC1_Init>
  MX_DAC1_Init();
 800109a:	f000 f9f1 	bl	8001480 <MX_DAC1_Init>
  MX_I2C2_Init();
 800109e:	f000 fa29 	bl	80014f4 <MX_I2C2_Init>
  MX_SPI2_Init();
 80010a2:	f000 faa7 	bl	80015f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 80010a6:	f000 fae3 	bl	8001670 <MX_TIM1_Init>
  MX_TIM16_Init();
 80010aa:	f000 fb91 	bl	80017d0 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80010ae:	f000 fc07 	bl	80018c0 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80010b2:	f000 fa5f 	bl	8001574 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 80010b6:	f000 f8a0 	bl	80011fa <lcd_init>
  lcd_backlight(1); // Turn on backlight
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 f910 	bl	80012e0 <lcd_backlight>
  uint16_t Data = 10;
 80010c0:	230a      	movs	r3, #10
 80010c2:	82fb      	strh	r3, [r7, #22]
  char *text = "EmbeddedThere";
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <main+0x70>)
 80010c6:	613b      	str	r3, [r7, #16]
  char int_to_str[10];
  sprintf(int_to_str, "%d", Data);
 80010c8:	8afa      	ldrh	r2, [r7, #22]
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	490a      	ldr	r1, [pc, #40]	; (80010f8 <main+0x74>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 fa3c 	bl	800954c <siprintf>

  lcd_clear();
 80010d4:	f000 f8fa 	bl	80012cc <lcd_clear>
  lcd_set_cursor(0, 0);
 80010d8:	2100      	movs	r1, #0
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f8d1 	bl	8001282 <lcd_set_cursor>
  lcd_write_string(text);
 80010e0:	6938      	ldr	r0, [r7, #16]
 80010e2:	f000 f8b9 	bl	8001258 <lcd_write_string>
  lcd_write_string(int_to_str);
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f8b5 	bl	8001258 <lcd_write_string>

  while (1){
    /* USER CODE END WHILE */
	  getinput();
 80010ee:	f7ff ff13 	bl	8000f18 <getinput>
 80010f2:	e7fc      	b.n	80010ee <main+0x6a>
 80010f4:	0800b85c 	.word	0x0800b85c
 80010f8:	0800b83c 	.word	0x0800b83c

080010fc <lcd_write_nibble>:

  }
  /* USER CODE END 3 */
}

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af02      	add	r7, sp, #8
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	b2db      	uxtb	r3, r3
 8001112:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	4313      	orrs	r3, r2
 800111a:	b2db      	uxtb	r3, r3
 800111c:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <lcd_write_nibble+0x7c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	b25a      	sxtb	r2, r3
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	b25b      	sxtb	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b25b      	sxtb	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	b2db      	uxtb	r3, r3
 800113a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR << 1, &data, 1, 100);
 800113c:	f107 020f 	add.w	r2, r7, #15
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	214e      	movs	r1, #78	; 0x4e
 8001148:	480c      	ldr	r0, [pc, #48]	; (800117c <lcd_write_nibble+0x80>)
 800114a:	f003 fb05 	bl	8004758 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f001 fa6a 	bl	8002628 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f023 0304 	bic.w	r3, r3, #4
 800115a:	b2db      	uxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR << 1, &data, 1, 100);
 800115e:	f107 020f 	add.w	r2, r7, #15
 8001162:	2364      	movs	r3, #100	; 0x64
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	214e      	movs	r1, #78	; 0x4e
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <lcd_write_nibble+0x80>)
 800116c:	f003 faf4 	bl	8004758 <HAL_I2C_Master_Transmit>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000000 	.word	0x20000000
 800117c:	200002c4 	.word	0x200002c4

08001180 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffad 	bl	80010fc <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ffa8 	bl	80010fc <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d002      	beq.n	80011b8 <lcd_send_cmd+0x38>
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d102      	bne.n	80011be <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 80011b8:	2002      	movs	r0, #2
 80011ba:	f001 fa35 	bl	8002628 <HAL_Delay>
  }
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2101      	movs	r1, #1
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff8a 	bl	80010fc <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 80011e8:	7bbb      	ldrb	r3, [r7, #14]
 80011ea:	2101      	movs	r1, #1
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff85 	bl	80010fc <lcd_write_nibble>
}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <lcd_init>:

void lcd_init() {
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80011fe:	2032      	movs	r0, #50	; 0x32
 8001200:	f001 fa12 	bl	8002628 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001204:	2100      	movs	r1, #0
 8001206:	2003      	movs	r0, #3
 8001208:	f7ff ff78 	bl	80010fc <lcd_write_nibble>
  HAL_Delay(5);
 800120c:	2005      	movs	r0, #5
 800120e:	f001 fa0b 	bl	8002628 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001212:	2100      	movs	r1, #0
 8001214:	2003      	movs	r0, #3
 8001216:	f7ff ff71 	bl	80010fc <lcd_write_nibble>
  HAL_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f001 fa04 	bl	8002628 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001220:	2100      	movs	r1, #0
 8001222:	2003      	movs	r0, #3
 8001224:	f7ff ff6a 	bl	80010fc <lcd_write_nibble>
  HAL_Delay(1);
 8001228:	2001      	movs	r0, #1
 800122a:	f001 f9fd 	bl	8002628 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 800122e:	2100      	movs	r1, #0
 8001230:	2002      	movs	r0, #2
 8001232:	f7ff ff63 	bl	80010fc <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8001236:	2028      	movs	r0, #40	; 0x28
 8001238:	f7ff ffa2 	bl	8001180 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 800123c:	200c      	movs	r0, #12
 800123e:	f7ff ff9f 	bl	8001180 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 8001242:	2006      	movs	r0, #6
 8001244:	f7ff ff9c 	bl	8001180 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8001248:	2001      	movs	r0, #1
 800124a:	f7ff ff99 	bl	8001180 <lcd_send_cmd>
  HAL_Delay(2);
 800124e:	2002      	movs	r0, #2
 8001250:	f001 f9ea 	bl	8002628 <HAL_Delay>
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <lcd_write_string>:

void lcd_write_string(char *str) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  while (*str) {
 8001260:	e006      	b.n	8001270 <lcd_write_string+0x18>
    lcd_send_data(*str++);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ffab 	bl	80011c6 <lcd_send_data>
  while (*str) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f4      	bne.n	8001262 <lcd_write_string+0xa>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	460a      	mov	r2, r1
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	4613      	mov	r3, r2
 8001290:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <lcd_set_cursor+0x1c>
 8001298:	2b01      	cmp	r3, #1
 800129a:	d003      	beq.n	80012a4 <lcd_set_cursor+0x22>
 800129c:	e005      	b.n	80012aa <lcd_set_cursor+0x28>
        case 0:
            address = 0x00;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
            break;
 80012a2:	e004      	b.n	80012ae <lcd_set_cursor+0x2c>
        case 1:
            address = 0x40;
 80012a4:	2340      	movs	r3, #64	; 0x40
 80012a6:	73fb      	strb	r3, [r7, #15]
            break;
 80012a8:	e001      	b.n	80012ae <lcd_set_cursor+0x2c>
        default:
            address = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	4413      	add	r3, r2
 80012b4:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff5e 	bl	8001180 <lcd_send_cmd>
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lcd_clear>:

void lcd_clear(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff ff55 	bl	8001180 <lcd_send_cmd>
    HAL_Delay(2);
 80012d6:	2002      	movs	r0, #2
 80012d8:	f001 f9a6 	bl	8002628 <HAL_Delay>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <lcd_backlight>:

void lcd_backlight(uint8_t state) {
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if (state) {
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <lcd_backlight+0x18>
    backlight_state = 1;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <lcd_backlight+0x2c>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = 0;
  }
}
 80012f6:	e002      	b.n	80012fe <lcd_backlight+0x1e>
    backlight_state = 0;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <lcd_backlight+0x2c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b094      	sub	sp, #80	; 0x50
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	2238      	movs	r2, #56	; 0x38
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f008 f977 	bl	8009612 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001332:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001336:	f004 f811 	bl	800535c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800133a:	2302      	movs	r3, #2
 800133c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001344:	2340      	movs	r3, #64	; 0x40
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	4618      	mov	r0, r3
 8001352:	f004 f8b7 	bl	80054c4 <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800135c:	f000 fbcc 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001364:	2301      	movs	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fbbb 	bl	8005af4 <HAL_RCC_ClockConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001384:	f000 fbb8 	bl	8001af8 <Error_Handler>
  }
}
 8001388:	bf00      	nop
 800138a:	3750      	adds	r7, #80	; 0x50
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2220      	movs	r2, #32
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f008 f932 	bl	8009612 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80013ca:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013d8:	2204      	movs	r2, #4
 80013da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013dc:	4b26      	ldr	r3, [pc, #152]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80013e8:	4b23      	ldr	r3, [pc, #140]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_ADC1_Init+0xe8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_ADC1_Init+0xe8>)
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_ADC1_Init+0xe8>)
 800140c:	2200      	movs	r2, #0
 800140e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <MX_ADC1_Init+0xe8>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001418:	4817      	ldr	r0, [pc, #92]	; (8001478 <MX_ADC1_Init+0xe8>)
 800141a:	f001 fb57 	bl	8002acc <HAL_ADC_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001424:	f000 fb68 	bl	8001af8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4811      	ldr	r0, [pc, #68]	; (8001478 <MX_ADC1_Init+0xe8>)
 8001434:	f002 faee 	bl	8003a14 <HAL_ADCEx_MultiModeConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800143e:	f000 fb5b 	bl	8001af8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_ADC1_Init+0xec>)
 8001444:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001446:	2306      	movs	r3, #6
 8001448:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800144e:	237f      	movs	r3, #127	; 0x7f
 8001450:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001452:	2304      	movs	r3, #4
 8001454:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <MX_ADC1_Init+0xe8>)
 8001460:	f001 fe60 	bl	8003124 <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800146a:	f000 fb45 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	; 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001f8 	.word	0x200001f8
 800147c:	04300002 	.word	0x04300002

08001480 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001486:	463b      	mov	r3, r7
 8001488:	2230      	movs	r2, #48	; 0x30
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f008 f8c0 	bl	8009612 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <MX_DAC1_Init+0x6c>)
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <MX_DAC1_Init+0x70>)
 8001496:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001498:	4814      	ldr	r0, [pc, #80]	; (80014ec <MX_DAC1_Init+0x6c>)
 800149a:	f002 fc6e 	bl	8003d7a <HAL_DAC_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014a4:	f000 fb28 	bl	8001af8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80014a8:	2302      	movs	r3, #2
 80014aa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_DAC1_Init+0x6c>)
 80014d4:	f002 fc74 	bl	8003dc0 <HAL_DAC_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80014de:	f000 fb0b 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	3730      	adds	r7, #48	; 0x30
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000264 	.word	0x20000264
 80014f0:	50000800 	.word	0x50000800

080014f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_I2C2_Init+0x74>)
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <MX_I2C2_Init+0x78>)
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_I2C2_Init+0x74>)
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <MX_I2C2_Init+0x7c>)
 8001502:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_I2C2_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_I2C2_Init+0x74>)
 800150c:	2201      	movs	r2, #1
 800150e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_I2C2_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_I2C2_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C2_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C2_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C2_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <MX_I2C2_Init+0x74>)
 8001530:	f003 f883 	bl	800463a <HAL_I2C_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800153a:	f000 fadd 	bl	8001af8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153e:	2100      	movs	r1, #0
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <MX_I2C2_Init+0x74>)
 8001542:	f003 fe73 	bl	800522c <HAL_I2CEx_ConfigAnalogFilter>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800154c:	f000 fad4 	bl	8001af8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001550:	2100      	movs	r1, #0
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_I2C2_Init+0x74>)
 8001554:	f003 feb5 	bl	80052c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800155e:	f000 facb 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000278 	.word	0x20000278
 800156c:	40005800 	.word	0x40005800
 8001570:	00303d5b 	.word	0x00303d5b

08001574 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_I2C3_Init+0x74>)
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <MX_I2C3_Init+0x78>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_I2C3_Init+0x74>)
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_I2C3_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_I2C3_Init+0x74>)
 800158c:	2201      	movs	r2, #1
 800158e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_I2C3_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_I2C3_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_I2C3_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_I2C3_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_I2C3_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015ae:	480e      	ldr	r0, [pc, #56]	; (80015e8 <MX_I2C3_Init+0x74>)
 80015b0:	f003 f843 	bl	800463a <HAL_I2C_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015ba:	f000 fa9d 	bl	8001af8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015be:	2100      	movs	r1, #0
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <MX_I2C3_Init+0x74>)
 80015c2:	f003 fe33 	bl	800522c <HAL_I2CEx_ConfigAnalogFilter>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015cc:	f000 fa94 	bl	8001af8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_I2C3_Init+0x74>)
 80015d4:	f003 fe75 	bl	80052c2 <HAL_I2CEx_ConfigDigitalFilter>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015de:	f000 fa8b 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200002c4 	.word	0x200002c4
 80015ec:	40007800 	.word	0x40007800
 80015f0:	00303d5b 	.word	0x00303d5b

080015f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_SPI2_Init+0x74>)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <MX_SPI2_Init+0x78>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_SPI2_Init+0x74>)
 8001600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001604:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_SPI2_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_SPI2_Init+0x74>)
 800160e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001612:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_SPI2_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_SPI2_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_SPI2_Init+0x74>)
 8001622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001626:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_SPI2_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_SPI2_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_SPI2_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_SPI2_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_SPI2_Init+0x74>)
 8001642:	2207      	movs	r2, #7
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_SPI2_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_SPI2_Init+0x74>)
 800164e:	2208      	movs	r2, #8
 8001650:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_SPI2_Init+0x74>)
 8001654:	f004 fe5a 	bl	800630c <HAL_SPI_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800165e:	f000 fa4b 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000310 	.word	0x20000310
 800166c:	40003800 	.word	0x40003800

08001670 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b09c      	sub	sp, #112	; 0x70
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001690:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2234      	movs	r2, #52	; 0x34
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f007 ffb1 	bl	8009612 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016b0:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <MX_TIM1_Init+0x158>)
 80016b2:	4a46      	ldr	r2, [pc, #280]	; (80017cc <MX_TIM1_Init+0x15c>)
 80016b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016b6:	4b44      	ldr	r3, [pc, #272]	; (80017c8 <MX_TIM1_Init+0x158>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <MX_TIM1_Init+0x158>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016c2:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <MX_TIM1_Init+0x158>)
 80016c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <MX_TIM1_Init+0x158>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <MX_TIM1_Init+0x158>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d6:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <MX_TIM1_Init+0x158>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016dc:	483a      	ldr	r0, [pc, #232]	; (80017c8 <MX_TIM1_Init+0x158>)
 80016de:	f004 fec0 	bl	8006462 <HAL_TIM_Base_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016e8:	f000 fa06 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016f2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016f6:	4619      	mov	r1, r3
 80016f8:	4833      	ldr	r0, [pc, #204]	; (80017c8 <MX_TIM1_Init+0x158>)
 80016fa:	f005 f959 	bl	80069b0 <HAL_TIM_ConfigClockSource>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001704:	f000 f9f8 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001708:	482f      	ldr	r0, [pc, #188]	; (80017c8 <MX_TIM1_Init+0x158>)
 800170a:	f004 ff62 	bl	80065d2 <HAL_TIM_PWM_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001714:	f000 f9f0 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001724:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001728:	4619      	mov	r1, r3
 800172a:	4827      	ldr	r0, [pc, #156]	; (80017c8 <MX_TIM1_Init+0x158>)
 800172c:	f005 fe5c 	bl	80073e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001736:	f000 f9df 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173a:	2360      	movs	r3, #96	; 0x60
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001742:	2300      	movs	r3, #0
 8001744:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001746:	2300      	movs	r3, #0
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001756:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800175a:	2204      	movs	r2, #4
 800175c:	4619      	mov	r1, r3
 800175e:	481a      	ldr	r0, [pc, #104]	; (80017c8 <MX_TIM1_Init+0x158>)
 8001760:	f005 f812 	bl	8006788 <HAL_TIM_PWM_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800176a:	f000 f9c5 	bl	8001af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001794:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800179e:	2300      	movs	r3, #0
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <MX_TIM1_Init+0x158>)
 80017ac:	f005 fe9e 	bl	80074ec <HAL_TIMEx_ConfigBreakDeadTime>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80017b6:	f000 f99f 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017ba:	4803      	ldr	r0, [pc, #12]	; (80017c8 <MX_TIM1_Init+0x158>)
 80017bc:	f000 fce8 	bl	8002190 <HAL_TIM_MspPostInit>

}
 80017c0:	bf00      	nop
 80017c2:	3770      	adds	r7, #112	; 0x70
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000374 	.word	0x20000374
 80017cc:	40012c00 	.word	0x40012c00

080017d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	; 0x50
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	2234      	movs	r2, #52	; 0x34
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f007 ff0e 	bl	8009612 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <MX_TIM16_Init+0xe8>)
 80017f8:	4a30      	ldr	r2, [pc, #192]	; (80018bc <MX_TIM16_Init+0xec>)
 80017fa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 37000;
 80017fc:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <MX_TIM16_Init+0xe8>)
 80017fe:	f249 0288 	movw	r2, #37000	; 0x9088
 8001802:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <MX_TIM16_Init+0xe8>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <MX_TIM16_Init+0xe8>)
 800180c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001810:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <MX_TIM16_Init+0xe8>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <MX_TIM16_Init+0xe8>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <MX_TIM16_Init+0xe8>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001824:	4824      	ldr	r0, [pc, #144]	; (80018b8 <MX_TIM16_Init+0xe8>)
 8001826:	f004 fe1c 	bl	8006462 <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8001830:	f000 f962 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001834:	4820      	ldr	r0, [pc, #128]	; (80018b8 <MX_TIM16_Init+0xe8>)
 8001836:	f004 fe6b 	bl	8006510 <HAL_TIM_OC_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8001840:	f000 f95a 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001844:	2330      	movs	r3, #48	; 0x30
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184c:	2300      	movs	r3, #0
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001850:	2300      	movs	r3, #0
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001860:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	4813      	ldr	r0, [pc, #76]	; (80018b8 <MX_TIM16_Init+0xe8>)
 800186a:	f004 ff13 	bl	8006694 <HAL_TIM_OC_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001874:	f000 f940 	bl	8001af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800188c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001890:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800189a:	463b      	mov	r3, r7
 800189c:	4619      	mov	r1, r3
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <MX_TIM16_Init+0xe8>)
 80018a0:	f005 fe24 	bl	80074ec <HAL_TIMEx_ConfigBreakDeadTime>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80018aa:	f000 f925 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	3750      	adds	r7, #80	; 0x50
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200003c0 	.word	0x200003c0
 80018bc:	40014400 	.word	0x40014400

080018c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018c6:	4a23      	ldr	r2, [pc, #140]	; (8001954 <MX_USART1_UART_Init+0x94>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_USART1_UART_Init+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_USART1_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001908:	4811      	ldr	r0, [pc, #68]	; (8001950 <MX_USART1_UART_Init+0x90>)
 800190a:	f005 fe8f 	bl	800762c <HAL_UART_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001914:	f000 f8f0 	bl	8001af8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001918:	2100      	movs	r1, #0
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_USART1_UART_Init+0x90>)
 800191c:	f007 f823 	bl	8008966 <HAL_UARTEx_SetTxFifoThreshold>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001926:	f000 f8e7 	bl	8001af8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192a:	2100      	movs	r1, #0
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <MX_USART1_UART_Init+0x90>)
 800192e:	f007 f858 	bl	80089e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001938:	f000 f8de 	bl	8001af8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_USART1_UART_Init+0x90>)
 800193e:	f006 ffd9 	bl	80088f4 <HAL_UARTEx_DisableFifoMode>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001948:	f000 f8d6 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2000040c 	.word	0x2000040c
 8001954:	40013800 	.word	0x40013800

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800196e:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a5c      	ldr	r2, [pc, #368]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a56      	ldr	r2, [pc, #344]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a50      	ldr	r2, [pc, #320]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b6:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a4a      	ldr	r2, [pc, #296]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b48      	ldr	r3, [pc, #288]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ce:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	4a44      	ldr	r2, [pc, #272]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019da:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <MX_GPIO_Init+0x18c>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 80019ec:	483e      	ldr	r0, [pc, #248]	; (8001ae8 <MX_GPIO_Init+0x190>)
 80019ee:	f002 fde9 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2136      	movs	r1, #54	; 0x36
 80019f6:	483d      	ldr	r0, [pc, #244]	; (8001aec <MX_GPIO_Init+0x194>)
 80019f8:	f002 fde4 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001a02:	483b      	ldr	r0, [pc, #236]	; (8001af0 <MX_GPIO_Init+0x198>)
 8001a04:	f002 fdde 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001a0e:	4839      	ldr	r0, [pc, #228]	; (8001af4 <MX_GPIO_Init+0x19c>)
 8001a10:	f002 fdd8 	bl	80045c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001a14:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8001a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	482e      	ldr	r0, [pc, #184]	; (8001ae8 <MX_GPIO_Init+0x190>)
 8001a2e:	f002 fc2f 	bl	8004290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a32:	230c      	movs	r3, #12
 8001a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4828      	ldr	r0, [pc, #160]	; (8001ae8 <MX_GPIO_Init+0x190>)
 8001a48:	f002 fc22 	bl	8004290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8001a4c:	2336      	movs	r3, #54	; 0x36
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4822      	ldr	r0, [pc, #136]	; (8001aec <MX_GPIO_Init+0x194>)
 8001a64:	f002 fc14 	bl	8004290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a68:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481b      	ldr	r0, [pc, #108]	; (8001af0 <MX_GPIO_Init+0x198>)
 8001a82:	f002 fc05 	bl	8004290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001a86:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4815      	ldr	r0, [pc, #84]	; (8001af4 <MX_GPIO_Init+0x19c>)
 8001aa0:	f002 fbf6 	bl	8004290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa4:	23c0      	movs	r3, #192	; 0xc0
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480d      	ldr	r0, [pc, #52]	; (8001aec <MX_GPIO_Init+0x194>)
 8001ab8:	f002 fbea 	bl	8004290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2008      	movs	r0, #8
 8001ac2:	f002 f926 	bl	8003d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ac6:	2008      	movs	r0, #8
 8001ac8:	f002 f93d 	bl	8003d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2009      	movs	r0, #9
 8001ad2:	f002 f91e 	bl	8003d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ad6:	2009      	movs	r0, #9
 8001ad8:	f002 f935 	bl	8003d46 <HAL_NVIC_EnableIRQ>

}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	48000800 	.word	0x48000800
 8001aec:	48000400 	.word	0x48000400
 8001af0:	48001000 	.word	0x48001000
 8001af4:	48000c00 	.word	0x48000c00

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <Error_Handler+0x8>
	...

08001b04 <GetSlaveAcknowledgment>:
 * @brief To get acknowledment from slave(Sensor)
 * @param None
 * @return None
 ******************************************************************************
 */
void GetSlaveAcknowledgment(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
	char buffer10[32];
		if (HAL_OK == Device_check())
 8001b0a:	f000 f961 	bl	8001dd0 <Device_check>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10b      	bne.n	8001b2c <GetSlaveAcknowledgment+0x28>
  {
    	  sprintf(buffer10,"\n\rSHTC3 Device Ready");
 8001b14:	463b      	mov	r3, r7
 8001b16:	490d      	ldr	r1, [pc, #52]	; (8001b4c <GetSlaveAcknowledgment+0x48>)
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f007 fd17 	bl	800954c <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer10, 20, 100);
 8001b1e:	4639      	mov	r1, r7
 8001b20:	2364      	movs	r3, #100	; 0x64
 8001b22:	2214      	movs	r2, #20
 8001b24:	480a      	ldr	r0, [pc, #40]	; (8001b50 <GetSlaveAcknowledgment+0x4c>)
 8001b26:	f005 fdd1 	bl	80076cc <HAL_UART_Transmit>
    }
    else{
    	  sprintf(buffer10,"\n\rSHTC3 Device Not Ready");
    	  HAL_UART_Transmit(&huart1,(uint8_t *) buffer10, 20, 100);
    }
}
 8001b2a:	e00a      	b.n	8001b42 <GetSlaveAcknowledgment+0x3e>
    	  sprintf(buffer10,"\n\rSHTC3 Device Not Ready");
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4909      	ldr	r1, [pc, #36]	; (8001b54 <GetSlaveAcknowledgment+0x50>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f007 fd0b 	bl	800954c <siprintf>
    	  HAL_UART_Transmit(&huart1,(uint8_t *) buffer10, 20, 100);
 8001b36:	4639      	mov	r1, r7
 8001b38:	2364      	movs	r3, #100	; 0x64
 8001b3a:	2214      	movs	r2, #20
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <GetSlaveAcknowledgment+0x4c>)
 8001b3e:	f005 fdc5 	bl	80076cc <HAL_UART_Transmit>
}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	0800b86c 	.word	0x0800b86c
 8001b50:	2000040c 	.word	0x2000040c
 8001b54:	0800b884 	.word	0x0800b884

08001b58 <GetDeviceIDSht21>:
 * @brief To get device(Sensor)ID
 * @param None
 * @return None
 ******************************************************************************
 */
void GetDeviceIDSht21(){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
char buffer8[32]={0};
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	619a      	str	r2, [r3, #24]
	uint16_t buffer7=0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	84fb      	strh	r3, [r7, #38]	; 0x26
buffer7 = Read_Device_Id();
 8001b7a:	f000 f8a5 	bl	8001cc8 <Read_Device_Id>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	84fb      	strh	r3, [r7, #38]	; 0x26
	  sprintf(buffer8,"\n\rID-%x",buffer7);
 8001b82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4909      	ldr	r1, [pc, #36]	; (8001bac <GetDeviceIDSht21+0x54>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f007 fcdf 	bl	800954c <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)buffer8,11,100);
 8001b8e:	1d39      	adds	r1, r7, #4
 8001b90:	2364      	movs	r3, #100	; 0x64
 8001b92:	220b      	movs	r2, #11
 8001b94:	4806      	ldr	r0, [pc, #24]	; (8001bb0 <GetDeviceIDSht21+0x58>)
 8001b96:	f005 fd99 	bl	80076cc <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b9e:	f000 fd43 	bl	8002628 <HAL_Delay>
}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	; 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	0800b8a0 	.word	0x0800b8a0
 8001bb0:	2000040c 	.word	0x2000040c

08001bb4 <GetTempratureSht21>:
 * @brief To get Temperature value
 * @param None
 * @return None
 ******************************************************************************
 */
void GetTempratureSht21(){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
char buffer8[27]={0};
 8001bba:	2300      	movs	r3, #0
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
 8001bcc:	f8c3 2013 	str.w	r2, [r3, #19]
	uint16_t buffer7 = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	83fb      	strh	r3, [r7, #30]
buffer7 = Read_Temprature();
 8001bd4:	f000 f8a4 	bl	8001d20 <Read_Temprature>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	83fb      	strh	r3, [r7, #30]
	buffer7 = 175 * (float)buffer7 / 65536.0f - 45.0f;
 8001bdc:	8bfb      	ldrh	r3, [r7, #30]
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001c30 <GetTempratureSht21+0x7c>
 8001bea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bee:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001c34 <GetTempratureSht21+0x80>
 8001bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c38 <GetTempratureSht21+0x84>
 8001bfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c02:	ee17 3a90 	vmov	r3, s15
 8001c06:	83fb      	strh	r3, [r7, #30]
	  sprintf(buffer8,"\n\rTemp->%d",buffer7);
 8001c08:	8bfa      	ldrh	r2, [r7, #30]
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	490b      	ldr	r1, [pc, #44]	; (8001c3c <GetTempratureSht21+0x88>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f007 fc9c 	bl	800954c <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)buffer8,11,100);
 8001c14:	4639      	mov	r1, r7
 8001c16:	2364      	movs	r3, #100	; 0x64
 8001c18:	220b      	movs	r2, #11
 8001c1a:	4809      	ldr	r0, [pc, #36]	; (8001c40 <GetTempratureSht21+0x8c>)
 8001c1c:	f005 fd56 	bl	80076cc <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001c20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c24:	f000 fd00 	bl	8002628 <HAL_Delay>
}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	432f0000 	.word	0x432f0000
 8001c34:	47800000 	.word	0x47800000
 8001c38:	42340000 	.word	0x42340000
 8001c3c:	0800b8a8 	.word	0x0800b8a8
 8001c40:	2000040c 	.word	0x2000040c

08001c44 <GetHumidyShtc3>:
 * @brief To get Relative Humidity Value
 * @param None
 * @return None
 ******************************************************************************
 */
void GetHumidyShtc3(){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
char buffer8[27]={0};
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
 8001c5c:	f8c3 2013 	str.w	r2, [r3, #19]
uint16_t buffer17 = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	83fb      	strh	r3, [r7, #30]
buffer17 = Read_Humidity();
 8001c64:	f000 f888 	bl	8001d78 <Read_Humidity>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	83fb      	strh	r3, [r7, #30]
	buffer17 = 100 * (float)buffer17 / 65536.0f;
 8001c6c:	8bfb      	ldrh	r3, [r7, #30]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c76:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001cb8 <GetHumidyShtc3+0x74>
 8001c7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c7e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001cbc <GetHumidyShtc3+0x78>
 8001c82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8a:	ee17 3a90 	vmov	r3, s15
 8001c8e:	83fb      	strh	r3, [r7, #30]
	sprintf(buffer8,"\n\rRH-%d %%",buffer17);
 8001c90:	8bfa      	ldrh	r2, [r7, #30]
 8001c92:	463b      	mov	r3, r7
 8001c94:	490a      	ldr	r1, [pc, #40]	; (8001cc0 <GetHumidyShtc3+0x7c>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f007 fc58 	bl	800954c <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)buffer8,11,100);
 8001c9c:	4639      	mov	r1, r7
 8001c9e:	2364      	movs	r3, #100	; 0x64
 8001ca0:	220b      	movs	r2, #11
 8001ca2:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <GetHumidyShtc3+0x80>)
 8001ca4:	f005 fd12 	bl	80076cc <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cac:	f000 fcbc 	bl	8002628 <HAL_Delay>
}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	42c80000 	.word	0x42c80000
 8001cbc:	47800000 	.word	0x47800000
 8001cc0:	0800b8b4 	.word	0x0800b8b4
 8001cc4:	2000040c 	.word	0x2000040c

08001cc8 <Read_Device_Id>:


/*API for sensing temperature*/
uint16_t Read_Device_Id(void){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af02      	add	r7, sp, #8
		uint8_t command1[2];
			uint8_t Rx_buf[2];
    uint16_t data=0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	80fb      	strh	r3, [r7, #6]
	command1[0]=CMD19;
 8001cd2:	23ef      	movs	r3, #239	; 0xef
 8001cd4:	713b      	strb	r3, [r7, #4]
	command1[1]=CMD20;
 8001cd6:	23c8      	movs	r3, #200	; 0xc8
 8001cd8:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit(&hi2c2,SLAVEADDERESS,&command1[0],2,100);
 8001cda:	1d3a      	adds	r2, r7, #4
 8001cdc:	2364      	movs	r3, #100	; 0x64
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	21e0      	movs	r1, #224	; 0xe0
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <Read_Device_Id+0x54>)
 8001ce6:	f002 fd37 	bl	8004758 <HAL_I2C_Master_Transmit>
HAL_Delay(100);
 8001cea:	2064      	movs	r0, #100	; 0x64
 8001cec:	f000 fc9c 	bl	8002628 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2,SLAVEADDERESS,Rx_buf,2,100);                 //HAL API fro i2c master Rx
 8001cf0:	463a      	mov	r2, r7
 8001cf2:	2364      	movs	r3, #100	; 0x64
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	21e0      	movs	r1, #224	; 0xe0
 8001cfa:	4808      	ldr	r0, [pc, #32]	; (8001d1c <Read_Device_Id+0x54>)
 8001cfc:	f002 fe20 	bl	8004940 <HAL_I2C_Master_Receive>
		data = ((Rx_buf[0]<<8)|Rx_buf[1]);
 8001d00:	783b      	ldrb	r3, [r7, #0]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	b21a      	sxth	r2, r3
 8001d06:	787b      	ldrb	r3, [r7, #1]
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	80fb      	strh	r3, [r7, #6]
		return data;
 8001d10:	88fb      	ldrh	r3, [r7, #6]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000278 	.word	0x20000278

08001d20 <Read_Temprature>:


/*Read Temperature data*/
uint16_t Read_Temprature(){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af02      	add	r7, sp, #8
		uint8_t command2[2];
			uint8_t Rx_buf1[2];
    uint16_t data=0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	80fb      	strh	r3, [r7, #6]
	command2[0]=CMD21;
 8001d2a:	237c      	movs	r3, #124	; 0x7c
 8001d2c:	713b      	strb	r3, [r7, #4]
	command2[1]=CMD22;
 8001d2e:	23a2      	movs	r3, #162	; 0xa2
 8001d30:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit(&hi2c2,SLAVEADDERESS,&command2[0],2,100);
 8001d32:	1d3a      	adds	r2, r7, #4
 8001d34:	2364      	movs	r3, #100	; 0x64
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2302      	movs	r3, #2
 8001d3a:	21e0      	movs	r1, #224	; 0xe0
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <Read_Temprature+0x54>)
 8001d3e:	f002 fd0b 	bl	8004758 <HAL_I2C_Master_Transmit>
HAL_Delay(100);
 8001d42:	2064      	movs	r0, #100	; 0x64
 8001d44:	f000 fc70 	bl	8002628 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2,SLAVEADDERESS,Rx_buf1,2,100);                 //HAL API fro i2c master Rx
 8001d48:	463a      	mov	r2, r7
 8001d4a:	2364      	movs	r3, #100	; 0x64
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2302      	movs	r3, #2
 8001d50:	21e0      	movs	r1, #224	; 0xe0
 8001d52:	4808      	ldr	r0, [pc, #32]	; (8001d74 <Read_Temprature+0x54>)
 8001d54:	f002 fdf4 	bl	8004940 <HAL_I2C_Master_Receive>
		data = ((Rx_buf1[0]<<8)|Rx_buf1[1]);
 8001d58:	783b      	ldrb	r3, [r7, #0]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	787b      	ldrb	r3, [r7, #1]
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	80fb      	strh	r3, [r7, #6]
		return data;
 8001d68:	88fb      	ldrh	r3, [r7, #6]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000278 	.word	0x20000278

08001d78 <Read_Humidity>:


/*Read Humidity Data*/
uint16_t Read_Humidity(){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af02      	add	r7, sp, #8
uint8_t command3[2];
			uint8_t Rx_buf2[2];
    uint16_t data=0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	80fb      	strh	r3, [r7, #6]
	command3[0]=CMD23;
 8001d82:	235c      	movs	r3, #92	; 0x5c
 8001d84:	713b      	strb	r3, [r7, #4]
	command3[1]=CMD24;
 8001d86:	2324      	movs	r3, #36	; 0x24
 8001d88:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit(&hi2c2,SLAVEADDERESS,&command3[0],2,100);
 8001d8a:	1d3a      	adds	r2, r7, #4
 8001d8c:	2364      	movs	r3, #100	; 0x64
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2302      	movs	r3, #2
 8001d92:	21e0      	movs	r1, #224	; 0xe0
 8001d94:	480d      	ldr	r0, [pc, #52]	; (8001dcc <Read_Humidity+0x54>)
 8001d96:	f002 fcdf 	bl	8004758 <HAL_I2C_Master_Transmit>
HAL_Delay(100);
 8001d9a:	2064      	movs	r0, #100	; 0x64
 8001d9c:	f000 fc44 	bl	8002628 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2,SLAVEADDERESS,Rx_buf2,2,100);                 //HAL API fro i2c master Rx
 8001da0:	463a      	mov	r2, r7
 8001da2:	2364      	movs	r3, #100	; 0x64
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2302      	movs	r3, #2
 8001da8:	21e0      	movs	r1, #224	; 0xe0
 8001daa:	4808      	ldr	r0, [pc, #32]	; (8001dcc <Read_Humidity+0x54>)
 8001dac:	f002 fdc8 	bl	8004940 <HAL_I2C_Master_Receive>
		data = ((Rx_buf2[0]<<8)|Rx_buf2[1]);
 8001db0:	783b      	ldrb	r3, [r7, #0]
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	b21a      	sxth	r2, r3
 8001db6:	787b      	ldrb	r3, [r7, #1]
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	80fb      	strh	r3, [r7, #6]
		return data;
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000278 	.word	0x20000278

08001dd0 <Device_check>:

/*Check for I2C Device*/
uint8_t Device_check(void){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
	uint8_t DeviceAddress1=SLAVEADDERESS;
 8001dd6:	23e0      	movs	r3, #224	; 0xe0
 8001dd8:	71fb      	strb	r3, [r7, #7]
    if (HAL_OK == HAL_I2C_IsDeviceReady(&hi2c2, DeviceAddress1, 1, 100))
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	b299      	uxth	r1, r3
 8001dde:	2364      	movs	r3, #100	; 0x64
 8001de0:	2201      	movs	r2, #1
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <Device_check+0x2c>)
 8001de4:	f002 fea2 	bl	8004b2c <HAL_I2C_IsDeviceReady>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <Device_check+0x22>
    {
    	  return 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <Device_check+0x24>
    }
    else{
	      return 1;
 8001df2:	2301      	movs	r3, #1
        }
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000278 	.word	0x20000278

08001e00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_MspInit+0x44>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_MspInit+0x44>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6613      	str	r3, [r2, #96]	; 0x60
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_MspInit+0x44>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x44>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_MspInit+0x44>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_MspInit+0x44>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e36:	f003 fb35 	bl	80054a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b09a      	sub	sp, #104	; 0x68
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	2244      	movs	r2, #68	; 0x44
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f007 fbd2 	bl	8009612 <memset>
  if(hadc->Instance==ADC1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e76:	d134      	bne.n	8001ee2 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e7c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001e7e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e82:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f004 f84f 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001e94:	f7ff fe30 	bl	8001af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_ADC_MspInit+0xa4>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	4a13      	ldr	r2, [pc, #76]	; (8001eec <HAL_ADC_MspInit+0xa4>)
 8001e9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_ADC_MspInit+0xa4>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_ADC_MspInit+0xa4>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <HAL_ADC_MspInit+0xa4>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_ADC_MspInit+0xa4>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ede:	f002 f9d7 	bl	8004290 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3768      	adds	r7, #104	; 0x68
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_DAC_MspInit+0x74>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d124      	bne.n	8001f5c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_DAC_MspInit+0x78>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <HAL_DAC_MspInit+0x78>)
 8001f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_DAC_MspInit+0x78>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_DAC_MspInit+0x78>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <HAL_DAC_MspInit+0x78>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <HAL_DAC_MspInit+0x78>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f42:	2310      	movs	r3, #16
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f46:	2303      	movs	r3, #3
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f002 f99a 	bl	8004290 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	50000800 	.word	0x50000800
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b09c      	sub	sp, #112	; 0x70
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f84:	f107 0318 	add.w	r3, r7, #24
 8001f88:	2244      	movs	r2, #68	; 0x44
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f007 fb40 	bl	8009612 <memset>
  if(hi2c->Instance==I2C2)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a3e      	ldr	r2, [pc, #248]	; (8002090 <HAL_I2C_MspInit+0x124>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d138      	bne.n	800200e <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa4:	f107 0318 	add.w	r3, r7, #24
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 ffbf 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001fb4:	f7ff fda0 	bl	8001af8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4b36      	ldr	r3, [pc, #216]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	4a35      	ldr	r2, [pc, #212]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc4:	4b33      	ldr	r3, [pc, #204]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8001fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd6:	2312      	movs	r3, #18
 8001fd8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff0:	f002 f94e 	bl	8004290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8001ffa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800200c:	e03c      	b.n	8002088 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a21      	ldr	r2, [pc, #132]	; (8002098 <HAL_I2C_MspInit+0x12c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d137      	bne.n	8002088 <HAL_I2C_MspInit+0x11c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800201c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800201e:	2300      	movs	r3, #0
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4618      	mov	r0, r3
 8002028:	f003 ff80 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8002032:	f7ff fd61 	bl	8001af8 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_I2C_MspInit+0x128>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800204e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002052:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002054:	2312      	movs	r3, #18
 8002056:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002060:	2308      	movs	r3, #8
 8002062:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002064:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002068:	4619      	mov	r1, r3
 800206a:	480c      	ldr	r0, [pc, #48]	; (800209c <HAL_I2C_MspInit+0x130>)
 800206c:	f002 f910 	bl	8004290 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_I2C_MspInit+0x128>)
 8002076:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800207a:	6593      	str	r3, [r2, #88]	; 0x58
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_I2C_MspInit+0x128>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
}
 8002088:	bf00      	nop
 800208a:	3770      	adds	r7, #112	; 0x70
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40005800 	.word	0x40005800
 8002094:	40021000 	.word	0x40021000
 8002098:	40007800 	.word	0x40007800
 800209c:	48000800 	.word	0x48000800

080020a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_SPI_MspInit+0x7c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d128      	bne.n	8002114 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <HAL_SPI_MspInit+0x80>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	4a16      	ldr	r2, [pc, #88]	; (8002120 <HAL_SPI_MspInit+0x80>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020cc:	6593      	str	r3, [r2, #88]	; 0x58
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_SPI_MspInit+0x80>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_SPI_MspInit+0x80>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_SPI_MspInit+0x80>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_SPI_MspInit+0x80>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002104:	2305      	movs	r3, #5
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <HAL_SPI_MspInit+0x84>)
 8002110:	f002 f8be 	bl	8004290 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002114:	bf00      	nop
 8002116:	3728      	adds	r7, #40	; 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40003800 	.word	0x40003800
 8002120:	40021000 	.word	0x40021000
 8002124:	48000400 	.word	0x48000400

08002128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a13      	ldr	r2, [pc, #76]	; (8002184 <HAL_TIM_Base_MspInit+0x5c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d10c      	bne.n	8002154 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_TIM_Base_MspInit+0x60>)
 800213c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <HAL_TIM_Base_MspInit+0x60>)
 8002140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002144:	6613      	str	r3, [r2, #96]	; 0x60
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_TIM_Base_MspInit+0x60>)
 8002148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002152:	e010      	b.n	8002176 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0c      	ldr	r2, [pc, #48]	; (800218c <HAL_TIM_Base_MspInit+0x64>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10b      	bne.n	8002176 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_TIM_Base_MspInit+0x60>)
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_TIM_Base_MspInit+0x60>)
 8002164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002168:	6613      	str	r3, [r2, #96]	; 0x60
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_TIM_Base_MspInit+0x60>)
 800216c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40012c00 	.word	0x40012c00
 8002188:	40021000 	.word	0x40021000
 800218c:	40014400 	.word	0x40014400

08002190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_TIM_MspPostInit+0x64>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d11c      	bne.n	80021ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_TIM_MspPostInit+0x68>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_TIM_MspPostInit+0x68>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_TIM_MspPostInit+0x68>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80021ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80021dc:	2302      	movs	r3, #2
 80021de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	4619      	mov	r1, r3
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <HAL_TIM_MspPostInit+0x6c>)
 80021e8:	f002 f852 	bl	8004290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021ec:	bf00      	nop
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40012c00 	.word	0x40012c00
 80021f8:	40021000 	.word	0x40021000
 80021fc:	48001000 	.word	0x48001000

08002200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b09a      	sub	sp, #104	; 0x68
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002218:	f107 0310 	add.w	r3, r7, #16
 800221c:	2244      	movs	r2, #68	; 0x44
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f007 f9f6 	bl	8009612 <memset>
  if(huart->Instance==USART1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a22      	ldr	r2, [pc, #136]	; (80022b4 <HAL_UART_MspInit+0xb4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d13d      	bne.n	80022ac <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002230:	2301      	movs	r3, #1
 8002232:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fe75 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002248:	f7ff fc56 	bl	8001af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_UART_MspInit+0xb8>)
 800224e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002250:	4a19      	ldr	r2, [pc, #100]	; (80022b8 <HAL_UART_MspInit+0xb8>)
 8002252:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002256:	6613      	str	r3, [r2, #96]	; 0x60
 8002258:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_UART_MspInit+0xb8>)
 800225a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002264:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_UART_MspInit+0xb8>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <HAL_UART_MspInit+0xb8>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_UART_MspInit+0xb8>)
 8002272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800227c:	2330      	movs	r3, #48	; 0x30
 800227e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800228c:	2307      	movs	r3, #7
 800228e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002290:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002294:	4619      	mov	r1, r3
 8002296:	4809      	ldr	r0, [pc, #36]	; (80022bc <HAL_UART_MspInit+0xbc>)
 8002298:	f001 fffa 	bl	8004290 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800229c:	2200      	movs	r2, #0
 800229e:	2100      	movs	r1, #0
 80022a0:	2025      	movs	r0, #37	; 0x25
 80022a2:	f001 fd36 	bl	8003d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022a6:	2025      	movs	r0, #37	; 0x25
 80022a8:	f001 fd4d 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022ac:	bf00      	nop
 80022ae:	3768      	adds	r7, #104	; 0x68
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40021000 	.word	0x40021000
 80022bc:	48000800 	.word	0x48000800

080022c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <NMI_Handler+0x4>

080022c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <MemManage_Handler+0x4>

080022d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <BusFault_Handler+0x4>

080022d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <UsageFault_Handler+0x4>

080022de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800230c:	f000 f96e 	bl	80025ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}

08002314 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002318:	2004      	movs	r0, #4
 800231a:	f002 f96b 	bl	80045f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}

08002322 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002326:	2008      	movs	r0, #8
 8002328:	f002 f964 	bl	80045f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}

08002330 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <USART1_IRQHandler+0x10>)
 8002336:	f005 fa5f 	bl	80077f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000040c 	.word	0x2000040c

08002344 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return 1;
 8002348:	2301      	movs	r3, #1
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_kill>:

int _kill(int pid, int sig)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800235e:	f007 f9ab 	bl	80096b8 <__errno>
 8002362:	4603      	mov	r3, r0
 8002364:	2216      	movs	r2, #22
 8002366:	601a      	str	r2, [r3, #0]
  return -1;
 8002368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_exit>:

void _exit (int status)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800237c:	f04f 31ff 	mov.w	r1, #4294967295
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ffe7 	bl	8002354 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002386:	e7fe      	b.n	8002386 <_exit+0x12>

08002388 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	e00a      	b.n	80023b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800239a:	f3af 8000 	nop.w
 800239e:	4601      	mov	r1, r0
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	60ba      	str	r2, [r7, #8]
 80023a6:	b2ca      	uxtb	r2, r1
 80023a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3301      	adds	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	dbf0      	blt.n	800239a <_read+0x12>
  }

  return len;
 80023b8:	687b      	ldr	r3, [r7, #4]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e009      	b.n	80023e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60ba      	str	r2, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fd89 	bl	8000ef4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3301      	adds	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	dbf1      	blt.n	80023d4 <_write+0x12>
  }
  return len;
 80023f0:	687b      	ldr	r3, [r7, #4]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <_close>:

int _close(int file)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002422:	605a      	str	r2, [r3, #4]
  return 0;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <_isatty>:

int _isatty(int file)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <_sbrk+0x5c>)
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <_sbrk+0x60>)
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <_sbrk+0x64>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <_sbrk+0x64>)
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <_sbrk+0x68>)
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	429a      	cmp	r2, r3
 8002492:	d207      	bcs.n	80024a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002494:	f007 f910 	bl	80096b8 <__errno>
 8002498:	4603      	mov	r3, r0
 800249a:	220c      	movs	r2, #12
 800249c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	e009      	b.n	80024b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <_sbrk+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <_sbrk+0x64>)
 80024b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b6:	68fb      	ldr	r3, [r7, #12]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20008000 	.word	0x20008000
 80024c4:	00000400 	.word	0x00000400
 80024c8:	200004a0 	.word	0x200004a0
 80024cc:	200005f8 	.word	0x200005f8

080024d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <SystemInit+0x20>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <SystemInit+0x20>)
 80024dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <LoopForever+0x6>)
  ldr r1, =_edata
 80024fa:	490e      	ldr	r1, [pc, #56]	; (8002534 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <LoopForever+0xe>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002500:	e002      	b.n	8002508 <LoopCopyDataInit>

08002502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002506:	3304      	adds	r3, #4

08002508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800250c:	d3f9      	bcc.n	8002502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002510:	4c0b      	ldr	r4, [pc, #44]	; (8002540 <LoopForever+0x16>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002514:	e001      	b.n	800251a <LoopFillZerobss>

08002516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002518:	3204      	adds	r2, #4

0800251a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800251c:	d3fb      	bcc.n	8002516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800251e:	f7ff ffd7 	bl	80024d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002522:	f007 f8cf 	bl	80096c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002526:	f7fe fdad 	bl	8001084 <main>

0800252a <LoopForever>:

LoopForever:
    b LoopForever
 800252a:	e7fe      	b.n	800252a <LoopForever>
  ldr   r0, =_estack
 800252c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002534:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002538:	0800bc84 	.word	0x0800bc84
  ldr r2, =_sbss
 800253c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002540:	200005f4 	.word	0x200005f4

08002544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002544:	e7fe      	b.n	8002544 <ADC1_2_IRQHandler>

08002546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002550:	2003      	movs	r0, #3
 8002552:	f001 fbd3 	bl	8003cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002556:	200f      	movs	r0, #15
 8002558:	f000 f80e 	bl	8002578 <HAL_InitTick>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	71fb      	strb	r3, [r7, #7]
 8002566:	e001      	b.n	800256c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002568:	f7ff fc4a 	bl	8001e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800256c:	79fb      	ldrb	r3, [r7, #7]

}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_InitTick+0x68>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d022      	beq.n	80025d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_InitTick+0x6c>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_InitTick+0x68>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002598:	fbb1 f3f3 	udiv	r3, r1, r3
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fbde 	bl	8003d62 <HAL_SYSTICK_Config>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10f      	bne.n	80025cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	d809      	bhi.n	80025c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b2:	2200      	movs	r2, #0
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ba:	f001 fbaa 	bl	8003d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_InitTick+0x70>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	e007      	b.n	80025d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e004      	b.n	80025d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e001      	b.n	80025d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000010 	.word	0x20000010
 80025e4:	20000008 	.word	0x20000008
 80025e8:	2000000c 	.word	0x2000000c

080025ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_IncTick+0x1c>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_IncTick+0x20>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a03      	ldr	r2, [pc, #12]	; (8002608 <HAL_IncTick+0x1c>)
 80025fc:	6013      	str	r3, [r2, #0]
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	200004a4 	.word	0x200004a4
 800260c:	20000010 	.word	0x20000010

08002610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return uwTick;
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_GetTick+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	200004a4 	.word	0x200004a4

08002628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7ff ffee 	bl	8002610 <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d004      	beq.n	800264c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_Delay+0x40>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800264c:	bf00      	nop
 800264e:	f7ff ffdf 	bl	8002610 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	429a      	cmp	r2, r3
 800265c:	d8f7      	bhi.n	800264e <HAL_Delay+0x26>
  {
  }
}
 800265e:	bf00      	nop
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000010 	.word	0x20000010

0800266c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	609a      	str	r2, [r3, #8]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3360      	adds	r3, #96	; 0x60
 80026e6:	461a      	mov	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <LL_ADC_SetOffset+0x44>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	4313      	orrs	r3, r2
 8002704:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800270c:	bf00      	nop
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	03fff000 	.word	0x03fff000

0800271c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3360      	adds	r3, #96	; 0x60
 800272a:	461a      	mov	r2, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3360      	adds	r3, #96	; 0x60
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800277e:	b480      	push	{r7}
 8002780:	b087      	sub	sp, #28
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3360      	adds	r3, #96	; 0x60
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027a8:	bf00      	nop
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	3360      	adds	r3, #96	; 0x60
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	431a      	orrs	r2, r3
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	615a      	str	r2, [r3, #20]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002836:	b480      	push	{r7}
 8002838:	b087      	sub	sp, #28
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3330      	adds	r3, #48	; 0x30
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	211f      	movs	r1, #31
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	401a      	ands	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	f003 011f 	and.w	r1, r3, #31
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	431a      	orrs	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800288e:	b480      	push	{r7}
 8002890:	b087      	sub	sp, #28
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3314      	adds	r3, #20
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	0e5b      	lsrs	r3, r3, #25
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	4413      	add	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	0d1b      	lsrs	r3, r3, #20
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	2107      	movs	r1, #7
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	401a      	ands	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	0d1b      	lsrs	r3, r3, #20
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	431a      	orrs	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10a      	bne.n	800290e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002904:	431a      	orrs	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800290c:	e00a      	b.n	8002924 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	43db      	mvns	r3, r3
 800291c:	401a      	ands	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	407f0000 	.word	0x407f0000

08002934 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 031f 	and.w	r3, r3, #31
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800297c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6093      	str	r3, [r2, #8]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a4:	d101      	bne.n	80029aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029f4:	d101      	bne.n	80029fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <LL_ADC_IsEnabled+0x18>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <LL_ADC_IsEnabled+0x1a>
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a6a:	f043 0204 	orr.w	r2, r3, #4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d101      	bne.n	8002a96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d101      	bne.n	8002abc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e177      	b.n	8002dd6 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff f9a7 	bl	8001e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff3f 	bl	8002990 <LL_ADC_IsDeepPowerDownEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff25 	bl	800296c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff5a 	bl	80029e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d115      	bne.n	8002b5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff3e 	bl	80029b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b3c:	4b9c      	ldr	r3, [pc, #624]	; (8002db0 <HAL_ADC_Init+0x2e4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	4a9c      	ldr	r2, [pc, #624]	; (8002db4 <HAL_ADC_Init+0x2e8>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b50:	e002      	b.n	8002b58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f9      	bne.n	8002b52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff3c 	bl	80029e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	f043 0210 	orr.w	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7e:	f043 0201 	orr.w	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff75 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002b94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 8110 	bne.w	8002dc4 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 810c 	bne.w	8002dc4 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bb4:	f043 0202 	orr.w	r2, r3, #2
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff35 	bl	8002a30 <LL_ADC_IsEnabled>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d111      	bne.n	8002bf0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bd0:	f7ff ff2e 	bl	8002a30 <LL_ADC_IsEnabled>
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	4878      	ldr	r0, [pc, #480]	; (8002db8 <HAL_ADC_Init+0x2ec>)
 8002bd8:	f7ff ff2a 	bl	8002a30 <LL_ADC_IsEnabled>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4323      	orrs	r3, r4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d105      	bne.n	8002bf0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4619      	mov	r1, r3
 8002bea:	4874      	ldr	r0, [pc, #464]	; (8002dbc <HAL_ADC_Init+0x2f0>)
 8002bec:	f7ff fd3e 	bl	800266c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7f5b      	ldrb	r3, [r3, #29]
 8002bf4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bfa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c00:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c06:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d106      	bne.n	8002c2c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	3b01      	subs	r3, #1
 8002c24:	045b      	lsls	r3, r3, #17
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b5c      	ldr	r3, [pc, #368]	; (8002dc0 <HAL_ADC_Init+0x2f4>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	69b9      	ldr	r1, [r7, #24]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff01 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002c7c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff0e 	bl	8002aa4 <LL_ADC_INJ_IsConversionOngoing>
 8002c88:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d16d      	bne.n	8002d6c <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d16a      	bne.n	8002d6c <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c9a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ca2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb2:	f023 0302 	bic.w	r3, r3, #2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d017      	beq.n	8002cf8 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ce0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6911      	ldr	r1, [r2, #16]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cf6:	e013      	b.n	8002d20 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d118      	bne.n	8002d5c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d40:	4311      	orrs	r1, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d46:	4311      	orrs	r1, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	611a      	str	r2, [r3, #16]
 8002d5a:	e007      	b.n	8002d6c <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d10c      	bne.n	8002d8e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f023 010f 	bic.w	r1, r3, #15
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	1e5a      	subs	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d8c:	e007      	b.n	8002d9e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 020f 	bic.w	r2, r2, #15
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dae:	e011      	b.n	8002dd4 <HAL_ADC_Init+0x308>
 8002db0:	20000008 	.word	0x20000008
 8002db4:	053e2d63 	.word	0x053e2d63
 8002db8:	50000100 	.word	0x50000100
 8002dbc:	50000300 	.word	0x50000300
 8002dc0:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	f043 0210 	orr.w	r2, r3, #16
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3724      	adds	r7, #36	; 0x24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop

08002de0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002de8:	4859      	ldr	r0, [pc, #356]	; (8002f50 <HAL_ADC_Start+0x170>)
 8002dea:	f7ff fda3 	bl	8002934 <LL_ADC_GetMultimode>
 8002dee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fe42 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 809f 	bne.w	8002f40 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_Start+0x30>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e09a      	b.n	8002f46 <HAL_ADC_Start+0x166>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fd73 	bl	8003904 <ADC_Enable>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 8086 	bne.w	8002f36 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a44      	ldr	r2, [pc, #272]	; (8002f54 <HAL_ADC_Start+0x174>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d002      	beq.n	8002e4e <HAL_ADC_Start+0x6e>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	e001      	b.n	8002e52 <HAL_ADC_Start+0x72>
 8002e4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d002      	beq.n	8002e60 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e78:	d106      	bne.n	8002e88 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	f023 0206 	bic.w	r2, r3, #6
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	661a      	str	r2, [r3, #96]	; 0x60
 8002e86:	e002      	b.n	8002e8e <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	221c      	movs	r2, #28
 8002e94:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <HAL_ADC_Start+0x174>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d002      	beq.n	8002eae <HAL_ADC_Start+0xce>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	e001      	b.n	8002eb2 <HAL_ADC_Start+0xd2>
 8002eae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d008      	beq.n	8002ecc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d002      	beq.n	8002ecc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	d114      	bne.n	8002ef6 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ee2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fdb1 	bl	8002a56 <LL_ADC_REG_StartConversion>
 8002ef4:	e026      	b.n	8002f44 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <HAL_ADC_Start+0x174>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d002      	beq.n	8002f12 <HAL_ADC_Start+0x132>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	e001      	b.n	8002f16 <HAL_ADC_Start+0x136>
 8002f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f16:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00f      	beq.n	8002f44 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f34:	e006      	b.n	8002f44 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002f3e:	e001      	b.n	8002f44 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
 8002f42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	50000300 	.word	0x50000300
 8002f54:	50000100 	.word	0x50000100

08002f58 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f62:	4867      	ldr	r0, [pc, #412]	; (8003100 <HAL_ADC_PollForConversion+0x1a8>)
 8002f64:	f7ff fce6 	bl	8002934 <LL_ADC_GetMultimode>
 8002f68:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d102      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002f72:	2308      	movs	r3, #8
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e02a      	b.n	8002fce <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d002      	beq.n	8002f8a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b09      	cmp	r3, #9
 8002f88:	d111      	bne.n	8002fae <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0a6      	b.n	80030f6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002fa8:	2304      	movs	r3, #4
 8002faa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002fac:	e00f      	b.n	8002fce <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fae:	4854      	ldr	r0, [pc, #336]	; (8003100 <HAL_ADC_PollForConversion+0x1a8>)
 8002fb0:	f7ff fcce 	bl	8002950 <LL_ADC_GetMultiDMATransfer>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e095      	b.n	80030f6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002fca:	2304      	movs	r3, #4
 8002fcc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fce:	f7ff fb1f 	bl	8002610 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fd4:	e021      	b.n	800301a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d01d      	beq.n	800301a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002fde:	f7ff fb17 	bl	8002610 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d302      	bcc.n	8002ff4 <HAL_ADC_PollForConversion+0x9c>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d112      	bne.n	800301a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	f043 0204 	orr.w	r2, r3, #4
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e06d      	b.n	80030f6 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0d6      	beq.n	8002fd6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fbe9 	bl	8002810 <LL_ADC_REG_IsTriggerSourceSWStart>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01c      	beq.n	800307e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7f5b      	ldrb	r3, [r3, #29]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d118      	bne.n	800307e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b08      	cmp	r3, #8
 8003058:	d111      	bne.n	800307e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d105      	bne.n	800307e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003076:	f043 0201 	orr.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a20      	ldr	r2, [pc, #128]	; (8003104 <HAL_ADC_PollForConversion+0x1ac>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d002      	beq.n	800308e <HAL_ADC_PollForConversion+0x136>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	e001      	b.n	8003092 <HAL_ADC_PollForConversion+0x13a>
 800308e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	4293      	cmp	r3, r2
 8003098:	d008      	beq.n	80030ac <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d002      	beq.n	80030ac <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d104      	bne.n	80030b6 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e00d      	b.n	80030d2 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a12      	ldr	r2, [pc, #72]	; (8003104 <HAL_ADC_PollForConversion+0x1ac>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d002      	beq.n	80030c6 <HAL_ADC_PollForConversion+0x16e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	e001      	b.n	80030ca <HAL_ADC_PollForConversion+0x172>
 80030c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030ca:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d104      	bne.n	80030e2 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2208      	movs	r2, #8
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	e008      	b.n	80030f4 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d103      	bne.n	80030f4 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	220c      	movs	r2, #12
 80030f2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	50000300 	.word	0x50000300
 8003104:	50000100 	.word	0x50000100

08003108 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b0b6      	sub	sp, #216	; 0xd8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x22>
 8003142:	2302      	movs	r3, #2
 8003144:	e3c8      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x7b4>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fc93 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 83ad 	bne.w	80038ba <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	f7ff fb62 	bl	8002836 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fc81 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 800317c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fc8d 	bl	8002aa4 <LL_ADC_INJ_IsConversionOngoing>
 800318a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800318e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 81d9 	bne.w	800354a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 81d4 	bne.w	800354a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031aa:	d10f      	bne.n	80031cc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2200      	movs	r2, #0
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7ff fb69 	bl	800288e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fb10 	bl	80027ea <LL_ADC_SetSamplingTimeCommonConfig>
 80031ca:	e00e      	b.n	80031ea <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	6819      	ldr	r1, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	461a      	mov	r2, r3
 80031da:	f7ff fb58 	bl	800288e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fb00 	bl	80027ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	08db      	lsrs	r3, r3, #3
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d022      	beq.n	8003252 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6919      	ldr	r1, [r3, #16]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800321c:	f7ff fa5a 	bl	80026d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6919      	ldr	r1, [r3, #16]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	461a      	mov	r2, r3
 800322e:	f7ff faa6 	bl	800277e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6919      	ldr	r1, [r3, #16]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	7f1b      	ldrb	r3, [r3, #28]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x124>
 8003242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003246:	e000      	b.n	800324a <HAL_ADC_ConfigChannel+0x126>
 8003248:	2300      	movs	r3, #0
 800324a:	461a      	mov	r2, r3
 800324c:	f7ff fab2 	bl	80027b4 <LL_ADC_SetOffsetSaturation>
 8003250:	e17b      	b.n	800354a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fa5f 	bl	800271c <LL_ADC_GetOffsetChannel>
 800325e:	4603      	mov	r3, r0
 8003260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <HAL_ADC_ConfigChannel+0x15a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fa54 	bl	800271c <LL_ADC_GetOffsetChannel>
 8003274:	4603      	mov	r3, r0
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	f003 021f 	and.w	r2, r3, #31
 800327c:	e01e      	b.n	80032bc <HAL_ADC_ConfigChannel+0x198>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fa49 	bl	800271c <LL_ADC_GetOffsetChannel>
 800328a:	4603      	mov	r3, r0
 800328c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800329c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80032ac:	2320      	movs	r3, #32
 80032ae:	e004      	b.n	80032ba <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80032b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x1b0>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0e9b      	lsrs	r3, r3, #26
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	e018      	b.n	8003306 <HAL_ADC_ConfigChannel+0x1e2>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80032e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80032f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80032f8:	2320      	movs	r3, #32
 80032fa:	e004      	b.n	8003306 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80032fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003306:	429a      	cmp	r2, r3
 8003308:	d106      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fa18 	bl	8002748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2101      	movs	r1, #1
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff f9fc 	bl	800271c <LL_ADC_GetOffsetChannel>
 8003324:	4603      	mov	r3, r0
 8003326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x220>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2101      	movs	r1, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff f9f1 	bl	800271c <LL_ADC_GetOffsetChannel>
 800333a:	4603      	mov	r3, r0
 800333c:	0e9b      	lsrs	r3, r3, #26
 800333e:	f003 021f 	and.w	r2, r3, #31
 8003342:	e01e      	b.n	8003382 <HAL_ADC_ConfigChannel+0x25e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2101      	movs	r1, #1
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f9e6 	bl	800271c <LL_ADC_GetOffsetChannel>
 8003350:	4603      	mov	r3, r0
 8003352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800336a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003372:	2320      	movs	r3, #32
 8003374:	e004      	b.n	8003380 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003376:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <HAL_ADC_ConfigChannel+0x276>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	0e9b      	lsrs	r3, r3, #26
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	e018      	b.n	80033cc <HAL_ADC_ConfigChannel+0x2a8>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80033ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80033b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80033be:	2320      	movs	r3, #32
 80033c0:	e004      	b.n	80033cc <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80033c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d106      	bne.n	80033de <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2200      	movs	r2, #0
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff f9b5 	bl	8002748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2102      	movs	r1, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff f999 	bl	800271c <LL_ADC_GetOffsetChannel>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <HAL_ADC_ConfigChannel+0x2e6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2102      	movs	r1, #2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff f98e 	bl	800271c <LL_ADC_GetOffsetChannel>
 8003400:	4603      	mov	r3, r0
 8003402:	0e9b      	lsrs	r3, r3, #26
 8003404:	f003 021f 	and.w	r2, r3, #31
 8003408:	e01e      	b.n	8003448 <HAL_ADC_ConfigChannel+0x324>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2102      	movs	r1, #2
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff f983 	bl	800271c <LL_ADC_GetOffsetChannel>
 8003416:	4603      	mov	r3, r0
 8003418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003428:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800342c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003430:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003438:	2320      	movs	r3, #32
 800343a:	e004      	b.n	8003446 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800343c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x33c>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	0e9b      	lsrs	r3, r3, #26
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	e016      	b.n	800348e <HAL_ADC_ConfigChannel+0x36a>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003480:	2320      	movs	r3, #32
 8003482:	e004      	b.n	800348e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800348e:	429a      	cmp	r2, r3
 8003490:	d106      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	2102      	movs	r1, #2
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f954 	bl	8002748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2103      	movs	r1, #3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff f938 	bl	800271c <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x3a8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2103      	movs	r1, #3
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff f92d 	bl	800271c <LL_ADC_GetOffsetChannel>
 80034c2:	4603      	mov	r3, r0
 80034c4:	0e9b      	lsrs	r3, r3, #26
 80034c6:	f003 021f 	and.w	r2, r3, #31
 80034ca:	e017      	b.n	80034fc <HAL_ADC_ConfigChannel+0x3d8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2103      	movs	r1, #3
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff f922 	bl	800271c <LL_ADC_GetOffsetChannel>
 80034d8:	4603      	mov	r3, r0
 80034da:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80034e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80034e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80034ee:	2320      	movs	r3, #32
 80034f0:	e003      	b.n	80034fa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80034f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003504:	2b00      	cmp	r3, #0
 8003506:	d105      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x3f0>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0e9b      	lsrs	r3, r3, #26
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	e011      	b.n	8003538 <HAL_ADC_ConfigChannel+0x414>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003524:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e003      	b.n	8003538 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003538:	429a      	cmp	r2, r3
 800353a:	d106      	bne.n	800354a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2200      	movs	r2, #0
 8003542:	2103      	movs	r1, #3
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff f8ff 	bl	8002748 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fa6e 	bl	8002a30 <LL_ADC_IsEnabled>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 8140 	bne.w	80037dc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	461a      	mov	r2, r3
 800356a:	f7ff f9bb 	bl	80028e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4a8f      	ldr	r2, [pc, #572]	; (80037b0 <HAL_ADC_ConfigChannel+0x68c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	f040 8131 	bne.w	80037dc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x47e>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	0e9b      	lsrs	r3, r3, #26
 8003590:	3301      	adds	r3, #1
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	2b09      	cmp	r3, #9
 8003598:	bf94      	ite	ls
 800359a:	2301      	movls	r3, #1
 800359c:	2300      	movhi	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e019      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x4b2>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80035b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80035b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80035ba:	2320      	movs	r3, #32
 80035bc:	e003      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80035be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	2b09      	cmp	r3, #9
 80035ce:	bf94      	ite	ls
 80035d0:	2301      	movls	r3, #1
 80035d2:	2300      	movhi	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d079      	beq.n	80036ce <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d107      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x4d2>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	3301      	adds	r3, #1
 80035ee:	069b      	lsls	r3, r3, #26
 80035f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f4:	e015      	b.n	8003622 <HAL_ADC_ConfigChannel+0x4fe>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003606:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e003      	b.n	800361a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003614:	fab3 f383 	clz	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3301      	adds	r3, #1
 800361c:	069b      	lsls	r3, r3, #26
 800361e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x51e>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	0e9b      	lsrs	r3, r3, #26
 8003634:	3301      	adds	r3, #1
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	2101      	movs	r1, #1
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	e017      	b.n	8003672 <HAL_ADC_ConfigChannel+0x54e>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364a:	fa93 f3a3 	rbit	r3, r3
 800364e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003652:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800365a:	2320      	movs	r3, #32
 800365c:	e003      	b.n	8003666 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800365e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	ea42 0103 	orr.w	r1, r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x574>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	0e9b      	lsrs	r3, r3, #26
 8003688:	3301      	adds	r3, #1
 800368a:	f003 021f 	and.w	r2, r3, #31
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	051b      	lsls	r3, r3, #20
 8003696:	e018      	b.n	80036ca <HAL_ADC_ConfigChannel+0x5a6>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80036b0:	2320      	movs	r3, #32
 80036b2:	e003      	b.n	80036bc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80036b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	3301      	adds	r3, #1
 80036be:	f003 021f 	and.w	r2, r3, #31
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ca:	430b      	orrs	r3, r1
 80036cc:	e081      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d107      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x5c6>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0e9b      	lsrs	r3, r3, #26
 80036e0:	3301      	adds	r3, #1
 80036e2:	069b      	lsls	r3, r3, #26
 80036e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e8:	e015      	b.n	8003716 <HAL_ADC_ConfigChannel+0x5f2>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e003      	b.n	800370e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	3301      	adds	r3, #1
 8003710:	069b      	lsls	r3, r3, #26
 8003712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x612>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0e9b      	lsrs	r3, r3, #26
 8003728:	3301      	adds	r3, #1
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	e017      	b.n	8003766 <HAL_ADC_ConfigChannel+0x642>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	61fb      	str	r3, [r7, #28]
  return result;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e003      	b.n	800375a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	ea42 0103 	orr.w	r1, r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x66e>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	3301      	adds	r3, #1
 800377e:	f003 021f 	and.w	r2, r3, #31
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	3b1e      	subs	r3, #30
 800378a:	051b      	lsls	r3, r3, #20
 800378c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003790:	e01e      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x6ac>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa93 f3a3 	rbit	r3, r3
 800379e:	613b      	str	r3, [r7, #16]
  return result;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80037aa:	2320      	movs	r3, #32
 80037ac:	e006      	b.n	80037bc <HAL_ADC_ConfigChannel+0x698>
 80037ae:	bf00      	nop
 80037b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	3301      	adds	r3, #1
 80037be:	f003 021f 	and.w	r2, r3, #31
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	3b1e      	subs	r3, #30
 80037ca:	051b      	lsls	r3, r3, #20
 80037cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037d0:	430b      	orrs	r3, r1
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	6892      	ldr	r2, [r2, #8]
 80037d6:	4619      	mov	r1, r3
 80037d8:	f7ff f859 	bl	800288e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <HAL_ADC_ConfigChannel+0x7bc>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d071      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037e8:	483e      	ldr	r0, [pc, #248]	; (80038e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80037ea:	f7fe ff65 	bl	80026b8 <LL_ADC_GetCommonPathInternalCh>
 80037ee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a3c      	ldr	r2, [pc, #240]	; (80038e8 <HAL_ADC_ConfigChannel+0x7c4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d004      	beq.n	8003806 <HAL_ADC_ConfigChannel+0x6e2>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a3a      	ldr	r2, [pc, #232]	; (80038ec <HAL_ADC_ConfigChannel+0x7c8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d127      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800380a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d121      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800381a:	d157      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800381c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003820:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003824:	4619      	mov	r1, r3
 8003826:	482f      	ldr	r0, [pc, #188]	; (80038e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003828:	f7fe ff33 	bl	8002692 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800382c:	4b30      	ldr	r3, [pc, #192]	; (80038f0 <HAL_ADC_ConfigChannel+0x7cc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	099b      	lsrs	r3, r3, #6
 8003832:	4a30      	ldr	r2, [pc, #192]	; (80038f4 <HAL_ADC_ConfigChannel+0x7d0>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	099b      	lsrs	r3, r3, #6
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003846:	e002      	b.n	800384e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3b01      	subs	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f9      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003854:	e03a      	b.n	80038cc <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a27      	ldr	r2, [pc, #156]	; (80038f8 <HAL_ADC_ConfigChannel+0x7d4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d113      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x764>
 8003860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10d      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a22      	ldr	r2, [pc, #136]	; (80038fc <HAL_ADC_ConfigChannel+0x7d8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d02a      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387e:	4619      	mov	r1, r3
 8003880:	4818      	ldr	r0, [pc, #96]	; (80038e4 <HAL_ADC_ConfigChannel+0x7c0>)
 8003882:	f7fe ff06 	bl	8002692 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003886:	e021      	b.n	80038cc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <HAL_ADC_ConfigChannel+0x7dc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d11c      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d116      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_ADC_ConfigChannel+0x7d8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d011      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038b0:	4619      	mov	r1, r3
 80038b2:	480c      	ldr	r0, [pc, #48]	; (80038e4 <HAL_ADC_ConfigChannel+0x7c0>)
 80038b4:	f7fe feed 	bl	8002692 <LL_ADC_SetCommonPathInternalCh>
 80038b8:	e008      	b.n	80038cc <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80038d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038d8:	4618      	mov	r0, r3
 80038da:	37d8      	adds	r7, #216	; 0xd8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	80080000 	.word	0x80080000
 80038e4:	50000300 	.word	0x50000300
 80038e8:	c3210000 	.word	0xc3210000
 80038ec:	90c00010 	.word	0x90c00010
 80038f0:	20000008 	.word	0x20000008
 80038f4:	053e2d63 	.word	0x053e2d63
 80038f8:	c7520000 	.word	0xc7520000
 80038fc:	50000100 	.word	0x50000100
 8003900:	cb840000 	.word	0xcb840000

08003904 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff f88d 	bl	8002a30 <LL_ADC_IsEnabled>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d14d      	bne.n	80039b8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <ADC_Enable+0xc0>)
 8003924:	4013      	ands	r3, r2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	f043 0210 	orr.w	r2, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393a:	f043 0201 	orr.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e039      	b.n	80039ba <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff f85c 	bl	8002a08 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003950:	f7fe fe5e 	bl	8002610 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003956:	e028      	b.n	80039aa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff f867 	bl	8002a30 <LL_ADC_IsEnabled>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d104      	bne.n	8003972 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f84b 	bl	8002a08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003972:	f7fe fe4d 	bl	8002610 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d914      	bls.n	80039aa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d00d      	beq.n	80039aa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	f043 0210 	orr.w	r2, r3, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e007      	b.n	80039ba <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d1cf      	bne.n	8003958 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	8000003f 	.word	0x8000003f

080039c8 <LL_ADC_IsEnabled>:
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <LL_ADC_IsEnabled+0x18>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <LL_ADC_IsEnabled+0x1a>
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_ADC_REG_IsConversionOngoing>:
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d101      	bne.n	8003a06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b0a1      	sub	sp, #132	; 0x84
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e08b      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a4a:	d102      	bne.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a4c:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	e001      	b.n	8003a56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a52:	2300      	movs	r3, #0
 8003a54:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e06a      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff ffb9 	bl	80039ee <LL_ADC_REG_IsConversionOngoing>
 8003a7c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ffb3 	bl	80039ee <LL_ADC_REG_IsConversionOngoing>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d14c      	bne.n	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d149      	bne.n	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a94:	4b30      	ldr	r3, [pc, #192]	; (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003a96:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d028      	beq.n	8003af2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ab2:	035b      	lsls	r3, r3, #13
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003abc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ac0:	f7ff ff82 	bl	80039c8 <LL_ADC_IsEnabled>
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	4823      	ldr	r0, [pc, #140]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003ac8:	f7ff ff7e 	bl	80039c8 <LL_ADC_IsEnabled>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4323      	orrs	r3, r4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d133      	bne.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003adc:	f023 030f 	bic.w	r3, r3, #15
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	6811      	ldr	r1, [r2, #0]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	6892      	ldr	r2, [r2, #8]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	431a      	orrs	r2, r3
 8003aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003af0:	e024      	b.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003afe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b02:	f7ff ff61 	bl	80039c8 <LL_ADC_IsEnabled>
 8003b06:	4604      	mov	r4, r0
 8003b08:	4812      	ldr	r0, [pc, #72]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b0a:	f7ff ff5d 	bl	80039c8 <LL_ADC_IsEnabled>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4323      	orrs	r3, r4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d112      	bne.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b1e:	f023 030f 	bic.w	r3, r3, #15
 8003b22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b24:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b26:	e009      	b.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	f043 0220 	orr.w	r2, r3, #32
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b3a:	e000      	b.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3784      	adds	r7, #132	; 0x84
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd90      	pop	{r4, r7, pc}
 8003b52:	bf00      	nop
 8003b54:	50000100 	.word	0x50000100
 8003b58:	50000300 	.word	0x50000300

08003b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8e:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	60d3      	str	r3, [r2, #12]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <__NVIC_GetPriorityGrouping+0x18>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	f003 0307 	and.w	r3, r3, #7
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db0b      	blt.n	8003bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	f003 021f 	and.w	r2, r3, #31
 8003bd8:	4907      	ldr	r1, [pc, #28]	; (8003bf8 <__NVIC_EnableIRQ+0x38>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2001      	movs	r0, #1
 8003be2:	fa00 f202 	lsl.w	r2, r0, r2
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000e100 	.word	0xe000e100

08003bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db0a      	blt.n	8003c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	490c      	ldr	r1, [pc, #48]	; (8003c48 <__NVIC_SetPriority+0x4c>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c24:	e00a      	b.n	8003c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4908      	ldr	r1, [pc, #32]	; (8003c4c <__NVIC_SetPriority+0x50>)
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3b04      	subs	r3, #4
 8003c34:	0112      	lsls	r2, r2, #4
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	440b      	add	r3, r1
 8003c3a:	761a      	strb	r2, [r3, #24]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000e100 	.word	0xe000e100
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b089      	sub	sp, #36	; 0x24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f1c3 0307 	rsb	r3, r3, #7
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	bf28      	it	cs
 8003c6e:	2304      	movcs	r3, #4
 8003c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3304      	adds	r3, #4
 8003c76:	2b06      	cmp	r3, #6
 8003c78:	d902      	bls.n	8003c80 <NVIC_EncodePriority+0x30>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3b03      	subs	r3, #3
 8003c7e:	e000      	b.n	8003c82 <NVIC_EncodePriority+0x32>
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	401a      	ands	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c98:	f04f 31ff 	mov.w	r1, #4294967295
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	43d9      	mvns	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	4313      	orrs	r3, r2
         );
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	; 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc8:	d301      	bcc.n	8003cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00f      	b.n	8003cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <SysTick_Config+0x40>)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cd6:	210f      	movs	r1, #15
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	f7ff ff8e 	bl	8003bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <SysTick_Config+0x40>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce6:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <SysTick_Config+0x40>)
 8003ce8:	2207      	movs	r2, #7
 8003cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	e000e010 	.word	0xe000e010

08003cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ff29 	bl	8003b5c <__NVIC_SetPriorityGrouping>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d20:	f7ff ff40 	bl	8003ba4 <__NVIC_GetPriorityGrouping>
 8003d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff ff90 	bl	8003c50 <NVIC_EncodePriority>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff5f 	bl	8003bfc <__NVIC_SetPriority>
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff33 	bl	8003bc0 <__NVIC_EnableIRQ>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ffa4 	bl	8003cb8 <SysTick_Config>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e014      	b.n	8003db6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	791b      	ldrb	r3, [r3, #4]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d105      	bne.n	8003da2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7fe f8a7 	bl	8001ef0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2202      	movs	r2, #2
 8003da6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	795b      	ldrb	r3, [r3, #5]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_DAC_ConfigChannel+0x18>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e192      	b.n	80040fe <HAL_DAC_ConfigChannel+0x33e>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2202      	movs	r2, #2
 8003de2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d174      	bne.n	8003ed6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003dec:	f7fe fc10 	bl	8002610 <HAL_GetTick>
 8003df0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d134      	bne.n	8003e62 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003df8:	e011      	b.n	8003e1e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003dfa:	f7fe fc09 	bl	8002610 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d90a      	bls.n	8003e1e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f043 0208 	orr.w	r2, r3, #8
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2203      	movs	r2, #3
 8003e18:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e16f      	b.n	80040fe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e6      	bne.n	8003dfa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	f7fe fbfb 	bl	8002628 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e3c:	e01e      	b.n	8003e7c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003e3e:	f7fe fbe7 	bl	8002610 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d90a      	bls.n	8003e62 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f043 0208 	orr.w	r2, r3, #8
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e14d      	b.n	80040fe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	dbe8      	blt.n	8003e3e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f7fe fbdb 	bl	8002628 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e7a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	ea02 0103 	and.w	r1, r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	21ff      	movs	r1, #255	; 0xff
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	ea02 0103 	and.w	r1, r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d11d      	bne.n	8003f1a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	221f      	movs	r2, #31
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2207      	movs	r2, #7
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f32:	4013      	ands	r3, r2
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d102      	bne.n	8003f44 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	e00f      	b.n	8003f64 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d102      	bne.n	8003f52 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	e008      	b.n	8003f64 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d102      	bne.n	8003f60 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	623b      	str	r3, [r7, #32]
 8003f5e:	e001      	b.n	8003f64 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	6a3a      	ldr	r2, [r7, #32]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f86:	4013      	ands	r3, r2
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	791b      	ldrb	r3, [r3, #4]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <HAL_DAC_ConfigChannel+0x1d8>
 8003f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f96:	e000      	b.n	8003f9a <HAL_DAC_ConfigChannel+0x1da>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	795b      	ldrb	r3, [r3, #5]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d102      	bne.n	8003fc4 <HAL_DAC_ConfigChannel+0x204>
 8003fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fc2:	e000      	b.n	8003fc6 <HAL_DAC_ConfigChannel+0x206>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d114      	bne.n	8004006 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003fdc:	f001 ff28 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8003fe0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	4a48      	ldr	r2, [pc, #288]	; (8004108 <HAL_DAC_ConfigChannel+0x348>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d904      	bls.n	8003ff4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff2:	e00f      	b.n	8004014 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	4a45      	ldr	r2, [pc, #276]	; (800410c <HAL_DAC_ConfigChannel+0x34c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d90a      	bls.n	8004012 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
 8004004:	e006      	b.n	8004014 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400c:	4313      	orrs	r3, r2
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	e000      	b.n	8004014 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004012:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004022:	4313      	orrs	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43da      	mvns	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	400a      	ands	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004066:	4013      	ands	r3, r2
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407e:	4313      	orrs	r3, r2
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004088:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	22c0      	movs	r2, #192	; 0xc0
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43da      	mvns	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	400a      	ands	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80040d4:	fa01 f303 	lsl.w	r3, r1, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	ea02 0103 	and.w	r1, r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	409a      	lsls	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3728      	adds	r7, #40	; 0x28
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	09896800 	.word	0x09896800
 800410c:	04c4b400 	.word	0x04c4b400

08004110 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d005      	beq.n	8004134 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2204      	movs	r2, #4
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	e037      	b.n	80041a4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 020e 	bic.w	r2, r2, #14
 8004142:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004152:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	f003 021f 	and.w	r2, r3, #31
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	2101      	movs	r1, #1
 8004172:	fa01 f202 	lsl.w	r2, r1, r2
 8004176:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004180:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00c      	beq.n	80041a4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004198:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041a2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d00d      	beq.n	80041f6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2204      	movs	r2, #4
 80041de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e047      	b.n	8004286 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 020e 	bic.w	r2, r2, #14
 8004204:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004224:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	f003 021f 	and.w	r2, r3, #31
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f202 	lsl.w	r2, r1, r2
 8004238:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004242:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00c      	beq.n	8004266 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004264:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
    }
  }
  return status;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800429e:	e15a      	b.n	8004556 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	2101      	movs	r1, #1
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	4013      	ands	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 814c 	beq.w	8004550 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d005      	beq.n	80042d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d130      	bne.n	8004332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	2203      	movs	r2, #3
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004306:	2201      	movs	r2, #1
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f003 0201 	and.w	r2, r3, #1
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b03      	cmp	r3, #3
 800433c:	d017      	beq.n	800436e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2203      	movs	r2, #3
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d123      	bne.n	80043c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	08da      	lsrs	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3208      	adds	r2, #8
 8004382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	6939      	ldr	r1, [r7, #16]
 80043be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2203      	movs	r2, #3
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0203 	and.w	r2, r3, #3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 80a6 	beq.w	8004550 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004404:	4b5b      	ldr	r3, [pc, #364]	; (8004574 <HAL_GPIO_Init+0x2e4>)
 8004406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004408:	4a5a      	ldr	r2, [pc, #360]	; (8004574 <HAL_GPIO_Init+0x2e4>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6613      	str	r3, [r2, #96]	; 0x60
 8004410:	4b58      	ldr	r3, [pc, #352]	; (8004574 <HAL_GPIO_Init+0x2e4>)
 8004412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800441c:	4a56      	ldr	r2, [pc, #344]	; (8004578 <HAL_GPIO_Init+0x2e8>)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	089b      	lsrs	r3, r3, #2
 8004422:	3302      	adds	r3, #2
 8004424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	220f      	movs	r2, #15
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004446:	d01f      	beq.n	8004488 <HAL_GPIO_Init+0x1f8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a4c      	ldr	r2, [pc, #304]	; (800457c <HAL_GPIO_Init+0x2ec>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d019      	beq.n	8004484 <HAL_GPIO_Init+0x1f4>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a4b      	ldr	r2, [pc, #300]	; (8004580 <HAL_GPIO_Init+0x2f0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d013      	beq.n	8004480 <HAL_GPIO_Init+0x1f0>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a4a      	ldr	r2, [pc, #296]	; (8004584 <HAL_GPIO_Init+0x2f4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00d      	beq.n	800447c <HAL_GPIO_Init+0x1ec>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a49      	ldr	r2, [pc, #292]	; (8004588 <HAL_GPIO_Init+0x2f8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d007      	beq.n	8004478 <HAL_GPIO_Init+0x1e8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a48      	ldr	r2, [pc, #288]	; (800458c <HAL_GPIO_Init+0x2fc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d101      	bne.n	8004474 <HAL_GPIO_Init+0x1e4>
 8004470:	2305      	movs	r3, #5
 8004472:	e00a      	b.n	800448a <HAL_GPIO_Init+0x1fa>
 8004474:	2306      	movs	r3, #6
 8004476:	e008      	b.n	800448a <HAL_GPIO_Init+0x1fa>
 8004478:	2304      	movs	r3, #4
 800447a:	e006      	b.n	800448a <HAL_GPIO_Init+0x1fa>
 800447c:	2303      	movs	r3, #3
 800447e:	e004      	b.n	800448a <HAL_GPIO_Init+0x1fa>
 8004480:	2302      	movs	r3, #2
 8004482:	e002      	b.n	800448a <HAL_GPIO_Init+0x1fa>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <HAL_GPIO_Init+0x1fa>
 8004488:	2300      	movs	r3, #0
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	f002 0203 	and.w	r2, r2, #3
 8004490:	0092      	lsls	r2, r2, #2
 8004492:	4093      	lsls	r3, r2
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800449a:	4937      	ldr	r1, [pc, #220]	; (8004578 <HAL_GPIO_Init+0x2e8>)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	3302      	adds	r3, #2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044a8:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_GPIO_Init+0x300>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044cc:	4a30      	ldr	r2, [pc, #192]	; (8004590 <HAL_GPIO_Init+0x300>)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044d2:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <HAL_GPIO_Init+0x300>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	43db      	mvns	r3, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044f6:	4a26      	ldr	r2, [pc, #152]	; (8004590 <HAL_GPIO_Init+0x300>)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80044fc:	4b24      	ldr	r3, [pc, #144]	; (8004590 <HAL_GPIO_Init+0x300>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	43db      	mvns	r3, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004520:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <HAL_GPIO_Init+0x300>)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004526:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <HAL_GPIO_Init+0x300>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	43db      	mvns	r3, r3
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4013      	ands	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800454a:	4a11      	ldr	r2, [pc, #68]	; (8004590 <HAL_GPIO_Init+0x300>)
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	3301      	adds	r3, #1
 8004554:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	f47f ae9d 	bne.w	80042a0 <HAL_GPIO_Init+0x10>
  }
}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	40021000 	.word	0x40021000
 8004578:	40010000 	.word	0x40010000
 800457c:	48000400 	.word	0x48000400
 8004580:	48000800 	.word	0x48000800
 8004584:	48000c00 	.word	0x48000c00
 8004588:	48001000 	.word	0x48001000
 800458c:	48001400 	.word	0x48001400
 8004590:	40010400 	.word	0x40010400

08004594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	887b      	ldrh	r3, [r7, #2]
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	e001      	b.n	80045b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	807b      	strh	r3, [r7, #2]
 80045d0:	4613      	mov	r3, r2
 80045d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045d4:	787b      	ldrb	r3, [r7, #1]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045da:	887a      	ldrh	r2, [r7, #2]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045e0:	e002      	b.n	80045e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045fe:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d006      	beq.n	8004618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800460a:	4a05      	ldr	r2, [pc, #20]	; (8004620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f806 	bl	8004624 <HAL_GPIO_EXTI_Callback>
  }
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40010400 	.word	0x40010400

08004624 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e081      	b.n	8004750 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fd fc83 	bl	8001f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2224      	movs	r2, #36	; 0x24
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0201 	bic.w	r2, r2, #1
 800467c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800468a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800469a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046b0:	609a      	str	r2, [r3, #8]
 80046b2:	e006      	b.n	80046c2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d104      	bne.n	80046d4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69d9      	ldr	r1, [r3, #28]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1a      	ldr	r2, [r3, #32]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	461a      	mov	r2, r3
 8004764:	460b      	mov	r3, r1
 8004766:	817b      	strh	r3, [r7, #10]
 8004768:	4613      	mov	r3, r2
 800476a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b20      	cmp	r3, #32
 8004776:	f040 80da 	bne.w	800492e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_I2C_Master_Transmit+0x30>
 8004784:	2302      	movs	r3, #2
 8004786:	e0d3      	b.n	8004930 <HAL_I2C_Master_Transmit+0x1d8>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004790:	f7fd ff3e 	bl	8002610 <HAL_GetTick>
 8004794:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2319      	movs	r3, #25
 800479c:	2201      	movs	r2, #1
 800479e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 faed 	bl	8004d82 <I2C_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e0be      	b.n	8004930 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2221      	movs	r2, #33	; 0x21
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2210      	movs	r2, #16
 80047be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	893a      	ldrh	r2, [r7, #8]
 80047d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2bff      	cmp	r3, #255	; 0xff
 80047e2:	d90e      	bls.n	8004802 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	22ff      	movs	r2, #255	; 0xff
 80047e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	8979      	ldrh	r1, [r7, #10]
 80047f2:	4b51      	ldr	r3, [pc, #324]	; (8004938 <HAL_I2C_Master_Transmit+0x1e0>)
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fce4 	bl	80051c8 <I2C_TransferConfig>
 8004800:	e06c      	b.n	80048dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	b2da      	uxtb	r2, r3
 8004812:	8979      	ldrh	r1, [r7, #10]
 8004814:	4b48      	ldr	r3, [pc, #288]	; (8004938 <HAL_I2C_Master_Transmit+0x1e0>)
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fcd3 	bl	80051c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004822:	e05b      	b.n	80048dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	6a39      	ldr	r1, [r7, #32]
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 faea 	bl	8004e02 <I2C_WaitOnTXISFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e07b      	b.n	8004930 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d034      	beq.n	80048dc <HAL_I2C_Master_Transmit+0x184>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d130      	bne.n	80048dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	2200      	movs	r2, #0
 8004882:	2180      	movs	r1, #128	; 0x80
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fa7c 	bl	8004d82 <I2C_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e04d      	b.n	8004930 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2bff      	cmp	r3, #255	; 0xff
 800489c:	d90e      	bls.n	80048bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	22ff      	movs	r2, #255	; 0xff
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	8979      	ldrh	r1, [r7, #10]
 80048ac:	2300      	movs	r3, #0
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fc87 	bl	80051c8 <I2C_TransferConfig>
 80048ba:	e00f      	b.n	80048dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	8979      	ldrh	r1, [r7, #10]
 80048ce:	2300      	movs	r3, #0
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fc76 	bl	80051c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d19e      	bne.n	8004824 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	6a39      	ldr	r1, [r7, #32]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fac9 	bl	8004e82 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e01a      	b.n	8004930 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2220      	movs	r2, #32
 8004900:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6859      	ldr	r1, [r3, #4]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_I2C_Master_Transmit+0x1e4>)
 800490e:	400b      	ands	r3, r1
 8004910:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	80002000 	.word	0x80002000
 800493c:	fe00e800 	.word	0xfe00e800

08004940 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	461a      	mov	r2, r3
 800494c:	460b      	mov	r3, r1
 800494e:	817b      	strh	r3, [r7, #10]
 8004950:	4613      	mov	r3, r2
 8004952:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b20      	cmp	r3, #32
 800495e:	f040 80db 	bne.w	8004b18 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_I2C_Master_Receive+0x30>
 800496c:	2302      	movs	r3, #2
 800496e:	e0d4      	b.n	8004b1a <HAL_I2C_Master_Receive+0x1da>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004978:	f7fd fe4a 	bl	8002610 <HAL_GetTick>
 800497c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2319      	movs	r3, #25
 8004984:	2201      	movs	r2, #1
 8004986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f9f9 	bl	8004d82 <I2C_WaitOnFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e0bf      	b.n	8004b1a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2222      	movs	r2, #34	; 0x22
 800499e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2210      	movs	r2, #16
 80049a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	893a      	ldrh	r2, [r7, #8]
 80049ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2bff      	cmp	r3, #255	; 0xff
 80049ca:	d90e      	bls.n	80049ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	22ff      	movs	r2, #255	; 0xff
 80049d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	8979      	ldrh	r1, [r7, #10]
 80049da:	4b52      	ldr	r3, [pc, #328]	; (8004b24 <HAL_I2C_Master_Receive+0x1e4>)
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f000 fbf0 	bl	80051c8 <I2C_TransferConfig>
 80049e8:	e06d      	b.n	8004ac6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	8979      	ldrh	r1, [r7, #10]
 80049fc:	4b49      	ldr	r3, [pc, #292]	; (8004b24 <HAL_I2C_Master_Receive+0x1e4>)
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 fbdf 	bl	80051c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004a0a:	e05c      	b.n	8004ac6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	6a39      	ldr	r1, [r7, #32]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fa73 	bl	8004efc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e07c      	b.n	8004b1a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d034      	beq.n	8004ac6 <HAL_I2C_Master_Receive+0x186>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d130      	bne.n	8004ac6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2180      	movs	r1, #128	; 0x80
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f987 	bl	8004d82 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e04d      	b.n	8004b1a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2bff      	cmp	r3, #255	; 0xff
 8004a86:	d90e      	bls.n	8004aa6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	22ff      	movs	r2, #255	; 0xff
 8004a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	8979      	ldrh	r1, [r7, #10]
 8004a96:	2300      	movs	r3, #0
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fb92 	bl	80051c8 <I2C_TransferConfig>
 8004aa4:	e00f      	b.n	8004ac6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	8979      	ldrh	r1, [r7, #10]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fb81 	bl	80051c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d19d      	bne.n	8004a0c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	6a39      	ldr	r1, [r7, #32]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f9d4 	bl	8004e82 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e01a      	b.n	8004b1a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <HAL_I2C_Master_Receive+0x1e8>)
 8004af8:	400b      	ands	r3, r1
 8004afa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	80002400 	.word	0x80002400
 8004b28:	fe00e800 	.word	0xfe00e800

08004b2c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	607a      	str	r2, [r7, #4]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	f040 80f1 	bne.w	8004d30 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e0e7      	b.n	8004d32 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_I2C_IsDeviceReady+0x44>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e0e0      	b.n	8004d32 <HAL_I2C_IsDeviceReady+0x206>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2224      	movs	r2, #36	; 0x24
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d107      	bne.n	8004b9e <HAL_I2C_IsDeviceReady+0x72>
 8004b8e:	897b      	ldrh	r3, [r7, #10]
 8004b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b9c:	e004      	b.n	8004ba8 <HAL_I2C_IsDeviceReady+0x7c>
 8004b9e:	897b      	ldrh	r3, [r7, #10]
 8004ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004bae:	f7fd fd2f 	bl	8002610 <HAL_GetTick>
 8004bb2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	bf0c      	ite	eq
 8004bc2:	2301      	moveq	r3, #1
 8004bc4:	2300      	movne	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004be0:	e034      	b.n	8004c4c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d01a      	beq.n	8004c20 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bea:	f7fd fd11 	bl	8002610 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d302      	bcc.n	8004c00 <HAL_I2C_IsDeviceReady+0xd4>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10f      	bne.n	8004c20 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e088      	b.n	8004d32 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b10      	cmp	r3, #16
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c4c:	7ffb      	ldrb	r3, [r7, #31]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d102      	bne.n	8004c58 <HAL_I2C_IsDeviceReady+0x12c>
 8004c52:	7fbb      	ldrb	r3, [r7, #30]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0c4      	beq.n	8004be2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d01a      	beq.n	8004c9c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2120      	movs	r1, #32
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f886 	bl	8004d82 <I2C_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e058      	b.n	8004d32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2220      	movs	r2, #32
 8004c86:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e04a      	b.n	8004d32 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2120      	movs	r1, #32
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f86b 	bl	8004d82 <I2C_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e03d      	b.n	8004d32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2210      	movs	r2, #16
 8004cbc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d118      	bne.n	8004d00 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cdc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2120      	movs	r1, #32
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f84a 	bl	8004d82 <I2C_WaitOnFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e01c      	b.n	8004d32 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	3301      	adds	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	f63f af3b 	bhi.w	8004b86 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3720      	adds	r7, #32
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d103      	bne.n	8004d58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2200      	movs	r2, #0
 8004d56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d007      	beq.n	8004d76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	699a      	ldr	r2, [r3, #24]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0201 	orr.w	r2, r2, #1
 8004d74:	619a      	str	r2, [r3, #24]
  }
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d92:	e022      	b.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d01e      	beq.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9c:	f7fd fc38 	bl	8002610 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d302      	bcc.n	8004db2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d113      	bne.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e00f      	b.n	8004dfa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699a      	ldr	r2, [r3, #24]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d0cd      	beq.n	8004d94 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e0e:	e02c      	b.n	8004e6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f8eb 	bl	8004ff0 <I2C_IsErrorOccurred>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e02a      	b.n	8004e7a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d01e      	beq.n	8004e6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2c:	f7fd fbf0 	bl	8002610 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d302      	bcc.n	8004e42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d113      	bne.n	8004e6a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	f043 0220 	orr.w	r2, r3, #32
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e007      	b.n	8004e7a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d1cb      	bne.n	8004e10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e8e:	e028      	b.n	8004ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f8ab 	bl	8004ff0 <I2C_IsErrorOccurred>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e026      	b.n	8004ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea4:	f7fd fbb4 	bl	8002610 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d113      	bne.n	8004ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebe:	f043 0220 	orr.w	r2, r3, #32
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e007      	b.n	8004ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d1cf      	bne.n	8004e90 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f08:	e064      	b.n	8004fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f86e 	bl	8004ff0 <I2C_IsErrorOccurred>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e062      	b.n	8004fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d138      	bne.n	8004f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d105      	bne.n	8004f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e04e      	b.n	8004fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d107      	bne.n	8004f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2210      	movs	r2, #16
 8004f5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	645a      	str	r2, [r3, #68]	; 0x44
 8004f62:	e002      	b.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6859      	ldr	r1, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004f7e:	400b      	ands	r3, r1
 8004f80:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e022      	b.n	8004fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f9e:	f7fd fb37 	bl	8002610 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d302      	bcc.n	8004fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10f      	bne.n	8004fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e007      	b.n	8004fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d193      	bne.n	8004f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	fe00e800 	.word	0xfe00e800

08004ff0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b00      	cmp	r3, #0
 800501a:	d075      	beq.n	8005108 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2210      	movs	r2, #16
 8005022:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005024:	e056      	b.n	80050d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d052      	beq.n	80050d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800502e:	f7fd faef 	bl	8002610 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <I2C_IsErrorOccurred+0x54>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d147      	bne.n	80050d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800504e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005056:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005066:	d12e      	bne.n	80050c6 <I2C_IsErrorOccurred+0xd6>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800506e:	d02a      	beq.n	80050c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	2b20      	cmp	r3, #32
 8005074:	d027      	beq.n	80050c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005084:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005086:	f7fd fac3 	bl	8002610 <HAL_GetTick>
 800508a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800508c:	e01b      	b.n	80050c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800508e:	f7fd fabf 	bl	8002610 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b19      	cmp	r3, #25
 800509a:	d914      	bls.n	80050c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d1dc      	bne.n	800508e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d003      	beq.n	80050ea <I2C_IsErrorOccurred+0xfa>
 80050e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d09d      	beq.n	8005026 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2220      	movs	r2, #32
 80050f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	f043 0304 	orr.w	r3, r3, #4
 8005100:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00b      	beq.n	8005132 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	f043 0301 	orr.w	r3, r3, #1
 8005120:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800512a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	f043 0308 	orr.w	r3, r3, #8
 8005142:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800514c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	f043 0302 	orr.w	r3, r3, #2
 8005164:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800516e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01c      	beq.n	80051b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7ff fddb 	bl	8004d3a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6859      	ldr	r1, [r3, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <I2C_IsErrorOccurred+0x1d4>)
 8005190:	400b      	ands	r3, r1
 8005192:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	431a      	orrs	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80051b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3728      	adds	r7, #40	; 0x28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	fe00e800 	.word	0xfe00e800

080051c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	817b      	strh	r3, [r7, #10]
 80051d6:	4613      	mov	r3, r2
 80051d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051da:	897b      	ldrh	r3, [r7, #10]
 80051dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051e0:	7a7b      	ldrb	r3, [r7, #9]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051e8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051f6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	0d5b      	lsrs	r3, r3, #21
 8005202:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005206:	4b08      	ldr	r3, [pc, #32]	; (8005228 <I2C_TransferConfig+0x60>)
 8005208:	430b      	orrs	r3, r1
 800520a:	43db      	mvns	r3, r3
 800520c:	ea02 0103 	and.w	r1, r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	03ff63ff 	.word	0x03ff63ff

0800522c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b20      	cmp	r3, #32
 8005240:	d138      	bne.n	80052b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800524c:	2302      	movs	r3, #2
 800524e:	e032      	b.n	80052b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2224      	movs	r2, #36	; 0x24
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0201 	bic.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800527e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6819      	ldr	r1, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d139      	bne.n	800534c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e033      	b.n	800534e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2224      	movs	r2, #36	; 0x24
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005314:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800534c:	2302      	movs	r3, #2
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d141      	bne.n	80053ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800536a:	4b4b      	ldr	r3, [pc, #300]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d131      	bne.n	80053dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005378:	4b47      	ldr	r3, [pc, #284]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800537e:	4a46      	ldr	r2, [pc, #280]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005388:	4b43      	ldr	r3, [pc, #268]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005390:	4a41      	ldr	r2, [pc, #260]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005398:	4b40      	ldr	r3, [pc, #256]	; (800549c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2232      	movs	r2, #50	; 0x32
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	4a3f      	ldr	r2, [pc, #252]	; (80054a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	0c9b      	lsrs	r3, r3, #18
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053ae:	e002      	b.n	80053b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053b6:	4b38      	ldr	r3, [pc, #224]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c2:	d102      	bne.n	80053ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f2      	bne.n	80053b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053ca:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d6:	d158      	bne.n	800548a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e057      	b.n	800548c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053dc:	4b2e      	ldr	r3, [pc, #184]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e2:	4a2d      	ldr	r2, [pc, #180]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80053ec:	e04d      	b.n	800548a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f4:	d141      	bne.n	800547a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053f6:	4b28      	ldr	r3, [pc, #160]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005402:	d131      	bne.n	8005468 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005404:	4b24      	ldr	r3, [pc, #144]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800540a:	4a23      	ldr	r2, [pc, #140]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005410:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005414:	4b20      	ldr	r3, [pc, #128]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800541c:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800541e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005422:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005424:	4b1d      	ldr	r3, [pc, #116]	; (800549c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2232      	movs	r2, #50	; 0x32
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	0c9b      	lsrs	r3, r3, #18
 8005436:	3301      	adds	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800543a:	e002      	b.n	8005442 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3b01      	subs	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544e:	d102      	bne.n	8005456 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f2      	bne.n	800543c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005456:	4b10      	ldr	r3, [pc, #64]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005462:	d112      	bne.n	800548a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e011      	b.n	800548c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546e:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005478:	e007      	b.n	800548a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005482:	4a05      	ldr	r2, [pc, #20]	; (8005498 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005488:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40007000 	.word	0x40007000
 800549c:	20000008 	.word	0x20000008
 80054a0:	431bde83 	.word	0x431bde83

080054a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054b2:	6093      	str	r3, [r2, #8]
}
 80054b4:	bf00      	nop
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40007000 	.word	0x40007000

080054c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e306      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d075      	beq.n	80055ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e2:	4b97      	ldr	r3, [pc, #604]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ec:	4b94      	ldr	r3, [pc, #592]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	d102      	bne.n	8005502 <HAL_RCC_OscConfig+0x3e>
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d002      	beq.n	8005508 <HAL_RCC_OscConfig+0x44>
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d10b      	bne.n	8005520 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005508:	4b8d      	ldr	r3, [pc, #564]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d05b      	beq.n	80055cc <HAL_RCC_OscConfig+0x108>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d157      	bne.n	80055cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e2e1      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005528:	d106      	bne.n	8005538 <HAL_RCC_OscConfig+0x74>
 800552a:	4b85      	ldr	r3, [pc, #532]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a84      	ldr	r2, [pc, #528]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	e01d      	b.n	8005574 <HAL_RCC_OscConfig+0xb0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005540:	d10c      	bne.n	800555c <HAL_RCC_OscConfig+0x98>
 8005542:	4b7f      	ldr	r3, [pc, #508]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a7e      	ldr	r2, [pc, #504]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	4b7c      	ldr	r3, [pc, #496]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a7b      	ldr	r2, [pc, #492]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e00b      	b.n	8005574 <HAL_RCC_OscConfig+0xb0>
 800555c:	4b78      	ldr	r3, [pc, #480]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a77      	ldr	r2, [pc, #476]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	4b75      	ldr	r3, [pc, #468]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a74      	ldr	r2, [pc, #464]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800556e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d013      	beq.n	80055a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7fd f848 	bl	8002610 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005584:	f7fd f844 	bl	8002610 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b64      	cmp	r3, #100	; 0x64
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e2a6      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005596:	4b6a      	ldr	r3, [pc, #424]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0xc0>
 80055a2:	e014      	b.n	80055ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fd f834 	bl	8002610 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055ac:	f7fd f830 	bl	8002610 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b64      	cmp	r3, #100	; 0x64
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e292      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055be:	4b60      	ldr	r3, [pc, #384]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0xe8>
 80055ca:	e000      	b.n	80055ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d075      	beq.n	80056c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055da:	4b59      	ldr	r3, [pc, #356]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055e4:	4b56      	ldr	r3, [pc, #344]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0303 	and.w	r3, r3, #3
 80055ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d102      	bne.n	80055fa <HAL_RCC_OscConfig+0x136>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d002      	beq.n	8005600 <HAL_RCC_OscConfig+0x13c>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d11f      	bne.n	8005640 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005600:	4b4f      	ldr	r3, [pc, #316]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_RCC_OscConfig+0x154>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e265      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005618:	4b49      	ldr	r3, [pc, #292]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	061b      	lsls	r3, r3, #24
 8005626:	4946      	ldr	r1, [pc, #280]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005628:	4313      	orrs	r3, r2
 800562a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800562c:	4b45      	ldr	r3, [pc, #276]	; (8005744 <HAL_RCC_OscConfig+0x280>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f7fc ffa1 	bl	8002578 <HAL_InitTick>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d043      	beq.n	80056c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e251      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d023      	beq.n	8005690 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005648:	4b3d      	ldr	r3, [pc, #244]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a3c      	ldr	r2, [pc, #240]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800564e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fc ffdc 	bl	8002610 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800565c:	f7fc ffd8 	bl	8002610 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e23a      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800566e:	4b34      	ldr	r3, [pc, #208]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567a:	4b31      	ldr	r3, [pc, #196]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	061b      	lsls	r3, r3, #24
 8005688:	492d      	ldr	r1, [pc, #180]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800568a:	4313      	orrs	r3, r2
 800568c:	604b      	str	r3, [r1, #4]
 800568e:	e01a      	b.n	80056c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005690:	4b2b      	ldr	r3, [pc, #172]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800569a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569c:	f7fc ffb8 	bl	8002610 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a4:	f7fc ffb4 	bl	8002610 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e216      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056b6:	4b22      	ldr	r3, [pc, #136]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f0      	bne.n	80056a4 <HAL_RCC_OscConfig+0x1e0>
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d041      	beq.n	8005756 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01c      	beq.n	8005714 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056da:	4b19      	ldr	r3, [pc, #100]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 80056dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e0:	4a17      	ldr	r2, [pc, #92]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fc ff91 	bl	8002610 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f2:	f7fc ff8d 	bl	8002610 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e1ef      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005704:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0ef      	beq.n	80056f2 <HAL_RCC_OscConfig+0x22e>
 8005712:	e020      	b.n	8005756 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 8005716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800571a:	4a09      	ldr	r2, [pc, #36]	; (8005740 <HAL_RCC_OscConfig+0x27c>)
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005724:	f7fc ff74 	bl	8002610 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800572a:	e00d      	b.n	8005748 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800572c:	f7fc ff70 	bl	8002610 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d906      	bls.n	8005748 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e1d2      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000
 8005744:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005748:	4b8c      	ldr	r3, [pc, #560]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 800574a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1ea      	bne.n	800572c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 80a6 	beq.w	80058b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005764:	2300      	movs	r3, #0
 8005766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005768:	4b84      	ldr	r3, [pc, #528]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 800576a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_RCC_OscConfig+0x2b4>
 8005774:	2301      	movs	r3, #1
 8005776:	e000      	b.n	800577a <HAL_RCC_OscConfig+0x2b6>
 8005778:	2300      	movs	r3, #0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800577e:	4b7f      	ldr	r3, [pc, #508]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005782:	4a7e      	ldr	r2, [pc, #504]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005788:	6593      	str	r3, [r2, #88]	; 0x58
 800578a:	4b7c      	ldr	r3, [pc, #496]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 800578c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005796:	2301      	movs	r3, #1
 8005798:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800579a:	4b79      	ldr	r3, [pc, #484]	; (8005980 <HAL_RCC_OscConfig+0x4bc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d118      	bne.n	80057d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057a6:	4b76      	ldr	r3, [pc, #472]	; (8005980 <HAL_RCC_OscConfig+0x4bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a75      	ldr	r2, [pc, #468]	; (8005980 <HAL_RCC_OscConfig+0x4bc>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057b2:	f7fc ff2d 	bl	8002610 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ba:	f7fc ff29 	bl	8002610 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e18b      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057cc:	4b6c      	ldr	r3, [pc, #432]	; (8005980 <HAL_RCC_OscConfig+0x4bc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d108      	bne.n	80057f2 <HAL_RCC_OscConfig+0x32e>
 80057e0:	4b66      	ldr	r3, [pc, #408]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	4a65      	ldr	r2, [pc, #404]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057f0:	e024      	b.n	800583c <HAL_RCC_OscConfig+0x378>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b05      	cmp	r3, #5
 80057f8:	d110      	bne.n	800581c <HAL_RCC_OscConfig+0x358>
 80057fa:	4b60      	ldr	r3, [pc, #384]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 80057fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005800:	4a5e      	ldr	r2, [pc, #376]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005802:	f043 0304 	orr.w	r3, r3, #4
 8005806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800580a:	4b5c      	ldr	r3, [pc, #368]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	4a5a      	ldr	r2, [pc, #360]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800581a:	e00f      	b.n	800583c <HAL_RCC_OscConfig+0x378>
 800581c:	4b57      	ldr	r3, [pc, #348]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005822:	4a56      	ldr	r2, [pc, #344]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800582c:	4b53      	ldr	r3, [pc, #332]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	4a52      	ldr	r2, [pc, #328]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d016      	beq.n	8005872 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005844:	f7fc fee4 	bl	8002610 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800584a:	e00a      	b.n	8005862 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584c:	f7fc fee0 	bl	8002610 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e140      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005862:	4b46      	ldr	r3, [pc, #280]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0ed      	beq.n	800584c <HAL_RCC_OscConfig+0x388>
 8005870:	e015      	b.n	800589e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005872:	f7fc fecd 	bl	8002610 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005878:	e00a      	b.n	8005890 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587a:	f7fc fec9 	bl	8002610 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f241 3288 	movw	r2, #5000	; 0x1388
 8005888:	4293      	cmp	r3, r2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e129      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005890:	4b3a      	ldr	r3, [pc, #232]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1ed      	bne.n	800587a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800589e:	7ffb      	ldrb	r3, [r7, #31]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d105      	bne.n	80058b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a4:	4b35      	ldr	r3, [pc, #212]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a8:	4a34      	ldr	r2, [pc, #208]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 80058aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d03c      	beq.n	8005936 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01c      	beq.n	80058fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058c4:	4b2d      	ldr	r3, [pc, #180]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 80058c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058ca:	4a2c      	ldr	r2, [pc, #176]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d4:	f7fc fe9c 	bl	8002610 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058dc:	f7fc fe98 	bl	8002610 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e0fa      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058ee:	4b23      	ldr	r3, [pc, #140]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 80058f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0ef      	beq.n	80058dc <HAL_RCC_OscConfig+0x418>
 80058fc:	e01b      	b.n	8005936 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058fe:	4b1f      	ldr	r3, [pc, #124]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005904:	4a1d      	ldr	r2, [pc, #116]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005906:	f023 0301 	bic.w	r3, r3, #1
 800590a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590e:	f7fc fe7f 	bl	8002610 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005914:	e008      	b.n	8005928 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005916:	f7fc fe7b 	bl	8002610 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e0dd      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 800592a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1ef      	bne.n	8005916 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80d1 	beq.w	8005ae2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 030c 	and.w	r3, r3, #12
 8005948:	2b0c      	cmp	r3, #12
 800594a:	f000 808b 	beq.w	8005a64 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d15e      	bne.n	8005a14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a08      	ldr	r2, [pc, #32]	; (800597c <HAL_RCC_OscConfig+0x4b8>)
 800595c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fc fe55 	bl	8002610 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005968:	e00c      	b.n	8005984 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596a:	f7fc fe51 	bl	8002610 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d905      	bls.n	8005984 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e0b3      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
 800597c:	40021000 	.word	0x40021000
 8005980:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005984:	4b59      	ldr	r3, [pc, #356]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ec      	bne.n	800596a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005990:	4b56      	ldr	r3, [pc, #344]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	4b56      	ldr	r3, [pc, #344]	; (8005af0 <HAL_RCC_OscConfig+0x62c>)
 8005996:	4013      	ands	r3, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6a11      	ldr	r1, [r2, #32]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059a0:	3a01      	subs	r2, #1
 80059a2:	0112      	lsls	r2, r2, #4
 80059a4:	4311      	orrs	r1, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80059aa:	0212      	lsls	r2, r2, #8
 80059ac:	4311      	orrs	r1, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059b2:	0852      	lsrs	r2, r2, #1
 80059b4:	3a01      	subs	r2, #1
 80059b6:	0552      	lsls	r2, r2, #21
 80059b8:	4311      	orrs	r1, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059be:	0852      	lsrs	r2, r2, #1
 80059c0:	3a01      	subs	r2, #1
 80059c2:	0652      	lsls	r2, r2, #25
 80059c4:	4311      	orrs	r1, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059ca:	06d2      	lsls	r2, r2, #27
 80059cc:	430a      	orrs	r2, r1
 80059ce:	4947      	ldr	r1, [pc, #284]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d4:	4b45      	ldr	r3, [pc, #276]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a44      	ldr	r2, [pc, #272]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 80059da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059e0:	4b42      	ldr	r3, [pc, #264]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4a41      	ldr	r2, [pc, #260]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 80059e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ec:	f7fc fe10 	bl	8002610 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f4:	f7fc fe0c 	bl	8002610 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e06e      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a06:	4b39      	ldr	r3, [pc, #228]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x530>
 8005a12:	e066      	b.n	8005ae2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a14:	4b35      	ldr	r3, [pc, #212]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a34      	ldr	r2, [pc, #208]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a1e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005a20:	4b32      	ldr	r3, [pc, #200]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	4a31      	ldr	r2, [pc, #196]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005a26:	f023 0303 	bic.w	r3, r3, #3
 8005a2a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a2c:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4a2e      	ldr	r2, [pc, #184]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005a32:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3c:	f7fc fde8 	bl	8002610 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fc fde4 	bl	8002610 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e046      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a56:	4b25      	ldr	r3, [pc, #148]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f0      	bne.n	8005a44 <HAL_RCC_OscConfig+0x580>
 8005a62:	e03e      	b.n	8005ae2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e039      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005a70:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <HAL_RCC_OscConfig+0x628>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f003 0203 	and.w	r2, r3, #3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d12c      	bne.n	8005ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d123      	bne.n	8005ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d11b      	bne.n	8005ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d113      	bne.n	8005ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d109      	bne.n	8005ade <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d001      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40021000 	.word	0x40021000
 8005af0:	019f800c 	.word	0x019f800c

08005af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e11e      	b.n	8005d4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b0c:	4b91      	ldr	r3, [pc, #580]	; (8005d54 <HAL_RCC_ClockConfig+0x260>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d910      	bls.n	8005b3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1a:	4b8e      	ldr	r3, [pc, #568]	; (8005d54 <HAL_RCC_ClockConfig+0x260>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 020f 	bic.w	r2, r3, #15
 8005b22:	498c      	ldr	r1, [pc, #560]	; (8005d54 <HAL_RCC_ClockConfig+0x260>)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2a:	4b8a      	ldr	r3, [pc, #552]	; (8005d54 <HAL_RCC_ClockConfig+0x260>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d001      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e106      	b.n	8005d4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d073      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d129      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b50:	4b81      	ldr	r3, [pc, #516]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d101      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0f4      	b.n	8005d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b60:	f000 f99e 	bl	8005ea0 <RCC_GetSysClockFreqFromPLLSource>
 8005b64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4a7c      	ldr	r2, [pc, #496]	; (8005d5c <HAL_RCC_ClockConfig+0x268>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d93f      	bls.n	8005bee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b6e:	4b7a      	ldr	r3, [pc, #488]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d033      	beq.n	8005bee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d12f      	bne.n	8005bee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b8e:	4b72      	ldr	r3, [pc, #456]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b96:	4a70      	ldr	r2, [pc, #448]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b9e:	2380      	movs	r3, #128	; 0x80
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	e024      	b.n	8005bee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d107      	bne.n	8005bbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bac:	4b6a      	ldr	r3, [pc, #424]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0c6      	b.n	8005d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bbc:	4b66      	ldr	r3, [pc, #408]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0be      	b.n	8005d4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005bcc:	f000 f8ce 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8005bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4a61      	ldr	r2, [pc, #388]	; (8005d5c <HAL_RCC_ClockConfig+0x268>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d909      	bls.n	8005bee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bda:	4b5f      	ldr	r3, [pc, #380]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be2:	4a5d      	ldr	r2, [pc, #372]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005bea:	2380      	movs	r3, #128	; 0x80
 8005bec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bee:	4b5a      	ldr	r3, [pc, #360]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f023 0203 	bic.w	r2, r3, #3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4957      	ldr	r1, [pc, #348]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c00:	f7fc fd06 	bl	8002610 <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c06:	e00a      	b.n	8005c1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c08:	f7fc fd02 	bl	8002610 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e095      	b.n	8005d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1e:	4b4e      	ldr	r3, [pc, #312]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 020c 	and.w	r2, r3, #12
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d1eb      	bne.n	8005c08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d023      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c48:	4b43      	ldr	r3, [pc, #268]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4a42      	ldr	r2, [pc, #264]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c60:	4b3d      	ldr	r3, [pc, #244]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c68:	4a3b      	ldr	r2, [pc, #236]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005c6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c70:	4b39      	ldr	r3, [pc, #228]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	4936      	ldr	r1, [pc, #216]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	608b      	str	r3, [r1, #8]
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b80      	cmp	r3, #128	; 0x80
 8005c88:	d105      	bne.n	8005c96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c8a:	4b33      	ldr	r3, [pc, #204]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	4a32      	ldr	r2, [pc, #200]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c96:	4b2f      	ldr	r3, [pc, #188]	; (8005d54 <HAL_RCC_ClockConfig+0x260>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d21d      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca4:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <HAL_RCC_ClockConfig+0x260>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f023 020f 	bic.w	r2, r3, #15
 8005cac:	4929      	ldr	r1, [pc, #164]	; (8005d54 <HAL_RCC_ClockConfig+0x260>)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cb4:	f7fc fcac 	bl	8002610 <HAL_GetTick>
 8005cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cba:	e00a      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cbc:	f7fc fca8 	bl	8002610 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e03b      	b.n	8005d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd2:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <HAL_RCC_ClockConfig+0x260>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d1ed      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cec:	4b1a      	ldr	r3, [pc, #104]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	4917      	ldr	r1, [pc, #92]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d0a:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	490f      	ldr	r1, [pc, #60]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d1e:	f000 f825 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8005d22:	4602      	mov	r2, r0
 8005d24:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <HAL_RCC_ClockConfig+0x264>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	091b      	lsrs	r3, r3, #4
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	490c      	ldr	r1, [pc, #48]	; (8005d60 <HAL_RCC_ClockConfig+0x26c>)
 8005d30:	5ccb      	ldrb	r3, [r1, r3]
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3a:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <HAL_RCC_ClockConfig+0x270>)
 8005d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <HAL_RCC_ClockConfig+0x274>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fc fc18 	bl	8002578 <HAL_InitTick>
 8005d48:	4603      	mov	r3, r0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40022000 	.word	0x40022000
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	04c4b400 	.word	0x04c4b400
 8005d60:	0800b8c0 	.word	0x0800b8c0
 8005d64:	20000008 	.word	0x20000008
 8005d68:	2000000c 	.word	0x2000000c

08005d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d72:	4b2c      	ldr	r3, [pc, #176]	; (8005e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d102      	bne.n	8005d84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d7e:	4b2a      	ldr	r3, [pc, #168]	; (8005e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	e047      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005d84:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 030c 	and.w	r3, r3, #12
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d102      	bne.n	8005d96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d90:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	e03e      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005d96:	4b23      	ldr	r3, [pc, #140]	; (8005e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b0c      	cmp	r3, #12
 8005da0:	d136      	bne.n	8005e10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005da2:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dac:	4b1d      	ldr	r3, [pc, #116]	; (8005e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	3301      	adds	r3, #1
 8005db8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d10c      	bne.n	8005dda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dc0:	4a1a      	ldr	r2, [pc, #104]	; (8005e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc8:	4a16      	ldr	r2, [pc, #88]	; (8005e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dca:	68d2      	ldr	r2, [r2, #12]
 8005dcc:	0a12      	lsrs	r2, r2, #8
 8005dce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005dd2:	fb02 f303 	mul.w	r3, r2, r3
 8005dd6:	617b      	str	r3, [r7, #20]
      break;
 8005dd8:	e00c      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dda:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	4a10      	ldr	r2, [pc, #64]	; (8005e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de4:	68d2      	ldr	r2, [r2, #12]
 8005de6:	0a12      	lsrs	r2, r2, #8
 8005de8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005dec:	fb02 f303 	mul.w	r3, r2, r3
 8005df0:	617b      	str	r3, [r7, #20]
      break;
 8005df2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005df4:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	0e5b      	lsrs	r3, r3, #25
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	3301      	adds	r3, #1
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	e001      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e14:	693b      	ldr	r3, [r7, #16]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40021000 	.word	0x40021000
 8005e28:	00f42400 	.word	0x00f42400
 8005e2c:	007a1200 	.word	0x007a1200

08005e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e34:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e36:	681b      	ldr	r3, [r3, #0]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20000008 	.word	0x20000008

08005e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e4c:	f7ff fff0 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005e50:	4602      	mov	r2, r0
 8005e52:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	4904      	ldr	r1, [pc, #16]	; (8005e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e5e:	5ccb      	ldrb	r3, [r1, r3]
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	0800b8d0 	.word	0x0800b8d0

08005e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e78:	f7ff ffda 	bl	8005e30 <HAL_RCC_GetHCLKFreq>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	0adb      	lsrs	r3, r3, #11
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	4904      	ldr	r1, [pc, #16]	; (8005e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e8a:	5ccb      	ldrb	r3, [r1, r3]
 8005e8c:	f003 031f 	and.w	r3, r3, #31
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	0800b8d0 	.word	0x0800b8d0

08005ea0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ea6:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005eb0:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d10c      	bne.n	8005ede <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ec4:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ece:	68d2      	ldr	r2, [r2, #12]
 8005ed0:	0a12      	lsrs	r2, r2, #8
 8005ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	617b      	str	r3, [r7, #20]
    break;
 8005edc:	e00c      	b.n	8005ef8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ede:	4a12      	ldr	r2, [pc, #72]	; (8005f28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ee8:	68d2      	ldr	r2, [r2, #12]
 8005eea:	0a12      	lsrs	r2, r2, #8
 8005eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]
    break;
 8005ef6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	0e5b      	lsrs	r3, r3, #25
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	3301      	adds	r3, #1
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f12:	687b      	ldr	r3, [r7, #4]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	40021000 	.word	0x40021000
 8005f24:	007a1200 	.word	0x007a1200
 8005f28:	00f42400 	.word	0x00f42400

08005f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f34:	2300      	movs	r3, #0
 8005f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f38:	2300      	movs	r3, #0
 8005f3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8098 	beq.w	800607a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f4e:	4b43      	ldr	r3, [pc, #268]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10d      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f5a:	4b40      	ldr	r3, [pc, #256]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5e:	4a3f      	ldr	r2, [pc, #252]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f64:	6593      	str	r3, [r2, #88]	; 0x58
 8005f66:	4b3d      	ldr	r3, [pc, #244]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f72:	2301      	movs	r3, #1
 8005f74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f76:	4b3a      	ldr	r3, [pc, #232]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a39      	ldr	r2, [pc, #228]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f82:	f7fc fb45 	bl	8002610 <HAL_GetTick>
 8005f86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f88:	e009      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8a:	f7fc fb41 	bl	8002610 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d902      	bls.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8005f9c:	e005      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f9e:	4b30      	ldr	r3, [pc, #192]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0ef      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d159      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fb0:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01e      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d019      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fcc:	4b23      	ldr	r3, [pc, #140]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fd8:	4b20      	ldr	r3, [pc, #128]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fde:	4a1f      	ldr	r2, [pc, #124]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	4a1b      	ldr	r2, [pc, #108]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ff8:	4a18      	ldr	r2, [pc, #96]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600a:	f7fc fb01 	bl	8002610 <HAL_GetTick>
 800600e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006010:	e00b      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fc fafd 	bl	8002610 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d902      	bls.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	74fb      	strb	r3, [r7, #19]
            break;
 8006028:	e006      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800602c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0ec      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006038:	7cfb      	ldrb	r3, [r7, #19]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	4903      	ldr	r1, [pc, #12]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006054:	e008      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006056:	7cfb      	ldrb	r3, [r7, #19]
 8006058:	74bb      	strb	r3, [r7, #18]
 800605a:	e005      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800605c:	40021000 	.word	0x40021000
 8006060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	7cfb      	ldrb	r3, [r7, #19]
 8006066:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006068:	7c7b      	ldrb	r3, [r7, #17]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d105      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800606e:	4ba6      	ldr	r3, [pc, #664]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	4aa5      	ldr	r2, [pc, #660]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006078:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006086:	4ba0      	ldr	r3, [pc, #640]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608c:	f023 0203 	bic.w	r2, r3, #3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	499c      	ldr	r1, [pc, #624]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060a8:	4b97      	ldr	r3, [pc, #604]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f023 020c 	bic.w	r2, r3, #12
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	4994      	ldr	r1, [pc, #592]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060ca:	4b8f      	ldr	r3, [pc, #572]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	498b      	ldr	r1, [pc, #556]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060ec:	4b86      	ldr	r3, [pc, #536]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	4983      	ldr	r1, [pc, #524]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800610e:	4b7e      	ldr	r3, [pc, #504]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006114:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	497a      	ldr	r1, [pc, #488]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006130:	4b75      	ldr	r3, [pc, #468]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006136:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	4972      	ldr	r1, [pc, #456]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006152:	4b6d      	ldr	r3, [pc, #436]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006158:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	4969      	ldr	r1, [pc, #420]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006174:	4b64      	ldr	r3, [pc, #400]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	4961      	ldr	r1, [pc, #388]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006196:	4b5c      	ldr	r3, [pc, #368]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	4958      	ldr	r1, [pc, #352]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d015      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061b8:	4b53      	ldr	r3, [pc, #332]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	4950      	ldr	r1, [pc, #320]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d6:	d105      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061d8:	4b4b      	ldr	r3, [pc, #300]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4a4a      	ldr	r2, [pc, #296]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d015      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061f0:	4b45      	ldr	r3, [pc, #276]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	4942      	ldr	r1, [pc, #264]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800620e:	d105      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006210:	4b3d      	ldr	r3, [pc, #244]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4a3c      	ldr	r2, [pc, #240]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800621a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d015      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006228:	4b37      	ldr	r3, [pc, #220]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	4934      	ldr	r1, [pc, #208]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006246:	d105      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006248:	4b2f      	ldr	r3, [pc, #188]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	4a2e      	ldr	r2, [pc, #184]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800624e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006252:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d015      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006260:	4b29      	ldr	r3, [pc, #164]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626e:	4926      	ldr	r1, [pc, #152]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800627e:	d105      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006280:	4b21      	ldr	r3, [pc, #132]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4a20      	ldr	r2, [pc, #128]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800628a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d015      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006298:	4b1b      	ldr	r3, [pc, #108]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800629a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	4918      	ldr	r1, [pc, #96]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062b6:	d105      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062b8:	4b13      	ldr	r3, [pc, #76]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4a12      	ldr	r2, [pc, #72]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d015      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80062d0:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062de:	490a      	ldr	r1, [pc, #40]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ee:	d105      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062f0:	4b05      	ldr	r3, [pc, #20]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	4a04      	ldr	r2, [pc, #16]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80062fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3718      	adds	r7, #24
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40021000 	.word	0x40021000

0800630c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e09d      	b.n	800645a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	d108      	bne.n	8006338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800632e:	d009      	beq.n	8006344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	61da      	str	r2, [r3, #28]
 8006336:	e005      	b.n	8006344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fb fe9e 	bl	80020a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006384:	d902      	bls.n	800638c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e002      	b.n	8006392 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800638c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006390:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800639a:	d007      	beq.n	80063ac <HAL_SPI_Init+0xa0>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063a4:	d002      	beq.n	80063ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ee:	ea42 0103 	orr.w	r1, r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	0c1b      	lsrs	r3, r3, #16
 8006408:	f003 0204 	and.w	r2, r3, #4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006428:	ea42 0103 	orr.w	r1, r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006448:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e049      	b.n	8006508 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7fb fe4d 	bl	8002128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2202      	movs	r2, #2
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3304      	adds	r3, #4
 800649e:	4619      	mov	r1, r3
 80064a0:	4610      	mov	r0, r2
 80064a2:	f000 fb7f 	bl	8006ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e049      	b.n	80065b6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f841 	bl	80065be <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3304      	adds	r3, #4
 800654c:	4619      	mov	r1, r3
 800654e:	4610      	mov	r0, r2
 8006550:	f000 fb28 	bl	8006ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e049      	b.n	8006678 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d106      	bne.n	80065fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f841 	bl	8006680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3304      	adds	r3, #4
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f000 fac7 	bl	8006ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80066ae:	2302      	movs	r3, #2
 80066b0:	e066      	b.n	8006780 <HAL_TIM_OC_ConfigChannel+0xec>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b14      	cmp	r3, #20
 80066be:	d857      	bhi.n	8006770 <HAL_TIM_OC_ConfigChannel+0xdc>
 80066c0:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80066c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c6:	bf00      	nop
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006771 	.word	0x08006771
 80066d0:	08006771 	.word	0x08006771
 80066d4:	08006771 	.word	0x08006771
 80066d8:	0800672b 	.word	0x0800672b
 80066dc:	08006771 	.word	0x08006771
 80066e0:	08006771 	.word	0x08006771
 80066e4:	08006771 	.word	0x08006771
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006771 	.word	0x08006771
 80066f0:	08006771 	.word	0x08006771
 80066f4:	08006771 	.word	0x08006771
 80066f8:	08006747 	.word	0x08006747
 80066fc:	08006771 	.word	0x08006771
 8006700:	08006771 	.word	0x08006771
 8006704:	08006771 	.word	0x08006771
 8006708:	08006755 	.word	0x08006755
 800670c:	08006771 	.word	0x08006771
 8006710:	08006771 	.word	0x08006771
 8006714:	08006771 	.word	0x08006771
 8006718:	08006763 	.word	0x08006763
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 face 	bl	8006cc4 <TIM_OC1_SetConfig>
      break;
 8006728:	e025      	b.n	8006776 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fb57 	bl	8006de4 <TIM_OC2_SetConfig>
      break;
 8006736:	e01e      	b.n	8006776 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fbda 	bl	8006ef8 <TIM_OC3_SetConfig>
      break;
 8006744:	e017      	b.n	8006776 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fc5b 	bl	8007008 <TIM_OC4_SetConfig>
      break;
 8006752:	e010      	b.n	8006776 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fcde 	bl	800711c <TIM_OC5_SetConfig>
      break;
 8006760:	e009      	b.n	8006776 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68b9      	ldr	r1, [r7, #8]
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fd3b 	bl	80071e4 <TIM_OC6_SetConfig>
      break;
 800676e:	e002      	b.n	8006776 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	75fb      	strb	r3, [r7, #23]
      break;
 8006774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800677e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067a2:	2302      	movs	r3, #2
 80067a4:	e0ff      	b.n	80069a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b14      	cmp	r3, #20
 80067b2:	f200 80f0 	bhi.w	8006996 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067b6:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	08006811 	.word	0x08006811
 80067c0:	08006997 	.word	0x08006997
 80067c4:	08006997 	.word	0x08006997
 80067c8:	08006997 	.word	0x08006997
 80067cc:	08006851 	.word	0x08006851
 80067d0:	08006997 	.word	0x08006997
 80067d4:	08006997 	.word	0x08006997
 80067d8:	08006997 	.word	0x08006997
 80067dc:	08006893 	.word	0x08006893
 80067e0:	08006997 	.word	0x08006997
 80067e4:	08006997 	.word	0x08006997
 80067e8:	08006997 	.word	0x08006997
 80067ec:	080068d3 	.word	0x080068d3
 80067f0:	08006997 	.word	0x08006997
 80067f4:	08006997 	.word	0x08006997
 80067f8:	08006997 	.word	0x08006997
 80067fc:	08006915 	.word	0x08006915
 8006800:	08006997 	.word	0x08006997
 8006804:	08006997 	.word	0x08006997
 8006808:	08006997 	.word	0x08006997
 800680c:	08006955 	.word	0x08006955
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fa54 	bl	8006cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0208 	orr.w	r2, r2, #8
 800682a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0204 	bic.w	r2, r2, #4
 800683a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6999      	ldr	r1, [r3, #24]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	619a      	str	r2, [r3, #24]
      break;
 800684e:	e0a5      	b.n	800699c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fac4 	bl	8006de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800686a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699a      	ldr	r2, [r3, #24]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800687a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6999      	ldr	r1, [r3, #24]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	021a      	lsls	r2, r3, #8
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	619a      	str	r2, [r3, #24]
      break;
 8006890:	e084      	b.n	800699c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fb2d 	bl	8006ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69da      	ldr	r2, [r3, #28]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f042 0208 	orr.w	r2, r2, #8
 80068ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0204 	bic.w	r2, r2, #4
 80068bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69d9      	ldr	r1, [r3, #28]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	691a      	ldr	r2, [r3, #16]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	61da      	str	r2, [r3, #28]
      break;
 80068d0:	e064      	b.n	800699c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 fb95 	bl	8007008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69da      	ldr	r2, [r3, #28]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69da      	ldr	r2, [r3, #28]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69d9      	ldr	r1, [r3, #28]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	021a      	lsls	r2, r3, #8
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	61da      	str	r2, [r3, #28]
      break;
 8006912:	e043      	b.n	800699c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fbfe 	bl	800711c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0208 	orr.w	r2, r2, #8
 800692e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0204 	bic.w	r2, r2, #4
 800693e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006952:	e023      	b.n	800699c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68b9      	ldr	r1, [r7, #8]
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fc42 	bl	80071e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800696e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	021a      	lsls	r2, r3, #8
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006994:	e002      	b.n	800699c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	75fb      	strb	r3, [r7, #23]
      break;
 800699a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop

080069b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_TIM_ConfigClockSource+0x1c>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e0de      	b.n	8006b8a <HAL_TIM_ConfigClockSource+0x1da>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80069ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a63      	ldr	r2, [pc, #396]	; (8006b94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	f000 80a9 	beq.w	8006b5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006a0c:	4a61      	ldr	r2, [pc, #388]	; (8006b94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	f200 80ae 	bhi.w	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a14:	4a60      	ldr	r2, [pc, #384]	; (8006b98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	f000 80a1 	beq.w	8006b5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006a1c:	4a5e      	ldr	r2, [pc, #376]	; (8006b98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	f200 80a6 	bhi.w	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a24:	4a5d      	ldr	r2, [pc, #372]	; (8006b9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	f000 8099 	beq.w	8006b5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006a2c:	4a5b      	ldr	r2, [pc, #364]	; (8006b9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	f200 809e 	bhi.w	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a34:	4a5a      	ldr	r2, [pc, #360]	; (8006ba0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	f000 8091 	beq.w	8006b5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006a3c:	4a58      	ldr	r2, [pc, #352]	; (8006ba0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	f200 8096 	bhi.w	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a48:	f000 8089 	beq.w	8006b5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006a4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a50:	f200 808e 	bhi.w	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a58:	d03e      	beq.n	8006ad8 <HAL_TIM_ConfigClockSource+0x128>
 8006a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a5e:	f200 8087 	bhi.w	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a66:	f000 8086 	beq.w	8006b76 <HAL_TIM_ConfigClockSource+0x1c6>
 8006a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6e:	d87f      	bhi.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a70:	2b70      	cmp	r3, #112	; 0x70
 8006a72:	d01a      	beq.n	8006aaa <HAL_TIM_ConfigClockSource+0xfa>
 8006a74:	2b70      	cmp	r3, #112	; 0x70
 8006a76:	d87b      	bhi.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a78:	2b60      	cmp	r3, #96	; 0x60
 8006a7a:	d050      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x16e>
 8006a7c:	2b60      	cmp	r3, #96	; 0x60
 8006a7e:	d877      	bhi.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a80:	2b50      	cmp	r3, #80	; 0x50
 8006a82:	d03c      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x14e>
 8006a84:	2b50      	cmp	r3, #80	; 0x50
 8006a86:	d873      	bhi.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a88:	2b40      	cmp	r3, #64	; 0x40
 8006a8a:	d058      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x18e>
 8006a8c:	2b40      	cmp	r3, #64	; 0x40
 8006a8e:	d86f      	bhi.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a90:	2b30      	cmp	r3, #48	; 0x30
 8006a92:	d064      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006a94:	2b30      	cmp	r3, #48	; 0x30
 8006a96:	d86b      	bhi.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	d060      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d867      	bhi.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d05c      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006aa4:	2b10      	cmp	r3, #16
 8006aa6:	d05a      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0x1ae>
 8006aa8:	e062      	b.n	8006b70 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6899      	ldr	r1, [r3, #8]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f000 fc75 	bl	80073a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	609a      	str	r2, [r3, #8]
      break;
 8006ad6:	e04f      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6818      	ldr	r0, [r3, #0]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	6899      	ldr	r1, [r3, #8]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f000 fc5e 	bl	80073a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006afa:	609a      	str	r2, [r3, #8]
      break;
 8006afc:	e03c      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6859      	ldr	r1, [r3, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f000 fbd0 	bl	80072b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2150      	movs	r1, #80	; 0x50
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 fc29 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006b1c:	e02c      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6859      	ldr	r1, [r3, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f000 fbef 	bl	800730e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2160      	movs	r1, #96	; 0x60
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fc19 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006b3c:	e01c      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6859      	ldr	r1, [r3, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f000 fbb0 	bl	80072b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2140      	movs	r1, #64	; 0x40
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fc09 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006b5c:	e00c      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f000 fc00 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006b6e:	e003      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
      break;
 8006b74:	e000      	b.n	8006b78 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	00100070 	.word	0x00100070
 8006b98:	00100040 	.word	0x00100040
 8006b9c:	00100030 	.word	0x00100030
 8006ba0:	00100020 	.word	0x00100020

08006ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3c      	ldr	r2, [pc, #240]	; (8006ca8 <TIM_Base_SetConfig+0x104>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00f      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc2:	d00b      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a39      	ldr	r2, [pc, #228]	; (8006cac <TIM_Base_SetConfig+0x108>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d007      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a38      	ldr	r2, [pc, #224]	; (8006cb0 <TIM_Base_SetConfig+0x10c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a37      	ldr	r2, [pc, #220]	; (8006cb4 <TIM_Base_SetConfig+0x110>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d108      	bne.n	8006bee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2d      	ldr	r2, [pc, #180]	; (8006ca8 <TIM_Base_SetConfig+0x104>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01b      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d017      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2a      	ldr	r2, [pc, #168]	; (8006cac <TIM_Base_SetConfig+0x108>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a29      	ldr	r2, [pc, #164]	; (8006cb0 <TIM_Base_SetConfig+0x10c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00f      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a28      	ldr	r2, [pc, #160]	; (8006cb4 <TIM_Base_SetConfig+0x110>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00b      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a27      	ldr	r2, [pc, #156]	; (8006cb8 <TIM_Base_SetConfig+0x114>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a26      	ldr	r2, [pc, #152]	; (8006cbc <TIM_Base_SetConfig+0x118>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a25      	ldr	r2, [pc, #148]	; (8006cc0 <TIM_Base_SetConfig+0x11c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d108      	bne.n	8006c40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a10      	ldr	r2, [pc, #64]	; (8006ca8 <TIM_Base_SetConfig+0x104>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00f      	beq.n	8006c8c <TIM_Base_SetConfig+0xe8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a11      	ldr	r2, [pc, #68]	; (8006cb4 <TIM_Base_SetConfig+0x110>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00b      	beq.n	8006c8c <TIM_Base_SetConfig+0xe8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a10      	ldr	r2, [pc, #64]	; (8006cb8 <TIM_Base_SetConfig+0x114>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_Base_SetConfig+0xe8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a0f      	ldr	r2, [pc, #60]	; (8006cbc <TIM_Base_SetConfig+0x118>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_Base_SetConfig+0xe8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a0e      	ldr	r2, [pc, #56]	; (8006cc0 <TIM_Base_SetConfig+0x11c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d103      	bne.n	8006c94 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	615a      	str	r2, [r3, #20]
}
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40012c00 	.word	0x40012c00
 8006cac:	40000400 	.word	0x40000400
 8006cb0:	40000800 	.word	0x40000800
 8006cb4:	40013400 	.word	0x40013400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40014400 	.word	0x40014400
 8006cc0:	40014800 	.word	0x40014800

08006cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f023 0201 	bic.w	r2, r3, #1
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f023 0302 	bic.w	r3, r3, #2
 8006d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a2c      	ldr	r2, [pc, #176]	; (8006dd0 <TIM_OC1_SetConfig+0x10c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00f      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <TIM_OC1_SetConfig+0x110>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <TIM_OC1_SetConfig+0x114>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a29      	ldr	r2, [pc, #164]	; (8006ddc <TIM_OC1_SetConfig+0x118>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC1_SetConfig+0x80>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a28      	ldr	r2, [pc, #160]	; (8006de0 <TIM_OC1_SetConfig+0x11c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d10c      	bne.n	8006d5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0308 	bic.w	r3, r3, #8
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f023 0304 	bic.w	r3, r3, #4
 8006d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <TIM_OC1_SetConfig+0x10c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00f      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a1a      	ldr	r2, [pc, #104]	; (8006dd4 <TIM_OC1_SetConfig+0x110>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a19      	ldr	r2, [pc, #100]	; (8006dd8 <TIM_OC1_SetConfig+0x114>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d007      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <TIM_OC1_SetConfig+0x118>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_OC1_SetConfig+0xc2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a17      	ldr	r2, [pc, #92]	; (8006de0 <TIM_OC1_SetConfig+0x11c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d111      	bne.n	8006daa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	621a      	str	r2, [r3, #32]
}
 8006dc4:	bf00      	nop
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40013400 	.word	0x40013400
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800

08006de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f023 0210 	bic.w	r2, r3, #16
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	021b      	lsls	r3, r3, #8
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f023 0320 	bic.w	r3, r3, #32
 8006e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a28      	ldr	r2, [pc, #160]	; (8006ee4 <TIM_OC2_SetConfig+0x100>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_OC2_SetConfig+0x6c>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <TIM_OC2_SetConfig+0x104>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10d      	bne.n	8006e6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <TIM_OC2_SetConfig+0x100>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00f      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <TIM_OC2_SetConfig+0x104>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00b      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <TIM_OC2_SetConfig+0x108>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d007      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a1a      	ldr	r2, [pc, #104]	; (8006ef0 <TIM_OC2_SetConfig+0x10c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d003      	beq.n	8006e94 <TIM_OC2_SetConfig+0xb0>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a19      	ldr	r2, [pc, #100]	; (8006ef4 <TIM_OC2_SetConfig+0x110>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d113      	bne.n	8006ebc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40012c00 	.word	0x40012c00
 8006ee8:	40013400 	.word	0x40013400
 8006eec:	40014000 	.word	0x40014000
 8006ef0:	40014400 	.word	0x40014400
 8006ef4:	40014800 	.word	0x40014800

08006ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0303 	bic.w	r3, r3, #3
 8006f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a27      	ldr	r2, [pc, #156]	; (8006ff4 <TIM_OC3_SetConfig+0xfc>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC3_SetConfig+0x6a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a26      	ldr	r2, [pc, #152]	; (8006ff8 <TIM_OC3_SetConfig+0x100>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d10d      	bne.n	8006f7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1c      	ldr	r2, [pc, #112]	; (8006ff4 <TIM_OC3_SetConfig+0xfc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00f      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <TIM_OC3_SetConfig+0x100>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00b      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1a      	ldr	r2, [pc, #104]	; (8006ffc <TIM_OC3_SetConfig+0x104>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d007      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a19      	ldr	r2, [pc, #100]	; (8007000 <TIM_OC3_SetConfig+0x108>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_OC3_SetConfig+0xae>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a18      	ldr	r2, [pc, #96]	; (8007004 <TIM_OC3_SetConfig+0x10c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d113      	bne.n	8006fce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	621a      	str	r2, [r3, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	40012c00 	.word	0x40012c00
 8006ff8:	40013400 	.word	0x40013400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800703a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	031b      	lsls	r3, r3, #12
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a28      	ldr	r2, [pc, #160]	; (8007108 <TIM_OC4_SetConfig+0x100>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d003      	beq.n	8007074 <TIM_OC4_SetConfig+0x6c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a27      	ldr	r2, [pc, #156]	; (800710c <TIM_OC4_SetConfig+0x104>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d10d      	bne.n	8007090 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800707a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	031b      	lsls	r3, r3, #12
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800708e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a1d      	ldr	r2, [pc, #116]	; (8007108 <TIM_OC4_SetConfig+0x100>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d00f      	beq.n	80070b8 <TIM_OC4_SetConfig+0xb0>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a1c      	ldr	r2, [pc, #112]	; (800710c <TIM_OC4_SetConfig+0x104>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00b      	beq.n	80070b8 <TIM_OC4_SetConfig+0xb0>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a1b      	ldr	r2, [pc, #108]	; (8007110 <TIM_OC4_SetConfig+0x108>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d007      	beq.n	80070b8 <TIM_OC4_SetConfig+0xb0>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <TIM_OC4_SetConfig+0x10c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d003      	beq.n	80070b8 <TIM_OC4_SetConfig+0xb0>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a19      	ldr	r2, [pc, #100]	; (8007118 <TIM_OC4_SetConfig+0x110>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d113      	bne.n	80070e0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	019b      	lsls	r3, r3, #6
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	019b      	lsls	r3, r3, #6
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	621a      	str	r2, [r3, #32]
}
 80070fa:	bf00      	nop
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40012c00 	.word	0x40012c00
 800710c:	40013400 	.word	0x40013400
 8007110:	40014000 	.word	0x40014000
 8007114:	40014400 	.word	0x40014400
 8007118:	40014800 	.word	0x40014800

0800711c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800714a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007160:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	041b      	lsls	r3, r3, #16
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a17      	ldr	r2, [pc, #92]	; (80071d0 <TIM_OC5_SetConfig+0xb4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00f      	beq.n	8007196 <TIM_OC5_SetConfig+0x7a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a16      	ldr	r2, [pc, #88]	; (80071d4 <TIM_OC5_SetConfig+0xb8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00b      	beq.n	8007196 <TIM_OC5_SetConfig+0x7a>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a15      	ldr	r2, [pc, #84]	; (80071d8 <TIM_OC5_SetConfig+0xbc>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d007      	beq.n	8007196 <TIM_OC5_SetConfig+0x7a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a14      	ldr	r2, [pc, #80]	; (80071dc <TIM_OC5_SetConfig+0xc0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d003      	beq.n	8007196 <TIM_OC5_SetConfig+0x7a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <TIM_OC5_SetConfig+0xc4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d109      	bne.n	80071aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800719c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	621a      	str	r2, [r3, #32]
}
 80071c4:	bf00      	nop
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	40013400 	.word	0x40013400
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40014400 	.word	0x40014400
 80071e0:	40014800 	.word	0x40014800

080071e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800722a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	051b      	lsls	r3, r3, #20
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a18      	ldr	r2, [pc, #96]	; (800729c <TIM_OC6_SetConfig+0xb8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00f      	beq.n	8007260 <TIM_OC6_SetConfig+0x7c>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a17      	ldr	r2, [pc, #92]	; (80072a0 <TIM_OC6_SetConfig+0xbc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00b      	beq.n	8007260 <TIM_OC6_SetConfig+0x7c>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a16      	ldr	r2, [pc, #88]	; (80072a4 <TIM_OC6_SetConfig+0xc0>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d007      	beq.n	8007260 <TIM_OC6_SetConfig+0x7c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <TIM_OC6_SetConfig+0xc4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC6_SetConfig+0x7c>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a14      	ldr	r2, [pc, #80]	; (80072ac <TIM_OC6_SetConfig+0xc8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d109      	bne.n	8007274 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007266:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	029b      	lsls	r3, r3, #10
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40012c00 	.word	0x40012c00
 80072a0:	40013400 	.word	0x40013400
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800

080072b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f023 0201 	bic.w	r2, r3, #1
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f023 030a 	bic.w	r3, r3, #10
 80072ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800730e:	b480      	push	{r7}
 8007310:	b087      	sub	sp, #28
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f023 0210 	bic.w	r2, r3, #16
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	031b      	lsls	r3, r3, #12
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800734a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	621a      	str	r2, [r3, #32]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4313      	orrs	r3, r2
 8007390:	f043 0307 	orr.w	r3, r3, #7
 8007394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	609a      	str	r2, [r3, #8]
}
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	021a      	lsls	r2, r3, #8
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	609a      	str	r2, [r3, #8]
}
 80073dc:	bf00      	nop
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e065      	b.n	80074cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2c      	ldr	r2, [pc, #176]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d004      	beq.n	8007434 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2b      	ldr	r2, [pc, #172]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d108      	bne.n	8007446 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800743a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800744c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007450:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d018      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007476:	d013      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a18      	ldr	r2, [pc, #96]	; (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d00e      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a17      	ldr	r2, [pc, #92]	; (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d009      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a12      	ldr	r2, [pc, #72]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d004      	beq.n	80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d10c      	bne.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40013400 	.word	0x40013400
 80074e0:	40000400 	.word	0x40000400
 80074e4:	40000800 	.word	0x40000800
 80074e8:	40014000 	.word	0x40014000

080074ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007504:	2302      	movs	r3, #2
 8007506:	e087      	b.n	8007618 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	041b      	lsls	r3, r3, #16
 800757e:	4313      	orrs	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a27      	ldr	r2, [pc, #156]	; (8007624 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d004      	beq.n	8007596 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a25      	ldr	r2, [pc, #148]	; (8007628 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d106      	bne.n	80075a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a1e      	ldr	r2, [pc, #120]	; (8007624 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d004      	beq.n	80075b8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a1d      	ldr	r2, [pc, #116]	; (8007628 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d126      	bne.n	8007606 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c2:	051b      	lsls	r3, r3, #20
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a0e      	ldr	r2, [pc, #56]	; (8007624 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d004      	beq.n	80075f8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a0d      	ldr	r2, [pc, #52]	; (8007628 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d106      	bne.n	8007606 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	40012c00 	.word	0x40012c00
 8007628:	40013400 	.word	0x40013400

0800762c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e042      	b.n	80076c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007644:	2b00      	cmp	r3, #0
 8007646:	d106      	bne.n	8007656 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7fa fdd5 	bl	8002200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2224      	movs	r2, #36	; 0x24
 800765a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fbfa 	bl	8007e68 <UART_SetConfig>
 8007674:	4603      	mov	r3, r0
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e022      	b.n	80076c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 feba 	bl	8008400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800769a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0201 	orr.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 ff41 	bl	8008544 <UART_CheckIdleState>
 80076c2:	4603      	mov	r3, r0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	; 0x28
 80076d0:	af02      	add	r7, sp, #8
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	4613      	mov	r3, r2
 80076da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	f040 8083 	bne.w	80077ee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <HAL_UART_Transmit+0x28>
 80076ee:	88fb      	ldrh	r3, [r7, #6]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e07b      	b.n	80077f0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_UART_Transmit+0x3a>
 8007702:	2302      	movs	r3, #2
 8007704:	e074      	b.n	80077f0 <HAL_UART_Transmit+0x124>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2221      	movs	r2, #33	; 0x21
 800771a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800771e:	f7fa ff77 	bl	8002610 <HAL_GetTick>
 8007722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	88fa      	ldrh	r2, [r7, #6]
 8007728:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	88fa      	ldrh	r2, [r7, #6]
 8007730:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800773c:	d108      	bne.n	8007750 <HAL_UART_Transmit+0x84>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	e003      	b.n	8007758 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007760:	e02c      	b.n	80077bc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2200      	movs	r2, #0
 800776a:	2180      	movs	r1, #128	; 0x80
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 ff34 	bl	80085da <UART_WaitOnFlagUntilTimeout>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e039      	b.n	80077f0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10b      	bne.n	800779a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007790:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	3302      	adds	r3, #2
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	e007      	b.n	80077aa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	781a      	ldrb	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1cc      	bne.n	8007762 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2200      	movs	r2, #0
 80077d0:	2140      	movs	r1, #64	; 0x40
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 ff01 	bl	80085da <UART_WaitOnFlagUntilTimeout>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e006      	b.n	80077f0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	e000      	b.n	80077f0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80077ee:	2302      	movs	r3, #2
  }
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3720      	adds	r7, #32
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b0ba      	sub	sp, #232	; 0xe8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800781e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007822:	f640 030f 	movw	r3, #2063	; 0x80f
 8007826:	4013      	ands	r3, r2
 8007828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800782c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007830:	2b00      	cmp	r3, #0
 8007832:	d11b      	bne.n	800786c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d015      	beq.n	800786c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	d105      	bne.n	8007858 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800784c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d009      	beq.n	800786c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 82d6 	beq.w	8007e0e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
      }
      return;
 800786a:	e2d0      	b.n	8007e0e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800786c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 811f 	beq.w	8007ab4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007876:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800787a:	4b8b      	ldr	r3, [pc, #556]	; (8007aa8 <HAL_UART_IRQHandler+0x2b0>)
 800787c:	4013      	ands	r3, r2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007882:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007886:	4b89      	ldr	r3, [pc, #548]	; (8007aac <HAL_UART_IRQHandler+0x2b4>)
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 8112 	beq.w	8007ab4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d011      	beq.n	80078c0 <HAL_UART_IRQHandler+0xc8>
 800789c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2201      	movs	r2, #1
 80078ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b6:	f043 0201 	orr.w	r2, r3, #1
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d011      	beq.n	80078f0 <HAL_UART_IRQHandler+0xf8>
 80078cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00b      	beq.n	80078f0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2202      	movs	r2, #2
 80078de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e6:	f043 0204 	orr.w	r2, r3, #4
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d011      	beq.n	8007920 <HAL_UART_IRQHandler+0x128>
 80078fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00b      	beq.n	8007920 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2204      	movs	r2, #4
 800790e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007916:	f043 0202 	orr.w	r2, r3, #2
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b00      	cmp	r3, #0
 800792a:	d017      	beq.n	800795c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800792c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b00      	cmp	r3, #0
 8007936:	d105      	bne.n	8007944 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007938:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800793c:	4b5a      	ldr	r3, [pc, #360]	; (8007aa8 <HAL_UART_IRQHandler+0x2b0>)
 800793e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2208      	movs	r2, #8
 800794a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007952:	f043 0208 	orr.w	r2, r3, #8
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800795c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007964:	2b00      	cmp	r3, #0
 8007966:	d012      	beq.n	800798e <HAL_UART_IRQHandler+0x196>
 8007968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800796c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00c      	beq.n	800798e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800797c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007984:	f043 0220 	orr.w	r2, r3, #32
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 823c 	beq.w	8007e12 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800799a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d013      	beq.n	80079ce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d105      	bne.n	80079be <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d005      	beq.n	80079f2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d04f      	beq.n	8007a92 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 feb9 	bl	800876a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	d141      	bne.n	8007a8a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1d9      	bne.n	8007a06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d013      	beq.n	8007a82 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5e:	4a14      	ldr	r2, [pc, #80]	; (8007ab0 <HAL_UART_IRQHandler+0x2b8>)
 8007a60:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fc fbab 	bl	80041c2 <HAL_DMA_Abort_IT>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d017      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a80:	e00f      	b.n	8007aa2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f9da 	bl	8007e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a88:	e00b      	b.n	8007aa2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f9d6 	bl	8007e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a90:	e007      	b.n	8007aa2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f9d2 	bl	8007e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007aa0:	e1b7      	b.n	8007e12 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa2:	bf00      	nop
    return;
 8007aa4:	e1b5      	b.n	8007e12 <HAL_UART_IRQHandler+0x61a>
 8007aa6:	bf00      	nop
 8007aa8:	10000001 	.word	0x10000001
 8007aac:	04000120 	.word	0x04000120
 8007ab0:	08008837 	.word	0x08008837

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	f040 814a 	bne.w	8007d52 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 8143 	beq.w	8007d52 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 813c 	beq.w	8007d52 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2210      	movs	r2, #16
 8007ae0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aec:	2b40      	cmp	r3, #64	; 0x40
 8007aee:	f040 80b5 	bne.w	8007c5c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007afe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8187 	beq.w	8007e16 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b12:	429a      	cmp	r2, r3
 8007b14:	f080 817f 	bcs.w	8007e16 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b1e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f040 8086 	bne.w	8007c40 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1da      	bne.n	8007b34 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b90:	f023 0301 	bic.w	r3, r3, #1
 8007b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ba2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007baa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e1      	bne.n	8007b7e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bc4:	e853 3f00 	ldrex	r3, [r3]
 8007bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007be0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007be4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e3      	bne.n	8007bba <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c10:	f023 0310 	bic.w	r3, r3, #16
 8007c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e4      	bne.n	8007c00 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fc fa68 	bl	8004110 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f8fb 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c5a:	e0dc      	b.n	8007e16 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 80ce 	beq.w	8007e1a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 80c9 	beq.w	8007e1a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007caa:	647b      	str	r3, [r7, #68]	; 0x44
 8007cac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e4      	bne.n	8007c88 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cd4:	f023 0301 	bic.w	r3, r3, #1
 8007cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ce6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e1      	bne.n	8007cbe <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f023 0310 	bic.w	r3, r3, #16
 8007d22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	69b9      	ldr	r1, [r7, #24]
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e4      	bne.n	8007d0e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f880 	bl	8007e50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d50:	e063      	b.n	8007e1a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00e      	beq.n	8007d7c <HAL_UART_IRQHandler+0x584>
 8007d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d008      	beq.n	8007d7c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fd9f 	bl	80088b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d7a:	e051      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d014      	beq.n	8007db2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d105      	bne.n	8007da0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d03a      	beq.n	8007e1e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
    }
    return;
 8007db0:	e035      	b.n	8007e1e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x5da>
 8007dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fd49 	bl	8008862 <UART_EndTransmit_IT>
    return;
 8007dd0:	e026      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d009      	beq.n	8007df2 <HAL_UART_IRQHandler+0x5fa>
 8007dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007de2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fd78 	bl	80088e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007df0:	e016      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <HAL_UART_IRQHandler+0x628>
 8007dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	da0c      	bge.n	8007e20 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fd60 	bl	80088cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e0c:	e008      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
      return;
 8007e0e:	bf00      	nop
 8007e10:	e006      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
    return;
 8007e12:	bf00      	nop
 8007e14:	e004      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
      return;
 8007e16:	bf00      	nop
 8007e18:	e002      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
      return;
 8007e1a:	bf00      	nop
 8007e1c:	e000      	b.n	8007e20 <HAL_UART_IRQHandler+0x628>
    return;
 8007e1e:	bf00      	nop
  }
}
 8007e20:	37e8      	adds	r7, #232	; 0xe8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop

08007e28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e6c:	b08c      	sub	sp, #48	; 0x30
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4bab      	ldr	r3, [pc, #684]	; (8008144 <UART_SetConfig+0x2dc>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	6812      	ldr	r2, [r2, #0]
 8007e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4aa0      	ldr	r2, [pc, #640]	; (8008148 <UART_SetConfig+0x2e0>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d004      	beq.n	8007ed4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ede:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	f023 010f 	bic.w	r1, r3, #15
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a91      	ldr	r2, [pc, #580]	; (800814c <UART_SetConfig+0x2e4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d125      	bne.n	8007f58 <UART_SetConfig+0xf0>
 8007f0c:	4b90      	ldr	r3, [pc, #576]	; (8008150 <UART_SetConfig+0x2e8>)
 8007f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d81a      	bhi.n	8007f50 <UART_SetConfig+0xe8>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <UART_SetConfig+0xb8>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f41 	.word	0x08007f41
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f49 	.word	0x08007f49
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f36:	e0d6      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3e:	e0d2      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007f40:	2304      	movs	r3, #4
 8007f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f46:	e0ce      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007f48:	2308      	movs	r3, #8
 8007f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f4e:	e0ca      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007f50:	2310      	movs	r3, #16
 8007f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f56:	e0c6      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a7d      	ldr	r2, [pc, #500]	; (8008154 <UART_SetConfig+0x2ec>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d138      	bne.n	8007fd4 <UART_SetConfig+0x16c>
 8007f62:	4b7b      	ldr	r3, [pc, #492]	; (8008150 <UART_SetConfig+0x2e8>)
 8007f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f68:	f003 030c 	and.w	r3, r3, #12
 8007f6c:	2b0c      	cmp	r3, #12
 8007f6e:	d82d      	bhi.n	8007fcc <UART_SetConfig+0x164>
 8007f70:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <UART_SetConfig+0x110>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007fad 	.word	0x08007fad
 8007f7c:	08007fcd 	.word	0x08007fcd
 8007f80:	08007fcd 	.word	0x08007fcd
 8007f84:	08007fcd 	.word	0x08007fcd
 8007f88:	08007fbd 	.word	0x08007fbd
 8007f8c:	08007fcd 	.word	0x08007fcd
 8007f90:	08007fcd 	.word	0x08007fcd
 8007f94:	08007fcd 	.word	0x08007fcd
 8007f98:	08007fb5 	.word	0x08007fb5
 8007f9c:	08007fcd 	.word	0x08007fcd
 8007fa0:	08007fcd 	.word	0x08007fcd
 8007fa4:	08007fcd 	.word	0x08007fcd
 8007fa8:	08007fc5 	.word	0x08007fc5
 8007fac:	2300      	movs	r3, #0
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb2:	e098      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fba:	e094      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007fbc:	2304      	movs	r3, #4
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc2:	e090      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007fc4:	2308      	movs	r3, #8
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fca:	e08c      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007fcc:	2310      	movs	r3, #16
 8007fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd2:	e088      	b.n	80080e6 <UART_SetConfig+0x27e>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a5f      	ldr	r2, [pc, #380]	; (8008158 <UART_SetConfig+0x2f0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d125      	bne.n	800802a <UART_SetConfig+0x1c2>
 8007fde:	4b5c      	ldr	r3, [pc, #368]	; (8008150 <UART_SetConfig+0x2e8>)
 8007fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fe8:	2b30      	cmp	r3, #48	; 0x30
 8007fea:	d016      	beq.n	800801a <UART_SetConfig+0x1b2>
 8007fec:	2b30      	cmp	r3, #48	; 0x30
 8007fee:	d818      	bhi.n	8008022 <UART_SetConfig+0x1ba>
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d00a      	beq.n	800800a <UART_SetConfig+0x1a2>
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	d814      	bhi.n	8008022 <UART_SetConfig+0x1ba>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <UART_SetConfig+0x19a>
 8007ffc:	2b10      	cmp	r3, #16
 8007ffe:	d008      	beq.n	8008012 <UART_SetConfig+0x1aa>
 8008000:	e00f      	b.n	8008022 <UART_SetConfig+0x1ba>
 8008002:	2300      	movs	r3, #0
 8008004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008008:	e06d      	b.n	80080e6 <UART_SetConfig+0x27e>
 800800a:	2302      	movs	r3, #2
 800800c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008010:	e069      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008012:	2304      	movs	r3, #4
 8008014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008018:	e065      	b.n	80080e6 <UART_SetConfig+0x27e>
 800801a:	2308      	movs	r3, #8
 800801c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008020:	e061      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008022:	2310      	movs	r3, #16
 8008024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008028:	e05d      	b.n	80080e6 <UART_SetConfig+0x27e>
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a4b      	ldr	r2, [pc, #300]	; (800815c <UART_SetConfig+0x2f4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d125      	bne.n	8008080 <UART_SetConfig+0x218>
 8008034:	4b46      	ldr	r3, [pc, #280]	; (8008150 <UART_SetConfig+0x2e8>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800803e:	2bc0      	cmp	r3, #192	; 0xc0
 8008040:	d016      	beq.n	8008070 <UART_SetConfig+0x208>
 8008042:	2bc0      	cmp	r3, #192	; 0xc0
 8008044:	d818      	bhi.n	8008078 <UART_SetConfig+0x210>
 8008046:	2b80      	cmp	r3, #128	; 0x80
 8008048:	d00a      	beq.n	8008060 <UART_SetConfig+0x1f8>
 800804a:	2b80      	cmp	r3, #128	; 0x80
 800804c:	d814      	bhi.n	8008078 <UART_SetConfig+0x210>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <UART_SetConfig+0x1f0>
 8008052:	2b40      	cmp	r3, #64	; 0x40
 8008054:	d008      	beq.n	8008068 <UART_SetConfig+0x200>
 8008056:	e00f      	b.n	8008078 <UART_SetConfig+0x210>
 8008058:	2300      	movs	r3, #0
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805e:	e042      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008060:	2302      	movs	r3, #2
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008066:	e03e      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008068:	2304      	movs	r3, #4
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806e:	e03a      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008070:	2308      	movs	r3, #8
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008076:	e036      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008078:	2310      	movs	r3, #16
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807e:	e032      	b.n	80080e6 <UART_SetConfig+0x27e>
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a30      	ldr	r2, [pc, #192]	; (8008148 <UART_SetConfig+0x2e0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d12a      	bne.n	80080e0 <UART_SetConfig+0x278>
 800808a:	4b31      	ldr	r3, [pc, #196]	; (8008150 <UART_SetConfig+0x2e8>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008094:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008098:	d01a      	beq.n	80080d0 <UART_SetConfig+0x268>
 800809a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800809e:	d81b      	bhi.n	80080d8 <UART_SetConfig+0x270>
 80080a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080a4:	d00c      	beq.n	80080c0 <UART_SetConfig+0x258>
 80080a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080aa:	d815      	bhi.n	80080d8 <UART_SetConfig+0x270>
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d003      	beq.n	80080b8 <UART_SetConfig+0x250>
 80080b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b4:	d008      	beq.n	80080c8 <UART_SetConfig+0x260>
 80080b6:	e00f      	b.n	80080d8 <UART_SetConfig+0x270>
 80080b8:	2300      	movs	r3, #0
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e012      	b.n	80080e6 <UART_SetConfig+0x27e>
 80080c0:	2302      	movs	r3, #2
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e00e      	b.n	80080e6 <UART_SetConfig+0x27e>
 80080c8:	2304      	movs	r3, #4
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ce:	e00a      	b.n	80080e6 <UART_SetConfig+0x27e>
 80080d0:	2308      	movs	r3, #8
 80080d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d6:	e006      	b.n	80080e6 <UART_SetConfig+0x27e>
 80080d8:	2310      	movs	r3, #16
 80080da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080de:	e002      	b.n	80080e6 <UART_SetConfig+0x27e>
 80080e0:	2310      	movs	r3, #16
 80080e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a17      	ldr	r2, [pc, #92]	; (8008148 <UART_SetConfig+0x2e0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	f040 80a8 	bne.w	8008242 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080f6:	2b08      	cmp	r3, #8
 80080f8:	d834      	bhi.n	8008164 <UART_SetConfig+0x2fc>
 80080fa:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <UART_SetConfig+0x298>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008125 	.word	0x08008125
 8008104:	08008165 	.word	0x08008165
 8008108:	0800812d 	.word	0x0800812d
 800810c:	08008165 	.word	0x08008165
 8008110:	08008133 	.word	0x08008133
 8008114:	08008165 	.word	0x08008165
 8008118:	08008165 	.word	0x08008165
 800811c:	08008165 	.word	0x08008165
 8008120:	0800813b 	.word	0x0800813b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008124:	f7fd fe90 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 8008128:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800812a:	e021      	b.n	8008170 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800812c:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <UART_SetConfig+0x2f8>)
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008130:	e01e      	b.n	8008170 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008132:	f7fd fe1b 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008138:	e01a      	b.n	8008170 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800813a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008140:	e016      	b.n	8008170 <UART_SetConfig+0x308>
 8008142:	bf00      	nop
 8008144:	cfff69f3 	.word	0xcfff69f3
 8008148:	40008000 	.word	0x40008000
 800814c:	40013800 	.word	0x40013800
 8008150:	40021000 	.word	0x40021000
 8008154:	40004400 	.word	0x40004400
 8008158:	40004800 	.word	0x40004800
 800815c:	40004c00 	.word	0x40004c00
 8008160:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800816e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 812a 	beq.w	80083cc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	4a9e      	ldr	r2, [pc, #632]	; (80083f8 <UART_SetConfig+0x590>)
 800817e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008182:	461a      	mov	r2, r3
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	fbb3 f3f2 	udiv	r3, r3, r2
 800818a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	4613      	mov	r3, r2
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	4413      	add	r3, r2
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	429a      	cmp	r2, r3
 800819a:	d305      	bcc.n	80081a8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d903      	bls.n	80081b0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081ae:	e10d      	b.n	80083cc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	2200      	movs	r2, #0
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	60fa      	str	r2, [r7, #12]
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	4a8e      	ldr	r2, [pc, #568]	; (80083f8 <UART_SetConfig+0x590>)
 80081be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2200      	movs	r2, #0
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081d2:	f7f8 fd11 	bl	8000bf8 <__aeabi_uldivmod>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	4610      	mov	r0, r2
 80081dc:	4619      	mov	r1, r3
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	020b      	lsls	r3, r1, #8
 80081e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081ec:	0202      	lsls	r2, r0, #8
 80081ee:	6979      	ldr	r1, [r7, #20]
 80081f0:	6849      	ldr	r1, [r1, #4]
 80081f2:	0849      	lsrs	r1, r1, #1
 80081f4:	2000      	movs	r0, #0
 80081f6:	460c      	mov	r4, r1
 80081f8:	4605      	mov	r5, r0
 80081fa:	eb12 0804 	adds.w	r8, r2, r4
 80081fe:	eb43 0905 	adc.w	r9, r3, r5
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	469a      	mov	sl, r3
 800820a:	4693      	mov	fp, r2
 800820c:	4652      	mov	r2, sl
 800820e:	465b      	mov	r3, fp
 8008210:	4640      	mov	r0, r8
 8008212:	4649      	mov	r1, r9
 8008214:	f7f8 fcf0 	bl	8000bf8 <__aeabi_uldivmod>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4613      	mov	r3, r2
 800821e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008226:	d308      	bcc.n	800823a <UART_SetConfig+0x3d2>
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800822e:	d204      	bcs.n	800823a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6a3a      	ldr	r2, [r7, #32]
 8008236:	60da      	str	r2, [r3, #12]
 8008238:	e0c8      	b.n	80083cc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008240:	e0c4      	b.n	80083cc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800824a:	d167      	bne.n	800831c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800824c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008250:	2b08      	cmp	r3, #8
 8008252:	d828      	bhi.n	80082a6 <UART_SetConfig+0x43e>
 8008254:	a201      	add	r2, pc, #4	; (adr r2, 800825c <UART_SetConfig+0x3f4>)
 8008256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825a:	bf00      	nop
 800825c:	08008281 	.word	0x08008281
 8008260:	08008289 	.word	0x08008289
 8008264:	08008291 	.word	0x08008291
 8008268:	080082a7 	.word	0x080082a7
 800826c:	08008297 	.word	0x08008297
 8008270:	080082a7 	.word	0x080082a7
 8008274:	080082a7 	.word	0x080082a7
 8008278:	080082a7 	.word	0x080082a7
 800827c:	0800829f 	.word	0x0800829f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008280:	f7fd fde2 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 8008284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008286:	e014      	b.n	80082b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008288:	f7fd fdf4 	bl	8005e74 <HAL_RCC_GetPCLK2Freq>
 800828c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800828e:	e010      	b.n	80082b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008290:	4b5a      	ldr	r3, [pc, #360]	; (80083fc <UART_SetConfig+0x594>)
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008294:	e00d      	b.n	80082b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008296:	f7fd fd69 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800829c:	e009      	b.n	80082b2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800829e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082a4:	e005      	b.n	80082b2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8089 	beq.w	80083cc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	4a4e      	ldr	r2, [pc, #312]	; (80083f8 <UART_SetConfig+0x590>)
 80082c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082c4:	461a      	mov	r2, r3
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082cc:	005a      	lsls	r2, r3, #1
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	085b      	lsrs	r3, r3, #1
 80082d4:	441a      	add	r2, r3
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	fbb2 f3f3 	udiv	r3, r2, r3
 80082de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	2b0f      	cmp	r3, #15
 80082e4:	d916      	bls.n	8008314 <UART_SetConfig+0x4ac>
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ec:	d212      	bcs.n	8008314 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f023 030f 	bic.w	r3, r3, #15
 80082f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	b29a      	uxth	r2, r3
 8008304:	8bfb      	ldrh	r3, [r7, #30]
 8008306:	4313      	orrs	r3, r2
 8008308:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	8bfa      	ldrh	r2, [r7, #30]
 8008310:	60da      	str	r2, [r3, #12]
 8008312:	e05b      	b.n	80083cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800831a:	e057      	b.n	80083cc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800831c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008320:	2b08      	cmp	r3, #8
 8008322:	d828      	bhi.n	8008376 <UART_SetConfig+0x50e>
 8008324:	a201      	add	r2, pc, #4	; (adr r2, 800832c <UART_SetConfig+0x4c4>)
 8008326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832a:	bf00      	nop
 800832c:	08008351 	.word	0x08008351
 8008330:	08008359 	.word	0x08008359
 8008334:	08008361 	.word	0x08008361
 8008338:	08008377 	.word	0x08008377
 800833c:	08008367 	.word	0x08008367
 8008340:	08008377 	.word	0x08008377
 8008344:	08008377 	.word	0x08008377
 8008348:	08008377 	.word	0x08008377
 800834c:	0800836f 	.word	0x0800836f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008350:	f7fd fd7a 	bl	8005e48 <HAL_RCC_GetPCLK1Freq>
 8008354:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008356:	e014      	b.n	8008382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008358:	f7fd fd8c 	bl	8005e74 <HAL_RCC_GetPCLK2Freq>
 800835c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800835e:	e010      	b.n	8008382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008360:	4b26      	ldr	r3, [pc, #152]	; (80083fc <UART_SetConfig+0x594>)
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008364:	e00d      	b.n	8008382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008366:	f7fd fd01 	bl	8005d6c <HAL_RCC_GetSysClockFreq>
 800836a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800836c:	e009      	b.n	8008382 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800836e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008374:	e005      	b.n	8008382 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008380:	bf00      	nop
    }

    if (pclk != 0U)
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d021      	beq.n	80083cc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	4a1a      	ldr	r2, [pc, #104]	; (80083f8 <UART_SetConfig+0x590>)
 800838e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008392:	461a      	mov	r2, r3
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	fbb3 f2f2 	udiv	r2, r3, r2
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	441a      	add	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	2b0f      	cmp	r3, #15
 80083b0:	d909      	bls.n	80083c6 <UART_SetConfig+0x55e>
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b8:	d205      	bcs.n	80083c6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	b29a      	uxth	r2, r3
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60da      	str	r2, [r3, #12]
 80083c4:	e002      	b.n	80083cc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2200      	movs	r2, #0
 80083e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2200      	movs	r2, #0
 80083e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80083e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3730      	adds	r7, #48	; 0x30
 80083f0:	46bd      	mov	sp, r7
 80083f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083f6:	bf00      	nop
 80083f8:	0800b8d8 	.word	0x0800b8d8
 80083fc:	00f42400 	.word	0x00f42400

08008400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00a      	beq.n	800842a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00a      	beq.n	800846e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008472:	f003 0308 	and.w	r3, r3, #8
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00a      	beq.n	80084b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01a      	beq.n	8008516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084fe:	d10a      	bne.n	8008516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	605a      	str	r2, [r3, #4]
  }
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af02      	add	r7, sp, #8
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008554:	f7fa f85c 	bl	8002610 <HAL_GetTick>
 8008558:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b08      	cmp	r3, #8
 8008566:	d10e      	bne.n	8008586 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f82f 	bl	80085da <UART_WaitOnFlagUntilTimeout>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e025      	b.n	80085d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b04      	cmp	r3, #4
 8008592:	d10e      	bne.n	80085b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f819 	bl	80085da <UART_WaitOnFlagUntilTimeout>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e00f      	b.n	80085d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2220      	movs	r2, #32
 80085be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b09c      	sub	sp, #112	; 0x70
 80085de:	af00      	add	r7, sp, #0
 80085e0:	60f8      	str	r0, [r7, #12]
 80085e2:	60b9      	str	r1, [r7, #8]
 80085e4:	603b      	str	r3, [r7, #0]
 80085e6:	4613      	mov	r3, r2
 80085e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ea:	e0a9      	b.n	8008740 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f2:	f000 80a5 	beq.w	8008740 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f6:	f7fa f80b 	bl	8002610 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008602:	429a      	cmp	r2, r3
 8008604:	d302      	bcc.n	800860c <UART_WaitOnFlagUntilTimeout+0x32>
 8008606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008608:	2b00      	cmp	r3, #0
 800860a:	d140      	bne.n	800868e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800861a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008620:	667b      	str	r3, [r7, #100]	; 0x64
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800862a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800862c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008630:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e6      	bne.n	800860c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3308      	adds	r3, #8
 8008644:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	f023 0301 	bic.w	r3, r3, #1
 8008654:	663b      	str	r3, [r7, #96]	; 0x60
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800865e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008660:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800866c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e5      	bne.n	800863e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2220      	movs	r2, #32
 8008676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e069      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	2b00      	cmp	r3, #0
 800869a:	d051      	beq.n	8008740 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086aa:	d149      	bne.n	8008740 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	461a      	mov	r2, r3
 80086d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34
 80086d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e6      	bne.n	80086b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3308      	adds	r3, #8
 80086ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	613b      	str	r3, [r7, #16]
   return(result);
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f023 0301 	bic.w	r3, r3, #1
 80086fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3308      	adds	r3, #8
 8008706:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008708:	623a      	str	r2, [r7, #32]
 800870a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	69f9      	ldr	r1, [r7, #28]
 800870e:	6a3a      	ldr	r2, [r7, #32]
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	61bb      	str	r3, [r7, #24]
   return(result);
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e5      	bne.n	80086e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2220      	movs	r2, #32
 8008720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2220      	movs	r2, #32
 8008728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2220      	movs	r2, #32
 8008730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e010      	b.n	8008762 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69da      	ldr	r2, [r3, #28]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4013      	ands	r3, r2
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	429a      	cmp	r2, r3
 800874e:	bf0c      	ite	eq
 8008750:	2301      	moveq	r3, #1
 8008752:	2300      	movne	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	429a      	cmp	r2, r3
 800875c:	f43f af46 	beq.w	80085ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3770      	adds	r7, #112	; 0x70
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800876a:	b480      	push	{r7}
 800876c:	b095      	sub	sp, #84	; 0x54
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
 800878e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008790:	643b      	str	r3, [r7, #64]	; 0x40
 8008792:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e6      	bne.n	8008772 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e3      	bne.n	80087a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d118      	bne.n	8008816 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f023 0310 	bic.w	r3, r3, #16
 80087f8:	647b      	str	r3, [r7, #68]	; 0x44
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	6979      	ldr	r1, [r7, #20]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	613b      	str	r3, [r7, #16]
   return(result);
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e6      	bne.n	80087e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	671a      	str	r2, [r3, #112]	; 0x70
}
 800882a:	bf00      	nop
 800882c:	3754      	adds	r7, #84	; 0x54
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff faf1 	bl	8007e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	60bb      	str	r3, [r7, #8]
   return(result);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	61bb      	str	r3, [r7, #24]
 800888a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6979      	ldr	r1, [r7, #20]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	613b      	str	r3, [r7, #16]
   return(result);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e6      	bne.n	800886a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7ff fabc 	bl	8007e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b0:	bf00      	nop
 80088b2:	3720      	adds	r7, #32
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008902:	2b01      	cmp	r3, #1
 8008904:	d101      	bne.n	800890a <HAL_UARTEx_DisableFifoMode+0x16>
 8008906:	2302      	movs	r3, #2
 8008908:	e027      	b.n	800895a <HAL_UARTEx_DisableFifoMode+0x66>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2224      	movs	r2, #36	; 0x24
 8008916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0201 	bic.w	r2, r2, #1
 8008930:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008938:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2220      	movs	r2, #32
 800894c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800897a:	2302      	movs	r3, #2
 800897c:	e02d      	b.n	80089da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2224      	movs	r2, #36	; 0x24
 800898a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0201 	bic.w	r2, r2, #1
 80089a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f850 	bl	8008a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e02d      	b.n	8008a56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2224      	movs	r2, #36	; 0x24
 8008a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0201 	bic.w	r2, r2, #1
 8008a20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f812 	bl	8008a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d108      	bne.n	8008a82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a80:	e031      	b.n	8008ae6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a82:	2308      	movs	r3, #8
 8008a84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a86:	2308      	movs	r3, #8
 8008a88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	0e5b      	lsrs	r3, r3, #25
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f003 0307 	and.w	r3, r3, #7
 8008a98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	0f5b      	lsrs	r3, r3, #29
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	7b3a      	ldrb	r2, [r7, #12]
 8008aae:	4911      	ldr	r1, [pc, #68]	; (8008af4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ab0:	5c8a      	ldrb	r2, [r1, r2]
 8008ab2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ab6:	7b3a      	ldrb	r2, [r7, #12]
 8008ab8:	490f      	ldr	r1, [pc, #60]	; (8008af8 <UARTEx_SetNbDataToProcess+0x98>)
 8008aba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	7b7a      	ldrb	r2, [r7, #13]
 8008acc:	4909      	ldr	r1, [pc, #36]	; (8008af4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ace:	5c8a      	ldrb	r2, [r1, r2]
 8008ad0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ad4:	7b7a      	ldrb	r2, [r7, #13]
 8008ad6:	4908      	ldr	r1, [pc, #32]	; (8008af8 <UARTEx_SetNbDataToProcess+0x98>)
 8008ad8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ada:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	0800b8f0 	.word	0x0800b8f0
 8008af8:	0800b8f8 	.word	0x0800b8f8

08008afc <__cvt>:
 8008afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b00:	ec55 4b10 	vmov	r4, r5, d0
 8008b04:	2d00      	cmp	r5, #0
 8008b06:	460e      	mov	r6, r1
 8008b08:	4619      	mov	r1, r3
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	bfbb      	ittet	lt
 8008b0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b12:	461d      	movlt	r5, r3
 8008b14:	2300      	movge	r3, #0
 8008b16:	232d      	movlt	r3, #45	; 0x2d
 8008b18:	700b      	strb	r3, [r1, #0]
 8008b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b20:	4691      	mov	r9, r2
 8008b22:	f023 0820 	bic.w	r8, r3, #32
 8008b26:	bfbc      	itt	lt
 8008b28:	4622      	movlt	r2, r4
 8008b2a:	4614      	movlt	r4, r2
 8008b2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b30:	d005      	beq.n	8008b3e <__cvt+0x42>
 8008b32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b36:	d100      	bne.n	8008b3a <__cvt+0x3e>
 8008b38:	3601      	adds	r6, #1
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	e000      	b.n	8008b40 <__cvt+0x44>
 8008b3e:	2103      	movs	r1, #3
 8008b40:	ab03      	add	r3, sp, #12
 8008b42:	9301      	str	r3, [sp, #4]
 8008b44:	ab02      	add	r3, sp, #8
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	ec45 4b10 	vmov	d0, r4, r5
 8008b4c:	4653      	mov	r3, sl
 8008b4e:	4632      	mov	r2, r6
 8008b50:	f000 fe76 	bl	8009840 <_dtoa_r>
 8008b54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b58:	4607      	mov	r7, r0
 8008b5a:	d102      	bne.n	8008b62 <__cvt+0x66>
 8008b5c:	f019 0f01 	tst.w	r9, #1
 8008b60:	d022      	beq.n	8008ba8 <__cvt+0xac>
 8008b62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b66:	eb07 0906 	add.w	r9, r7, r6
 8008b6a:	d110      	bne.n	8008b8e <__cvt+0x92>
 8008b6c:	783b      	ldrb	r3, [r7, #0]
 8008b6e:	2b30      	cmp	r3, #48	; 0x30
 8008b70:	d10a      	bne.n	8008b88 <__cvt+0x8c>
 8008b72:	2200      	movs	r2, #0
 8008b74:	2300      	movs	r3, #0
 8008b76:	4620      	mov	r0, r4
 8008b78:	4629      	mov	r1, r5
 8008b7a:	f7f7 ffcd 	bl	8000b18 <__aeabi_dcmpeq>
 8008b7e:	b918      	cbnz	r0, 8008b88 <__cvt+0x8c>
 8008b80:	f1c6 0601 	rsb	r6, r6, #1
 8008b84:	f8ca 6000 	str.w	r6, [sl]
 8008b88:	f8da 3000 	ldr.w	r3, [sl]
 8008b8c:	4499      	add	r9, r3
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2300      	movs	r3, #0
 8008b92:	4620      	mov	r0, r4
 8008b94:	4629      	mov	r1, r5
 8008b96:	f7f7 ffbf 	bl	8000b18 <__aeabi_dcmpeq>
 8008b9a:	b108      	cbz	r0, 8008ba0 <__cvt+0xa4>
 8008b9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ba0:	2230      	movs	r2, #48	; 0x30
 8008ba2:	9b03      	ldr	r3, [sp, #12]
 8008ba4:	454b      	cmp	r3, r9
 8008ba6:	d307      	bcc.n	8008bb8 <__cvt+0xbc>
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bac:	1bdb      	subs	r3, r3, r7
 8008bae:	4638      	mov	r0, r7
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	b004      	add	sp, #16
 8008bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb8:	1c59      	adds	r1, r3, #1
 8008bba:	9103      	str	r1, [sp, #12]
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e7f0      	b.n	8008ba2 <__cvt+0xa6>

08008bc0 <__exponent>:
 8008bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	bfb8      	it	lt
 8008bc8:	4249      	neglt	r1, r1
 8008bca:	f803 2b02 	strb.w	r2, [r3], #2
 8008bce:	bfb4      	ite	lt
 8008bd0:	222d      	movlt	r2, #45	; 0x2d
 8008bd2:	222b      	movge	r2, #43	; 0x2b
 8008bd4:	2909      	cmp	r1, #9
 8008bd6:	7042      	strb	r2, [r0, #1]
 8008bd8:	dd2a      	ble.n	8008c30 <__exponent+0x70>
 8008bda:	f10d 0207 	add.w	r2, sp, #7
 8008bde:	4617      	mov	r7, r2
 8008be0:	260a      	movs	r6, #10
 8008be2:	4694      	mov	ip, r2
 8008be4:	fb91 f5f6 	sdiv	r5, r1, r6
 8008be8:	fb06 1415 	mls	r4, r6, r5, r1
 8008bec:	3430      	adds	r4, #48	; 0x30
 8008bee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	2c63      	cmp	r4, #99	; 0x63
 8008bf6:	f102 32ff 	add.w	r2, r2, #4294967295
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	dcf1      	bgt.n	8008be2 <__exponent+0x22>
 8008bfe:	3130      	adds	r1, #48	; 0x30
 8008c00:	f1ac 0402 	sub.w	r4, ip, #2
 8008c04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008c08:	1c41      	adds	r1, r0, #1
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	42ba      	cmp	r2, r7
 8008c0e:	d30a      	bcc.n	8008c26 <__exponent+0x66>
 8008c10:	f10d 0209 	add.w	r2, sp, #9
 8008c14:	eba2 020c 	sub.w	r2, r2, ip
 8008c18:	42bc      	cmp	r4, r7
 8008c1a:	bf88      	it	hi
 8008c1c:	2200      	movhi	r2, #0
 8008c1e:	4413      	add	r3, r2
 8008c20:	1a18      	subs	r0, r3, r0
 8008c22:	b003      	add	sp, #12
 8008c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c26:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008c2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008c2e:	e7ed      	b.n	8008c0c <__exponent+0x4c>
 8008c30:	2330      	movs	r3, #48	; 0x30
 8008c32:	3130      	adds	r1, #48	; 0x30
 8008c34:	7083      	strb	r3, [r0, #2]
 8008c36:	70c1      	strb	r1, [r0, #3]
 8008c38:	1d03      	adds	r3, r0, #4
 8008c3a:	e7f1      	b.n	8008c20 <__exponent+0x60>

08008c3c <_printf_float>:
 8008c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	ed2d 8b02 	vpush	{d8}
 8008c44:	b08d      	sub	sp, #52	; 0x34
 8008c46:	460c      	mov	r4, r1
 8008c48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c4c:	4616      	mov	r6, r2
 8008c4e:	461f      	mov	r7, r3
 8008c50:	4605      	mov	r5, r0
 8008c52:	f000 fce7 	bl	8009624 <_localeconv_r>
 8008c56:	f8d0 a000 	ldr.w	sl, [r0]
 8008c5a:	4650      	mov	r0, sl
 8008c5c:	f7f7 fb30 	bl	80002c0 <strlen>
 8008c60:	2300      	movs	r3, #0
 8008c62:	930a      	str	r3, [sp, #40]	; 0x28
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	9305      	str	r3, [sp, #20]
 8008c68:	f8d8 3000 	ldr.w	r3, [r8]
 8008c6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c70:	3307      	adds	r3, #7
 8008c72:	f023 0307 	bic.w	r3, r3, #7
 8008c76:	f103 0208 	add.w	r2, r3, #8
 8008c7a:	f8c8 2000 	str.w	r2, [r8]
 8008c7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c86:	9307      	str	r3, [sp, #28]
 8008c88:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c8c:	ee08 0a10 	vmov	s16, r0
 8008c90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008c94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c98:	4b9e      	ldr	r3, [pc, #632]	; (8008f14 <_printf_float+0x2d8>)
 8008c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9e:	f7f7 ff6d 	bl	8000b7c <__aeabi_dcmpun>
 8008ca2:	bb88      	cbnz	r0, 8008d08 <_printf_float+0xcc>
 8008ca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ca8:	4b9a      	ldr	r3, [pc, #616]	; (8008f14 <_printf_float+0x2d8>)
 8008caa:	f04f 32ff 	mov.w	r2, #4294967295
 8008cae:	f7f7 ff47 	bl	8000b40 <__aeabi_dcmple>
 8008cb2:	bb48      	cbnz	r0, 8008d08 <_printf_float+0xcc>
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	4640      	mov	r0, r8
 8008cba:	4649      	mov	r1, r9
 8008cbc:	f7f7 ff36 	bl	8000b2c <__aeabi_dcmplt>
 8008cc0:	b110      	cbz	r0, 8008cc8 <_printf_float+0x8c>
 8008cc2:	232d      	movs	r3, #45	; 0x2d
 8008cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cc8:	4a93      	ldr	r2, [pc, #588]	; (8008f18 <_printf_float+0x2dc>)
 8008cca:	4b94      	ldr	r3, [pc, #592]	; (8008f1c <_printf_float+0x2e0>)
 8008ccc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008cd0:	bf94      	ite	ls
 8008cd2:	4690      	movls	r8, r2
 8008cd4:	4698      	movhi	r8, r3
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	6123      	str	r3, [r4, #16]
 8008cda:	9b05      	ldr	r3, [sp, #20]
 8008cdc:	f023 0304 	bic.w	r3, r3, #4
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	f04f 0900 	mov.w	r9, #0
 8008ce6:	9700      	str	r7, [sp, #0]
 8008ce8:	4633      	mov	r3, r6
 8008cea:	aa0b      	add	r2, sp, #44	; 0x2c
 8008cec:	4621      	mov	r1, r4
 8008cee:	4628      	mov	r0, r5
 8008cf0:	f000 f9da 	bl	80090a8 <_printf_common>
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	f040 8090 	bne.w	8008e1a <_printf_float+0x1de>
 8008cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfe:	b00d      	add	sp, #52	; 0x34
 8008d00:	ecbd 8b02 	vpop	{d8}
 8008d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d08:	4642      	mov	r2, r8
 8008d0a:	464b      	mov	r3, r9
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	4649      	mov	r1, r9
 8008d10:	f7f7 ff34 	bl	8000b7c <__aeabi_dcmpun>
 8008d14:	b140      	cbz	r0, 8008d28 <_printf_float+0xec>
 8008d16:	464b      	mov	r3, r9
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	bfbc      	itt	lt
 8008d1c:	232d      	movlt	r3, #45	; 0x2d
 8008d1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d22:	4a7f      	ldr	r2, [pc, #508]	; (8008f20 <_printf_float+0x2e4>)
 8008d24:	4b7f      	ldr	r3, [pc, #508]	; (8008f24 <_printf_float+0x2e8>)
 8008d26:	e7d1      	b.n	8008ccc <_printf_float+0x90>
 8008d28:	6863      	ldr	r3, [r4, #4]
 8008d2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d2e:	9206      	str	r2, [sp, #24]
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	d13f      	bne.n	8008db4 <_printf_float+0x178>
 8008d34:	2306      	movs	r3, #6
 8008d36:	6063      	str	r3, [r4, #4]
 8008d38:	9b05      	ldr	r3, [sp, #20]
 8008d3a:	6861      	ldr	r1, [r4, #4]
 8008d3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d40:	2300      	movs	r3, #0
 8008d42:	9303      	str	r3, [sp, #12]
 8008d44:	ab0a      	add	r3, sp, #40	; 0x28
 8008d46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d4a:	ab09      	add	r3, sp, #36	; 0x24
 8008d4c:	ec49 8b10 	vmov	d0, r8, r9
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	6022      	str	r2, [r4, #0]
 8008d54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f7ff fecf 	bl	8008afc <__cvt>
 8008d5e:	9b06      	ldr	r3, [sp, #24]
 8008d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d62:	2b47      	cmp	r3, #71	; 0x47
 8008d64:	4680      	mov	r8, r0
 8008d66:	d108      	bne.n	8008d7a <_printf_float+0x13e>
 8008d68:	1cc8      	adds	r0, r1, #3
 8008d6a:	db02      	blt.n	8008d72 <_printf_float+0x136>
 8008d6c:	6863      	ldr	r3, [r4, #4]
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	dd41      	ble.n	8008df6 <_printf_float+0x1ba>
 8008d72:	f1ab 0302 	sub.w	r3, fp, #2
 8008d76:	fa5f fb83 	uxtb.w	fp, r3
 8008d7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d7e:	d820      	bhi.n	8008dc2 <_printf_float+0x186>
 8008d80:	3901      	subs	r1, #1
 8008d82:	465a      	mov	r2, fp
 8008d84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d88:	9109      	str	r1, [sp, #36]	; 0x24
 8008d8a:	f7ff ff19 	bl	8008bc0 <__exponent>
 8008d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d90:	1813      	adds	r3, r2, r0
 8008d92:	2a01      	cmp	r2, #1
 8008d94:	4681      	mov	r9, r0
 8008d96:	6123      	str	r3, [r4, #16]
 8008d98:	dc02      	bgt.n	8008da0 <_printf_float+0x164>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	07d2      	lsls	r2, r2, #31
 8008d9e:	d501      	bpl.n	8008da4 <_printf_float+0x168>
 8008da0:	3301      	adds	r3, #1
 8008da2:	6123      	str	r3, [r4, #16]
 8008da4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d09c      	beq.n	8008ce6 <_printf_float+0xaa>
 8008dac:	232d      	movs	r3, #45	; 0x2d
 8008dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db2:	e798      	b.n	8008ce6 <_printf_float+0xaa>
 8008db4:	9a06      	ldr	r2, [sp, #24]
 8008db6:	2a47      	cmp	r2, #71	; 0x47
 8008db8:	d1be      	bne.n	8008d38 <_printf_float+0xfc>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1bc      	bne.n	8008d38 <_printf_float+0xfc>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e7b9      	b.n	8008d36 <_printf_float+0xfa>
 8008dc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008dc6:	d118      	bne.n	8008dfa <_printf_float+0x1be>
 8008dc8:	2900      	cmp	r1, #0
 8008dca:	6863      	ldr	r3, [r4, #4]
 8008dcc:	dd0b      	ble.n	8008de6 <_printf_float+0x1aa>
 8008dce:	6121      	str	r1, [r4, #16]
 8008dd0:	b913      	cbnz	r3, 8008dd8 <_printf_float+0x19c>
 8008dd2:	6822      	ldr	r2, [r4, #0]
 8008dd4:	07d0      	lsls	r0, r2, #31
 8008dd6:	d502      	bpl.n	8008dde <_printf_float+0x1a2>
 8008dd8:	3301      	adds	r3, #1
 8008dda:	440b      	add	r3, r1
 8008ddc:	6123      	str	r3, [r4, #16]
 8008dde:	65a1      	str	r1, [r4, #88]	; 0x58
 8008de0:	f04f 0900 	mov.w	r9, #0
 8008de4:	e7de      	b.n	8008da4 <_printf_float+0x168>
 8008de6:	b913      	cbnz	r3, 8008dee <_printf_float+0x1b2>
 8008de8:	6822      	ldr	r2, [r4, #0]
 8008dea:	07d2      	lsls	r2, r2, #31
 8008dec:	d501      	bpl.n	8008df2 <_printf_float+0x1b6>
 8008dee:	3302      	adds	r3, #2
 8008df0:	e7f4      	b.n	8008ddc <_printf_float+0x1a0>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e7f2      	b.n	8008ddc <_printf_float+0x1a0>
 8008df6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dfc:	4299      	cmp	r1, r3
 8008dfe:	db05      	blt.n	8008e0c <_printf_float+0x1d0>
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	6121      	str	r1, [r4, #16]
 8008e04:	07d8      	lsls	r0, r3, #31
 8008e06:	d5ea      	bpl.n	8008dde <_printf_float+0x1a2>
 8008e08:	1c4b      	adds	r3, r1, #1
 8008e0a:	e7e7      	b.n	8008ddc <_printf_float+0x1a0>
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	bfd4      	ite	le
 8008e10:	f1c1 0202 	rsble	r2, r1, #2
 8008e14:	2201      	movgt	r2, #1
 8008e16:	4413      	add	r3, r2
 8008e18:	e7e0      	b.n	8008ddc <_printf_float+0x1a0>
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	055a      	lsls	r2, r3, #21
 8008e1e:	d407      	bmi.n	8008e30 <_printf_float+0x1f4>
 8008e20:	6923      	ldr	r3, [r4, #16]
 8008e22:	4642      	mov	r2, r8
 8008e24:	4631      	mov	r1, r6
 8008e26:	4628      	mov	r0, r5
 8008e28:	47b8      	blx	r7
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	d12c      	bne.n	8008e88 <_printf_float+0x24c>
 8008e2e:	e764      	b.n	8008cfa <_printf_float+0xbe>
 8008e30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e34:	f240 80e0 	bls.w	8008ff8 <_printf_float+0x3bc>
 8008e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f7f7 fe6a 	bl	8000b18 <__aeabi_dcmpeq>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d034      	beq.n	8008eb2 <_printf_float+0x276>
 8008e48:	4a37      	ldr	r2, [pc, #220]	; (8008f28 <_printf_float+0x2ec>)
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	4631      	mov	r1, r6
 8008e4e:	4628      	mov	r0, r5
 8008e50:	47b8      	blx	r7
 8008e52:	3001      	adds	r0, #1
 8008e54:	f43f af51 	beq.w	8008cfa <_printf_float+0xbe>
 8008e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	db02      	blt.n	8008e66 <_printf_float+0x22a>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	07d8      	lsls	r0, r3, #31
 8008e64:	d510      	bpl.n	8008e88 <_printf_float+0x24c>
 8008e66:	ee18 3a10 	vmov	r3, s16
 8008e6a:	4652      	mov	r2, sl
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	4628      	mov	r0, r5
 8008e70:	47b8      	blx	r7
 8008e72:	3001      	adds	r0, #1
 8008e74:	f43f af41 	beq.w	8008cfa <_printf_float+0xbe>
 8008e78:	f04f 0800 	mov.w	r8, #0
 8008e7c:	f104 091a 	add.w	r9, r4, #26
 8008e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e82:	3b01      	subs	r3, #1
 8008e84:	4543      	cmp	r3, r8
 8008e86:	dc09      	bgt.n	8008e9c <_printf_float+0x260>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	079b      	lsls	r3, r3, #30
 8008e8c:	f100 8107 	bmi.w	800909e <_printf_float+0x462>
 8008e90:	68e0      	ldr	r0, [r4, #12]
 8008e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e94:	4298      	cmp	r0, r3
 8008e96:	bfb8      	it	lt
 8008e98:	4618      	movlt	r0, r3
 8008e9a:	e730      	b.n	8008cfe <_printf_float+0xc2>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	464a      	mov	r2, r9
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b8      	blx	r7
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	f43f af27 	beq.w	8008cfa <_printf_float+0xbe>
 8008eac:	f108 0801 	add.w	r8, r8, #1
 8008eb0:	e7e6      	b.n	8008e80 <_printf_float+0x244>
 8008eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	dc39      	bgt.n	8008f2c <_printf_float+0x2f0>
 8008eb8:	4a1b      	ldr	r2, [pc, #108]	; (8008f28 <_printf_float+0x2ec>)
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	47b8      	blx	r7
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	f43f af19 	beq.w	8008cfa <_printf_float+0xbe>
 8008ec8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	d102      	bne.n	8008ed6 <_printf_float+0x29a>
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	07d9      	lsls	r1, r3, #31
 8008ed4:	d5d8      	bpl.n	8008e88 <_printf_float+0x24c>
 8008ed6:	ee18 3a10 	vmov	r3, s16
 8008eda:	4652      	mov	r2, sl
 8008edc:	4631      	mov	r1, r6
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b8      	blx	r7
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	f43f af09 	beq.w	8008cfa <_printf_float+0xbe>
 8008ee8:	f04f 0900 	mov.w	r9, #0
 8008eec:	f104 0a1a 	add.w	sl, r4, #26
 8008ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef2:	425b      	negs	r3, r3
 8008ef4:	454b      	cmp	r3, r9
 8008ef6:	dc01      	bgt.n	8008efc <_printf_float+0x2c0>
 8008ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008efa:	e792      	b.n	8008e22 <_printf_float+0x1e6>
 8008efc:	2301      	movs	r3, #1
 8008efe:	4652      	mov	r2, sl
 8008f00:	4631      	mov	r1, r6
 8008f02:	4628      	mov	r0, r5
 8008f04:	47b8      	blx	r7
 8008f06:	3001      	adds	r0, #1
 8008f08:	f43f aef7 	beq.w	8008cfa <_printf_float+0xbe>
 8008f0c:	f109 0901 	add.w	r9, r9, #1
 8008f10:	e7ee      	b.n	8008ef0 <_printf_float+0x2b4>
 8008f12:	bf00      	nop
 8008f14:	7fefffff 	.word	0x7fefffff
 8008f18:	0800b900 	.word	0x0800b900
 8008f1c:	0800b904 	.word	0x0800b904
 8008f20:	0800b908 	.word	0x0800b908
 8008f24:	0800b90c 	.word	0x0800b90c
 8008f28:	0800b910 	.word	0x0800b910
 8008f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f30:	429a      	cmp	r2, r3
 8008f32:	bfa8      	it	ge
 8008f34:	461a      	movge	r2, r3
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	4691      	mov	r9, r2
 8008f3a:	dc37      	bgt.n	8008fac <_printf_float+0x370>
 8008f3c:	f04f 0b00 	mov.w	fp, #0
 8008f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f44:	f104 021a 	add.w	r2, r4, #26
 8008f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f4a:	9305      	str	r3, [sp, #20]
 8008f4c:	eba3 0309 	sub.w	r3, r3, r9
 8008f50:	455b      	cmp	r3, fp
 8008f52:	dc33      	bgt.n	8008fbc <_printf_float+0x380>
 8008f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	db3b      	blt.n	8008fd4 <_printf_float+0x398>
 8008f5c:	6823      	ldr	r3, [r4, #0]
 8008f5e:	07da      	lsls	r2, r3, #31
 8008f60:	d438      	bmi.n	8008fd4 <_printf_float+0x398>
 8008f62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008f66:	eba2 0903 	sub.w	r9, r2, r3
 8008f6a:	9b05      	ldr	r3, [sp, #20]
 8008f6c:	1ad2      	subs	r2, r2, r3
 8008f6e:	4591      	cmp	r9, r2
 8008f70:	bfa8      	it	ge
 8008f72:	4691      	movge	r9, r2
 8008f74:	f1b9 0f00 	cmp.w	r9, #0
 8008f78:	dc35      	bgt.n	8008fe6 <_printf_float+0x3aa>
 8008f7a:	f04f 0800 	mov.w	r8, #0
 8008f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f82:	f104 0a1a 	add.w	sl, r4, #26
 8008f86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f8a:	1a9b      	subs	r3, r3, r2
 8008f8c:	eba3 0309 	sub.w	r3, r3, r9
 8008f90:	4543      	cmp	r3, r8
 8008f92:	f77f af79 	ble.w	8008e88 <_printf_float+0x24c>
 8008f96:	2301      	movs	r3, #1
 8008f98:	4652      	mov	r2, sl
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b8      	blx	r7
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	f43f aeaa 	beq.w	8008cfa <_printf_float+0xbe>
 8008fa6:	f108 0801 	add.w	r8, r8, #1
 8008faa:	e7ec      	b.n	8008f86 <_printf_float+0x34a>
 8008fac:	4613      	mov	r3, r2
 8008fae:	4631      	mov	r1, r6
 8008fb0:	4642      	mov	r2, r8
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	47b8      	blx	r7
 8008fb6:	3001      	adds	r0, #1
 8008fb8:	d1c0      	bne.n	8008f3c <_printf_float+0x300>
 8008fba:	e69e      	b.n	8008cfa <_printf_float+0xbe>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	9205      	str	r2, [sp, #20]
 8008fc4:	47b8      	blx	r7
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	f43f ae97 	beq.w	8008cfa <_printf_float+0xbe>
 8008fcc:	9a05      	ldr	r2, [sp, #20]
 8008fce:	f10b 0b01 	add.w	fp, fp, #1
 8008fd2:	e7b9      	b.n	8008f48 <_printf_float+0x30c>
 8008fd4:	ee18 3a10 	vmov	r3, s16
 8008fd8:	4652      	mov	r2, sl
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b8      	blx	r7
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d1be      	bne.n	8008f62 <_printf_float+0x326>
 8008fe4:	e689      	b.n	8008cfa <_printf_float+0xbe>
 8008fe6:	9a05      	ldr	r2, [sp, #20]
 8008fe8:	464b      	mov	r3, r9
 8008fea:	4442      	add	r2, r8
 8008fec:	4631      	mov	r1, r6
 8008fee:	4628      	mov	r0, r5
 8008ff0:	47b8      	blx	r7
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d1c1      	bne.n	8008f7a <_printf_float+0x33e>
 8008ff6:	e680      	b.n	8008cfa <_printf_float+0xbe>
 8008ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ffa:	2a01      	cmp	r2, #1
 8008ffc:	dc01      	bgt.n	8009002 <_printf_float+0x3c6>
 8008ffe:	07db      	lsls	r3, r3, #31
 8009000:	d53a      	bpl.n	8009078 <_printf_float+0x43c>
 8009002:	2301      	movs	r3, #1
 8009004:	4642      	mov	r2, r8
 8009006:	4631      	mov	r1, r6
 8009008:	4628      	mov	r0, r5
 800900a:	47b8      	blx	r7
 800900c:	3001      	adds	r0, #1
 800900e:	f43f ae74 	beq.w	8008cfa <_printf_float+0xbe>
 8009012:	ee18 3a10 	vmov	r3, s16
 8009016:	4652      	mov	r2, sl
 8009018:	4631      	mov	r1, r6
 800901a:	4628      	mov	r0, r5
 800901c:	47b8      	blx	r7
 800901e:	3001      	adds	r0, #1
 8009020:	f43f ae6b 	beq.w	8008cfa <_printf_float+0xbe>
 8009024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009028:	2200      	movs	r2, #0
 800902a:	2300      	movs	r3, #0
 800902c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009030:	f7f7 fd72 	bl	8000b18 <__aeabi_dcmpeq>
 8009034:	b9d8      	cbnz	r0, 800906e <_printf_float+0x432>
 8009036:	f10a 33ff 	add.w	r3, sl, #4294967295
 800903a:	f108 0201 	add.w	r2, r8, #1
 800903e:	4631      	mov	r1, r6
 8009040:	4628      	mov	r0, r5
 8009042:	47b8      	blx	r7
 8009044:	3001      	adds	r0, #1
 8009046:	d10e      	bne.n	8009066 <_printf_float+0x42a>
 8009048:	e657      	b.n	8008cfa <_printf_float+0xbe>
 800904a:	2301      	movs	r3, #1
 800904c:	4652      	mov	r2, sl
 800904e:	4631      	mov	r1, r6
 8009050:	4628      	mov	r0, r5
 8009052:	47b8      	blx	r7
 8009054:	3001      	adds	r0, #1
 8009056:	f43f ae50 	beq.w	8008cfa <_printf_float+0xbe>
 800905a:	f108 0801 	add.w	r8, r8, #1
 800905e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009060:	3b01      	subs	r3, #1
 8009062:	4543      	cmp	r3, r8
 8009064:	dcf1      	bgt.n	800904a <_printf_float+0x40e>
 8009066:	464b      	mov	r3, r9
 8009068:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800906c:	e6da      	b.n	8008e24 <_printf_float+0x1e8>
 800906e:	f04f 0800 	mov.w	r8, #0
 8009072:	f104 0a1a 	add.w	sl, r4, #26
 8009076:	e7f2      	b.n	800905e <_printf_float+0x422>
 8009078:	2301      	movs	r3, #1
 800907a:	4642      	mov	r2, r8
 800907c:	e7df      	b.n	800903e <_printf_float+0x402>
 800907e:	2301      	movs	r3, #1
 8009080:	464a      	mov	r2, r9
 8009082:	4631      	mov	r1, r6
 8009084:	4628      	mov	r0, r5
 8009086:	47b8      	blx	r7
 8009088:	3001      	adds	r0, #1
 800908a:	f43f ae36 	beq.w	8008cfa <_printf_float+0xbe>
 800908e:	f108 0801 	add.w	r8, r8, #1
 8009092:	68e3      	ldr	r3, [r4, #12]
 8009094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009096:	1a5b      	subs	r3, r3, r1
 8009098:	4543      	cmp	r3, r8
 800909a:	dcf0      	bgt.n	800907e <_printf_float+0x442>
 800909c:	e6f8      	b.n	8008e90 <_printf_float+0x254>
 800909e:	f04f 0800 	mov.w	r8, #0
 80090a2:	f104 0919 	add.w	r9, r4, #25
 80090a6:	e7f4      	b.n	8009092 <_printf_float+0x456>

080090a8 <_printf_common>:
 80090a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ac:	4616      	mov	r6, r2
 80090ae:	4699      	mov	r9, r3
 80090b0:	688a      	ldr	r2, [r1, #8]
 80090b2:	690b      	ldr	r3, [r1, #16]
 80090b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090b8:	4293      	cmp	r3, r2
 80090ba:	bfb8      	it	lt
 80090bc:	4613      	movlt	r3, r2
 80090be:	6033      	str	r3, [r6, #0]
 80090c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090c4:	4607      	mov	r7, r0
 80090c6:	460c      	mov	r4, r1
 80090c8:	b10a      	cbz	r2, 80090ce <_printf_common+0x26>
 80090ca:	3301      	adds	r3, #1
 80090cc:	6033      	str	r3, [r6, #0]
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	0699      	lsls	r1, r3, #26
 80090d2:	bf42      	ittt	mi
 80090d4:	6833      	ldrmi	r3, [r6, #0]
 80090d6:	3302      	addmi	r3, #2
 80090d8:	6033      	strmi	r3, [r6, #0]
 80090da:	6825      	ldr	r5, [r4, #0]
 80090dc:	f015 0506 	ands.w	r5, r5, #6
 80090e0:	d106      	bne.n	80090f0 <_printf_common+0x48>
 80090e2:	f104 0a19 	add.w	sl, r4, #25
 80090e6:	68e3      	ldr	r3, [r4, #12]
 80090e8:	6832      	ldr	r2, [r6, #0]
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	42ab      	cmp	r3, r5
 80090ee:	dc26      	bgt.n	800913e <_printf_common+0x96>
 80090f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090f4:	1e13      	subs	r3, r2, #0
 80090f6:	6822      	ldr	r2, [r4, #0]
 80090f8:	bf18      	it	ne
 80090fa:	2301      	movne	r3, #1
 80090fc:	0692      	lsls	r2, r2, #26
 80090fe:	d42b      	bmi.n	8009158 <_printf_common+0xb0>
 8009100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009104:	4649      	mov	r1, r9
 8009106:	4638      	mov	r0, r7
 8009108:	47c0      	blx	r8
 800910a:	3001      	adds	r0, #1
 800910c:	d01e      	beq.n	800914c <_printf_common+0xa4>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	f003 0306 	and.w	r3, r3, #6
 8009116:	2b04      	cmp	r3, #4
 8009118:	bf02      	ittt	eq
 800911a:	68e5      	ldreq	r5, [r4, #12]
 800911c:	6833      	ldreq	r3, [r6, #0]
 800911e:	1aed      	subeq	r5, r5, r3
 8009120:	68a3      	ldr	r3, [r4, #8]
 8009122:	bf0c      	ite	eq
 8009124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009128:	2500      	movne	r5, #0
 800912a:	4293      	cmp	r3, r2
 800912c:	bfc4      	itt	gt
 800912e:	1a9b      	subgt	r3, r3, r2
 8009130:	18ed      	addgt	r5, r5, r3
 8009132:	2600      	movs	r6, #0
 8009134:	341a      	adds	r4, #26
 8009136:	42b5      	cmp	r5, r6
 8009138:	d11a      	bne.n	8009170 <_printf_common+0xc8>
 800913a:	2000      	movs	r0, #0
 800913c:	e008      	b.n	8009150 <_printf_common+0xa8>
 800913e:	2301      	movs	r3, #1
 8009140:	4652      	mov	r2, sl
 8009142:	4649      	mov	r1, r9
 8009144:	4638      	mov	r0, r7
 8009146:	47c0      	blx	r8
 8009148:	3001      	adds	r0, #1
 800914a:	d103      	bne.n	8009154 <_printf_common+0xac>
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009154:	3501      	adds	r5, #1
 8009156:	e7c6      	b.n	80090e6 <_printf_common+0x3e>
 8009158:	18e1      	adds	r1, r4, r3
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	2030      	movs	r0, #48	; 0x30
 800915e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009162:	4422      	add	r2, r4
 8009164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800916c:	3302      	adds	r3, #2
 800916e:	e7c7      	b.n	8009100 <_printf_common+0x58>
 8009170:	2301      	movs	r3, #1
 8009172:	4622      	mov	r2, r4
 8009174:	4649      	mov	r1, r9
 8009176:	4638      	mov	r0, r7
 8009178:	47c0      	blx	r8
 800917a:	3001      	adds	r0, #1
 800917c:	d0e6      	beq.n	800914c <_printf_common+0xa4>
 800917e:	3601      	adds	r6, #1
 8009180:	e7d9      	b.n	8009136 <_printf_common+0x8e>
	...

08009184 <_printf_i>:
 8009184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	7e0f      	ldrb	r7, [r1, #24]
 800918a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800918c:	2f78      	cmp	r7, #120	; 0x78
 800918e:	4691      	mov	r9, r2
 8009190:	4680      	mov	r8, r0
 8009192:	460c      	mov	r4, r1
 8009194:	469a      	mov	sl, r3
 8009196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800919a:	d807      	bhi.n	80091ac <_printf_i+0x28>
 800919c:	2f62      	cmp	r7, #98	; 0x62
 800919e:	d80a      	bhi.n	80091b6 <_printf_i+0x32>
 80091a0:	2f00      	cmp	r7, #0
 80091a2:	f000 80d4 	beq.w	800934e <_printf_i+0x1ca>
 80091a6:	2f58      	cmp	r7, #88	; 0x58
 80091a8:	f000 80c0 	beq.w	800932c <_printf_i+0x1a8>
 80091ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091b4:	e03a      	b.n	800922c <_printf_i+0xa8>
 80091b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091ba:	2b15      	cmp	r3, #21
 80091bc:	d8f6      	bhi.n	80091ac <_printf_i+0x28>
 80091be:	a101      	add	r1, pc, #4	; (adr r1, 80091c4 <_printf_i+0x40>)
 80091c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091c4:	0800921d 	.word	0x0800921d
 80091c8:	08009231 	.word	0x08009231
 80091cc:	080091ad 	.word	0x080091ad
 80091d0:	080091ad 	.word	0x080091ad
 80091d4:	080091ad 	.word	0x080091ad
 80091d8:	080091ad 	.word	0x080091ad
 80091dc:	08009231 	.word	0x08009231
 80091e0:	080091ad 	.word	0x080091ad
 80091e4:	080091ad 	.word	0x080091ad
 80091e8:	080091ad 	.word	0x080091ad
 80091ec:	080091ad 	.word	0x080091ad
 80091f0:	08009335 	.word	0x08009335
 80091f4:	0800925d 	.word	0x0800925d
 80091f8:	080092ef 	.word	0x080092ef
 80091fc:	080091ad 	.word	0x080091ad
 8009200:	080091ad 	.word	0x080091ad
 8009204:	08009357 	.word	0x08009357
 8009208:	080091ad 	.word	0x080091ad
 800920c:	0800925d 	.word	0x0800925d
 8009210:	080091ad 	.word	0x080091ad
 8009214:	080091ad 	.word	0x080091ad
 8009218:	080092f7 	.word	0x080092f7
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	1d1a      	adds	r2, r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	602a      	str	r2, [r5, #0]
 8009224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800922c:	2301      	movs	r3, #1
 800922e:	e09f      	b.n	8009370 <_printf_i+0x1ec>
 8009230:	6820      	ldr	r0, [r4, #0]
 8009232:	682b      	ldr	r3, [r5, #0]
 8009234:	0607      	lsls	r7, r0, #24
 8009236:	f103 0104 	add.w	r1, r3, #4
 800923a:	6029      	str	r1, [r5, #0]
 800923c:	d501      	bpl.n	8009242 <_printf_i+0xbe>
 800923e:	681e      	ldr	r6, [r3, #0]
 8009240:	e003      	b.n	800924a <_printf_i+0xc6>
 8009242:	0646      	lsls	r6, r0, #25
 8009244:	d5fb      	bpl.n	800923e <_printf_i+0xba>
 8009246:	f9b3 6000 	ldrsh.w	r6, [r3]
 800924a:	2e00      	cmp	r6, #0
 800924c:	da03      	bge.n	8009256 <_printf_i+0xd2>
 800924e:	232d      	movs	r3, #45	; 0x2d
 8009250:	4276      	negs	r6, r6
 8009252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009256:	485a      	ldr	r0, [pc, #360]	; (80093c0 <_printf_i+0x23c>)
 8009258:	230a      	movs	r3, #10
 800925a:	e012      	b.n	8009282 <_printf_i+0xfe>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	6820      	ldr	r0, [r4, #0]
 8009260:	1d19      	adds	r1, r3, #4
 8009262:	6029      	str	r1, [r5, #0]
 8009264:	0605      	lsls	r5, r0, #24
 8009266:	d501      	bpl.n	800926c <_printf_i+0xe8>
 8009268:	681e      	ldr	r6, [r3, #0]
 800926a:	e002      	b.n	8009272 <_printf_i+0xee>
 800926c:	0641      	lsls	r1, r0, #25
 800926e:	d5fb      	bpl.n	8009268 <_printf_i+0xe4>
 8009270:	881e      	ldrh	r6, [r3, #0]
 8009272:	4853      	ldr	r0, [pc, #332]	; (80093c0 <_printf_i+0x23c>)
 8009274:	2f6f      	cmp	r7, #111	; 0x6f
 8009276:	bf0c      	ite	eq
 8009278:	2308      	moveq	r3, #8
 800927a:	230a      	movne	r3, #10
 800927c:	2100      	movs	r1, #0
 800927e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009282:	6865      	ldr	r5, [r4, #4]
 8009284:	60a5      	str	r5, [r4, #8]
 8009286:	2d00      	cmp	r5, #0
 8009288:	bfa2      	ittt	ge
 800928a:	6821      	ldrge	r1, [r4, #0]
 800928c:	f021 0104 	bicge.w	r1, r1, #4
 8009290:	6021      	strge	r1, [r4, #0]
 8009292:	b90e      	cbnz	r6, 8009298 <_printf_i+0x114>
 8009294:	2d00      	cmp	r5, #0
 8009296:	d04b      	beq.n	8009330 <_printf_i+0x1ac>
 8009298:	4615      	mov	r5, r2
 800929a:	fbb6 f1f3 	udiv	r1, r6, r3
 800929e:	fb03 6711 	mls	r7, r3, r1, r6
 80092a2:	5dc7      	ldrb	r7, [r0, r7]
 80092a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092a8:	4637      	mov	r7, r6
 80092aa:	42bb      	cmp	r3, r7
 80092ac:	460e      	mov	r6, r1
 80092ae:	d9f4      	bls.n	800929a <_printf_i+0x116>
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d10b      	bne.n	80092cc <_printf_i+0x148>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	07de      	lsls	r6, r3, #31
 80092b8:	d508      	bpl.n	80092cc <_printf_i+0x148>
 80092ba:	6923      	ldr	r3, [r4, #16]
 80092bc:	6861      	ldr	r1, [r4, #4]
 80092be:	4299      	cmp	r1, r3
 80092c0:	bfde      	ittt	le
 80092c2:	2330      	movle	r3, #48	; 0x30
 80092c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092cc:	1b52      	subs	r2, r2, r5
 80092ce:	6122      	str	r2, [r4, #16]
 80092d0:	f8cd a000 	str.w	sl, [sp]
 80092d4:	464b      	mov	r3, r9
 80092d6:	aa03      	add	r2, sp, #12
 80092d8:	4621      	mov	r1, r4
 80092da:	4640      	mov	r0, r8
 80092dc:	f7ff fee4 	bl	80090a8 <_printf_common>
 80092e0:	3001      	adds	r0, #1
 80092e2:	d14a      	bne.n	800937a <_printf_i+0x1f6>
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	b004      	add	sp, #16
 80092ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	f043 0320 	orr.w	r3, r3, #32
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	4833      	ldr	r0, [pc, #204]	; (80093c4 <_printf_i+0x240>)
 80092f8:	2778      	movs	r7, #120	; 0x78
 80092fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	6829      	ldr	r1, [r5, #0]
 8009302:	061f      	lsls	r7, r3, #24
 8009304:	f851 6b04 	ldr.w	r6, [r1], #4
 8009308:	d402      	bmi.n	8009310 <_printf_i+0x18c>
 800930a:	065f      	lsls	r7, r3, #25
 800930c:	bf48      	it	mi
 800930e:	b2b6      	uxthmi	r6, r6
 8009310:	07df      	lsls	r7, r3, #31
 8009312:	bf48      	it	mi
 8009314:	f043 0320 	orrmi.w	r3, r3, #32
 8009318:	6029      	str	r1, [r5, #0]
 800931a:	bf48      	it	mi
 800931c:	6023      	strmi	r3, [r4, #0]
 800931e:	b91e      	cbnz	r6, 8009328 <_printf_i+0x1a4>
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	f023 0320 	bic.w	r3, r3, #32
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	2310      	movs	r3, #16
 800932a:	e7a7      	b.n	800927c <_printf_i+0xf8>
 800932c:	4824      	ldr	r0, [pc, #144]	; (80093c0 <_printf_i+0x23c>)
 800932e:	e7e4      	b.n	80092fa <_printf_i+0x176>
 8009330:	4615      	mov	r5, r2
 8009332:	e7bd      	b.n	80092b0 <_printf_i+0x12c>
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	6826      	ldr	r6, [r4, #0]
 8009338:	6961      	ldr	r1, [r4, #20]
 800933a:	1d18      	adds	r0, r3, #4
 800933c:	6028      	str	r0, [r5, #0]
 800933e:	0635      	lsls	r5, r6, #24
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	d501      	bpl.n	8009348 <_printf_i+0x1c4>
 8009344:	6019      	str	r1, [r3, #0]
 8009346:	e002      	b.n	800934e <_printf_i+0x1ca>
 8009348:	0670      	lsls	r0, r6, #25
 800934a:	d5fb      	bpl.n	8009344 <_printf_i+0x1c0>
 800934c:	8019      	strh	r1, [r3, #0]
 800934e:	2300      	movs	r3, #0
 8009350:	6123      	str	r3, [r4, #16]
 8009352:	4615      	mov	r5, r2
 8009354:	e7bc      	b.n	80092d0 <_printf_i+0x14c>
 8009356:	682b      	ldr	r3, [r5, #0]
 8009358:	1d1a      	adds	r2, r3, #4
 800935a:	602a      	str	r2, [r5, #0]
 800935c:	681d      	ldr	r5, [r3, #0]
 800935e:	6862      	ldr	r2, [r4, #4]
 8009360:	2100      	movs	r1, #0
 8009362:	4628      	mov	r0, r5
 8009364:	f7f6 ff5c 	bl	8000220 <memchr>
 8009368:	b108      	cbz	r0, 800936e <_printf_i+0x1ea>
 800936a:	1b40      	subs	r0, r0, r5
 800936c:	6060      	str	r0, [r4, #4]
 800936e:	6863      	ldr	r3, [r4, #4]
 8009370:	6123      	str	r3, [r4, #16]
 8009372:	2300      	movs	r3, #0
 8009374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009378:	e7aa      	b.n	80092d0 <_printf_i+0x14c>
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	462a      	mov	r2, r5
 800937e:	4649      	mov	r1, r9
 8009380:	4640      	mov	r0, r8
 8009382:	47d0      	blx	sl
 8009384:	3001      	adds	r0, #1
 8009386:	d0ad      	beq.n	80092e4 <_printf_i+0x160>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	079b      	lsls	r3, r3, #30
 800938c:	d413      	bmi.n	80093b6 <_printf_i+0x232>
 800938e:	68e0      	ldr	r0, [r4, #12]
 8009390:	9b03      	ldr	r3, [sp, #12]
 8009392:	4298      	cmp	r0, r3
 8009394:	bfb8      	it	lt
 8009396:	4618      	movlt	r0, r3
 8009398:	e7a6      	b.n	80092e8 <_printf_i+0x164>
 800939a:	2301      	movs	r3, #1
 800939c:	4632      	mov	r2, r6
 800939e:	4649      	mov	r1, r9
 80093a0:	4640      	mov	r0, r8
 80093a2:	47d0      	blx	sl
 80093a4:	3001      	adds	r0, #1
 80093a6:	d09d      	beq.n	80092e4 <_printf_i+0x160>
 80093a8:	3501      	adds	r5, #1
 80093aa:	68e3      	ldr	r3, [r4, #12]
 80093ac:	9903      	ldr	r1, [sp, #12]
 80093ae:	1a5b      	subs	r3, r3, r1
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	dcf2      	bgt.n	800939a <_printf_i+0x216>
 80093b4:	e7eb      	b.n	800938e <_printf_i+0x20a>
 80093b6:	2500      	movs	r5, #0
 80093b8:	f104 0619 	add.w	r6, r4, #25
 80093bc:	e7f5      	b.n	80093aa <_printf_i+0x226>
 80093be:	bf00      	nop
 80093c0:	0800b912 	.word	0x0800b912
 80093c4:	0800b923 	.word	0x0800b923

080093c8 <std>:
 80093c8:	2300      	movs	r3, #0
 80093ca:	b510      	push	{r4, lr}
 80093cc:	4604      	mov	r4, r0
 80093ce:	e9c0 3300 	strd	r3, r3, [r0]
 80093d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093d6:	6083      	str	r3, [r0, #8]
 80093d8:	8181      	strh	r1, [r0, #12]
 80093da:	6643      	str	r3, [r0, #100]	; 0x64
 80093dc:	81c2      	strh	r2, [r0, #14]
 80093de:	6183      	str	r3, [r0, #24]
 80093e0:	4619      	mov	r1, r3
 80093e2:	2208      	movs	r2, #8
 80093e4:	305c      	adds	r0, #92	; 0x5c
 80093e6:	f000 f914 	bl	8009612 <memset>
 80093ea:	4b0d      	ldr	r3, [pc, #52]	; (8009420 <std+0x58>)
 80093ec:	6263      	str	r3, [r4, #36]	; 0x24
 80093ee:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <std+0x5c>)
 80093f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80093f2:	4b0d      	ldr	r3, [pc, #52]	; (8009428 <std+0x60>)
 80093f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093f6:	4b0d      	ldr	r3, [pc, #52]	; (800942c <std+0x64>)
 80093f8:	6323      	str	r3, [r4, #48]	; 0x30
 80093fa:	4b0d      	ldr	r3, [pc, #52]	; (8009430 <std+0x68>)
 80093fc:	6224      	str	r4, [r4, #32]
 80093fe:	429c      	cmp	r4, r3
 8009400:	d006      	beq.n	8009410 <std+0x48>
 8009402:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009406:	4294      	cmp	r4, r2
 8009408:	d002      	beq.n	8009410 <std+0x48>
 800940a:	33d0      	adds	r3, #208	; 0xd0
 800940c:	429c      	cmp	r4, r3
 800940e:	d105      	bne.n	800941c <std+0x54>
 8009410:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009418:	f000 b978 	b.w	800970c <__retarget_lock_init_recursive>
 800941c:	bd10      	pop	{r4, pc}
 800941e:	bf00      	nop
 8009420:	0800958d 	.word	0x0800958d
 8009424:	080095af 	.word	0x080095af
 8009428:	080095e7 	.word	0x080095e7
 800942c:	0800960b 	.word	0x0800960b
 8009430:	200004a8 	.word	0x200004a8

08009434 <stdio_exit_handler>:
 8009434:	4a02      	ldr	r2, [pc, #8]	; (8009440 <stdio_exit_handler+0xc>)
 8009436:	4903      	ldr	r1, [pc, #12]	; (8009444 <stdio_exit_handler+0x10>)
 8009438:	4803      	ldr	r0, [pc, #12]	; (8009448 <stdio_exit_handler+0x14>)
 800943a:	f000 b869 	b.w	8009510 <_fwalk_sglue>
 800943e:	bf00      	nop
 8009440:	20000014 	.word	0x20000014
 8009444:	0800b361 	.word	0x0800b361
 8009448:	20000020 	.word	0x20000020

0800944c <cleanup_stdio>:
 800944c:	6841      	ldr	r1, [r0, #4]
 800944e:	4b0c      	ldr	r3, [pc, #48]	; (8009480 <cleanup_stdio+0x34>)
 8009450:	4299      	cmp	r1, r3
 8009452:	b510      	push	{r4, lr}
 8009454:	4604      	mov	r4, r0
 8009456:	d001      	beq.n	800945c <cleanup_stdio+0x10>
 8009458:	f001 ff82 	bl	800b360 <_fflush_r>
 800945c:	68a1      	ldr	r1, [r4, #8]
 800945e:	4b09      	ldr	r3, [pc, #36]	; (8009484 <cleanup_stdio+0x38>)
 8009460:	4299      	cmp	r1, r3
 8009462:	d002      	beq.n	800946a <cleanup_stdio+0x1e>
 8009464:	4620      	mov	r0, r4
 8009466:	f001 ff7b 	bl	800b360 <_fflush_r>
 800946a:	68e1      	ldr	r1, [r4, #12]
 800946c:	4b06      	ldr	r3, [pc, #24]	; (8009488 <cleanup_stdio+0x3c>)
 800946e:	4299      	cmp	r1, r3
 8009470:	d004      	beq.n	800947c <cleanup_stdio+0x30>
 8009472:	4620      	mov	r0, r4
 8009474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009478:	f001 bf72 	b.w	800b360 <_fflush_r>
 800947c:	bd10      	pop	{r4, pc}
 800947e:	bf00      	nop
 8009480:	200004a8 	.word	0x200004a8
 8009484:	20000510 	.word	0x20000510
 8009488:	20000578 	.word	0x20000578

0800948c <global_stdio_init.part.0>:
 800948c:	b510      	push	{r4, lr}
 800948e:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <global_stdio_init.part.0+0x30>)
 8009490:	4c0b      	ldr	r4, [pc, #44]	; (80094c0 <global_stdio_init.part.0+0x34>)
 8009492:	4a0c      	ldr	r2, [pc, #48]	; (80094c4 <global_stdio_init.part.0+0x38>)
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	4620      	mov	r0, r4
 8009498:	2200      	movs	r2, #0
 800949a:	2104      	movs	r1, #4
 800949c:	f7ff ff94 	bl	80093c8 <std>
 80094a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80094a4:	2201      	movs	r2, #1
 80094a6:	2109      	movs	r1, #9
 80094a8:	f7ff ff8e 	bl	80093c8 <std>
 80094ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80094b0:	2202      	movs	r2, #2
 80094b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094b6:	2112      	movs	r1, #18
 80094b8:	f7ff bf86 	b.w	80093c8 <std>
 80094bc:	200005e0 	.word	0x200005e0
 80094c0:	200004a8 	.word	0x200004a8
 80094c4:	08009435 	.word	0x08009435

080094c8 <__sfp_lock_acquire>:
 80094c8:	4801      	ldr	r0, [pc, #4]	; (80094d0 <__sfp_lock_acquire+0x8>)
 80094ca:	f000 b920 	b.w	800970e <__retarget_lock_acquire_recursive>
 80094ce:	bf00      	nop
 80094d0:	200005e9 	.word	0x200005e9

080094d4 <__sfp_lock_release>:
 80094d4:	4801      	ldr	r0, [pc, #4]	; (80094dc <__sfp_lock_release+0x8>)
 80094d6:	f000 b91b 	b.w	8009710 <__retarget_lock_release_recursive>
 80094da:	bf00      	nop
 80094dc:	200005e9 	.word	0x200005e9

080094e0 <__sinit>:
 80094e0:	b510      	push	{r4, lr}
 80094e2:	4604      	mov	r4, r0
 80094e4:	f7ff fff0 	bl	80094c8 <__sfp_lock_acquire>
 80094e8:	6a23      	ldr	r3, [r4, #32]
 80094ea:	b11b      	cbz	r3, 80094f4 <__sinit+0x14>
 80094ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f0:	f7ff bff0 	b.w	80094d4 <__sfp_lock_release>
 80094f4:	4b04      	ldr	r3, [pc, #16]	; (8009508 <__sinit+0x28>)
 80094f6:	6223      	str	r3, [r4, #32]
 80094f8:	4b04      	ldr	r3, [pc, #16]	; (800950c <__sinit+0x2c>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f5      	bne.n	80094ec <__sinit+0xc>
 8009500:	f7ff ffc4 	bl	800948c <global_stdio_init.part.0>
 8009504:	e7f2      	b.n	80094ec <__sinit+0xc>
 8009506:	bf00      	nop
 8009508:	0800944d 	.word	0x0800944d
 800950c:	200005e0 	.word	0x200005e0

08009510 <_fwalk_sglue>:
 8009510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009514:	4607      	mov	r7, r0
 8009516:	4688      	mov	r8, r1
 8009518:	4614      	mov	r4, r2
 800951a:	2600      	movs	r6, #0
 800951c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009520:	f1b9 0901 	subs.w	r9, r9, #1
 8009524:	d505      	bpl.n	8009532 <_fwalk_sglue+0x22>
 8009526:	6824      	ldr	r4, [r4, #0]
 8009528:	2c00      	cmp	r4, #0
 800952a:	d1f7      	bne.n	800951c <_fwalk_sglue+0xc>
 800952c:	4630      	mov	r0, r6
 800952e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009532:	89ab      	ldrh	r3, [r5, #12]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d907      	bls.n	8009548 <_fwalk_sglue+0x38>
 8009538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800953c:	3301      	adds	r3, #1
 800953e:	d003      	beq.n	8009548 <_fwalk_sglue+0x38>
 8009540:	4629      	mov	r1, r5
 8009542:	4638      	mov	r0, r7
 8009544:	47c0      	blx	r8
 8009546:	4306      	orrs	r6, r0
 8009548:	3568      	adds	r5, #104	; 0x68
 800954a:	e7e9      	b.n	8009520 <_fwalk_sglue+0x10>

0800954c <siprintf>:
 800954c:	b40e      	push	{r1, r2, r3}
 800954e:	b500      	push	{lr}
 8009550:	b09c      	sub	sp, #112	; 0x70
 8009552:	ab1d      	add	r3, sp, #116	; 0x74
 8009554:	9002      	str	r0, [sp, #8]
 8009556:	9006      	str	r0, [sp, #24]
 8009558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800955c:	4809      	ldr	r0, [pc, #36]	; (8009584 <siprintf+0x38>)
 800955e:	9107      	str	r1, [sp, #28]
 8009560:	9104      	str	r1, [sp, #16]
 8009562:	4909      	ldr	r1, [pc, #36]	; (8009588 <siprintf+0x3c>)
 8009564:	f853 2b04 	ldr.w	r2, [r3], #4
 8009568:	9105      	str	r1, [sp, #20]
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	a902      	add	r1, sp, #8
 8009570:	f001 fc2e 	bl	800add0 <_svfiprintf_r>
 8009574:	9b02      	ldr	r3, [sp, #8]
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]
 800957a:	b01c      	add	sp, #112	; 0x70
 800957c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009580:	b003      	add	sp, #12
 8009582:	4770      	bx	lr
 8009584:	2000006c 	.word	0x2000006c
 8009588:	ffff0208 	.word	0xffff0208

0800958c <__sread>:
 800958c:	b510      	push	{r4, lr}
 800958e:	460c      	mov	r4, r1
 8009590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009594:	f000 f86c 	bl	8009670 <_read_r>
 8009598:	2800      	cmp	r0, #0
 800959a:	bfab      	itete	ge
 800959c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800959e:	89a3      	ldrhlt	r3, [r4, #12]
 80095a0:	181b      	addge	r3, r3, r0
 80095a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095a6:	bfac      	ite	ge
 80095a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80095aa:	81a3      	strhlt	r3, [r4, #12]
 80095ac:	bd10      	pop	{r4, pc}

080095ae <__swrite>:
 80095ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b2:	461f      	mov	r7, r3
 80095b4:	898b      	ldrh	r3, [r1, #12]
 80095b6:	05db      	lsls	r3, r3, #23
 80095b8:	4605      	mov	r5, r0
 80095ba:	460c      	mov	r4, r1
 80095bc:	4616      	mov	r6, r2
 80095be:	d505      	bpl.n	80095cc <__swrite+0x1e>
 80095c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c4:	2302      	movs	r3, #2
 80095c6:	2200      	movs	r2, #0
 80095c8:	f000 f840 	bl	800964c <_lseek_r>
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095d6:	81a3      	strh	r3, [r4, #12]
 80095d8:	4632      	mov	r2, r6
 80095da:	463b      	mov	r3, r7
 80095dc:	4628      	mov	r0, r5
 80095de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095e2:	f000 b857 	b.w	8009694 <_write_r>

080095e6 <__sseek>:
 80095e6:	b510      	push	{r4, lr}
 80095e8:	460c      	mov	r4, r1
 80095ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ee:	f000 f82d 	bl	800964c <_lseek_r>
 80095f2:	1c43      	adds	r3, r0, #1
 80095f4:	89a3      	ldrh	r3, [r4, #12]
 80095f6:	bf15      	itete	ne
 80095f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80095fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009602:	81a3      	strheq	r3, [r4, #12]
 8009604:	bf18      	it	ne
 8009606:	81a3      	strhne	r3, [r4, #12]
 8009608:	bd10      	pop	{r4, pc}

0800960a <__sclose>:
 800960a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800960e:	f000 b80d 	b.w	800962c <_close_r>

08009612 <memset>:
 8009612:	4402      	add	r2, r0
 8009614:	4603      	mov	r3, r0
 8009616:	4293      	cmp	r3, r2
 8009618:	d100      	bne.n	800961c <memset+0xa>
 800961a:	4770      	bx	lr
 800961c:	f803 1b01 	strb.w	r1, [r3], #1
 8009620:	e7f9      	b.n	8009616 <memset+0x4>
	...

08009624 <_localeconv_r>:
 8009624:	4800      	ldr	r0, [pc, #0]	; (8009628 <_localeconv_r+0x4>)
 8009626:	4770      	bx	lr
 8009628:	20000160 	.word	0x20000160

0800962c <_close_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d06      	ldr	r5, [pc, #24]	; (8009648 <_close_r+0x1c>)
 8009630:	2300      	movs	r3, #0
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	602b      	str	r3, [r5, #0]
 8009638:	f7f8 fedf 	bl	80023fa <_close>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_close_r+0x1a>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b103      	cbz	r3, 8009646 <_close_r+0x1a>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	200005e4 	.word	0x200005e4

0800964c <_lseek_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d07      	ldr	r5, [pc, #28]	; (800966c <_lseek_r+0x20>)
 8009650:	4604      	mov	r4, r0
 8009652:	4608      	mov	r0, r1
 8009654:	4611      	mov	r1, r2
 8009656:	2200      	movs	r2, #0
 8009658:	602a      	str	r2, [r5, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	f7f8 fef4 	bl	8002448 <_lseek>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_lseek_r+0x1e>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_lseek_r+0x1e>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	200005e4 	.word	0x200005e4

08009670 <_read_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d07      	ldr	r5, [pc, #28]	; (8009690 <_read_r+0x20>)
 8009674:	4604      	mov	r4, r0
 8009676:	4608      	mov	r0, r1
 8009678:	4611      	mov	r1, r2
 800967a:	2200      	movs	r2, #0
 800967c:	602a      	str	r2, [r5, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	f7f8 fe82 	bl	8002388 <_read>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_read_r+0x1e>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_read_r+0x1e>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	200005e4 	.word	0x200005e4

08009694 <_write_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4d07      	ldr	r5, [pc, #28]	; (80096b4 <_write_r+0x20>)
 8009698:	4604      	mov	r4, r0
 800969a:	4608      	mov	r0, r1
 800969c:	4611      	mov	r1, r2
 800969e:	2200      	movs	r2, #0
 80096a0:	602a      	str	r2, [r5, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	f7f8 fe8d 	bl	80023c2 <_write>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_write_r+0x1e>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_write_r+0x1e>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	200005e4 	.word	0x200005e4

080096b8 <__errno>:
 80096b8:	4b01      	ldr	r3, [pc, #4]	; (80096c0 <__errno+0x8>)
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	2000006c 	.word	0x2000006c

080096c4 <__libc_init_array>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	4d0d      	ldr	r5, [pc, #52]	; (80096fc <__libc_init_array+0x38>)
 80096c8:	4c0d      	ldr	r4, [pc, #52]	; (8009700 <__libc_init_array+0x3c>)
 80096ca:	1b64      	subs	r4, r4, r5
 80096cc:	10a4      	asrs	r4, r4, #2
 80096ce:	2600      	movs	r6, #0
 80096d0:	42a6      	cmp	r6, r4
 80096d2:	d109      	bne.n	80096e8 <__libc_init_array+0x24>
 80096d4:	4d0b      	ldr	r5, [pc, #44]	; (8009704 <__libc_init_array+0x40>)
 80096d6:	4c0c      	ldr	r4, [pc, #48]	; (8009708 <__libc_init_array+0x44>)
 80096d8:	f002 f896 	bl	800b808 <_init>
 80096dc:	1b64      	subs	r4, r4, r5
 80096de:	10a4      	asrs	r4, r4, #2
 80096e0:	2600      	movs	r6, #0
 80096e2:	42a6      	cmp	r6, r4
 80096e4:	d105      	bne.n	80096f2 <__libc_init_array+0x2e>
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ec:	4798      	blx	r3
 80096ee:	3601      	adds	r6, #1
 80096f0:	e7ee      	b.n	80096d0 <__libc_init_array+0xc>
 80096f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f6:	4798      	blx	r3
 80096f8:	3601      	adds	r6, #1
 80096fa:	e7f2      	b.n	80096e2 <__libc_init_array+0x1e>
 80096fc:	0800bc7c 	.word	0x0800bc7c
 8009700:	0800bc7c 	.word	0x0800bc7c
 8009704:	0800bc7c 	.word	0x0800bc7c
 8009708:	0800bc80 	.word	0x0800bc80

0800970c <__retarget_lock_init_recursive>:
 800970c:	4770      	bx	lr

0800970e <__retarget_lock_acquire_recursive>:
 800970e:	4770      	bx	lr

08009710 <__retarget_lock_release_recursive>:
 8009710:	4770      	bx	lr

08009712 <memcpy>:
 8009712:	440a      	add	r2, r1
 8009714:	4291      	cmp	r1, r2
 8009716:	f100 33ff 	add.w	r3, r0, #4294967295
 800971a:	d100      	bne.n	800971e <memcpy+0xc>
 800971c:	4770      	bx	lr
 800971e:	b510      	push	{r4, lr}
 8009720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009728:	4291      	cmp	r1, r2
 800972a:	d1f9      	bne.n	8009720 <memcpy+0xe>
 800972c:	bd10      	pop	{r4, pc}

0800972e <quorem>:
 800972e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009732:	6903      	ldr	r3, [r0, #16]
 8009734:	690c      	ldr	r4, [r1, #16]
 8009736:	42a3      	cmp	r3, r4
 8009738:	4607      	mov	r7, r0
 800973a:	db7e      	blt.n	800983a <quorem+0x10c>
 800973c:	3c01      	subs	r4, #1
 800973e:	f101 0814 	add.w	r8, r1, #20
 8009742:	f100 0514 	add.w	r5, r0, #20
 8009746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800974a:	9301      	str	r3, [sp, #4]
 800974c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009754:	3301      	adds	r3, #1
 8009756:	429a      	cmp	r2, r3
 8009758:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800975c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009760:	fbb2 f6f3 	udiv	r6, r2, r3
 8009764:	d331      	bcc.n	80097ca <quorem+0x9c>
 8009766:	f04f 0e00 	mov.w	lr, #0
 800976a:	4640      	mov	r0, r8
 800976c:	46ac      	mov	ip, r5
 800976e:	46f2      	mov	sl, lr
 8009770:	f850 2b04 	ldr.w	r2, [r0], #4
 8009774:	b293      	uxth	r3, r2
 8009776:	fb06 e303 	mla	r3, r6, r3, lr
 800977a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800977e:	0c1a      	lsrs	r2, r3, #16
 8009780:	b29b      	uxth	r3, r3
 8009782:	ebaa 0303 	sub.w	r3, sl, r3
 8009786:	f8dc a000 	ldr.w	sl, [ip]
 800978a:	fa13 f38a 	uxtah	r3, r3, sl
 800978e:	fb06 220e 	mla	r2, r6, lr, r2
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	9b00      	ldr	r3, [sp, #0]
 8009796:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800979a:	b292      	uxth	r2, r2
 800979c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80097a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80097a8:	4581      	cmp	r9, r0
 80097aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ae:	f84c 3b04 	str.w	r3, [ip], #4
 80097b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097b6:	d2db      	bcs.n	8009770 <quorem+0x42>
 80097b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80097bc:	b92b      	cbnz	r3, 80097ca <quorem+0x9c>
 80097be:	9b01      	ldr	r3, [sp, #4]
 80097c0:	3b04      	subs	r3, #4
 80097c2:	429d      	cmp	r5, r3
 80097c4:	461a      	mov	r2, r3
 80097c6:	d32c      	bcc.n	8009822 <quorem+0xf4>
 80097c8:	613c      	str	r4, [r7, #16]
 80097ca:	4638      	mov	r0, r7
 80097cc:	f001 f9a6 	bl	800ab1c <__mcmp>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	db22      	blt.n	800981a <quorem+0xec>
 80097d4:	3601      	adds	r6, #1
 80097d6:	4629      	mov	r1, r5
 80097d8:	2000      	movs	r0, #0
 80097da:	f858 2b04 	ldr.w	r2, [r8], #4
 80097de:	f8d1 c000 	ldr.w	ip, [r1]
 80097e2:	b293      	uxth	r3, r2
 80097e4:	1ac3      	subs	r3, r0, r3
 80097e6:	0c12      	lsrs	r2, r2, #16
 80097e8:	fa13 f38c 	uxtah	r3, r3, ip
 80097ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80097f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097fa:	45c1      	cmp	r9, r8
 80097fc:	f841 3b04 	str.w	r3, [r1], #4
 8009800:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009804:	d2e9      	bcs.n	80097da <quorem+0xac>
 8009806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800980a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800980e:	b922      	cbnz	r2, 800981a <quorem+0xec>
 8009810:	3b04      	subs	r3, #4
 8009812:	429d      	cmp	r5, r3
 8009814:	461a      	mov	r2, r3
 8009816:	d30a      	bcc.n	800982e <quorem+0x100>
 8009818:	613c      	str	r4, [r7, #16]
 800981a:	4630      	mov	r0, r6
 800981c:	b003      	add	sp, #12
 800981e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009822:	6812      	ldr	r2, [r2, #0]
 8009824:	3b04      	subs	r3, #4
 8009826:	2a00      	cmp	r2, #0
 8009828:	d1ce      	bne.n	80097c8 <quorem+0x9a>
 800982a:	3c01      	subs	r4, #1
 800982c:	e7c9      	b.n	80097c2 <quorem+0x94>
 800982e:	6812      	ldr	r2, [r2, #0]
 8009830:	3b04      	subs	r3, #4
 8009832:	2a00      	cmp	r2, #0
 8009834:	d1f0      	bne.n	8009818 <quorem+0xea>
 8009836:	3c01      	subs	r4, #1
 8009838:	e7eb      	b.n	8009812 <quorem+0xe4>
 800983a:	2000      	movs	r0, #0
 800983c:	e7ee      	b.n	800981c <quorem+0xee>
	...

08009840 <_dtoa_r>:
 8009840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009844:	ed2d 8b04 	vpush	{d8-d9}
 8009848:	69c5      	ldr	r5, [r0, #28]
 800984a:	b093      	sub	sp, #76	; 0x4c
 800984c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009850:	ec57 6b10 	vmov	r6, r7, d0
 8009854:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009858:	9107      	str	r1, [sp, #28]
 800985a:	4604      	mov	r4, r0
 800985c:	920a      	str	r2, [sp, #40]	; 0x28
 800985e:	930d      	str	r3, [sp, #52]	; 0x34
 8009860:	b975      	cbnz	r5, 8009880 <_dtoa_r+0x40>
 8009862:	2010      	movs	r0, #16
 8009864:	f000 fe2a 	bl	800a4bc <malloc>
 8009868:	4602      	mov	r2, r0
 800986a:	61e0      	str	r0, [r4, #28]
 800986c:	b920      	cbnz	r0, 8009878 <_dtoa_r+0x38>
 800986e:	4bae      	ldr	r3, [pc, #696]	; (8009b28 <_dtoa_r+0x2e8>)
 8009870:	21ef      	movs	r1, #239	; 0xef
 8009872:	48ae      	ldr	r0, [pc, #696]	; (8009b2c <_dtoa_r+0x2ec>)
 8009874:	f001 fe5c 	bl	800b530 <__assert_func>
 8009878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800987c:	6005      	str	r5, [r0, #0]
 800987e:	60c5      	str	r5, [r0, #12]
 8009880:	69e3      	ldr	r3, [r4, #28]
 8009882:	6819      	ldr	r1, [r3, #0]
 8009884:	b151      	cbz	r1, 800989c <_dtoa_r+0x5c>
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	604a      	str	r2, [r1, #4]
 800988a:	2301      	movs	r3, #1
 800988c:	4093      	lsls	r3, r2
 800988e:	608b      	str	r3, [r1, #8]
 8009890:	4620      	mov	r0, r4
 8009892:	f000 ff07 	bl	800a6a4 <_Bfree>
 8009896:	69e3      	ldr	r3, [r4, #28]
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	1e3b      	subs	r3, r7, #0
 800989e:	bfbb      	ittet	lt
 80098a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098a4:	9303      	strlt	r3, [sp, #12]
 80098a6:	2300      	movge	r3, #0
 80098a8:	2201      	movlt	r2, #1
 80098aa:	bfac      	ite	ge
 80098ac:	f8c8 3000 	strge.w	r3, [r8]
 80098b0:	f8c8 2000 	strlt.w	r2, [r8]
 80098b4:	4b9e      	ldr	r3, [pc, #632]	; (8009b30 <_dtoa_r+0x2f0>)
 80098b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80098ba:	ea33 0308 	bics.w	r3, r3, r8
 80098be:	d11b      	bne.n	80098f8 <_dtoa_r+0xb8>
 80098c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80098cc:	4333      	orrs	r3, r6
 80098ce:	f000 8593 	beq.w	800a3f8 <_dtoa_r+0xbb8>
 80098d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d4:	b963      	cbnz	r3, 80098f0 <_dtoa_r+0xb0>
 80098d6:	4b97      	ldr	r3, [pc, #604]	; (8009b34 <_dtoa_r+0x2f4>)
 80098d8:	e027      	b.n	800992a <_dtoa_r+0xea>
 80098da:	4b97      	ldr	r3, [pc, #604]	; (8009b38 <_dtoa_r+0x2f8>)
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	3308      	adds	r3, #8
 80098e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	9800      	ldr	r0, [sp, #0]
 80098e6:	b013      	add	sp, #76	; 0x4c
 80098e8:	ecbd 8b04 	vpop	{d8-d9}
 80098ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f0:	4b90      	ldr	r3, [pc, #576]	; (8009b34 <_dtoa_r+0x2f4>)
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	3303      	adds	r3, #3
 80098f6:	e7f3      	b.n	80098e0 <_dtoa_r+0xa0>
 80098f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098fc:	2200      	movs	r2, #0
 80098fe:	ec51 0b17 	vmov	r0, r1, d7
 8009902:	eeb0 8a47 	vmov.f32	s16, s14
 8009906:	eef0 8a67 	vmov.f32	s17, s15
 800990a:	2300      	movs	r3, #0
 800990c:	f7f7 f904 	bl	8000b18 <__aeabi_dcmpeq>
 8009910:	4681      	mov	r9, r0
 8009912:	b160      	cbz	r0, 800992e <_dtoa_r+0xee>
 8009914:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009916:	2301      	movs	r3, #1
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 8568 	beq.w	800a3f2 <_dtoa_r+0xbb2>
 8009922:	4b86      	ldr	r3, [pc, #536]	; (8009b3c <_dtoa_r+0x2fc>)
 8009924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	3b01      	subs	r3, #1
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	e7da      	b.n	80098e4 <_dtoa_r+0xa4>
 800992e:	aa10      	add	r2, sp, #64	; 0x40
 8009930:	a911      	add	r1, sp, #68	; 0x44
 8009932:	4620      	mov	r0, r4
 8009934:	eeb0 0a48 	vmov.f32	s0, s16
 8009938:	eef0 0a68 	vmov.f32	s1, s17
 800993c:	f001 f994 	bl	800ac68 <__d2b>
 8009940:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009944:	4682      	mov	sl, r0
 8009946:	2d00      	cmp	r5, #0
 8009948:	d07f      	beq.n	8009a4a <_dtoa_r+0x20a>
 800994a:	ee18 3a90 	vmov	r3, s17
 800994e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009952:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009956:	ec51 0b18 	vmov	r0, r1, d8
 800995a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800995e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009962:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009966:	4619      	mov	r1, r3
 8009968:	2200      	movs	r2, #0
 800996a:	4b75      	ldr	r3, [pc, #468]	; (8009b40 <_dtoa_r+0x300>)
 800996c:	f7f6 fcb4 	bl	80002d8 <__aeabi_dsub>
 8009970:	a367      	add	r3, pc, #412	; (adr r3, 8009b10 <_dtoa_r+0x2d0>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fe67 	bl	8000648 <__aeabi_dmul>
 800997a:	a367      	add	r3, pc, #412	; (adr r3, 8009b18 <_dtoa_r+0x2d8>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fcac 	bl	80002dc <__adddf3>
 8009984:	4606      	mov	r6, r0
 8009986:	4628      	mov	r0, r5
 8009988:	460f      	mov	r7, r1
 800998a:	f7f6 fdf3 	bl	8000574 <__aeabi_i2d>
 800998e:	a364      	add	r3, pc, #400	; (adr r3, 8009b20 <_dtoa_r+0x2e0>)
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f7f6 fe58 	bl	8000648 <__aeabi_dmul>
 8009998:	4602      	mov	r2, r0
 800999a:	460b      	mov	r3, r1
 800999c:	4630      	mov	r0, r6
 800999e:	4639      	mov	r1, r7
 80099a0:	f7f6 fc9c 	bl	80002dc <__adddf3>
 80099a4:	4606      	mov	r6, r0
 80099a6:	460f      	mov	r7, r1
 80099a8:	f7f7 f8fe 	bl	8000ba8 <__aeabi_d2iz>
 80099ac:	2200      	movs	r2, #0
 80099ae:	4683      	mov	fp, r0
 80099b0:	2300      	movs	r3, #0
 80099b2:	4630      	mov	r0, r6
 80099b4:	4639      	mov	r1, r7
 80099b6:	f7f7 f8b9 	bl	8000b2c <__aeabi_dcmplt>
 80099ba:	b148      	cbz	r0, 80099d0 <_dtoa_r+0x190>
 80099bc:	4658      	mov	r0, fp
 80099be:	f7f6 fdd9 	bl	8000574 <__aeabi_i2d>
 80099c2:	4632      	mov	r2, r6
 80099c4:	463b      	mov	r3, r7
 80099c6:	f7f7 f8a7 	bl	8000b18 <__aeabi_dcmpeq>
 80099ca:	b908      	cbnz	r0, 80099d0 <_dtoa_r+0x190>
 80099cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099d0:	f1bb 0f16 	cmp.w	fp, #22
 80099d4:	d857      	bhi.n	8009a86 <_dtoa_r+0x246>
 80099d6:	4b5b      	ldr	r3, [pc, #364]	; (8009b44 <_dtoa_r+0x304>)
 80099d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e0:	ec51 0b18 	vmov	r0, r1, d8
 80099e4:	f7f7 f8a2 	bl	8000b2c <__aeabi_dcmplt>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d04e      	beq.n	8009a8a <_dtoa_r+0x24a>
 80099ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099f0:	2300      	movs	r3, #0
 80099f2:	930c      	str	r3, [sp, #48]	; 0x30
 80099f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099f6:	1b5b      	subs	r3, r3, r5
 80099f8:	1e5a      	subs	r2, r3, #1
 80099fa:	bf45      	ittet	mi
 80099fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8009a00:	9305      	strmi	r3, [sp, #20]
 8009a02:	2300      	movpl	r3, #0
 8009a04:	2300      	movmi	r3, #0
 8009a06:	9206      	str	r2, [sp, #24]
 8009a08:	bf54      	ite	pl
 8009a0a:	9305      	strpl	r3, [sp, #20]
 8009a0c:	9306      	strmi	r3, [sp, #24]
 8009a0e:	f1bb 0f00 	cmp.w	fp, #0
 8009a12:	db3c      	blt.n	8009a8e <_dtoa_r+0x24e>
 8009a14:	9b06      	ldr	r3, [sp, #24]
 8009a16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009a1a:	445b      	add	r3, fp
 8009a1c:	9306      	str	r3, [sp, #24]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	9308      	str	r3, [sp, #32]
 8009a22:	9b07      	ldr	r3, [sp, #28]
 8009a24:	2b09      	cmp	r3, #9
 8009a26:	d868      	bhi.n	8009afa <_dtoa_r+0x2ba>
 8009a28:	2b05      	cmp	r3, #5
 8009a2a:	bfc4      	itt	gt
 8009a2c:	3b04      	subgt	r3, #4
 8009a2e:	9307      	strgt	r3, [sp, #28]
 8009a30:	9b07      	ldr	r3, [sp, #28]
 8009a32:	f1a3 0302 	sub.w	r3, r3, #2
 8009a36:	bfcc      	ite	gt
 8009a38:	2500      	movgt	r5, #0
 8009a3a:	2501      	movle	r5, #1
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	f200 8085 	bhi.w	8009b4c <_dtoa_r+0x30c>
 8009a42:	e8df f003 	tbb	[pc, r3]
 8009a46:	3b2e      	.short	0x3b2e
 8009a48:	5839      	.short	0x5839
 8009a4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009a4e:	441d      	add	r5, r3
 8009a50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009a54:	2b20      	cmp	r3, #32
 8009a56:	bfc1      	itttt	gt
 8009a58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009a60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009a64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009a68:	bfd6      	itet	le
 8009a6a:	f1c3 0320 	rsble	r3, r3, #32
 8009a6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009a72:	fa06 f003 	lslle.w	r0, r6, r3
 8009a76:	f7f6 fd6d 	bl	8000554 <__aeabi_ui2d>
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009a80:	3d01      	subs	r5, #1
 8009a82:	920e      	str	r2, [sp, #56]	; 0x38
 8009a84:	e76f      	b.n	8009966 <_dtoa_r+0x126>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e7b3      	b.n	80099f2 <_dtoa_r+0x1b2>
 8009a8a:	900c      	str	r0, [sp, #48]	; 0x30
 8009a8c:	e7b2      	b.n	80099f4 <_dtoa_r+0x1b4>
 8009a8e:	9b05      	ldr	r3, [sp, #20]
 8009a90:	eba3 030b 	sub.w	r3, r3, fp
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	f1cb 0300 	rsb	r3, fp, #0
 8009a9a:	9308      	str	r3, [sp, #32]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aa0:	e7bf      	b.n	8009a22 <_dtoa_r+0x1e2>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	dc52      	bgt.n	8009b52 <_dtoa_r+0x312>
 8009aac:	2301      	movs	r3, #1
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	9304      	str	r3, [sp, #16]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ab6:	e00b      	b.n	8009ad0 <_dtoa_r+0x290>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e7f3      	b.n	8009aa4 <_dtoa_r+0x264>
 8009abc:	2300      	movs	r3, #0
 8009abe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac2:	445b      	add	r3, fp
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	9304      	str	r3, [sp, #16]
 8009acc:	bfb8      	it	lt
 8009ace:	2301      	movlt	r3, #1
 8009ad0:	69e0      	ldr	r0, [r4, #28]
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	2204      	movs	r2, #4
 8009ad6:	f102 0614 	add.w	r6, r2, #20
 8009ada:	429e      	cmp	r6, r3
 8009adc:	d93d      	bls.n	8009b5a <_dtoa_r+0x31a>
 8009ade:	6041      	str	r1, [r0, #4]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 fd9f 	bl	800a624 <_Balloc>
 8009ae6:	9000      	str	r0, [sp, #0]
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d139      	bne.n	8009b60 <_dtoa_r+0x320>
 8009aec:	4b16      	ldr	r3, [pc, #88]	; (8009b48 <_dtoa_r+0x308>)
 8009aee:	4602      	mov	r2, r0
 8009af0:	f240 11af 	movw	r1, #431	; 0x1af
 8009af4:	e6bd      	b.n	8009872 <_dtoa_r+0x32>
 8009af6:	2301      	movs	r3, #1
 8009af8:	e7e1      	b.n	8009abe <_dtoa_r+0x27e>
 8009afa:	2501      	movs	r5, #1
 8009afc:	2300      	movs	r3, #0
 8009afe:	9307      	str	r3, [sp, #28]
 8009b00:	9509      	str	r5, [sp, #36]	; 0x24
 8009b02:	f04f 33ff 	mov.w	r3, #4294967295
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2312      	movs	r3, #18
 8009b0e:	e7d1      	b.n	8009ab4 <_dtoa_r+0x274>
 8009b10:	636f4361 	.word	0x636f4361
 8009b14:	3fd287a7 	.word	0x3fd287a7
 8009b18:	8b60c8b3 	.word	0x8b60c8b3
 8009b1c:	3fc68a28 	.word	0x3fc68a28
 8009b20:	509f79fb 	.word	0x509f79fb
 8009b24:	3fd34413 	.word	0x3fd34413
 8009b28:	0800b941 	.word	0x0800b941
 8009b2c:	0800b958 	.word	0x0800b958
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	0800b93d 	.word	0x0800b93d
 8009b38:	0800b934 	.word	0x0800b934
 8009b3c:	0800b911 	.word	0x0800b911
 8009b40:	3ff80000 	.word	0x3ff80000
 8009b44:	0800ba48 	.word	0x0800ba48
 8009b48:	0800b9b0 	.word	0x0800b9b0
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b50:	e7d7      	b.n	8009b02 <_dtoa_r+0x2c2>
 8009b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	e7ba      	b.n	8009ad0 <_dtoa_r+0x290>
 8009b5a:	3101      	adds	r1, #1
 8009b5c:	0052      	lsls	r2, r2, #1
 8009b5e:	e7ba      	b.n	8009ad6 <_dtoa_r+0x296>
 8009b60:	69e3      	ldr	r3, [r4, #28]
 8009b62:	9a00      	ldr	r2, [sp, #0]
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	9b04      	ldr	r3, [sp, #16]
 8009b68:	2b0e      	cmp	r3, #14
 8009b6a:	f200 80a8 	bhi.w	8009cbe <_dtoa_r+0x47e>
 8009b6e:	2d00      	cmp	r5, #0
 8009b70:	f000 80a5 	beq.w	8009cbe <_dtoa_r+0x47e>
 8009b74:	f1bb 0f00 	cmp.w	fp, #0
 8009b78:	dd38      	ble.n	8009bec <_dtoa_r+0x3ac>
 8009b7a:	4bc0      	ldr	r3, [pc, #768]	; (8009e7c <_dtoa_r+0x63c>)
 8009b7c:	f00b 020f 	and.w	r2, fp, #15
 8009b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009b8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009b90:	d019      	beq.n	8009bc6 <_dtoa_r+0x386>
 8009b92:	4bbb      	ldr	r3, [pc, #748]	; (8009e80 <_dtoa_r+0x640>)
 8009b94:	ec51 0b18 	vmov	r0, r1, d8
 8009b98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b9c:	f7f6 fe7e 	bl	800089c <__aeabi_ddiv>
 8009ba0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba4:	f008 080f 	and.w	r8, r8, #15
 8009ba8:	2503      	movs	r5, #3
 8009baa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009e80 <_dtoa_r+0x640>
 8009bae:	f1b8 0f00 	cmp.w	r8, #0
 8009bb2:	d10a      	bne.n	8009bca <_dtoa_r+0x38a>
 8009bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb8:	4632      	mov	r2, r6
 8009bba:	463b      	mov	r3, r7
 8009bbc:	f7f6 fe6e 	bl	800089c <__aeabi_ddiv>
 8009bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bc4:	e02b      	b.n	8009c1e <_dtoa_r+0x3de>
 8009bc6:	2502      	movs	r5, #2
 8009bc8:	e7ef      	b.n	8009baa <_dtoa_r+0x36a>
 8009bca:	f018 0f01 	tst.w	r8, #1
 8009bce:	d008      	beq.n	8009be2 <_dtoa_r+0x3a2>
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009bd8:	f7f6 fd36 	bl	8000648 <__aeabi_dmul>
 8009bdc:	3501      	adds	r5, #1
 8009bde:	4606      	mov	r6, r0
 8009be0:	460f      	mov	r7, r1
 8009be2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009be6:	f109 0908 	add.w	r9, r9, #8
 8009bea:	e7e0      	b.n	8009bae <_dtoa_r+0x36e>
 8009bec:	f000 809f 	beq.w	8009d2e <_dtoa_r+0x4ee>
 8009bf0:	f1cb 0600 	rsb	r6, fp, #0
 8009bf4:	4ba1      	ldr	r3, [pc, #644]	; (8009e7c <_dtoa_r+0x63c>)
 8009bf6:	4fa2      	ldr	r7, [pc, #648]	; (8009e80 <_dtoa_r+0x640>)
 8009bf8:	f006 020f 	and.w	r2, r6, #15
 8009bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	ec51 0b18 	vmov	r0, r1, d8
 8009c08:	f7f6 fd1e 	bl	8000648 <__aeabi_dmul>
 8009c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c10:	1136      	asrs	r6, r6, #4
 8009c12:	2300      	movs	r3, #0
 8009c14:	2502      	movs	r5, #2
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	d17e      	bne.n	8009d18 <_dtoa_r+0x4d8>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1d0      	bne.n	8009bc0 <_dtoa_r+0x380>
 8009c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 8084 	beq.w	8009d32 <_dtoa_r+0x4f2>
 8009c2a:	4b96      	ldr	r3, [pc, #600]	; (8009e84 <_dtoa_r+0x644>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4640      	mov	r0, r8
 8009c30:	4649      	mov	r1, r9
 8009c32:	f7f6 ff7b 	bl	8000b2c <__aeabi_dcmplt>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d07b      	beq.n	8009d32 <_dtoa_r+0x4f2>
 8009c3a:	9b04      	ldr	r3, [sp, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d078      	beq.n	8009d32 <_dtoa_r+0x4f2>
 8009c40:	9b01      	ldr	r3, [sp, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dd39      	ble.n	8009cba <_dtoa_r+0x47a>
 8009c46:	4b90      	ldr	r3, [pc, #576]	; (8009e88 <_dtoa_r+0x648>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 fcfb 	bl	8000648 <__aeabi_dmul>
 8009c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c56:	9e01      	ldr	r6, [sp, #4]
 8009c58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009c5c:	3501      	adds	r5, #1
 8009c5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c62:	4628      	mov	r0, r5
 8009c64:	f7f6 fc86 	bl	8000574 <__aeabi_i2d>
 8009c68:	4642      	mov	r2, r8
 8009c6a:	464b      	mov	r3, r9
 8009c6c:	f7f6 fcec 	bl	8000648 <__aeabi_dmul>
 8009c70:	4b86      	ldr	r3, [pc, #536]	; (8009e8c <_dtoa_r+0x64c>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	f7f6 fb32 	bl	80002dc <__adddf3>
 8009c78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c80:	9303      	str	r3, [sp, #12]
 8009c82:	2e00      	cmp	r6, #0
 8009c84:	d158      	bne.n	8009d38 <_dtoa_r+0x4f8>
 8009c86:	4b82      	ldr	r3, [pc, #520]	; (8009e90 <_dtoa_r+0x650>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 fb23 	bl	80002d8 <__aeabi_dsub>
 8009c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c96:	4680      	mov	r8, r0
 8009c98:	4689      	mov	r9, r1
 8009c9a:	f7f6 ff65 	bl	8000b68 <__aeabi_dcmpgt>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f040 8296 	bne.w	800a1d0 <_dtoa_r+0x990>
 8009ca4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009ca8:	4640      	mov	r0, r8
 8009caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cae:	4649      	mov	r1, r9
 8009cb0:	f7f6 ff3c 	bl	8000b2c <__aeabi_dcmplt>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f040 8289 	bne.w	800a1cc <_dtoa_r+0x98c>
 8009cba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f2c0 814e 	blt.w	8009f62 <_dtoa_r+0x722>
 8009cc6:	f1bb 0f0e 	cmp.w	fp, #14
 8009cca:	f300 814a 	bgt.w	8009f62 <_dtoa_r+0x722>
 8009cce:	4b6b      	ldr	r3, [pc, #428]	; (8009e7c <_dtoa_r+0x63c>)
 8009cd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009cd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f280 80dc 	bge.w	8009e98 <_dtoa_r+0x658>
 8009ce0:	9b04      	ldr	r3, [sp, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f300 80d8 	bgt.w	8009e98 <_dtoa_r+0x658>
 8009ce8:	f040 826f 	bne.w	800a1ca <_dtoa_r+0x98a>
 8009cec:	4b68      	ldr	r3, [pc, #416]	; (8009e90 <_dtoa_r+0x650>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	f7f6 fca8 	bl	8000648 <__aeabi_dmul>
 8009cf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cfc:	f7f6 ff2a 	bl	8000b54 <__aeabi_dcmpge>
 8009d00:	9e04      	ldr	r6, [sp, #16]
 8009d02:	4637      	mov	r7, r6
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f040 8245 	bne.w	800a194 <_dtoa_r+0x954>
 8009d0a:	9d00      	ldr	r5, [sp, #0]
 8009d0c:	2331      	movs	r3, #49	; 0x31
 8009d0e:	f805 3b01 	strb.w	r3, [r5], #1
 8009d12:	f10b 0b01 	add.w	fp, fp, #1
 8009d16:	e241      	b.n	800a19c <_dtoa_r+0x95c>
 8009d18:	07f2      	lsls	r2, r6, #31
 8009d1a:	d505      	bpl.n	8009d28 <_dtoa_r+0x4e8>
 8009d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d20:	f7f6 fc92 	bl	8000648 <__aeabi_dmul>
 8009d24:	3501      	adds	r5, #1
 8009d26:	2301      	movs	r3, #1
 8009d28:	1076      	asrs	r6, r6, #1
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	e773      	b.n	8009c16 <_dtoa_r+0x3d6>
 8009d2e:	2502      	movs	r5, #2
 8009d30:	e775      	b.n	8009c1e <_dtoa_r+0x3de>
 8009d32:	9e04      	ldr	r6, [sp, #16]
 8009d34:	465f      	mov	r7, fp
 8009d36:	e792      	b.n	8009c5e <_dtoa_r+0x41e>
 8009d38:	9900      	ldr	r1, [sp, #0]
 8009d3a:	4b50      	ldr	r3, [pc, #320]	; (8009e7c <_dtoa_r+0x63c>)
 8009d3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d40:	4431      	add	r1, r6
 8009d42:	9102      	str	r1, [sp, #8]
 8009d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d46:	eeb0 9a47 	vmov.f32	s18, s14
 8009d4a:	eef0 9a67 	vmov.f32	s19, s15
 8009d4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d56:	2900      	cmp	r1, #0
 8009d58:	d044      	beq.n	8009de4 <_dtoa_r+0x5a4>
 8009d5a:	494e      	ldr	r1, [pc, #312]	; (8009e94 <_dtoa_r+0x654>)
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	f7f6 fd9d 	bl	800089c <__aeabi_ddiv>
 8009d62:	ec53 2b19 	vmov	r2, r3, d9
 8009d66:	f7f6 fab7 	bl	80002d8 <__aeabi_dsub>
 8009d6a:	9d00      	ldr	r5, [sp, #0]
 8009d6c:	ec41 0b19 	vmov	d9, r0, r1
 8009d70:	4649      	mov	r1, r9
 8009d72:	4640      	mov	r0, r8
 8009d74:	f7f6 ff18 	bl	8000ba8 <__aeabi_d2iz>
 8009d78:	4606      	mov	r6, r0
 8009d7a:	f7f6 fbfb 	bl	8000574 <__aeabi_i2d>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4640      	mov	r0, r8
 8009d84:	4649      	mov	r1, r9
 8009d86:	f7f6 faa7 	bl	80002d8 <__aeabi_dsub>
 8009d8a:	3630      	adds	r6, #48	; 0x30
 8009d8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d90:	ec53 2b19 	vmov	r2, r3, d9
 8009d94:	4680      	mov	r8, r0
 8009d96:	4689      	mov	r9, r1
 8009d98:	f7f6 fec8 	bl	8000b2c <__aeabi_dcmplt>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d164      	bne.n	8009e6a <_dtoa_r+0x62a>
 8009da0:	4642      	mov	r2, r8
 8009da2:	464b      	mov	r3, r9
 8009da4:	4937      	ldr	r1, [pc, #220]	; (8009e84 <_dtoa_r+0x644>)
 8009da6:	2000      	movs	r0, #0
 8009da8:	f7f6 fa96 	bl	80002d8 <__aeabi_dsub>
 8009dac:	ec53 2b19 	vmov	r2, r3, d9
 8009db0:	f7f6 febc 	bl	8000b2c <__aeabi_dcmplt>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f040 80b6 	bne.w	8009f26 <_dtoa_r+0x6e6>
 8009dba:	9b02      	ldr	r3, [sp, #8]
 8009dbc:	429d      	cmp	r5, r3
 8009dbe:	f43f af7c 	beq.w	8009cba <_dtoa_r+0x47a>
 8009dc2:	4b31      	ldr	r3, [pc, #196]	; (8009e88 <_dtoa_r+0x648>)
 8009dc4:	ec51 0b19 	vmov	r0, r1, d9
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f7f6 fc3d 	bl	8000648 <__aeabi_dmul>
 8009dce:	4b2e      	ldr	r3, [pc, #184]	; (8009e88 <_dtoa_r+0x648>)
 8009dd0:	ec41 0b19 	vmov	d9, r0, r1
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	4649      	mov	r1, r9
 8009dda:	f7f6 fc35 	bl	8000648 <__aeabi_dmul>
 8009dde:	4680      	mov	r8, r0
 8009de0:	4689      	mov	r9, r1
 8009de2:	e7c5      	b.n	8009d70 <_dtoa_r+0x530>
 8009de4:	ec51 0b17 	vmov	r0, r1, d7
 8009de8:	f7f6 fc2e 	bl	8000648 <__aeabi_dmul>
 8009dec:	9b02      	ldr	r3, [sp, #8]
 8009dee:	9d00      	ldr	r5, [sp, #0]
 8009df0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df2:	ec41 0b19 	vmov	d9, r0, r1
 8009df6:	4649      	mov	r1, r9
 8009df8:	4640      	mov	r0, r8
 8009dfa:	f7f6 fed5 	bl	8000ba8 <__aeabi_d2iz>
 8009dfe:	4606      	mov	r6, r0
 8009e00:	f7f6 fbb8 	bl	8000574 <__aeabi_i2d>
 8009e04:	3630      	adds	r6, #48	; 0x30
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 fa63 	bl	80002d8 <__aeabi_dsub>
 8009e12:	f805 6b01 	strb.w	r6, [r5], #1
 8009e16:	9b02      	ldr	r3, [sp, #8]
 8009e18:	429d      	cmp	r5, r3
 8009e1a:	4680      	mov	r8, r0
 8009e1c:	4689      	mov	r9, r1
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	d124      	bne.n	8009e6e <_dtoa_r+0x62e>
 8009e24:	4b1b      	ldr	r3, [pc, #108]	; (8009e94 <_dtoa_r+0x654>)
 8009e26:	ec51 0b19 	vmov	r0, r1, d9
 8009e2a:	f7f6 fa57 	bl	80002dc <__adddf3>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	460b      	mov	r3, r1
 8009e32:	4640      	mov	r0, r8
 8009e34:	4649      	mov	r1, r9
 8009e36:	f7f6 fe97 	bl	8000b68 <__aeabi_dcmpgt>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d173      	bne.n	8009f26 <_dtoa_r+0x6e6>
 8009e3e:	ec53 2b19 	vmov	r2, r3, d9
 8009e42:	4914      	ldr	r1, [pc, #80]	; (8009e94 <_dtoa_r+0x654>)
 8009e44:	2000      	movs	r0, #0
 8009e46:	f7f6 fa47 	bl	80002d8 <__aeabi_dsub>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4649      	mov	r1, r9
 8009e52:	f7f6 fe6b 	bl	8000b2c <__aeabi_dcmplt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f43f af2f 	beq.w	8009cba <_dtoa_r+0x47a>
 8009e5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009e5e:	1e6b      	subs	r3, r5, #1
 8009e60:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e66:	2b30      	cmp	r3, #48	; 0x30
 8009e68:	d0f8      	beq.n	8009e5c <_dtoa_r+0x61c>
 8009e6a:	46bb      	mov	fp, r7
 8009e6c:	e04a      	b.n	8009f04 <_dtoa_r+0x6c4>
 8009e6e:	4b06      	ldr	r3, [pc, #24]	; (8009e88 <_dtoa_r+0x648>)
 8009e70:	f7f6 fbea 	bl	8000648 <__aeabi_dmul>
 8009e74:	4680      	mov	r8, r0
 8009e76:	4689      	mov	r9, r1
 8009e78:	e7bd      	b.n	8009df6 <_dtoa_r+0x5b6>
 8009e7a:	bf00      	nop
 8009e7c:	0800ba48 	.word	0x0800ba48
 8009e80:	0800ba20 	.word	0x0800ba20
 8009e84:	3ff00000 	.word	0x3ff00000
 8009e88:	40240000 	.word	0x40240000
 8009e8c:	401c0000 	.word	0x401c0000
 8009e90:	40140000 	.word	0x40140000
 8009e94:	3fe00000 	.word	0x3fe00000
 8009e98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e9c:	9d00      	ldr	r5, [sp, #0]
 8009e9e:	4642      	mov	r2, r8
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	f7f6 fcf9 	bl	800089c <__aeabi_ddiv>
 8009eaa:	f7f6 fe7d 	bl	8000ba8 <__aeabi_d2iz>
 8009eae:	9001      	str	r0, [sp, #4]
 8009eb0:	f7f6 fb60 	bl	8000574 <__aeabi_i2d>
 8009eb4:	4642      	mov	r2, r8
 8009eb6:	464b      	mov	r3, r9
 8009eb8:	f7f6 fbc6 	bl	8000648 <__aeabi_dmul>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fa08 	bl	80002d8 <__aeabi_dsub>
 8009ec8:	9e01      	ldr	r6, [sp, #4]
 8009eca:	9f04      	ldr	r7, [sp, #16]
 8009ecc:	3630      	adds	r6, #48	; 0x30
 8009ece:	f805 6b01 	strb.w	r6, [r5], #1
 8009ed2:	9e00      	ldr	r6, [sp, #0]
 8009ed4:	1bae      	subs	r6, r5, r6
 8009ed6:	42b7      	cmp	r7, r6
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	d134      	bne.n	8009f48 <_dtoa_r+0x708>
 8009ede:	f7f6 f9fd 	bl	80002dc <__adddf3>
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	464b      	mov	r3, r9
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	460f      	mov	r7, r1
 8009eea:	f7f6 fe3d 	bl	8000b68 <__aeabi_dcmpgt>
 8009eee:	b9c8      	cbnz	r0, 8009f24 <_dtoa_r+0x6e4>
 8009ef0:	4642      	mov	r2, r8
 8009ef2:	464b      	mov	r3, r9
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fe0e 	bl	8000b18 <__aeabi_dcmpeq>
 8009efc:	b110      	cbz	r0, 8009f04 <_dtoa_r+0x6c4>
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	07db      	lsls	r3, r3, #31
 8009f02:	d40f      	bmi.n	8009f24 <_dtoa_r+0x6e4>
 8009f04:	4651      	mov	r1, sl
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 fbcc 	bl	800a6a4 <_Bfree>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f10:	702b      	strb	r3, [r5, #0]
 8009f12:	f10b 0301 	add.w	r3, fp, #1
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f43f ace2 	beq.w	80098e4 <_dtoa_r+0xa4>
 8009f20:	601d      	str	r5, [r3, #0]
 8009f22:	e4df      	b.n	80098e4 <_dtoa_r+0xa4>
 8009f24:	465f      	mov	r7, fp
 8009f26:	462b      	mov	r3, r5
 8009f28:	461d      	mov	r5, r3
 8009f2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f2e:	2a39      	cmp	r2, #57	; 0x39
 8009f30:	d106      	bne.n	8009f40 <_dtoa_r+0x700>
 8009f32:	9a00      	ldr	r2, [sp, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d1f7      	bne.n	8009f28 <_dtoa_r+0x6e8>
 8009f38:	9900      	ldr	r1, [sp, #0]
 8009f3a:	2230      	movs	r2, #48	; 0x30
 8009f3c:	3701      	adds	r7, #1
 8009f3e:	700a      	strb	r2, [r1, #0]
 8009f40:	781a      	ldrb	r2, [r3, #0]
 8009f42:	3201      	adds	r2, #1
 8009f44:	701a      	strb	r2, [r3, #0]
 8009f46:	e790      	b.n	8009e6a <_dtoa_r+0x62a>
 8009f48:	4ba3      	ldr	r3, [pc, #652]	; (800a1d8 <_dtoa_r+0x998>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f7f6 fb7c 	bl	8000648 <__aeabi_dmul>
 8009f50:	2200      	movs	r2, #0
 8009f52:	2300      	movs	r3, #0
 8009f54:	4606      	mov	r6, r0
 8009f56:	460f      	mov	r7, r1
 8009f58:	f7f6 fdde 	bl	8000b18 <__aeabi_dcmpeq>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d09e      	beq.n	8009e9e <_dtoa_r+0x65e>
 8009f60:	e7d0      	b.n	8009f04 <_dtoa_r+0x6c4>
 8009f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f64:	2a00      	cmp	r2, #0
 8009f66:	f000 80ca 	beq.w	800a0fe <_dtoa_r+0x8be>
 8009f6a:	9a07      	ldr	r2, [sp, #28]
 8009f6c:	2a01      	cmp	r2, #1
 8009f6e:	f300 80ad 	bgt.w	800a0cc <_dtoa_r+0x88c>
 8009f72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	f000 80a5 	beq.w	800a0c4 <_dtoa_r+0x884>
 8009f7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f7e:	9e08      	ldr	r6, [sp, #32]
 8009f80:	9d05      	ldr	r5, [sp, #20]
 8009f82:	9a05      	ldr	r2, [sp, #20]
 8009f84:	441a      	add	r2, r3
 8009f86:	9205      	str	r2, [sp, #20]
 8009f88:	9a06      	ldr	r2, [sp, #24]
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	441a      	add	r2, r3
 8009f8e:	4620      	mov	r0, r4
 8009f90:	9206      	str	r2, [sp, #24]
 8009f92:	f000 fc3d 	bl	800a810 <__i2b>
 8009f96:	4607      	mov	r7, r0
 8009f98:	b165      	cbz	r5, 8009fb4 <_dtoa_r+0x774>
 8009f9a:	9b06      	ldr	r3, [sp, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dd09      	ble.n	8009fb4 <_dtoa_r+0x774>
 8009fa0:	42ab      	cmp	r3, r5
 8009fa2:	9a05      	ldr	r2, [sp, #20]
 8009fa4:	bfa8      	it	ge
 8009fa6:	462b      	movge	r3, r5
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	9205      	str	r2, [sp, #20]
 8009fac:	9a06      	ldr	r2, [sp, #24]
 8009fae:	1aed      	subs	r5, r5, r3
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	9306      	str	r3, [sp, #24]
 8009fb4:	9b08      	ldr	r3, [sp, #32]
 8009fb6:	b1f3      	cbz	r3, 8009ff6 <_dtoa_r+0x7b6>
 8009fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 80a3 	beq.w	800a106 <_dtoa_r+0x8c6>
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	dd10      	ble.n	8009fe6 <_dtoa_r+0x7a6>
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fce1 	bl	800a990 <__pow5mult>
 8009fce:	4652      	mov	r2, sl
 8009fd0:	4601      	mov	r1, r0
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 fc31 	bl	800a83c <__multiply>
 8009fda:	4651      	mov	r1, sl
 8009fdc:	4680      	mov	r8, r0
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 fb60 	bl	800a6a4 <_Bfree>
 8009fe4:	46c2      	mov	sl, r8
 8009fe6:	9b08      	ldr	r3, [sp, #32]
 8009fe8:	1b9a      	subs	r2, r3, r6
 8009fea:	d004      	beq.n	8009ff6 <_dtoa_r+0x7b6>
 8009fec:	4651      	mov	r1, sl
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 fcce 	bl	800a990 <__pow5mult>
 8009ff4:	4682      	mov	sl, r0
 8009ff6:	2101      	movs	r1, #1
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f000 fc09 	bl	800a810 <__i2b>
 8009ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a000:	2b00      	cmp	r3, #0
 800a002:	4606      	mov	r6, r0
 800a004:	f340 8081 	ble.w	800a10a <_dtoa_r+0x8ca>
 800a008:	461a      	mov	r2, r3
 800a00a:	4601      	mov	r1, r0
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 fcbf 	bl	800a990 <__pow5mult>
 800a012:	9b07      	ldr	r3, [sp, #28]
 800a014:	2b01      	cmp	r3, #1
 800a016:	4606      	mov	r6, r0
 800a018:	dd7a      	ble.n	800a110 <_dtoa_r+0x8d0>
 800a01a:	f04f 0800 	mov.w	r8, #0
 800a01e:	6933      	ldr	r3, [r6, #16]
 800a020:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a024:	6918      	ldr	r0, [r3, #16]
 800a026:	f000 fba5 	bl	800a774 <__hi0bits>
 800a02a:	f1c0 0020 	rsb	r0, r0, #32
 800a02e:	9b06      	ldr	r3, [sp, #24]
 800a030:	4418      	add	r0, r3
 800a032:	f010 001f 	ands.w	r0, r0, #31
 800a036:	f000 8094 	beq.w	800a162 <_dtoa_r+0x922>
 800a03a:	f1c0 0320 	rsb	r3, r0, #32
 800a03e:	2b04      	cmp	r3, #4
 800a040:	f340 8085 	ble.w	800a14e <_dtoa_r+0x90e>
 800a044:	9b05      	ldr	r3, [sp, #20]
 800a046:	f1c0 001c 	rsb	r0, r0, #28
 800a04a:	4403      	add	r3, r0
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	9b06      	ldr	r3, [sp, #24]
 800a050:	4403      	add	r3, r0
 800a052:	4405      	add	r5, r0
 800a054:	9306      	str	r3, [sp, #24]
 800a056:	9b05      	ldr	r3, [sp, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	dd05      	ble.n	800a068 <_dtoa_r+0x828>
 800a05c:	4651      	mov	r1, sl
 800a05e:	461a      	mov	r2, r3
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fcef 	bl	800aa44 <__lshift>
 800a066:	4682      	mov	sl, r0
 800a068:	9b06      	ldr	r3, [sp, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dd05      	ble.n	800a07a <_dtoa_r+0x83a>
 800a06e:	4631      	mov	r1, r6
 800a070:	461a      	mov	r2, r3
 800a072:	4620      	mov	r0, r4
 800a074:	f000 fce6 	bl	800aa44 <__lshift>
 800a078:	4606      	mov	r6, r0
 800a07a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d072      	beq.n	800a166 <_dtoa_r+0x926>
 800a080:	4631      	mov	r1, r6
 800a082:	4650      	mov	r0, sl
 800a084:	f000 fd4a 	bl	800ab1c <__mcmp>
 800a088:	2800      	cmp	r0, #0
 800a08a:	da6c      	bge.n	800a166 <_dtoa_r+0x926>
 800a08c:	2300      	movs	r3, #0
 800a08e:	4651      	mov	r1, sl
 800a090:	220a      	movs	r2, #10
 800a092:	4620      	mov	r0, r4
 800a094:	f000 fb28 	bl	800a6e8 <__multadd>
 800a098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a09e:	4682      	mov	sl, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 81b0 	beq.w	800a406 <_dtoa_r+0xbc6>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	4639      	mov	r1, r7
 800a0aa:	220a      	movs	r2, #10
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fb1b 	bl	800a6e8 <__multadd>
 800a0b2:	9b01      	ldr	r3, [sp, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	f300 8096 	bgt.w	800a1e8 <_dtoa_r+0x9a8>
 800a0bc:	9b07      	ldr	r3, [sp, #28]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	dc59      	bgt.n	800a176 <_dtoa_r+0x936>
 800a0c2:	e091      	b.n	800a1e8 <_dtoa_r+0x9a8>
 800a0c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0ca:	e758      	b.n	8009f7e <_dtoa_r+0x73e>
 800a0cc:	9b04      	ldr	r3, [sp, #16]
 800a0ce:	1e5e      	subs	r6, r3, #1
 800a0d0:	9b08      	ldr	r3, [sp, #32]
 800a0d2:	42b3      	cmp	r3, r6
 800a0d4:	bfbf      	itttt	lt
 800a0d6:	9b08      	ldrlt	r3, [sp, #32]
 800a0d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a0da:	9608      	strlt	r6, [sp, #32]
 800a0dc:	1af3      	sublt	r3, r6, r3
 800a0de:	bfb4      	ite	lt
 800a0e0:	18d2      	addlt	r2, r2, r3
 800a0e2:	1b9e      	subge	r6, r3, r6
 800a0e4:	9b04      	ldr	r3, [sp, #16]
 800a0e6:	bfbc      	itt	lt
 800a0e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a0ea:	2600      	movlt	r6, #0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	bfb7      	itett	lt
 800a0f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a0f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a0f8:	1a9d      	sublt	r5, r3, r2
 800a0fa:	2300      	movlt	r3, #0
 800a0fc:	e741      	b.n	8009f82 <_dtoa_r+0x742>
 800a0fe:	9e08      	ldr	r6, [sp, #32]
 800a100:	9d05      	ldr	r5, [sp, #20]
 800a102:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a104:	e748      	b.n	8009f98 <_dtoa_r+0x758>
 800a106:	9a08      	ldr	r2, [sp, #32]
 800a108:	e770      	b.n	8009fec <_dtoa_r+0x7ac>
 800a10a:	9b07      	ldr	r3, [sp, #28]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	dc19      	bgt.n	800a144 <_dtoa_r+0x904>
 800a110:	9b02      	ldr	r3, [sp, #8]
 800a112:	b9bb      	cbnz	r3, 800a144 <_dtoa_r+0x904>
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a11a:	b99b      	cbnz	r3, 800a144 <_dtoa_r+0x904>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a122:	0d1b      	lsrs	r3, r3, #20
 800a124:	051b      	lsls	r3, r3, #20
 800a126:	b183      	cbz	r3, 800a14a <_dtoa_r+0x90a>
 800a128:	9b05      	ldr	r3, [sp, #20]
 800a12a:	3301      	adds	r3, #1
 800a12c:	9305      	str	r3, [sp, #20]
 800a12e:	9b06      	ldr	r3, [sp, #24]
 800a130:	3301      	adds	r3, #1
 800a132:	9306      	str	r3, [sp, #24]
 800a134:	f04f 0801 	mov.w	r8, #1
 800a138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f47f af6f 	bne.w	800a01e <_dtoa_r+0x7de>
 800a140:	2001      	movs	r0, #1
 800a142:	e774      	b.n	800a02e <_dtoa_r+0x7ee>
 800a144:	f04f 0800 	mov.w	r8, #0
 800a148:	e7f6      	b.n	800a138 <_dtoa_r+0x8f8>
 800a14a:	4698      	mov	r8, r3
 800a14c:	e7f4      	b.n	800a138 <_dtoa_r+0x8f8>
 800a14e:	d082      	beq.n	800a056 <_dtoa_r+0x816>
 800a150:	9a05      	ldr	r2, [sp, #20]
 800a152:	331c      	adds	r3, #28
 800a154:	441a      	add	r2, r3
 800a156:	9205      	str	r2, [sp, #20]
 800a158:	9a06      	ldr	r2, [sp, #24]
 800a15a:	441a      	add	r2, r3
 800a15c:	441d      	add	r5, r3
 800a15e:	9206      	str	r2, [sp, #24]
 800a160:	e779      	b.n	800a056 <_dtoa_r+0x816>
 800a162:	4603      	mov	r3, r0
 800a164:	e7f4      	b.n	800a150 <_dtoa_r+0x910>
 800a166:	9b04      	ldr	r3, [sp, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dc37      	bgt.n	800a1dc <_dtoa_r+0x99c>
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	2b02      	cmp	r3, #2
 800a170:	dd34      	ble.n	800a1dc <_dtoa_r+0x99c>
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	b963      	cbnz	r3, 800a194 <_dtoa_r+0x954>
 800a17a:	4631      	mov	r1, r6
 800a17c:	2205      	movs	r2, #5
 800a17e:	4620      	mov	r0, r4
 800a180:	f000 fab2 	bl	800a6e8 <__multadd>
 800a184:	4601      	mov	r1, r0
 800a186:	4606      	mov	r6, r0
 800a188:	4650      	mov	r0, sl
 800a18a:	f000 fcc7 	bl	800ab1c <__mcmp>
 800a18e:	2800      	cmp	r0, #0
 800a190:	f73f adbb 	bgt.w	8009d0a <_dtoa_r+0x4ca>
 800a194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a196:	9d00      	ldr	r5, [sp, #0]
 800a198:	ea6f 0b03 	mvn.w	fp, r3
 800a19c:	f04f 0800 	mov.w	r8, #0
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f000 fa7e 	bl	800a6a4 <_Bfree>
 800a1a8:	2f00      	cmp	r7, #0
 800a1aa:	f43f aeab 	beq.w	8009f04 <_dtoa_r+0x6c4>
 800a1ae:	f1b8 0f00 	cmp.w	r8, #0
 800a1b2:	d005      	beq.n	800a1c0 <_dtoa_r+0x980>
 800a1b4:	45b8      	cmp	r8, r7
 800a1b6:	d003      	beq.n	800a1c0 <_dtoa_r+0x980>
 800a1b8:	4641      	mov	r1, r8
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fa72 	bl	800a6a4 <_Bfree>
 800a1c0:	4639      	mov	r1, r7
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 fa6e 	bl	800a6a4 <_Bfree>
 800a1c8:	e69c      	b.n	8009f04 <_dtoa_r+0x6c4>
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	4637      	mov	r7, r6
 800a1ce:	e7e1      	b.n	800a194 <_dtoa_r+0x954>
 800a1d0:	46bb      	mov	fp, r7
 800a1d2:	4637      	mov	r7, r6
 800a1d4:	e599      	b.n	8009d0a <_dtoa_r+0x4ca>
 800a1d6:	bf00      	nop
 800a1d8:	40240000 	.word	0x40240000
 800a1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 80c8 	beq.w	800a374 <_dtoa_r+0xb34>
 800a1e4:	9b04      	ldr	r3, [sp, #16]
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	2d00      	cmp	r5, #0
 800a1ea:	dd05      	ble.n	800a1f8 <_dtoa_r+0x9b8>
 800a1ec:	4639      	mov	r1, r7
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fc27 	bl	800aa44 <__lshift>
 800a1f6:	4607      	mov	r7, r0
 800a1f8:	f1b8 0f00 	cmp.w	r8, #0
 800a1fc:	d05b      	beq.n	800a2b6 <_dtoa_r+0xa76>
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4620      	mov	r0, r4
 800a202:	f000 fa0f 	bl	800a624 <_Balloc>
 800a206:	4605      	mov	r5, r0
 800a208:	b928      	cbnz	r0, 800a216 <_dtoa_r+0x9d6>
 800a20a:	4b83      	ldr	r3, [pc, #524]	; (800a418 <_dtoa_r+0xbd8>)
 800a20c:	4602      	mov	r2, r0
 800a20e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a212:	f7ff bb2e 	b.w	8009872 <_dtoa_r+0x32>
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	3202      	adds	r2, #2
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	f107 010c 	add.w	r1, r7, #12
 800a220:	300c      	adds	r0, #12
 800a222:	f7ff fa76 	bl	8009712 <memcpy>
 800a226:	2201      	movs	r2, #1
 800a228:	4629      	mov	r1, r5
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fc0a 	bl	800aa44 <__lshift>
 800a230:	9b00      	ldr	r3, [sp, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	9304      	str	r3, [sp, #16]
 800a236:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a23a:	4413      	add	r3, r2
 800a23c:	9308      	str	r3, [sp, #32]
 800a23e:	9b02      	ldr	r3, [sp, #8]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	46b8      	mov	r8, r7
 800a246:	9306      	str	r3, [sp, #24]
 800a248:	4607      	mov	r7, r0
 800a24a:	9b04      	ldr	r3, [sp, #16]
 800a24c:	4631      	mov	r1, r6
 800a24e:	3b01      	subs	r3, #1
 800a250:	4650      	mov	r0, sl
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	f7ff fa6b 	bl	800972e <quorem>
 800a258:	4641      	mov	r1, r8
 800a25a:	9002      	str	r0, [sp, #8]
 800a25c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a260:	4650      	mov	r0, sl
 800a262:	f000 fc5b 	bl	800ab1c <__mcmp>
 800a266:	463a      	mov	r2, r7
 800a268:	9005      	str	r0, [sp, #20]
 800a26a:	4631      	mov	r1, r6
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 fc71 	bl	800ab54 <__mdiff>
 800a272:	68c2      	ldr	r2, [r0, #12]
 800a274:	4605      	mov	r5, r0
 800a276:	bb02      	cbnz	r2, 800a2ba <_dtoa_r+0xa7a>
 800a278:	4601      	mov	r1, r0
 800a27a:	4650      	mov	r0, sl
 800a27c:	f000 fc4e 	bl	800ab1c <__mcmp>
 800a280:	4602      	mov	r2, r0
 800a282:	4629      	mov	r1, r5
 800a284:	4620      	mov	r0, r4
 800a286:	9209      	str	r2, [sp, #36]	; 0x24
 800a288:	f000 fa0c 	bl	800a6a4 <_Bfree>
 800a28c:	9b07      	ldr	r3, [sp, #28]
 800a28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a290:	9d04      	ldr	r5, [sp, #16]
 800a292:	ea43 0102 	orr.w	r1, r3, r2
 800a296:	9b06      	ldr	r3, [sp, #24]
 800a298:	4319      	orrs	r1, r3
 800a29a:	d110      	bne.n	800a2be <_dtoa_r+0xa7e>
 800a29c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2a0:	d029      	beq.n	800a2f6 <_dtoa_r+0xab6>
 800a2a2:	9b05      	ldr	r3, [sp, #20]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dd02      	ble.n	800a2ae <_dtoa_r+0xa6e>
 800a2a8:	9b02      	ldr	r3, [sp, #8]
 800a2aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a2ae:	9b01      	ldr	r3, [sp, #4]
 800a2b0:	f883 9000 	strb.w	r9, [r3]
 800a2b4:	e774      	b.n	800a1a0 <_dtoa_r+0x960>
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	e7ba      	b.n	800a230 <_dtoa_r+0x9f0>
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	e7e1      	b.n	800a282 <_dtoa_r+0xa42>
 800a2be:	9b05      	ldr	r3, [sp, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	db04      	blt.n	800a2ce <_dtoa_r+0xa8e>
 800a2c4:	9907      	ldr	r1, [sp, #28]
 800a2c6:	430b      	orrs	r3, r1
 800a2c8:	9906      	ldr	r1, [sp, #24]
 800a2ca:	430b      	orrs	r3, r1
 800a2cc:	d120      	bne.n	800a310 <_dtoa_r+0xad0>
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	dded      	ble.n	800a2ae <_dtoa_r+0xa6e>
 800a2d2:	4651      	mov	r1, sl
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 fbb4 	bl	800aa44 <__lshift>
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4682      	mov	sl, r0
 800a2e0:	f000 fc1c 	bl	800ab1c <__mcmp>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	dc03      	bgt.n	800a2f0 <_dtoa_r+0xab0>
 800a2e8:	d1e1      	bne.n	800a2ae <_dtoa_r+0xa6e>
 800a2ea:	f019 0f01 	tst.w	r9, #1
 800a2ee:	d0de      	beq.n	800a2ae <_dtoa_r+0xa6e>
 800a2f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2f4:	d1d8      	bne.n	800a2a8 <_dtoa_r+0xa68>
 800a2f6:	9a01      	ldr	r2, [sp, #4]
 800a2f8:	2339      	movs	r3, #57	; 0x39
 800a2fa:	7013      	strb	r3, [r2, #0]
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	461d      	mov	r5, r3
 800a300:	3b01      	subs	r3, #1
 800a302:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a306:	2a39      	cmp	r2, #57	; 0x39
 800a308:	d06c      	beq.n	800a3e4 <_dtoa_r+0xba4>
 800a30a:	3201      	adds	r2, #1
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	e747      	b.n	800a1a0 <_dtoa_r+0x960>
 800a310:	2a00      	cmp	r2, #0
 800a312:	dd07      	ble.n	800a324 <_dtoa_r+0xae4>
 800a314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a318:	d0ed      	beq.n	800a2f6 <_dtoa_r+0xab6>
 800a31a:	9a01      	ldr	r2, [sp, #4]
 800a31c:	f109 0301 	add.w	r3, r9, #1
 800a320:	7013      	strb	r3, [r2, #0]
 800a322:	e73d      	b.n	800a1a0 <_dtoa_r+0x960>
 800a324:	9b04      	ldr	r3, [sp, #16]
 800a326:	9a08      	ldr	r2, [sp, #32]
 800a328:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d043      	beq.n	800a3b8 <_dtoa_r+0xb78>
 800a330:	4651      	mov	r1, sl
 800a332:	2300      	movs	r3, #0
 800a334:	220a      	movs	r2, #10
 800a336:	4620      	mov	r0, r4
 800a338:	f000 f9d6 	bl	800a6e8 <__multadd>
 800a33c:	45b8      	cmp	r8, r7
 800a33e:	4682      	mov	sl, r0
 800a340:	f04f 0300 	mov.w	r3, #0
 800a344:	f04f 020a 	mov.w	r2, #10
 800a348:	4641      	mov	r1, r8
 800a34a:	4620      	mov	r0, r4
 800a34c:	d107      	bne.n	800a35e <_dtoa_r+0xb1e>
 800a34e:	f000 f9cb 	bl	800a6e8 <__multadd>
 800a352:	4680      	mov	r8, r0
 800a354:	4607      	mov	r7, r0
 800a356:	9b04      	ldr	r3, [sp, #16]
 800a358:	3301      	adds	r3, #1
 800a35a:	9304      	str	r3, [sp, #16]
 800a35c:	e775      	b.n	800a24a <_dtoa_r+0xa0a>
 800a35e:	f000 f9c3 	bl	800a6e8 <__multadd>
 800a362:	4639      	mov	r1, r7
 800a364:	4680      	mov	r8, r0
 800a366:	2300      	movs	r3, #0
 800a368:	220a      	movs	r2, #10
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 f9bc 	bl	800a6e8 <__multadd>
 800a370:	4607      	mov	r7, r0
 800a372:	e7f0      	b.n	800a356 <_dtoa_r+0xb16>
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	9d00      	ldr	r5, [sp, #0]
 800a37a:	4631      	mov	r1, r6
 800a37c:	4650      	mov	r0, sl
 800a37e:	f7ff f9d6 	bl	800972e <quorem>
 800a382:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a386:	9b00      	ldr	r3, [sp, #0]
 800a388:	f805 9b01 	strb.w	r9, [r5], #1
 800a38c:	1aea      	subs	r2, r5, r3
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	4293      	cmp	r3, r2
 800a392:	dd07      	ble.n	800a3a4 <_dtoa_r+0xb64>
 800a394:	4651      	mov	r1, sl
 800a396:	2300      	movs	r3, #0
 800a398:	220a      	movs	r2, #10
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 f9a4 	bl	800a6e8 <__multadd>
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	e7ea      	b.n	800a37a <_dtoa_r+0xb3a>
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	bfc8      	it	gt
 800a3aa:	461d      	movgt	r5, r3
 800a3ac:	9b00      	ldr	r3, [sp, #0]
 800a3ae:	bfd8      	it	le
 800a3b0:	2501      	movle	r5, #1
 800a3b2:	441d      	add	r5, r3
 800a3b4:	f04f 0800 	mov.w	r8, #0
 800a3b8:	4651      	mov	r1, sl
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f000 fb41 	bl	800aa44 <__lshift>
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	4682      	mov	sl, r0
 800a3c6:	f000 fba9 	bl	800ab1c <__mcmp>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	dc96      	bgt.n	800a2fc <_dtoa_r+0xabc>
 800a3ce:	d102      	bne.n	800a3d6 <_dtoa_r+0xb96>
 800a3d0:	f019 0f01 	tst.w	r9, #1
 800a3d4:	d192      	bne.n	800a2fc <_dtoa_r+0xabc>
 800a3d6:	462b      	mov	r3, r5
 800a3d8:	461d      	mov	r5, r3
 800a3da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3de:	2a30      	cmp	r2, #48	; 0x30
 800a3e0:	d0fa      	beq.n	800a3d8 <_dtoa_r+0xb98>
 800a3e2:	e6dd      	b.n	800a1a0 <_dtoa_r+0x960>
 800a3e4:	9a00      	ldr	r2, [sp, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d189      	bne.n	800a2fe <_dtoa_r+0xabe>
 800a3ea:	f10b 0b01 	add.w	fp, fp, #1
 800a3ee:	2331      	movs	r3, #49	; 0x31
 800a3f0:	e796      	b.n	800a320 <_dtoa_r+0xae0>
 800a3f2:	4b0a      	ldr	r3, [pc, #40]	; (800a41c <_dtoa_r+0xbdc>)
 800a3f4:	f7ff ba99 	b.w	800992a <_dtoa_r+0xea>
 800a3f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f47f aa6d 	bne.w	80098da <_dtoa_r+0x9a>
 800a400:	4b07      	ldr	r3, [pc, #28]	; (800a420 <_dtoa_r+0xbe0>)
 800a402:	f7ff ba92 	b.w	800992a <_dtoa_r+0xea>
 800a406:	9b01      	ldr	r3, [sp, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dcb5      	bgt.n	800a378 <_dtoa_r+0xb38>
 800a40c:	9b07      	ldr	r3, [sp, #28]
 800a40e:	2b02      	cmp	r3, #2
 800a410:	f73f aeb1 	bgt.w	800a176 <_dtoa_r+0x936>
 800a414:	e7b0      	b.n	800a378 <_dtoa_r+0xb38>
 800a416:	bf00      	nop
 800a418:	0800b9b0 	.word	0x0800b9b0
 800a41c:	0800b910 	.word	0x0800b910
 800a420:	0800b934 	.word	0x0800b934

0800a424 <_free_r>:
 800a424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a426:	2900      	cmp	r1, #0
 800a428:	d044      	beq.n	800a4b4 <_free_r+0x90>
 800a42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a42e:	9001      	str	r0, [sp, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	f1a1 0404 	sub.w	r4, r1, #4
 800a436:	bfb8      	it	lt
 800a438:	18e4      	addlt	r4, r4, r3
 800a43a:	f000 f8e7 	bl	800a60c <__malloc_lock>
 800a43e:	4a1e      	ldr	r2, [pc, #120]	; (800a4b8 <_free_r+0x94>)
 800a440:	9801      	ldr	r0, [sp, #4]
 800a442:	6813      	ldr	r3, [r2, #0]
 800a444:	b933      	cbnz	r3, 800a454 <_free_r+0x30>
 800a446:	6063      	str	r3, [r4, #4]
 800a448:	6014      	str	r4, [r2, #0]
 800a44a:	b003      	add	sp, #12
 800a44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a450:	f000 b8e2 	b.w	800a618 <__malloc_unlock>
 800a454:	42a3      	cmp	r3, r4
 800a456:	d908      	bls.n	800a46a <_free_r+0x46>
 800a458:	6825      	ldr	r5, [r4, #0]
 800a45a:	1961      	adds	r1, r4, r5
 800a45c:	428b      	cmp	r3, r1
 800a45e:	bf01      	itttt	eq
 800a460:	6819      	ldreq	r1, [r3, #0]
 800a462:	685b      	ldreq	r3, [r3, #4]
 800a464:	1949      	addeq	r1, r1, r5
 800a466:	6021      	streq	r1, [r4, #0]
 800a468:	e7ed      	b.n	800a446 <_free_r+0x22>
 800a46a:	461a      	mov	r2, r3
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	b10b      	cbz	r3, 800a474 <_free_r+0x50>
 800a470:	42a3      	cmp	r3, r4
 800a472:	d9fa      	bls.n	800a46a <_free_r+0x46>
 800a474:	6811      	ldr	r1, [r2, #0]
 800a476:	1855      	adds	r5, r2, r1
 800a478:	42a5      	cmp	r5, r4
 800a47a:	d10b      	bne.n	800a494 <_free_r+0x70>
 800a47c:	6824      	ldr	r4, [r4, #0]
 800a47e:	4421      	add	r1, r4
 800a480:	1854      	adds	r4, r2, r1
 800a482:	42a3      	cmp	r3, r4
 800a484:	6011      	str	r1, [r2, #0]
 800a486:	d1e0      	bne.n	800a44a <_free_r+0x26>
 800a488:	681c      	ldr	r4, [r3, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	6053      	str	r3, [r2, #4]
 800a48e:	440c      	add	r4, r1
 800a490:	6014      	str	r4, [r2, #0]
 800a492:	e7da      	b.n	800a44a <_free_r+0x26>
 800a494:	d902      	bls.n	800a49c <_free_r+0x78>
 800a496:	230c      	movs	r3, #12
 800a498:	6003      	str	r3, [r0, #0]
 800a49a:	e7d6      	b.n	800a44a <_free_r+0x26>
 800a49c:	6825      	ldr	r5, [r4, #0]
 800a49e:	1961      	adds	r1, r4, r5
 800a4a0:	428b      	cmp	r3, r1
 800a4a2:	bf04      	itt	eq
 800a4a4:	6819      	ldreq	r1, [r3, #0]
 800a4a6:	685b      	ldreq	r3, [r3, #4]
 800a4a8:	6063      	str	r3, [r4, #4]
 800a4aa:	bf04      	itt	eq
 800a4ac:	1949      	addeq	r1, r1, r5
 800a4ae:	6021      	streq	r1, [r4, #0]
 800a4b0:	6054      	str	r4, [r2, #4]
 800a4b2:	e7ca      	b.n	800a44a <_free_r+0x26>
 800a4b4:	b003      	add	sp, #12
 800a4b6:	bd30      	pop	{r4, r5, pc}
 800a4b8:	200005ec 	.word	0x200005ec

0800a4bc <malloc>:
 800a4bc:	4b02      	ldr	r3, [pc, #8]	; (800a4c8 <malloc+0xc>)
 800a4be:	4601      	mov	r1, r0
 800a4c0:	6818      	ldr	r0, [r3, #0]
 800a4c2:	f000 b823 	b.w	800a50c <_malloc_r>
 800a4c6:	bf00      	nop
 800a4c8:	2000006c 	.word	0x2000006c

0800a4cc <sbrk_aligned>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	4e0e      	ldr	r6, [pc, #56]	; (800a508 <sbrk_aligned+0x3c>)
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	6831      	ldr	r1, [r6, #0]
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	b911      	cbnz	r1, 800a4de <sbrk_aligned+0x12>
 800a4d8:	f001 f81a 	bl	800b510 <_sbrk_r>
 800a4dc:	6030      	str	r0, [r6, #0]
 800a4de:	4621      	mov	r1, r4
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	f001 f815 	bl	800b510 <_sbrk_r>
 800a4e6:	1c43      	adds	r3, r0, #1
 800a4e8:	d00a      	beq.n	800a500 <sbrk_aligned+0x34>
 800a4ea:	1cc4      	adds	r4, r0, #3
 800a4ec:	f024 0403 	bic.w	r4, r4, #3
 800a4f0:	42a0      	cmp	r0, r4
 800a4f2:	d007      	beq.n	800a504 <sbrk_aligned+0x38>
 800a4f4:	1a21      	subs	r1, r4, r0
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f001 f80a 	bl	800b510 <_sbrk_r>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d101      	bne.n	800a504 <sbrk_aligned+0x38>
 800a500:	f04f 34ff 	mov.w	r4, #4294967295
 800a504:	4620      	mov	r0, r4
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	200005f0 	.word	0x200005f0

0800a50c <_malloc_r>:
 800a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a510:	1ccd      	adds	r5, r1, #3
 800a512:	f025 0503 	bic.w	r5, r5, #3
 800a516:	3508      	adds	r5, #8
 800a518:	2d0c      	cmp	r5, #12
 800a51a:	bf38      	it	cc
 800a51c:	250c      	movcc	r5, #12
 800a51e:	2d00      	cmp	r5, #0
 800a520:	4607      	mov	r7, r0
 800a522:	db01      	blt.n	800a528 <_malloc_r+0x1c>
 800a524:	42a9      	cmp	r1, r5
 800a526:	d905      	bls.n	800a534 <_malloc_r+0x28>
 800a528:	230c      	movs	r3, #12
 800a52a:	603b      	str	r3, [r7, #0]
 800a52c:	2600      	movs	r6, #0
 800a52e:	4630      	mov	r0, r6
 800a530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a608 <_malloc_r+0xfc>
 800a538:	f000 f868 	bl	800a60c <__malloc_lock>
 800a53c:	f8d8 3000 	ldr.w	r3, [r8]
 800a540:	461c      	mov	r4, r3
 800a542:	bb5c      	cbnz	r4, 800a59c <_malloc_r+0x90>
 800a544:	4629      	mov	r1, r5
 800a546:	4638      	mov	r0, r7
 800a548:	f7ff ffc0 	bl	800a4cc <sbrk_aligned>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	4604      	mov	r4, r0
 800a550:	d155      	bne.n	800a5fe <_malloc_r+0xf2>
 800a552:	f8d8 4000 	ldr.w	r4, [r8]
 800a556:	4626      	mov	r6, r4
 800a558:	2e00      	cmp	r6, #0
 800a55a:	d145      	bne.n	800a5e8 <_malloc_r+0xdc>
 800a55c:	2c00      	cmp	r4, #0
 800a55e:	d048      	beq.n	800a5f2 <_malloc_r+0xe6>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	4631      	mov	r1, r6
 800a564:	4638      	mov	r0, r7
 800a566:	eb04 0903 	add.w	r9, r4, r3
 800a56a:	f000 ffd1 	bl	800b510 <_sbrk_r>
 800a56e:	4581      	cmp	r9, r0
 800a570:	d13f      	bne.n	800a5f2 <_malloc_r+0xe6>
 800a572:	6821      	ldr	r1, [r4, #0]
 800a574:	1a6d      	subs	r5, r5, r1
 800a576:	4629      	mov	r1, r5
 800a578:	4638      	mov	r0, r7
 800a57a:	f7ff ffa7 	bl	800a4cc <sbrk_aligned>
 800a57e:	3001      	adds	r0, #1
 800a580:	d037      	beq.n	800a5f2 <_malloc_r+0xe6>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	442b      	add	r3, r5
 800a586:	6023      	str	r3, [r4, #0]
 800a588:	f8d8 3000 	ldr.w	r3, [r8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d038      	beq.n	800a602 <_malloc_r+0xf6>
 800a590:	685a      	ldr	r2, [r3, #4]
 800a592:	42a2      	cmp	r2, r4
 800a594:	d12b      	bne.n	800a5ee <_malloc_r+0xe2>
 800a596:	2200      	movs	r2, #0
 800a598:	605a      	str	r2, [r3, #4]
 800a59a:	e00f      	b.n	800a5bc <_malloc_r+0xb0>
 800a59c:	6822      	ldr	r2, [r4, #0]
 800a59e:	1b52      	subs	r2, r2, r5
 800a5a0:	d41f      	bmi.n	800a5e2 <_malloc_r+0xd6>
 800a5a2:	2a0b      	cmp	r2, #11
 800a5a4:	d917      	bls.n	800a5d6 <_malloc_r+0xca>
 800a5a6:	1961      	adds	r1, r4, r5
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	6025      	str	r5, [r4, #0]
 800a5ac:	bf18      	it	ne
 800a5ae:	6059      	strne	r1, [r3, #4]
 800a5b0:	6863      	ldr	r3, [r4, #4]
 800a5b2:	bf08      	it	eq
 800a5b4:	f8c8 1000 	streq.w	r1, [r8]
 800a5b8:	5162      	str	r2, [r4, r5]
 800a5ba:	604b      	str	r3, [r1, #4]
 800a5bc:	4638      	mov	r0, r7
 800a5be:	f104 060b 	add.w	r6, r4, #11
 800a5c2:	f000 f829 	bl	800a618 <__malloc_unlock>
 800a5c6:	f026 0607 	bic.w	r6, r6, #7
 800a5ca:	1d23      	adds	r3, r4, #4
 800a5cc:	1af2      	subs	r2, r6, r3
 800a5ce:	d0ae      	beq.n	800a52e <_malloc_r+0x22>
 800a5d0:	1b9b      	subs	r3, r3, r6
 800a5d2:	50a3      	str	r3, [r4, r2]
 800a5d4:	e7ab      	b.n	800a52e <_malloc_r+0x22>
 800a5d6:	42a3      	cmp	r3, r4
 800a5d8:	6862      	ldr	r2, [r4, #4]
 800a5da:	d1dd      	bne.n	800a598 <_malloc_r+0x8c>
 800a5dc:	f8c8 2000 	str.w	r2, [r8]
 800a5e0:	e7ec      	b.n	800a5bc <_malloc_r+0xb0>
 800a5e2:	4623      	mov	r3, r4
 800a5e4:	6864      	ldr	r4, [r4, #4]
 800a5e6:	e7ac      	b.n	800a542 <_malloc_r+0x36>
 800a5e8:	4634      	mov	r4, r6
 800a5ea:	6876      	ldr	r6, [r6, #4]
 800a5ec:	e7b4      	b.n	800a558 <_malloc_r+0x4c>
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	e7cc      	b.n	800a58c <_malloc_r+0x80>
 800a5f2:	230c      	movs	r3, #12
 800a5f4:	603b      	str	r3, [r7, #0]
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	f000 f80e 	bl	800a618 <__malloc_unlock>
 800a5fc:	e797      	b.n	800a52e <_malloc_r+0x22>
 800a5fe:	6025      	str	r5, [r4, #0]
 800a600:	e7dc      	b.n	800a5bc <_malloc_r+0xb0>
 800a602:	605b      	str	r3, [r3, #4]
 800a604:	deff      	udf	#255	; 0xff
 800a606:	bf00      	nop
 800a608:	200005ec 	.word	0x200005ec

0800a60c <__malloc_lock>:
 800a60c:	4801      	ldr	r0, [pc, #4]	; (800a614 <__malloc_lock+0x8>)
 800a60e:	f7ff b87e 	b.w	800970e <__retarget_lock_acquire_recursive>
 800a612:	bf00      	nop
 800a614:	200005e8 	.word	0x200005e8

0800a618 <__malloc_unlock>:
 800a618:	4801      	ldr	r0, [pc, #4]	; (800a620 <__malloc_unlock+0x8>)
 800a61a:	f7ff b879 	b.w	8009710 <__retarget_lock_release_recursive>
 800a61e:	bf00      	nop
 800a620:	200005e8 	.word	0x200005e8

0800a624 <_Balloc>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	69c6      	ldr	r6, [r0, #28]
 800a628:	4604      	mov	r4, r0
 800a62a:	460d      	mov	r5, r1
 800a62c:	b976      	cbnz	r6, 800a64c <_Balloc+0x28>
 800a62e:	2010      	movs	r0, #16
 800a630:	f7ff ff44 	bl	800a4bc <malloc>
 800a634:	4602      	mov	r2, r0
 800a636:	61e0      	str	r0, [r4, #28]
 800a638:	b920      	cbnz	r0, 800a644 <_Balloc+0x20>
 800a63a:	4b18      	ldr	r3, [pc, #96]	; (800a69c <_Balloc+0x78>)
 800a63c:	4818      	ldr	r0, [pc, #96]	; (800a6a0 <_Balloc+0x7c>)
 800a63e:	216b      	movs	r1, #107	; 0x6b
 800a640:	f000 ff76 	bl	800b530 <__assert_func>
 800a644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a648:	6006      	str	r6, [r0, #0]
 800a64a:	60c6      	str	r6, [r0, #12]
 800a64c:	69e6      	ldr	r6, [r4, #28]
 800a64e:	68f3      	ldr	r3, [r6, #12]
 800a650:	b183      	cbz	r3, 800a674 <_Balloc+0x50>
 800a652:	69e3      	ldr	r3, [r4, #28]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a65a:	b9b8      	cbnz	r0, 800a68c <_Balloc+0x68>
 800a65c:	2101      	movs	r1, #1
 800a65e:	fa01 f605 	lsl.w	r6, r1, r5
 800a662:	1d72      	adds	r2, r6, #5
 800a664:	0092      	lsls	r2, r2, #2
 800a666:	4620      	mov	r0, r4
 800a668:	f000 ff80 	bl	800b56c <_calloc_r>
 800a66c:	b160      	cbz	r0, 800a688 <_Balloc+0x64>
 800a66e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a672:	e00e      	b.n	800a692 <_Balloc+0x6e>
 800a674:	2221      	movs	r2, #33	; 0x21
 800a676:	2104      	movs	r1, #4
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 ff77 	bl	800b56c <_calloc_r>
 800a67e:	69e3      	ldr	r3, [r4, #28]
 800a680:	60f0      	str	r0, [r6, #12]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e4      	bne.n	800a652 <_Balloc+0x2e>
 800a688:	2000      	movs	r0, #0
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	6802      	ldr	r2, [r0, #0]
 800a68e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a692:	2300      	movs	r3, #0
 800a694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a698:	e7f7      	b.n	800a68a <_Balloc+0x66>
 800a69a:	bf00      	nop
 800a69c:	0800b941 	.word	0x0800b941
 800a6a0:	0800b9c1 	.word	0x0800b9c1

0800a6a4 <_Bfree>:
 800a6a4:	b570      	push	{r4, r5, r6, lr}
 800a6a6:	69c6      	ldr	r6, [r0, #28]
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	b976      	cbnz	r6, 800a6cc <_Bfree+0x28>
 800a6ae:	2010      	movs	r0, #16
 800a6b0:	f7ff ff04 	bl	800a4bc <malloc>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	61e8      	str	r0, [r5, #28]
 800a6b8:	b920      	cbnz	r0, 800a6c4 <_Bfree+0x20>
 800a6ba:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <_Bfree+0x3c>)
 800a6bc:	4809      	ldr	r0, [pc, #36]	; (800a6e4 <_Bfree+0x40>)
 800a6be:	218f      	movs	r1, #143	; 0x8f
 800a6c0:	f000 ff36 	bl	800b530 <__assert_func>
 800a6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c8:	6006      	str	r6, [r0, #0]
 800a6ca:	60c6      	str	r6, [r0, #12]
 800a6cc:	b13c      	cbz	r4, 800a6de <_Bfree+0x3a>
 800a6ce:	69eb      	ldr	r3, [r5, #28]
 800a6d0:	6862      	ldr	r2, [r4, #4]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6d8:	6021      	str	r1, [r4, #0]
 800a6da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	0800b941 	.word	0x0800b941
 800a6e4:	0800b9c1 	.word	0x0800b9c1

0800a6e8 <__multadd>:
 800a6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ec:	690d      	ldr	r5, [r1, #16]
 800a6ee:	4607      	mov	r7, r0
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	461e      	mov	r6, r3
 800a6f4:	f101 0c14 	add.w	ip, r1, #20
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	f8dc 3000 	ldr.w	r3, [ip]
 800a6fe:	b299      	uxth	r1, r3
 800a700:	fb02 6101 	mla	r1, r2, r1, r6
 800a704:	0c1e      	lsrs	r6, r3, #16
 800a706:	0c0b      	lsrs	r3, r1, #16
 800a708:	fb02 3306 	mla	r3, r2, r6, r3
 800a70c:	b289      	uxth	r1, r1
 800a70e:	3001      	adds	r0, #1
 800a710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a714:	4285      	cmp	r5, r0
 800a716:	f84c 1b04 	str.w	r1, [ip], #4
 800a71a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a71e:	dcec      	bgt.n	800a6fa <__multadd+0x12>
 800a720:	b30e      	cbz	r6, 800a766 <__multadd+0x7e>
 800a722:	68a3      	ldr	r3, [r4, #8]
 800a724:	42ab      	cmp	r3, r5
 800a726:	dc19      	bgt.n	800a75c <__multadd+0x74>
 800a728:	6861      	ldr	r1, [r4, #4]
 800a72a:	4638      	mov	r0, r7
 800a72c:	3101      	adds	r1, #1
 800a72e:	f7ff ff79 	bl	800a624 <_Balloc>
 800a732:	4680      	mov	r8, r0
 800a734:	b928      	cbnz	r0, 800a742 <__multadd+0x5a>
 800a736:	4602      	mov	r2, r0
 800a738:	4b0c      	ldr	r3, [pc, #48]	; (800a76c <__multadd+0x84>)
 800a73a:	480d      	ldr	r0, [pc, #52]	; (800a770 <__multadd+0x88>)
 800a73c:	21ba      	movs	r1, #186	; 0xba
 800a73e:	f000 fef7 	bl	800b530 <__assert_func>
 800a742:	6922      	ldr	r2, [r4, #16]
 800a744:	3202      	adds	r2, #2
 800a746:	f104 010c 	add.w	r1, r4, #12
 800a74a:	0092      	lsls	r2, r2, #2
 800a74c:	300c      	adds	r0, #12
 800a74e:	f7fe ffe0 	bl	8009712 <memcpy>
 800a752:	4621      	mov	r1, r4
 800a754:	4638      	mov	r0, r7
 800a756:	f7ff ffa5 	bl	800a6a4 <_Bfree>
 800a75a:	4644      	mov	r4, r8
 800a75c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a760:	3501      	adds	r5, #1
 800a762:	615e      	str	r6, [r3, #20]
 800a764:	6125      	str	r5, [r4, #16]
 800a766:	4620      	mov	r0, r4
 800a768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a76c:	0800b9b0 	.word	0x0800b9b0
 800a770:	0800b9c1 	.word	0x0800b9c1

0800a774 <__hi0bits>:
 800a774:	0c03      	lsrs	r3, r0, #16
 800a776:	041b      	lsls	r3, r3, #16
 800a778:	b9d3      	cbnz	r3, 800a7b0 <__hi0bits+0x3c>
 800a77a:	0400      	lsls	r0, r0, #16
 800a77c:	2310      	movs	r3, #16
 800a77e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a782:	bf04      	itt	eq
 800a784:	0200      	lsleq	r0, r0, #8
 800a786:	3308      	addeq	r3, #8
 800a788:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a78c:	bf04      	itt	eq
 800a78e:	0100      	lsleq	r0, r0, #4
 800a790:	3304      	addeq	r3, #4
 800a792:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a796:	bf04      	itt	eq
 800a798:	0080      	lsleq	r0, r0, #2
 800a79a:	3302      	addeq	r3, #2
 800a79c:	2800      	cmp	r0, #0
 800a79e:	db05      	blt.n	800a7ac <__hi0bits+0x38>
 800a7a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7a4:	f103 0301 	add.w	r3, r3, #1
 800a7a8:	bf08      	it	eq
 800a7aa:	2320      	moveq	r3, #32
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	4770      	bx	lr
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	e7e4      	b.n	800a77e <__hi0bits+0xa>

0800a7b4 <__lo0bits>:
 800a7b4:	6803      	ldr	r3, [r0, #0]
 800a7b6:	f013 0207 	ands.w	r2, r3, #7
 800a7ba:	d00c      	beq.n	800a7d6 <__lo0bits+0x22>
 800a7bc:	07d9      	lsls	r1, r3, #31
 800a7be:	d422      	bmi.n	800a806 <__lo0bits+0x52>
 800a7c0:	079a      	lsls	r2, r3, #30
 800a7c2:	bf49      	itett	mi
 800a7c4:	085b      	lsrmi	r3, r3, #1
 800a7c6:	089b      	lsrpl	r3, r3, #2
 800a7c8:	6003      	strmi	r3, [r0, #0]
 800a7ca:	2201      	movmi	r2, #1
 800a7cc:	bf5c      	itt	pl
 800a7ce:	6003      	strpl	r3, [r0, #0]
 800a7d0:	2202      	movpl	r2, #2
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	4770      	bx	lr
 800a7d6:	b299      	uxth	r1, r3
 800a7d8:	b909      	cbnz	r1, 800a7de <__lo0bits+0x2a>
 800a7da:	0c1b      	lsrs	r3, r3, #16
 800a7dc:	2210      	movs	r2, #16
 800a7de:	b2d9      	uxtb	r1, r3
 800a7e0:	b909      	cbnz	r1, 800a7e6 <__lo0bits+0x32>
 800a7e2:	3208      	adds	r2, #8
 800a7e4:	0a1b      	lsrs	r3, r3, #8
 800a7e6:	0719      	lsls	r1, r3, #28
 800a7e8:	bf04      	itt	eq
 800a7ea:	091b      	lsreq	r3, r3, #4
 800a7ec:	3204      	addeq	r2, #4
 800a7ee:	0799      	lsls	r1, r3, #30
 800a7f0:	bf04      	itt	eq
 800a7f2:	089b      	lsreq	r3, r3, #2
 800a7f4:	3202      	addeq	r2, #2
 800a7f6:	07d9      	lsls	r1, r3, #31
 800a7f8:	d403      	bmi.n	800a802 <__lo0bits+0x4e>
 800a7fa:	085b      	lsrs	r3, r3, #1
 800a7fc:	f102 0201 	add.w	r2, r2, #1
 800a800:	d003      	beq.n	800a80a <__lo0bits+0x56>
 800a802:	6003      	str	r3, [r0, #0]
 800a804:	e7e5      	b.n	800a7d2 <__lo0bits+0x1e>
 800a806:	2200      	movs	r2, #0
 800a808:	e7e3      	b.n	800a7d2 <__lo0bits+0x1e>
 800a80a:	2220      	movs	r2, #32
 800a80c:	e7e1      	b.n	800a7d2 <__lo0bits+0x1e>
	...

0800a810 <__i2b>:
 800a810:	b510      	push	{r4, lr}
 800a812:	460c      	mov	r4, r1
 800a814:	2101      	movs	r1, #1
 800a816:	f7ff ff05 	bl	800a624 <_Balloc>
 800a81a:	4602      	mov	r2, r0
 800a81c:	b928      	cbnz	r0, 800a82a <__i2b+0x1a>
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <__i2b+0x24>)
 800a820:	4805      	ldr	r0, [pc, #20]	; (800a838 <__i2b+0x28>)
 800a822:	f240 1145 	movw	r1, #325	; 0x145
 800a826:	f000 fe83 	bl	800b530 <__assert_func>
 800a82a:	2301      	movs	r3, #1
 800a82c:	6144      	str	r4, [r0, #20]
 800a82e:	6103      	str	r3, [r0, #16]
 800a830:	bd10      	pop	{r4, pc}
 800a832:	bf00      	nop
 800a834:	0800b9b0 	.word	0x0800b9b0
 800a838:	0800b9c1 	.word	0x0800b9c1

0800a83c <__multiply>:
 800a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a840:	4691      	mov	r9, r2
 800a842:	690a      	ldr	r2, [r1, #16]
 800a844:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a848:	429a      	cmp	r2, r3
 800a84a:	bfb8      	it	lt
 800a84c:	460b      	movlt	r3, r1
 800a84e:	460c      	mov	r4, r1
 800a850:	bfbc      	itt	lt
 800a852:	464c      	movlt	r4, r9
 800a854:	4699      	movlt	r9, r3
 800a856:	6927      	ldr	r7, [r4, #16]
 800a858:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a85c:	68a3      	ldr	r3, [r4, #8]
 800a85e:	6861      	ldr	r1, [r4, #4]
 800a860:	eb07 060a 	add.w	r6, r7, sl
 800a864:	42b3      	cmp	r3, r6
 800a866:	b085      	sub	sp, #20
 800a868:	bfb8      	it	lt
 800a86a:	3101      	addlt	r1, #1
 800a86c:	f7ff feda 	bl	800a624 <_Balloc>
 800a870:	b930      	cbnz	r0, 800a880 <__multiply+0x44>
 800a872:	4602      	mov	r2, r0
 800a874:	4b44      	ldr	r3, [pc, #272]	; (800a988 <__multiply+0x14c>)
 800a876:	4845      	ldr	r0, [pc, #276]	; (800a98c <__multiply+0x150>)
 800a878:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a87c:	f000 fe58 	bl	800b530 <__assert_func>
 800a880:	f100 0514 	add.w	r5, r0, #20
 800a884:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a888:	462b      	mov	r3, r5
 800a88a:	2200      	movs	r2, #0
 800a88c:	4543      	cmp	r3, r8
 800a88e:	d321      	bcc.n	800a8d4 <__multiply+0x98>
 800a890:	f104 0314 	add.w	r3, r4, #20
 800a894:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a898:	f109 0314 	add.w	r3, r9, #20
 800a89c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8a0:	9202      	str	r2, [sp, #8]
 800a8a2:	1b3a      	subs	r2, r7, r4
 800a8a4:	3a15      	subs	r2, #21
 800a8a6:	f022 0203 	bic.w	r2, r2, #3
 800a8aa:	3204      	adds	r2, #4
 800a8ac:	f104 0115 	add.w	r1, r4, #21
 800a8b0:	428f      	cmp	r7, r1
 800a8b2:	bf38      	it	cc
 800a8b4:	2204      	movcc	r2, #4
 800a8b6:	9201      	str	r2, [sp, #4]
 800a8b8:	9a02      	ldr	r2, [sp, #8]
 800a8ba:	9303      	str	r3, [sp, #12]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d80c      	bhi.n	800a8da <__multiply+0x9e>
 800a8c0:	2e00      	cmp	r6, #0
 800a8c2:	dd03      	ble.n	800a8cc <__multiply+0x90>
 800a8c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d05b      	beq.n	800a984 <__multiply+0x148>
 800a8cc:	6106      	str	r6, [r0, #16]
 800a8ce:	b005      	add	sp, #20
 800a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d4:	f843 2b04 	str.w	r2, [r3], #4
 800a8d8:	e7d8      	b.n	800a88c <__multiply+0x50>
 800a8da:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8de:	f1ba 0f00 	cmp.w	sl, #0
 800a8e2:	d024      	beq.n	800a92e <__multiply+0xf2>
 800a8e4:	f104 0e14 	add.w	lr, r4, #20
 800a8e8:	46a9      	mov	r9, r5
 800a8ea:	f04f 0c00 	mov.w	ip, #0
 800a8ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8f2:	f8d9 1000 	ldr.w	r1, [r9]
 800a8f6:	fa1f fb82 	uxth.w	fp, r2
 800a8fa:	b289      	uxth	r1, r1
 800a8fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a900:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a904:	f8d9 2000 	ldr.w	r2, [r9]
 800a908:	4461      	add	r1, ip
 800a90a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a90e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a912:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a916:	b289      	uxth	r1, r1
 800a918:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a91c:	4577      	cmp	r7, lr
 800a91e:	f849 1b04 	str.w	r1, [r9], #4
 800a922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a926:	d8e2      	bhi.n	800a8ee <__multiply+0xb2>
 800a928:	9a01      	ldr	r2, [sp, #4]
 800a92a:	f845 c002 	str.w	ip, [r5, r2]
 800a92e:	9a03      	ldr	r2, [sp, #12]
 800a930:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a934:	3304      	adds	r3, #4
 800a936:	f1b9 0f00 	cmp.w	r9, #0
 800a93a:	d021      	beq.n	800a980 <__multiply+0x144>
 800a93c:	6829      	ldr	r1, [r5, #0]
 800a93e:	f104 0c14 	add.w	ip, r4, #20
 800a942:	46ae      	mov	lr, r5
 800a944:	f04f 0a00 	mov.w	sl, #0
 800a948:	f8bc b000 	ldrh.w	fp, [ip]
 800a94c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a950:	fb09 220b 	mla	r2, r9, fp, r2
 800a954:	4452      	add	r2, sl
 800a956:	b289      	uxth	r1, r1
 800a958:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a95c:	f84e 1b04 	str.w	r1, [lr], #4
 800a960:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a964:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a968:	f8be 1000 	ldrh.w	r1, [lr]
 800a96c:	fb09 110a 	mla	r1, r9, sl, r1
 800a970:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a974:	4567      	cmp	r7, ip
 800a976:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a97a:	d8e5      	bhi.n	800a948 <__multiply+0x10c>
 800a97c:	9a01      	ldr	r2, [sp, #4]
 800a97e:	50a9      	str	r1, [r5, r2]
 800a980:	3504      	adds	r5, #4
 800a982:	e799      	b.n	800a8b8 <__multiply+0x7c>
 800a984:	3e01      	subs	r6, #1
 800a986:	e79b      	b.n	800a8c0 <__multiply+0x84>
 800a988:	0800b9b0 	.word	0x0800b9b0
 800a98c:	0800b9c1 	.word	0x0800b9c1

0800a990 <__pow5mult>:
 800a990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a994:	4615      	mov	r5, r2
 800a996:	f012 0203 	ands.w	r2, r2, #3
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	d007      	beq.n	800a9b0 <__pow5mult+0x20>
 800a9a0:	4c25      	ldr	r4, [pc, #148]	; (800aa38 <__pow5mult+0xa8>)
 800a9a2:	3a01      	subs	r2, #1
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9aa:	f7ff fe9d 	bl	800a6e8 <__multadd>
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	10ad      	asrs	r5, r5, #2
 800a9b2:	d03d      	beq.n	800aa30 <__pow5mult+0xa0>
 800a9b4:	69f4      	ldr	r4, [r6, #28]
 800a9b6:	b97c      	cbnz	r4, 800a9d8 <__pow5mult+0x48>
 800a9b8:	2010      	movs	r0, #16
 800a9ba:	f7ff fd7f 	bl	800a4bc <malloc>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	61f0      	str	r0, [r6, #28]
 800a9c2:	b928      	cbnz	r0, 800a9d0 <__pow5mult+0x40>
 800a9c4:	4b1d      	ldr	r3, [pc, #116]	; (800aa3c <__pow5mult+0xac>)
 800a9c6:	481e      	ldr	r0, [pc, #120]	; (800aa40 <__pow5mult+0xb0>)
 800a9c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a9cc:	f000 fdb0 	bl	800b530 <__assert_func>
 800a9d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9d4:	6004      	str	r4, [r0, #0]
 800a9d6:	60c4      	str	r4, [r0, #12]
 800a9d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a9dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9e0:	b94c      	cbnz	r4, 800a9f6 <__pow5mult+0x66>
 800a9e2:	f240 2171 	movw	r1, #625	; 0x271
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f7ff ff12 	bl	800a810 <__i2b>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	6003      	str	r3, [r0, #0]
 800a9f6:	f04f 0900 	mov.w	r9, #0
 800a9fa:	07eb      	lsls	r3, r5, #31
 800a9fc:	d50a      	bpl.n	800aa14 <__pow5mult+0x84>
 800a9fe:	4639      	mov	r1, r7
 800aa00:	4622      	mov	r2, r4
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff ff1a 	bl	800a83c <__multiply>
 800aa08:	4639      	mov	r1, r7
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f7ff fe49 	bl	800a6a4 <_Bfree>
 800aa12:	4647      	mov	r7, r8
 800aa14:	106d      	asrs	r5, r5, #1
 800aa16:	d00b      	beq.n	800aa30 <__pow5mult+0xa0>
 800aa18:	6820      	ldr	r0, [r4, #0]
 800aa1a:	b938      	cbnz	r0, 800aa2c <__pow5mult+0x9c>
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4630      	mov	r0, r6
 800aa22:	f7ff ff0b 	bl	800a83c <__multiply>
 800aa26:	6020      	str	r0, [r4, #0]
 800aa28:	f8c0 9000 	str.w	r9, [r0]
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	e7e4      	b.n	800a9fa <__pow5mult+0x6a>
 800aa30:	4638      	mov	r0, r7
 800aa32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa36:	bf00      	nop
 800aa38:	0800bb10 	.word	0x0800bb10
 800aa3c:	0800b941 	.word	0x0800b941
 800aa40:	0800b9c1 	.word	0x0800b9c1

0800aa44 <__lshift>:
 800aa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa48:	460c      	mov	r4, r1
 800aa4a:	6849      	ldr	r1, [r1, #4]
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa52:	68a3      	ldr	r3, [r4, #8]
 800aa54:	4607      	mov	r7, r0
 800aa56:	4691      	mov	r9, r2
 800aa58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa5c:	f108 0601 	add.w	r6, r8, #1
 800aa60:	42b3      	cmp	r3, r6
 800aa62:	db0b      	blt.n	800aa7c <__lshift+0x38>
 800aa64:	4638      	mov	r0, r7
 800aa66:	f7ff fddd 	bl	800a624 <_Balloc>
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	b948      	cbnz	r0, 800aa82 <__lshift+0x3e>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	4b28      	ldr	r3, [pc, #160]	; (800ab14 <__lshift+0xd0>)
 800aa72:	4829      	ldr	r0, [pc, #164]	; (800ab18 <__lshift+0xd4>)
 800aa74:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aa78:	f000 fd5a 	bl	800b530 <__assert_func>
 800aa7c:	3101      	adds	r1, #1
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	e7ee      	b.n	800aa60 <__lshift+0x1c>
 800aa82:	2300      	movs	r3, #0
 800aa84:	f100 0114 	add.w	r1, r0, #20
 800aa88:	f100 0210 	add.w	r2, r0, #16
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	4553      	cmp	r3, sl
 800aa90:	db33      	blt.n	800aafa <__lshift+0xb6>
 800aa92:	6920      	ldr	r0, [r4, #16]
 800aa94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa98:	f104 0314 	add.w	r3, r4, #20
 800aa9c:	f019 091f 	ands.w	r9, r9, #31
 800aaa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aaa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aaa8:	d02b      	beq.n	800ab02 <__lshift+0xbe>
 800aaaa:	f1c9 0e20 	rsb	lr, r9, #32
 800aaae:	468a      	mov	sl, r1
 800aab0:	2200      	movs	r2, #0
 800aab2:	6818      	ldr	r0, [r3, #0]
 800aab4:	fa00 f009 	lsl.w	r0, r0, r9
 800aab8:	4310      	orrs	r0, r2
 800aaba:	f84a 0b04 	str.w	r0, [sl], #4
 800aabe:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac2:	459c      	cmp	ip, r3
 800aac4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aac8:	d8f3      	bhi.n	800aab2 <__lshift+0x6e>
 800aaca:	ebac 0304 	sub.w	r3, ip, r4
 800aace:	3b15      	subs	r3, #21
 800aad0:	f023 0303 	bic.w	r3, r3, #3
 800aad4:	3304      	adds	r3, #4
 800aad6:	f104 0015 	add.w	r0, r4, #21
 800aada:	4584      	cmp	ip, r0
 800aadc:	bf38      	it	cc
 800aade:	2304      	movcc	r3, #4
 800aae0:	50ca      	str	r2, [r1, r3]
 800aae2:	b10a      	cbz	r2, 800aae8 <__lshift+0xa4>
 800aae4:	f108 0602 	add.w	r6, r8, #2
 800aae8:	3e01      	subs	r6, #1
 800aaea:	4638      	mov	r0, r7
 800aaec:	612e      	str	r6, [r5, #16]
 800aaee:	4621      	mov	r1, r4
 800aaf0:	f7ff fdd8 	bl	800a6a4 <_Bfree>
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafa:	f842 0f04 	str.w	r0, [r2, #4]!
 800aafe:	3301      	adds	r3, #1
 800ab00:	e7c5      	b.n	800aa8e <__lshift+0x4a>
 800ab02:	3904      	subs	r1, #4
 800ab04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab0c:	459c      	cmp	ip, r3
 800ab0e:	d8f9      	bhi.n	800ab04 <__lshift+0xc0>
 800ab10:	e7ea      	b.n	800aae8 <__lshift+0xa4>
 800ab12:	bf00      	nop
 800ab14:	0800b9b0 	.word	0x0800b9b0
 800ab18:	0800b9c1 	.word	0x0800b9c1

0800ab1c <__mcmp>:
 800ab1c:	b530      	push	{r4, r5, lr}
 800ab1e:	6902      	ldr	r2, [r0, #16]
 800ab20:	690c      	ldr	r4, [r1, #16]
 800ab22:	1b12      	subs	r2, r2, r4
 800ab24:	d10e      	bne.n	800ab44 <__mcmp+0x28>
 800ab26:	f100 0314 	add.w	r3, r0, #20
 800ab2a:	3114      	adds	r1, #20
 800ab2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab3c:	42a5      	cmp	r5, r4
 800ab3e:	d003      	beq.n	800ab48 <__mcmp+0x2c>
 800ab40:	d305      	bcc.n	800ab4e <__mcmp+0x32>
 800ab42:	2201      	movs	r2, #1
 800ab44:	4610      	mov	r0, r2
 800ab46:	bd30      	pop	{r4, r5, pc}
 800ab48:	4283      	cmp	r3, r0
 800ab4a:	d3f3      	bcc.n	800ab34 <__mcmp+0x18>
 800ab4c:	e7fa      	b.n	800ab44 <__mcmp+0x28>
 800ab4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab52:	e7f7      	b.n	800ab44 <__mcmp+0x28>

0800ab54 <__mdiff>:
 800ab54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab58:	460c      	mov	r4, r1
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4620      	mov	r0, r4
 800ab60:	4690      	mov	r8, r2
 800ab62:	f7ff ffdb 	bl	800ab1c <__mcmp>
 800ab66:	1e05      	subs	r5, r0, #0
 800ab68:	d110      	bne.n	800ab8c <__mdiff+0x38>
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f7ff fd59 	bl	800a624 <_Balloc>
 800ab72:	b930      	cbnz	r0, 800ab82 <__mdiff+0x2e>
 800ab74:	4b3a      	ldr	r3, [pc, #232]	; (800ac60 <__mdiff+0x10c>)
 800ab76:	4602      	mov	r2, r0
 800ab78:	f240 2137 	movw	r1, #567	; 0x237
 800ab7c:	4839      	ldr	r0, [pc, #228]	; (800ac64 <__mdiff+0x110>)
 800ab7e:	f000 fcd7 	bl	800b530 <__assert_func>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8c:	bfa4      	itt	ge
 800ab8e:	4643      	movge	r3, r8
 800ab90:	46a0      	movge	r8, r4
 800ab92:	4630      	mov	r0, r6
 800ab94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab98:	bfa6      	itte	ge
 800ab9a:	461c      	movge	r4, r3
 800ab9c:	2500      	movge	r5, #0
 800ab9e:	2501      	movlt	r5, #1
 800aba0:	f7ff fd40 	bl	800a624 <_Balloc>
 800aba4:	b920      	cbnz	r0, 800abb0 <__mdiff+0x5c>
 800aba6:	4b2e      	ldr	r3, [pc, #184]	; (800ac60 <__mdiff+0x10c>)
 800aba8:	4602      	mov	r2, r0
 800abaa:	f240 2145 	movw	r1, #581	; 0x245
 800abae:	e7e5      	b.n	800ab7c <__mdiff+0x28>
 800abb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abb4:	6926      	ldr	r6, [r4, #16]
 800abb6:	60c5      	str	r5, [r0, #12]
 800abb8:	f104 0914 	add.w	r9, r4, #20
 800abbc:	f108 0514 	add.w	r5, r8, #20
 800abc0:	f100 0e14 	add.w	lr, r0, #20
 800abc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abcc:	f108 0210 	add.w	r2, r8, #16
 800abd0:	46f2      	mov	sl, lr
 800abd2:	2100      	movs	r1, #0
 800abd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800abd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abdc:	fa11 f88b 	uxtah	r8, r1, fp
 800abe0:	b299      	uxth	r1, r3
 800abe2:	0c1b      	lsrs	r3, r3, #16
 800abe4:	eba8 0801 	sub.w	r8, r8, r1
 800abe8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abf0:	fa1f f888 	uxth.w	r8, r8
 800abf4:	1419      	asrs	r1, r3, #16
 800abf6:	454e      	cmp	r6, r9
 800abf8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abfc:	f84a 3b04 	str.w	r3, [sl], #4
 800ac00:	d8e8      	bhi.n	800abd4 <__mdiff+0x80>
 800ac02:	1b33      	subs	r3, r6, r4
 800ac04:	3b15      	subs	r3, #21
 800ac06:	f023 0303 	bic.w	r3, r3, #3
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	3415      	adds	r4, #21
 800ac0e:	42a6      	cmp	r6, r4
 800ac10:	bf38      	it	cc
 800ac12:	2304      	movcc	r3, #4
 800ac14:	441d      	add	r5, r3
 800ac16:	4473      	add	r3, lr
 800ac18:	469e      	mov	lr, r3
 800ac1a:	462e      	mov	r6, r5
 800ac1c:	4566      	cmp	r6, ip
 800ac1e:	d30e      	bcc.n	800ac3e <__mdiff+0xea>
 800ac20:	f10c 0203 	add.w	r2, ip, #3
 800ac24:	1b52      	subs	r2, r2, r5
 800ac26:	f022 0203 	bic.w	r2, r2, #3
 800ac2a:	3d03      	subs	r5, #3
 800ac2c:	45ac      	cmp	ip, r5
 800ac2e:	bf38      	it	cc
 800ac30:	2200      	movcc	r2, #0
 800ac32:	4413      	add	r3, r2
 800ac34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ac38:	b17a      	cbz	r2, 800ac5a <__mdiff+0x106>
 800ac3a:	6107      	str	r7, [r0, #16]
 800ac3c:	e7a4      	b.n	800ab88 <__mdiff+0x34>
 800ac3e:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac42:	fa11 f288 	uxtah	r2, r1, r8
 800ac46:	1414      	asrs	r4, r2, #16
 800ac48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac4c:	b292      	uxth	r2, r2
 800ac4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac52:	f84e 2b04 	str.w	r2, [lr], #4
 800ac56:	1421      	asrs	r1, r4, #16
 800ac58:	e7e0      	b.n	800ac1c <__mdiff+0xc8>
 800ac5a:	3f01      	subs	r7, #1
 800ac5c:	e7ea      	b.n	800ac34 <__mdiff+0xe0>
 800ac5e:	bf00      	nop
 800ac60:	0800b9b0 	.word	0x0800b9b0
 800ac64:	0800b9c1 	.word	0x0800b9c1

0800ac68 <__d2b>:
 800ac68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	2101      	movs	r1, #1
 800ac70:	ec59 8b10 	vmov	r8, r9, d0
 800ac74:	4616      	mov	r6, r2
 800ac76:	f7ff fcd5 	bl	800a624 <_Balloc>
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	b930      	cbnz	r0, 800ac8c <__d2b+0x24>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	4b24      	ldr	r3, [pc, #144]	; (800ad14 <__d2b+0xac>)
 800ac82:	4825      	ldr	r0, [pc, #148]	; (800ad18 <__d2b+0xb0>)
 800ac84:	f240 310f 	movw	r1, #783	; 0x30f
 800ac88:	f000 fc52 	bl	800b530 <__assert_func>
 800ac8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac94:	bb2d      	cbnz	r5, 800ace2 <__d2b+0x7a>
 800ac96:	9301      	str	r3, [sp, #4]
 800ac98:	f1b8 0300 	subs.w	r3, r8, #0
 800ac9c:	d026      	beq.n	800acec <__d2b+0x84>
 800ac9e:	4668      	mov	r0, sp
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	f7ff fd87 	bl	800a7b4 <__lo0bits>
 800aca6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acaa:	b1e8      	cbz	r0, 800ace8 <__d2b+0x80>
 800acac:	f1c0 0320 	rsb	r3, r0, #32
 800acb0:	fa02 f303 	lsl.w	r3, r2, r3
 800acb4:	430b      	orrs	r3, r1
 800acb6:	40c2      	lsrs	r2, r0
 800acb8:	6163      	str	r3, [r4, #20]
 800acba:	9201      	str	r2, [sp, #4]
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	61a3      	str	r3, [r4, #24]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bf14      	ite	ne
 800acc4:	2202      	movne	r2, #2
 800acc6:	2201      	moveq	r2, #1
 800acc8:	6122      	str	r2, [r4, #16]
 800acca:	b1bd      	cbz	r5, 800acfc <__d2b+0x94>
 800accc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acd0:	4405      	add	r5, r0
 800acd2:	603d      	str	r5, [r7, #0]
 800acd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800acd8:	6030      	str	r0, [r6, #0]
 800acda:	4620      	mov	r0, r4
 800acdc:	b003      	add	sp, #12
 800acde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ace6:	e7d6      	b.n	800ac96 <__d2b+0x2e>
 800ace8:	6161      	str	r1, [r4, #20]
 800acea:	e7e7      	b.n	800acbc <__d2b+0x54>
 800acec:	a801      	add	r0, sp, #4
 800acee:	f7ff fd61 	bl	800a7b4 <__lo0bits>
 800acf2:	9b01      	ldr	r3, [sp, #4]
 800acf4:	6163      	str	r3, [r4, #20]
 800acf6:	3020      	adds	r0, #32
 800acf8:	2201      	movs	r2, #1
 800acfa:	e7e5      	b.n	800acc8 <__d2b+0x60>
 800acfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad04:	6038      	str	r0, [r7, #0]
 800ad06:	6918      	ldr	r0, [r3, #16]
 800ad08:	f7ff fd34 	bl	800a774 <__hi0bits>
 800ad0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad10:	e7e2      	b.n	800acd8 <__d2b+0x70>
 800ad12:	bf00      	nop
 800ad14:	0800b9b0 	.word	0x0800b9b0
 800ad18:	0800b9c1 	.word	0x0800b9c1

0800ad1c <__ssputs_r>:
 800ad1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad20:	688e      	ldr	r6, [r1, #8]
 800ad22:	461f      	mov	r7, r3
 800ad24:	42be      	cmp	r6, r7
 800ad26:	680b      	ldr	r3, [r1, #0]
 800ad28:	4682      	mov	sl, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	4690      	mov	r8, r2
 800ad2e:	d82c      	bhi.n	800ad8a <__ssputs_r+0x6e>
 800ad30:	898a      	ldrh	r2, [r1, #12]
 800ad32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad36:	d026      	beq.n	800ad86 <__ssputs_r+0x6a>
 800ad38:	6965      	ldr	r5, [r4, #20]
 800ad3a:	6909      	ldr	r1, [r1, #16]
 800ad3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad40:	eba3 0901 	sub.w	r9, r3, r1
 800ad44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad48:	1c7b      	adds	r3, r7, #1
 800ad4a:	444b      	add	r3, r9
 800ad4c:	106d      	asrs	r5, r5, #1
 800ad4e:	429d      	cmp	r5, r3
 800ad50:	bf38      	it	cc
 800ad52:	461d      	movcc	r5, r3
 800ad54:	0553      	lsls	r3, r2, #21
 800ad56:	d527      	bpl.n	800ada8 <__ssputs_r+0x8c>
 800ad58:	4629      	mov	r1, r5
 800ad5a:	f7ff fbd7 	bl	800a50c <_malloc_r>
 800ad5e:	4606      	mov	r6, r0
 800ad60:	b360      	cbz	r0, 800adbc <__ssputs_r+0xa0>
 800ad62:	6921      	ldr	r1, [r4, #16]
 800ad64:	464a      	mov	r2, r9
 800ad66:	f7fe fcd4 	bl	8009712 <memcpy>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	6126      	str	r6, [r4, #16]
 800ad78:	6165      	str	r5, [r4, #20]
 800ad7a:	444e      	add	r6, r9
 800ad7c:	eba5 0509 	sub.w	r5, r5, r9
 800ad80:	6026      	str	r6, [r4, #0]
 800ad82:	60a5      	str	r5, [r4, #8]
 800ad84:	463e      	mov	r6, r7
 800ad86:	42be      	cmp	r6, r7
 800ad88:	d900      	bls.n	800ad8c <__ssputs_r+0x70>
 800ad8a:	463e      	mov	r6, r7
 800ad8c:	6820      	ldr	r0, [r4, #0]
 800ad8e:	4632      	mov	r2, r6
 800ad90:	4641      	mov	r1, r8
 800ad92:	f000 fba3 	bl	800b4dc <memmove>
 800ad96:	68a3      	ldr	r3, [r4, #8]
 800ad98:	1b9b      	subs	r3, r3, r6
 800ad9a:	60a3      	str	r3, [r4, #8]
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	4433      	add	r3, r6
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	2000      	movs	r0, #0
 800ada4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada8:	462a      	mov	r2, r5
 800adaa:	f000 fc07 	bl	800b5bc <_realloc_r>
 800adae:	4606      	mov	r6, r0
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d1e0      	bne.n	800ad76 <__ssputs_r+0x5a>
 800adb4:	6921      	ldr	r1, [r4, #16]
 800adb6:	4650      	mov	r0, sl
 800adb8:	f7ff fb34 	bl	800a424 <_free_r>
 800adbc:	230c      	movs	r3, #12
 800adbe:	f8ca 3000 	str.w	r3, [sl]
 800adc2:	89a3      	ldrh	r3, [r4, #12]
 800adc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adc8:	81a3      	strh	r3, [r4, #12]
 800adca:	f04f 30ff 	mov.w	r0, #4294967295
 800adce:	e7e9      	b.n	800ada4 <__ssputs_r+0x88>

0800add0 <_svfiprintf_r>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	4698      	mov	r8, r3
 800add6:	898b      	ldrh	r3, [r1, #12]
 800add8:	061b      	lsls	r3, r3, #24
 800adda:	b09d      	sub	sp, #116	; 0x74
 800addc:	4607      	mov	r7, r0
 800adde:	460d      	mov	r5, r1
 800ade0:	4614      	mov	r4, r2
 800ade2:	d50e      	bpl.n	800ae02 <_svfiprintf_r+0x32>
 800ade4:	690b      	ldr	r3, [r1, #16]
 800ade6:	b963      	cbnz	r3, 800ae02 <_svfiprintf_r+0x32>
 800ade8:	2140      	movs	r1, #64	; 0x40
 800adea:	f7ff fb8f 	bl	800a50c <_malloc_r>
 800adee:	6028      	str	r0, [r5, #0]
 800adf0:	6128      	str	r0, [r5, #16]
 800adf2:	b920      	cbnz	r0, 800adfe <_svfiprintf_r+0x2e>
 800adf4:	230c      	movs	r3, #12
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	e0d0      	b.n	800afa0 <_svfiprintf_r+0x1d0>
 800adfe:	2340      	movs	r3, #64	; 0x40
 800ae00:	616b      	str	r3, [r5, #20]
 800ae02:	2300      	movs	r3, #0
 800ae04:	9309      	str	r3, [sp, #36]	; 0x24
 800ae06:	2320      	movs	r3, #32
 800ae08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae10:	2330      	movs	r3, #48	; 0x30
 800ae12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800afb8 <_svfiprintf_r+0x1e8>
 800ae16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae1a:	f04f 0901 	mov.w	r9, #1
 800ae1e:	4623      	mov	r3, r4
 800ae20:	469a      	mov	sl, r3
 800ae22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae26:	b10a      	cbz	r2, 800ae2c <_svfiprintf_r+0x5c>
 800ae28:	2a25      	cmp	r2, #37	; 0x25
 800ae2a:	d1f9      	bne.n	800ae20 <_svfiprintf_r+0x50>
 800ae2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae30:	d00b      	beq.n	800ae4a <_svfiprintf_r+0x7a>
 800ae32:	465b      	mov	r3, fp
 800ae34:	4622      	mov	r2, r4
 800ae36:	4629      	mov	r1, r5
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f7ff ff6f 	bl	800ad1c <__ssputs_r>
 800ae3e:	3001      	adds	r0, #1
 800ae40:	f000 80a9 	beq.w	800af96 <_svfiprintf_r+0x1c6>
 800ae44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae46:	445a      	add	r2, fp
 800ae48:	9209      	str	r2, [sp, #36]	; 0x24
 800ae4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 80a1 	beq.w	800af96 <_svfiprintf_r+0x1c6>
 800ae54:	2300      	movs	r3, #0
 800ae56:	f04f 32ff 	mov.w	r2, #4294967295
 800ae5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae5e:	f10a 0a01 	add.w	sl, sl, #1
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	9307      	str	r3, [sp, #28]
 800ae66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae6c:	4654      	mov	r4, sl
 800ae6e:	2205      	movs	r2, #5
 800ae70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae74:	4850      	ldr	r0, [pc, #320]	; (800afb8 <_svfiprintf_r+0x1e8>)
 800ae76:	f7f5 f9d3 	bl	8000220 <memchr>
 800ae7a:	9a04      	ldr	r2, [sp, #16]
 800ae7c:	b9d8      	cbnz	r0, 800aeb6 <_svfiprintf_r+0xe6>
 800ae7e:	06d0      	lsls	r0, r2, #27
 800ae80:	bf44      	itt	mi
 800ae82:	2320      	movmi	r3, #32
 800ae84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae88:	0711      	lsls	r1, r2, #28
 800ae8a:	bf44      	itt	mi
 800ae8c:	232b      	movmi	r3, #43	; 0x2b
 800ae8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae92:	f89a 3000 	ldrb.w	r3, [sl]
 800ae96:	2b2a      	cmp	r3, #42	; 0x2a
 800ae98:	d015      	beq.n	800aec6 <_svfiprintf_r+0xf6>
 800ae9a:	9a07      	ldr	r2, [sp, #28]
 800ae9c:	4654      	mov	r4, sl
 800ae9e:	2000      	movs	r0, #0
 800aea0:	f04f 0c0a 	mov.w	ip, #10
 800aea4:	4621      	mov	r1, r4
 800aea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeaa:	3b30      	subs	r3, #48	; 0x30
 800aeac:	2b09      	cmp	r3, #9
 800aeae:	d94d      	bls.n	800af4c <_svfiprintf_r+0x17c>
 800aeb0:	b1b0      	cbz	r0, 800aee0 <_svfiprintf_r+0x110>
 800aeb2:	9207      	str	r2, [sp, #28]
 800aeb4:	e014      	b.n	800aee0 <_svfiprintf_r+0x110>
 800aeb6:	eba0 0308 	sub.w	r3, r0, r8
 800aeba:	fa09 f303 	lsl.w	r3, r9, r3
 800aebe:	4313      	orrs	r3, r2
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	46a2      	mov	sl, r4
 800aec4:	e7d2      	b.n	800ae6c <_svfiprintf_r+0x9c>
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	1d19      	adds	r1, r3, #4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	9103      	str	r1, [sp, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bfbb      	ittet	lt
 800aed2:	425b      	neglt	r3, r3
 800aed4:	f042 0202 	orrlt.w	r2, r2, #2
 800aed8:	9307      	strge	r3, [sp, #28]
 800aeda:	9307      	strlt	r3, [sp, #28]
 800aedc:	bfb8      	it	lt
 800aede:	9204      	strlt	r2, [sp, #16]
 800aee0:	7823      	ldrb	r3, [r4, #0]
 800aee2:	2b2e      	cmp	r3, #46	; 0x2e
 800aee4:	d10c      	bne.n	800af00 <_svfiprintf_r+0x130>
 800aee6:	7863      	ldrb	r3, [r4, #1]
 800aee8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeea:	d134      	bne.n	800af56 <_svfiprintf_r+0x186>
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	1d1a      	adds	r2, r3, #4
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	9203      	str	r2, [sp, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	bfb8      	it	lt
 800aef8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aefc:	3402      	adds	r4, #2
 800aefe:	9305      	str	r3, [sp, #20]
 800af00:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800afc8 <_svfiprintf_r+0x1f8>
 800af04:	7821      	ldrb	r1, [r4, #0]
 800af06:	2203      	movs	r2, #3
 800af08:	4650      	mov	r0, sl
 800af0a:	f7f5 f989 	bl	8000220 <memchr>
 800af0e:	b138      	cbz	r0, 800af20 <_svfiprintf_r+0x150>
 800af10:	9b04      	ldr	r3, [sp, #16]
 800af12:	eba0 000a 	sub.w	r0, r0, sl
 800af16:	2240      	movs	r2, #64	; 0x40
 800af18:	4082      	lsls	r2, r0
 800af1a:	4313      	orrs	r3, r2
 800af1c:	3401      	adds	r4, #1
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	4825      	ldr	r0, [pc, #148]	; (800afbc <_svfiprintf_r+0x1ec>)
 800af26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af2a:	2206      	movs	r2, #6
 800af2c:	f7f5 f978 	bl	8000220 <memchr>
 800af30:	2800      	cmp	r0, #0
 800af32:	d038      	beq.n	800afa6 <_svfiprintf_r+0x1d6>
 800af34:	4b22      	ldr	r3, [pc, #136]	; (800afc0 <_svfiprintf_r+0x1f0>)
 800af36:	bb1b      	cbnz	r3, 800af80 <_svfiprintf_r+0x1b0>
 800af38:	9b03      	ldr	r3, [sp, #12]
 800af3a:	3307      	adds	r3, #7
 800af3c:	f023 0307 	bic.w	r3, r3, #7
 800af40:	3308      	adds	r3, #8
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af46:	4433      	add	r3, r6
 800af48:	9309      	str	r3, [sp, #36]	; 0x24
 800af4a:	e768      	b.n	800ae1e <_svfiprintf_r+0x4e>
 800af4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af50:	460c      	mov	r4, r1
 800af52:	2001      	movs	r0, #1
 800af54:	e7a6      	b.n	800aea4 <_svfiprintf_r+0xd4>
 800af56:	2300      	movs	r3, #0
 800af58:	3401      	adds	r4, #1
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	4619      	mov	r1, r3
 800af5e:	f04f 0c0a 	mov.w	ip, #10
 800af62:	4620      	mov	r0, r4
 800af64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af68:	3a30      	subs	r2, #48	; 0x30
 800af6a:	2a09      	cmp	r2, #9
 800af6c:	d903      	bls.n	800af76 <_svfiprintf_r+0x1a6>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0c6      	beq.n	800af00 <_svfiprintf_r+0x130>
 800af72:	9105      	str	r1, [sp, #20]
 800af74:	e7c4      	b.n	800af00 <_svfiprintf_r+0x130>
 800af76:	fb0c 2101 	mla	r1, ip, r1, r2
 800af7a:	4604      	mov	r4, r0
 800af7c:	2301      	movs	r3, #1
 800af7e:	e7f0      	b.n	800af62 <_svfiprintf_r+0x192>
 800af80:	ab03      	add	r3, sp, #12
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	462a      	mov	r2, r5
 800af86:	4b0f      	ldr	r3, [pc, #60]	; (800afc4 <_svfiprintf_r+0x1f4>)
 800af88:	a904      	add	r1, sp, #16
 800af8a:	4638      	mov	r0, r7
 800af8c:	f7fd fe56 	bl	8008c3c <_printf_float>
 800af90:	1c42      	adds	r2, r0, #1
 800af92:	4606      	mov	r6, r0
 800af94:	d1d6      	bne.n	800af44 <_svfiprintf_r+0x174>
 800af96:	89ab      	ldrh	r3, [r5, #12]
 800af98:	065b      	lsls	r3, r3, #25
 800af9a:	f53f af2d 	bmi.w	800adf8 <_svfiprintf_r+0x28>
 800af9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afa0:	b01d      	add	sp, #116	; 0x74
 800afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa6:	ab03      	add	r3, sp, #12
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	462a      	mov	r2, r5
 800afac:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <_svfiprintf_r+0x1f4>)
 800afae:	a904      	add	r1, sp, #16
 800afb0:	4638      	mov	r0, r7
 800afb2:	f7fe f8e7 	bl	8009184 <_printf_i>
 800afb6:	e7eb      	b.n	800af90 <_svfiprintf_r+0x1c0>
 800afb8:	0800bb1c 	.word	0x0800bb1c
 800afbc:	0800bb26 	.word	0x0800bb26
 800afc0:	08008c3d 	.word	0x08008c3d
 800afc4:	0800ad1d 	.word	0x0800ad1d
 800afc8:	0800bb22 	.word	0x0800bb22

0800afcc <__sfputc_r>:
 800afcc:	6893      	ldr	r3, [r2, #8]
 800afce:	3b01      	subs	r3, #1
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	b410      	push	{r4}
 800afd4:	6093      	str	r3, [r2, #8]
 800afd6:	da08      	bge.n	800afea <__sfputc_r+0x1e>
 800afd8:	6994      	ldr	r4, [r2, #24]
 800afda:	42a3      	cmp	r3, r4
 800afdc:	db01      	blt.n	800afe2 <__sfputc_r+0x16>
 800afde:	290a      	cmp	r1, #10
 800afe0:	d103      	bne.n	800afea <__sfputc_r+0x1e>
 800afe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afe6:	f000 b9e3 	b.w	800b3b0 <__swbuf_r>
 800afea:	6813      	ldr	r3, [r2, #0]
 800afec:	1c58      	adds	r0, r3, #1
 800afee:	6010      	str	r0, [r2, #0]
 800aff0:	7019      	strb	r1, [r3, #0]
 800aff2:	4608      	mov	r0, r1
 800aff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <__sfputs_r>:
 800affa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affc:	4606      	mov	r6, r0
 800affe:	460f      	mov	r7, r1
 800b000:	4614      	mov	r4, r2
 800b002:	18d5      	adds	r5, r2, r3
 800b004:	42ac      	cmp	r4, r5
 800b006:	d101      	bne.n	800b00c <__sfputs_r+0x12>
 800b008:	2000      	movs	r0, #0
 800b00a:	e007      	b.n	800b01c <__sfputs_r+0x22>
 800b00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b010:	463a      	mov	r2, r7
 800b012:	4630      	mov	r0, r6
 800b014:	f7ff ffda 	bl	800afcc <__sfputc_r>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	d1f3      	bne.n	800b004 <__sfputs_r+0xa>
 800b01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b020 <_vfiprintf_r>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	460d      	mov	r5, r1
 800b026:	b09d      	sub	sp, #116	; 0x74
 800b028:	4614      	mov	r4, r2
 800b02a:	4698      	mov	r8, r3
 800b02c:	4606      	mov	r6, r0
 800b02e:	b118      	cbz	r0, 800b038 <_vfiprintf_r+0x18>
 800b030:	6a03      	ldr	r3, [r0, #32]
 800b032:	b90b      	cbnz	r3, 800b038 <_vfiprintf_r+0x18>
 800b034:	f7fe fa54 	bl	80094e0 <__sinit>
 800b038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b03a:	07d9      	lsls	r1, r3, #31
 800b03c:	d405      	bmi.n	800b04a <_vfiprintf_r+0x2a>
 800b03e:	89ab      	ldrh	r3, [r5, #12]
 800b040:	059a      	lsls	r2, r3, #22
 800b042:	d402      	bmi.n	800b04a <_vfiprintf_r+0x2a>
 800b044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b046:	f7fe fb62 	bl	800970e <__retarget_lock_acquire_recursive>
 800b04a:	89ab      	ldrh	r3, [r5, #12]
 800b04c:	071b      	lsls	r3, r3, #28
 800b04e:	d501      	bpl.n	800b054 <_vfiprintf_r+0x34>
 800b050:	692b      	ldr	r3, [r5, #16]
 800b052:	b99b      	cbnz	r3, 800b07c <_vfiprintf_r+0x5c>
 800b054:	4629      	mov	r1, r5
 800b056:	4630      	mov	r0, r6
 800b058:	f000 f9e8 	bl	800b42c <__swsetup_r>
 800b05c:	b170      	cbz	r0, 800b07c <_vfiprintf_r+0x5c>
 800b05e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b060:	07dc      	lsls	r4, r3, #31
 800b062:	d504      	bpl.n	800b06e <_vfiprintf_r+0x4e>
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
 800b068:	b01d      	add	sp, #116	; 0x74
 800b06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06e:	89ab      	ldrh	r3, [r5, #12]
 800b070:	0598      	lsls	r0, r3, #22
 800b072:	d4f7      	bmi.n	800b064 <_vfiprintf_r+0x44>
 800b074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b076:	f7fe fb4b 	bl	8009710 <__retarget_lock_release_recursive>
 800b07a:	e7f3      	b.n	800b064 <_vfiprintf_r+0x44>
 800b07c:	2300      	movs	r3, #0
 800b07e:	9309      	str	r3, [sp, #36]	; 0x24
 800b080:	2320      	movs	r3, #32
 800b082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b086:	f8cd 800c 	str.w	r8, [sp, #12]
 800b08a:	2330      	movs	r3, #48	; 0x30
 800b08c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b240 <_vfiprintf_r+0x220>
 800b090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b094:	f04f 0901 	mov.w	r9, #1
 800b098:	4623      	mov	r3, r4
 800b09a:	469a      	mov	sl, r3
 800b09c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a0:	b10a      	cbz	r2, 800b0a6 <_vfiprintf_r+0x86>
 800b0a2:	2a25      	cmp	r2, #37	; 0x25
 800b0a4:	d1f9      	bne.n	800b09a <_vfiprintf_r+0x7a>
 800b0a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b0aa:	d00b      	beq.n	800b0c4 <_vfiprintf_r+0xa4>
 800b0ac:	465b      	mov	r3, fp
 800b0ae:	4622      	mov	r2, r4
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f7ff ffa1 	bl	800affa <__sfputs_r>
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	f000 80a9 	beq.w	800b210 <_vfiprintf_r+0x1f0>
 800b0be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c0:	445a      	add	r2, fp
 800b0c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b0c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 80a1 	beq.w	800b210 <_vfiprintf_r+0x1f0>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0d8:	f10a 0a01 	add.w	sl, sl, #1
 800b0dc:	9304      	str	r3, [sp, #16]
 800b0de:	9307      	str	r3, [sp, #28]
 800b0e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b0e6:	4654      	mov	r4, sl
 800b0e8:	2205      	movs	r2, #5
 800b0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ee:	4854      	ldr	r0, [pc, #336]	; (800b240 <_vfiprintf_r+0x220>)
 800b0f0:	f7f5 f896 	bl	8000220 <memchr>
 800b0f4:	9a04      	ldr	r2, [sp, #16]
 800b0f6:	b9d8      	cbnz	r0, 800b130 <_vfiprintf_r+0x110>
 800b0f8:	06d1      	lsls	r1, r2, #27
 800b0fa:	bf44      	itt	mi
 800b0fc:	2320      	movmi	r3, #32
 800b0fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b102:	0713      	lsls	r3, r2, #28
 800b104:	bf44      	itt	mi
 800b106:	232b      	movmi	r3, #43	; 0x2b
 800b108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b10c:	f89a 3000 	ldrb.w	r3, [sl]
 800b110:	2b2a      	cmp	r3, #42	; 0x2a
 800b112:	d015      	beq.n	800b140 <_vfiprintf_r+0x120>
 800b114:	9a07      	ldr	r2, [sp, #28]
 800b116:	4654      	mov	r4, sl
 800b118:	2000      	movs	r0, #0
 800b11a:	f04f 0c0a 	mov.w	ip, #10
 800b11e:	4621      	mov	r1, r4
 800b120:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b124:	3b30      	subs	r3, #48	; 0x30
 800b126:	2b09      	cmp	r3, #9
 800b128:	d94d      	bls.n	800b1c6 <_vfiprintf_r+0x1a6>
 800b12a:	b1b0      	cbz	r0, 800b15a <_vfiprintf_r+0x13a>
 800b12c:	9207      	str	r2, [sp, #28]
 800b12e:	e014      	b.n	800b15a <_vfiprintf_r+0x13a>
 800b130:	eba0 0308 	sub.w	r3, r0, r8
 800b134:	fa09 f303 	lsl.w	r3, r9, r3
 800b138:	4313      	orrs	r3, r2
 800b13a:	9304      	str	r3, [sp, #16]
 800b13c:	46a2      	mov	sl, r4
 800b13e:	e7d2      	b.n	800b0e6 <_vfiprintf_r+0xc6>
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	1d19      	adds	r1, r3, #4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	9103      	str	r1, [sp, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	bfbb      	ittet	lt
 800b14c:	425b      	neglt	r3, r3
 800b14e:	f042 0202 	orrlt.w	r2, r2, #2
 800b152:	9307      	strge	r3, [sp, #28]
 800b154:	9307      	strlt	r3, [sp, #28]
 800b156:	bfb8      	it	lt
 800b158:	9204      	strlt	r2, [sp, #16]
 800b15a:	7823      	ldrb	r3, [r4, #0]
 800b15c:	2b2e      	cmp	r3, #46	; 0x2e
 800b15e:	d10c      	bne.n	800b17a <_vfiprintf_r+0x15a>
 800b160:	7863      	ldrb	r3, [r4, #1]
 800b162:	2b2a      	cmp	r3, #42	; 0x2a
 800b164:	d134      	bne.n	800b1d0 <_vfiprintf_r+0x1b0>
 800b166:	9b03      	ldr	r3, [sp, #12]
 800b168:	1d1a      	adds	r2, r3, #4
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	9203      	str	r2, [sp, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	bfb8      	it	lt
 800b172:	f04f 33ff 	movlt.w	r3, #4294967295
 800b176:	3402      	adds	r4, #2
 800b178:	9305      	str	r3, [sp, #20]
 800b17a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b250 <_vfiprintf_r+0x230>
 800b17e:	7821      	ldrb	r1, [r4, #0]
 800b180:	2203      	movs	r2, #3
 800b182:	4650      	mov	r0, sl
 800b184:	f7f5 f84c 	bl	8000220 <memchr>
 800b188:	b138      	cbz	r0, 800b19a <_vfiprintf_r+0x17a>
 800b18a:	9b04      	ldr	r3, [sp, #16]
 800b18c:	eba0 000a 	sub.w	r0, r0, sl
 800b190:	2240      	movs	r2, #64	; 0x40
 800b192:	4082      	lsls	r2, r0
 800b194:	4313      	orrs	r3, r2
 800b196:	3401      	adds	r4, #1
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b19e:	4829      	ldr	r0, [pc, #164]	; (800b244 <_vfiprintf_r+0x224>)
 800b1a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1a4:	2206      	movs	r2, #6
 800b1a6:	f7f5 f83b 	bl	8000220 <memchr>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d03f      	beq.n	800b22e <_vfiprintf_r+0x20e>
 800b1ae:	4b26      	ldr	r3, [pc, #152]	; (800b248 <_vfiprintf_r+0x228>)
 800b1b0:	bb1b      	cbnz	r3, 800b1fa <_vfiprintf_r+0x1da>
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	3307      	adds	r3, #7
 800b1b6:	f023 0307 	bic.w	r3, r3, #7
 800b1ba:	3308      	adds	r3, #8
 800b1bc:	9303      	str	r3, [sp, #12]
 800b1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c0:	443b      	add	r3, r7
 800b1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c4:	e768      	b.n	800b098 <_vfiprintf_r+0x78>
 800b1c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	2001      	movs	r0, #1
 800b1ce:	e7a6      	b.n	800b11e <_vfiprintf_r+0xfe>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	3401      	adds	r4, #1
 800b1d4:	9305      	str	r3, [sp, #20]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	f04f 0c0a 	mov.w	ip, #10
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1e2:	3a30      	subs	r2, #48	; 0x30
 800b1e4:	2a09      	cmp	r2, #9
 800b1e6:	d903      	bls.n	800b1f0 <_vfiprintf_r+0x1d0>
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d0c6      	beq.n	800b17a <_vfiprintf_r+0x15a>
 800b1ec:	9105      	str	r1, [sp, #20]
 800b1ee:	e7c4      	b.n	800b17a <_vfiprintf_r+0x15a>
 800b1f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e7f0      	b.n	800b1dc <_vfiprintf_r+0x1bc>
 800b1fa:	ab03      	add	r3, sp, #12
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	462a      	mov	r2, r5
 800b200:	4b12      	ldr	r3, [pc, #72]	; (800b24c <_vfiprintf_r+0x22c>)
 800b202:	a904      	add	r1, sp, #16
 800b204:	4630      	mov	r0, r6
 800b206:	f7fd fd19 	bl	8008c3c <_printf_float>
 800b20a:	4607      	mov	r7, r0
 800b20c:	1c78      	adds	r0, r7, #1
 800b20e:	d1d6      	bne.n	800b1be <_vfiprintf_r+0x19e>
 800b210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b212:	07d9      	lsls	r1, r3, #31
 800b214:	d405      	bmi.n	800b222 <_vfiprintf_r+0x202>
 800b216:	89ab      	ldrh	r3, [r5, #12]
 800b218:	059a      	lsls	r2, r3, #22
 800b21a:	d402      	bmi.n	800b222 <_vfiprintf_r+0x202>
 800b21c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b21e:	f7fe fa77 	bl	8009710 <__retarget_lock_release_recursive>
 800b222:	89ab      	ldrh	r3, [r5, #12]
 800b224:	065b      	lsls	r3, r3, #25
 800b226:	f53f af1d 	bmi.w	800b064 <_vfiprintf_r+0x44>
 800b22a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b22c:	e71c      	b.n	800b068 <_vfiprintf_r+0x48>
 800b22e:	ab03      	add	r3, sp, #12
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	462a      	mov	r2, r5
 800b234:	4b05      	ldr	r3, [pc, #20]	; (800b24c <_vfiprintf_r+0x22c>)
 800b236:	a904      	add	r1, sp, #16
 800b238:	4630      	mov	r0, r6
 800b23a:	f7fd ffa3 	bl	8009184 <_printf_i>
 800b23e:	e7e4      	b.n	800b20a <_vfiprintf_r+0x1ea>
 800b240:	0800bb1c 	.word	0x0800bb1c
 800b244:	0800bb26 	.word	0x0800bb26
 800b248:	08008c3d 	.word	0x08008c3d
 800b24c:	0800affb 	.word	0x0800affb
 800b250:	0800bb22 	.word	0x0800bb22

0800b254 <__sflush_r>:
 800b254:	898a      	ldrh	r2, [r1, #12]
 800b256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b25a:	4605      	mov	r5, r0
 800b25c:	0710      	lsls	r0, r2, #28
 800b25e:	460c      	mov	r4, r1
 800b260:	d458      	bmi.n	800b314 <__sflush_r+0xc0>
 800b262:	684b      	ldr	r3, [r1, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	dc05      	bgt.n	800b274 <__sflush_r+0x20>
 800b268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	dc02      	bgt.n	800b274 <__sflush_r+0x20>
 800b26e:	2000      	movs	r0, #0
 800b270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b276:	2e00      	cmp	r6, #0
 800b278:	d0f9      	beq.n	800b26e <__sflush_r+0x1a>
 800b27a:	2300      	movs	r3, #0
 800b27c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b280:	682f      	ldr	r7, [r5, #0]
 800b282:	6a21      	ldr	r1, [r4, #32]
 800b284:	602b      	str	r3, [r5, #0]
 800b286:	d032      	beq.n	800b2ee <__sflush_r+0x9a>
 800b288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	075a      	lsls	r2, r3, #29
 800b28e:	d505      	bpl.n	800b29c <__sflush_r+0x48>
 800b290:	6863      	ldr	r3, [r4, #4]
 800b292:	1ac0      	subs	r0, r0, r3
 800b294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b296:	b10b      	cbz	r3, 800b29c <__sflush_r+0x48>
 800b298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b29a:	1ac0      	subs	r0, r0, r3
 800b29c:	2300      	movs	r3, #0
 800b29e:	4602      	mov	r2, r0
 800b2a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2a2:	6a21      	ldr	r1, [r4, #32]
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b0      	blx	r6
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	d106      	bne.n	800b2bc <__sflush_r+0x68>
 800b2ae:	6829      	ldr	r1, [r5, #0]
 800b2b0:	291d      	cmp	r1, #29
 800b2b2:	d82b      	bhi.n	800b30c <__sflush_r+0xb8>
 800b2b4:	4a29      	ldr	r2, [pc, #164]	; (800b35c <__sflush_r+0x108>)
 800b2b6:	410a      	asrs	r2, r1
 800b2b8:	07d6      	lsls	r6, r2, #31
 800b2ba:	d427      	bmi.n	800b30c <__sflush_r+0xb8>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	6062      	str	r2, [r4, #4]
 800b2c0:	04d9      	lsls	r1, r3, #19
 800b2c2:	6922      	ldr	r2, [r4, #16]
 800b2c4:	6022      	str	r2, [r4, #0]
 800b2c6:	d504      	bpl.n	800b2d2 <__sflush_r+0x7e>
 800b2c8:	1c42      	adds	r2, r0, #1
 800b2ca:	d101      	bne.n	800b2d0 <__sflush_r+0x7c>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b903      	cbnz	r3, 800b2d2 <__sflush_r+0x7e>
 800b2d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b2d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2d4:	602f      	str	r7, [r5, #0]
 800b2d6:	2900      	cmp	r1, #0
 800b2d8:	d0c9      	beq.n	800b26e <__sflush_r+0x1a>
 800b2da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2de:	4299      	cmp	r1, r3
 800b2e0:	d002      	beq.n	800b2e8 <__sflush_r+0x94>
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f7ff f89e 	bl	800a424 <_free_r>
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b2ec:	e7c0      	b.n	800b270 <__sflush_r+0x1c>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b0      	blx	r6
 800b2f4:	1c41      	adds	r1, r0, #1
 800b2f6:	d1c8      	bne.n	800b28a <__sflush_r+0x36>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d0c5      	beq.n	800b28a <__sflush_r+0x36>
 800b2fe:	2b1d      	cmp	r3, #29
 800b300:	d001      	beq.n	800b306 <__sflush_r+0xb2>
 800b302:	2b16      	cmp	r3, #22
 800b304:	d101      	bne.n	800b30a <__sflush_r+0xb6>
 800b306:	602f      	str	r7, [r5, #0]
 800b308:	e7b1      	b.n	800b26e <__sflush_r+0x1a>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b310:	81a3      	strh	r3, [r4, #12]
 800b312:	e7ad      	b.n	800b270 <__sflush_r+0x1c>
 800b314:	690f      	ldr	r7, [r1, #16]
 800b316:	2f00      	cmp	r7, #0
 800b318:	d0a9      	beq.n	800b26e <__sflush_r+0x1a>
 800b31a:	0793      	lsls	r3, r2, #30
 800b31c:	680e      	ldr	r6, [r1, #0]
 800b31e:	bf08      	it	eq
 800b320:	694b      	ldreq	r3, [r1, #20]
 800b322:	600f      	str	r7, [r1, #0]
 800b324:	bf18      	it	ne
 800b326:	2300      	movne	r3, #0
 800b328:	eba6 0807 	sub.w	r8, r6, r7
 800b32c:	608b      	str	r3, [r1, #8]
 800b32e:	f1b8 0f00 	cmp.w	r8, #0
 800b332:	dd9c      	ble.n	800b26e <__sflush_r+0x1a>
 800b334:	6a21      	ldr	r1, [r4, #32]
 800b336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b338:	4643      	mov	r3, r8
 800b33a:	463a      	mov	r2, r7
 800b33c:	4628      	mov	r0, r5
 800b33e:	47b0      	blx	r6
 800b340:	2800      	cmp	r0, #0
 800b342:	dc06      	bgt.n	800b352 <__sflush_r+0xfe>
 800b344:	89a3      	ldrh	r3, [r4, #12]
 800b346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b34a:	81a3      	strh	r3, [r4, #12]
 800b34c:	f04f 30ff 	mov.w	r0, #4294967295
 800b350:	e78e      	b.n	800b270 <__sflush_r+0x1c>
 800b352:	4407      	add	r7, r0
 800b354:	eba8 0800 	sub.w	r8, r8, r0
 800b358:	e7e9      	b.n	800b32e <__sflush_r+0xda>
 800b35a:	bf00      	nop
 800b35c:	dfbffffe 	.word	0xdfbffffe

0800b360 <_fflush_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	690b      	ldr	r3, [r1, #16]
 800b364:	4605      	mov	r5, r0
 800b366:	460c      	mov	r4, r1
 800b368:	b913      	cbnz	r3, 800b370 <_fflush_r+0x10>
 800b36a:	2500      	movs	r5, #0
 800b36c:	4628      	mov	r0, r5
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	b118      	cbz	r0, 800b37a <_fflush_r+0x1a>
 800b372:	6a03      	ldr	r3, [r0, #32]
 800b374:	b90b      	cbnz	r3, 800b37a <_fflush_r+0x1a>
 800b376:	f7fe f8b3 	bl	80094e0 <__sinit>
 800b37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d0f3      	beq.n	800b36a <_fflush_r+0xa>
 800b382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b384:	07d0      	lsls	r0, r2, #31
 800b386:	d404      	bmi.n	800b392 <_fflush_r+0x32>
 800b388:	0599      	lsls	r1, r3, #22
 800b38a:	d402      	bmi.n	800b392 <_fflush_r+0x32>
 800b38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b38e:	f7fe f9be 	bl	800970e <__retarget_lock_acquire_recursive>
 800b392:	4628      	mov	r0, r5
 800b394:	4621      	mov	r1, r4
 800b396:	f7ff ff5d 	bl	800b254 <__sflush_r>
 800b39a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b39c:	07da      	lsls	r2, r3, #31
 800b39e:	4605      	mov	r5, r0
 800b3a0:	d4e4      	bmi.n	800b36c <_fflush_r+0xc>
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	059b      	lsls	r3, r3, #22
 800b3a6:	d4e1      	bmi.n	800b36c <_fflush_r+0xc>
 800b3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3aa:	f7fe f9b1 	bl	8009710 <__retarget_lock_release_recursive>
 800b3ae:	e7dd      	b.n	800b36c <_fflush_r+0xc>

0800b3b0 <__swbuf_r>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	460e      	mov	r6, r1
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	b118      	cbz	r0, 800b3c2 <__swbuf_r+0x12>
 800b3ba:	6a03      	ldr	r3, [r0, #32]
 800b3bc:	b90b      	cbnz	r3, 800b3c2 <__swbuf_r+0x12>
 800b3be:	f7fe f88f 	bl	80094e0 <__sinit>
 800b3c2:	69a3      	ldr	r3, [r4, #24]
 800b3c4:	60a3      	str	r3, [r4, #8]
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	071a      	lsls	r2, r3, #28
 800b3ca:	d525      	bpl.n	800b418 <__swbuf_r+0x68>
 800b3cc:	6923      	ldr	r3, [r4, #16]
 800b3ce:	b31b      	cbz	r3, 800b418 <__swbuf_r+0x68>
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	6922      	ldr	r2, [r4, #16]
 800b3d4:	1a98      	subs	r0, r3, r2
 800b3d6:	6963      	ldr	r3, [r4, #20]
 800b3d8:	b2f6      	uxtb	r6, r6
 800b3da:	4283      	cmp	r3, r0
 800b3dc:	4637      	mov	r7, r6
 800b3de:	dc04      	bgt.n	800b3ea <__swbuf_r+0x3a>
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f7ff ffbc 	bl	800b360 <_fflush_r>
 800b3e8:	b9e0      	cbnz	r0, 800b424 <__swbuf_r+0x74>
 800b3ea:	68a3      	ldr	r3, [r4, #8]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	60a3      	str	r3, [r4, #8]
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	6022      	str	r2, [r4, #0]
 800b3f6:	701e      	strb	r6, [r3, #0]
 800b3f8:	6962      	ldr	r2, [r4, #20]
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d004      	beq.n	800b40a <__swbuf_r+0x5a>
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	07db      	lsls	r3, r3, #31
 800b404:	d506      	bpl.n	800b414 <__swbuf_r+0x64>
 800b406:	2e0a      	cmp	r6, #10
 800b408:	d104      	bne.n	800b414 <__swbuf_r+0x64>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4628      	mov	r0, r5
 800b40e:	f7ff ffa7 	bl	800b360 <_fflush_r>
 800b412:	b938      	cbnz	r0, 800b424 <__swbuf_r+0x74>
 800b414:	4638      	mov	r0, r7
 800b416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b418:	4621      	mov	r1, r4
 800b41a:	4628      	mov	r0, r5
 800b41c:	f000 f806 	bl	800b42c <__swsetup_r>
 800b420:	2800      	cmp	r0, #0
 800b422:	d0d5      	beq.n	800b3d0 <__swbuf_r+0x20>
 800b424:	f04f 37ff 	mov.w	r7, #4294967295
 800b428:	e7f4      	b.n	800b414 <__swbuf_r+0x64>
	...

0800b42c <__swsetup_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4b2a      	ldr	r3, [pc, #168]	; (800b4d8 <__swsetup_r+0xac>)
 800b430:	4605      	mov	r5, r0
 800b432:	6818      	ldr	r0, [r3, #0]
 800b434:	460c      	mov	r4, r1
 800b436:	b118      	cbz	r0, 800b440 <__swsetup_r+0x14>
 800b438:	6a03      	ldr	r3, [r0, #32]
 800b43a:	b90b      	cbnz	r3, 800b440 <__swsetup_r+0x14>
 800b43c:	f7fe f850 	bl	80094e0 <__sinit>
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b446:	0718      	lsls	r0, r3, #28
 800b448:	d422      	bmi.n	800b490 <__swsetup_r+0x64>
 800b44a:	06d9      	lsls	r1, r3, #27
 800b44c:	d407      	bmi.n	800b45e <__swsetup_r+0x32>
 800b44e:	2309      	movs	r3, #9
 800b450:	602b      	str	r3, [r5, #0]
 800b452:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b456:	81a3      	strh	r3, [r4, #12]
 800b458:	f04f 30ff 	mov.w	r0, #4294967295
 800b45c:	e034      	b.n	800b4c8 <__swsetup_r+0x9c>
 800b45e:	0758      	lsls	r0, r3, #29
 800b460:	d512      	bpl.n	800b488 <__swsetup_r+0x5c>
 800b462:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b464:	b141      	cbz	r1, 800b478 <__swsetup_r+0x4c>
 800b466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b46a:	4299      	cmp	r1, r3
 800b46c:	d002      	beq.n	800b474 <__swsetup_r+0x48>
 800b46e:	4628      	mov	r0, r5
 800b470:	f7fe ffd8 	bl	800a424 <_free_r>
 800b474:	2300      	movs	r3, #0
 800b476:	6363      	str	r3, [r4, #52]	; 0x34
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b47e:	81a3      	strh	r3, [r4, #12]
 800b480:	2300      	movs	r3, #0
 800b482:	6063      	str	r3, [r4, #4]
 800b484:	6923      	ldr	r3, [r4, #16]
 800b486:	6023      	str	r3, [r4, #0]
 800b488:	89a3      	ldrh	r3, [r4, #12]
 800b48a:	f043 0308 	orr.w	r3, r3, #8
 800b48e:	81a3      	strh	r3, [r4, #12]
 800b490:	6923      	ldr	r3, [r4, #16]
 800b492:	b94b      	cbnz	r3, 800b4a8 <__swsetup_r+0x7c>
 800b494:	89a3      	ldrh	r3, [r4, #12]
 800b496:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b49a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b49e:	d003      	beq.n	800b4a8 <__swsetup_r+0x7c>
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f000 f8fe 	bl	800b6a4 <__smakebuf_r>
 800b4a8:	89a0      	ldrh	r0, [r4, #12]
 800b4aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4ae:	f010 0301 	ands.w	r3, r0, #1
 800b4b2:	d00a      	beq.n	800b4ca <__swsetup_r+0x9e>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	60a3      	str	r3, [r4, #8]
 800b4b8:	6963      	ldr	r3, [r4, #20]
 800b4ba:	425b      	negs	r3, r3
 800b4bc:	61a3      	str	r3, [r4, #24]
 800b4be:	6923      	ldr	r3, [r4, #16]
 800b4c0:	b943      	cbnz	r3, 800b4d4 <__swsetup_r+0xa8>
 800b4c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4c6:	d1c4      	bne.n	800b452 <__swsetup_r+0x26>
 800b4c8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ca:	0781      	lsls	r1, r0, #30
 800b4cc:	bf58      	it	pl
 800b4ce:	6963      	ldrpl	r3, [r4, #20]
 800b4d0:	60a3      	str	r3, [r4, #8]
 800b4d2:	e7f4      	b.n	800b4be <__swsetup_r+0x92>
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e7f7      	b.n	800b4c8 <__swsetup_r+0x9c>
 800b4d8:	2000006c 	.word	0x2000006c

0800b4dc <memmove>:
 800b4dc:	4288      	cmp	r0, r1
 800b4de:	b510      	push	{r4, lr}
 800b4e0:	eb01 0402 	add.w	r4, r1, r2
 800b4e4:	d902      	bls.n	800b4ec <memmove+0x10>
 800b4e6:	4284      	cmp	r4, r0
 800b4e8:	4623      	mov	r3, r4
 800b4ea:	d807      	bhi.n	800b4fc <memmove+0x20>
 800b4ec:	1e43      	subs	r3, r0, #1
 800b4ee:	42a1      	cmp	r1, r4
 800b4f0:	d008      	beq.n	800b504 <memmove+0x28>
 800b4f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4fa:	e7f8      	b.n	800b4ee <memmove+0x12>
 800b4fc:	4402      	add	r2, r0
 800b4fe:	4601      	mov	r1, r0
 800b500:	428a      	cmp	r2, r1
 800b502:	d100      	bne.n	800b506 <memmove+0x2a>
 800b504:	bd10      	pop	{r4, pc}
 800b506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b50a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b50e:	e7f7      	b.n	800b500 <memmove+0x24>

0800b510 <_sbrk_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d06      	ldr	r5, [pc, #24]	; (800b52c <_sbrk_r+0x1c>)
 800b514:	2300      	movs	r3, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	602b      	str	r3, [r5, #0]
 800b51c:	f7f6 ffa2 	bl	8002464 <_sbrk>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_sbrk_r+0x1a>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_sbrk_r+0x1a>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	200005e4 	.word	0x200005e4

0800b530 <__assert_func>:
 800b530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b532:	4614      	mov	r4, r2
 800b534:	461a      	mov	r2, r3
 800b536:	4b09      	ldr	r3, [pc, #36]	; (800b55c <__assert_func+0x2c>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4605      	mov	r5, r0
 800b53c:	68d8      	ldr	r0, [r3, #12]
 800b53e:	b14c      	cbz	r4, 800b554 <__assert_func+0x24>
 800b540:	4b07      	ldr	r3, [pc, #28]	; (800b560 <__assert_func+0x30>)
 800b542:	9100      	str	r1, [sp, #0]
 800b544:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b548:	4906      	ldr	r1, [pc, #24]	; (800b564 <__assert_func+0x34>)
 800b54a:	462b      	mov	r3, r5
 800b54c:	f000 f872 	bl	800b634 <fiprintf>
 800b550:	f000 f906 	bl	800b760 <abort>
 800b554:	4b04      	ldr	r3, [pc, #16]	; (800b568 <__assert_func+0x38>)
 800b556:	461c      	mov	r4, r3
 800b558:	e7f3      	b.n	800b542 <__assert_func+0x12>
 800b55a:	bf00      	nop
 800b55c:	2000006c 	.word	0x2000006c
 800b560:	0800bb37 	.word	0x0800bb37
 800b564:	0800bb44 	.word	0x0800bb44
 800b568:	0800bb72 	.word	0x0800bb72

0800b56c <_calloc_r>:
 800b56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b56e:	fba1 2402 	umull	r2, r4, r1, r2
 800b572:	b94c      	cbnz	r4, 800b588 <_calloc_r+0x1c>
 800b574:	4611      	mov	r1, r2
 800b576:	9201      	str	r2, [sp, #4]
 800b578:	f7fe ffc8 	bl	800a50c <_malloc_r>
 800b57c:	9a01      	ldr	r2, [sp, #4]
 800b57e:	4605      	mov	r5, r0
 800b580:	b930      	cbnz	r0, 800b590 <_calloc_r+0x24>
 800b582:	4628      	mov	r0, r5
 800b584:	b003      	add	sp, #12
 800b586:	bd30      	pop	{r4, r5, pc}
 800b588:	220c      	movs	r2, #12
 800b58a:	6002      	str	r2, [r0, #0]
 800b58c:	2500      	movs	r5, #0
 800b58e:	e7f8      	b.n	800b582 <_calloc_r+0x16>
 800b590:	4621      	mov	r1, r4
 800b592:	f7fe f83e 	bl	8009612 <memset>
 800b596:	e7f4      	b.n	800b582 <_calloc_r+0x16>

0800b598 <__ascii_mbtowc>:
 800b598:	b082      	sub	sp, #8
 800b59a:	b901      	cbnz	r1, 800b59e <__ascii_mbtowc+0x6>
 800b59c:	a901      	add	r1, sp, #4
 800b59e:	b142      	cbz	r2, 800b5b2 <__ascii_mbtowc+0x1a>
 800b5a0:	b14b      	cbz	r3, 800b5b6 <__ascii_mbtowc+0x1e>
 800b5a2:	7813      	ldrb	r3, [r2, #0]
 800b5a4:	600b      	str	r3, [r1, #0]
 800b5a6:	7812      	ldrb	r2, [r2, #0]
 800b5a8:	1e10      	subs	r0, r2, #0
 800b5aa:	bf18      	it	ne
 800b5ac:	2001      	movne	r0, #1
 800b5ae:	b002      	add	sp, #8
 800b5b0:	4770      	bx	lr
 800b5b2:	4610      	mov	r0, r2
 800b5b4:	e7fb      	b.n	800b5ae <__ascii_mbtowc+0x16>
 800b5b6:	f06f 0001 	mvn.w	r0, #1
 800b5ba:	e7f8      	b.n	800b5ae <__ascii_mbtowc+0x16>

0800b5bc <_realloc_r>:
 800b5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c0:	4680      	mov	r8, r0
 800b5c2:	4614      	mov	r4, r2
 800b5c4:	460e      	mov	r6, r1
 800b5c6:	b921      	cbnz	r1, 800b5d2 <_realloc_r+0x16>
 800b5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5cc:	4611      	mov	r1, r2
 800b5ce:	f7fe bf9d 	b.w	800a50c <_malloc_r>
 800b5d2:	b92a      	cbnz	r2, 800b5e0 <_realloc_r+0x24>
 800b5d4:	f7fe ff26 	bl	800a424 <_free_r>
 800b5d8:	4625      	mov	r5, r4
 800b5da:	4628      	mov	r0, r5
 800b5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e0:	f000 f8c5 	bl	800b76e <_malloc_usable_size_r>
 800b5e4:	4284      	cmp	r4, r0
 800b5e6:	4607      	mov	r7, r0
 800b5e8:	d802      	bhi.n	800b5f0 <_realloc_r+0x34>
 800b5ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5ee:	d812      	bhi.n	800b616 <_realloc_r+0x5a>
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	f7fe ff8a 	bl	800a50c <_malloc_r>
 800b5f8:	4605      	mov	r5, r0
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d0ed      	beq.n	800b5da <_realloc_r+0x1e>
 800b5fe:	42bc      	cmp	r4, r7
 800b600:	4622      	mov	r2, r4
 800b602:	4631      	mov	r1, r6
 800b604:	bf28      	it	cs
 800b606:	463a      	movcs	r2, r7
 800b608:	f7fe f883 	bl	8009712 <memcpy>
 800b60c:	4631      	mov	r1, r6
 800b60e:	4640      	mov	r0, r8
 800b610:	f7fe ff08 	bl	800a424 <_free_r>
 800b614:	e7e1      	b.n	800b5da <_realloc_r+0x1e>
 800b616:	4635      	mov	r5, r6
 800b618:	e7df      	b.n	800b5da <_realloc_r+0x1e>

0800b61a <__ascii_wctomb>:
 800b61a:	b149      	cbz	r1, 800b630 <__ascii_wctomb+0x16>
 800b61c:	2aff      	cmp	r2, #255	; 0xff
 800b61e:	bf85      	ittet	hi
 800b620:	238a      	movhi	r3, #138	; 0x8a
 800b622:	6003      	strhi	r3, [r0, #0]
 800b624:	700a      	strbls	r2, [r1, #0]
 800b626:	f04f 30ff 	movhi.w	r0, #4294967295
 800b62a:	bf98      	it	ls
 800b62c:	2001      	movls	r0, #1
 800b62e:	4770      	bx	lr
 800b630:	4608      	mov	r0, r1
 800b632:	4770      	bx	lr

0800b634 <fiprintf>:
 800b634:	b40e      	push	{r1, r2, r3}
 800b636:	b503      	push	{r0, r1, lr}
 800b638:	4601      	mov	r1, r0
 800b63a:	ab03      	add	r3, sp, #12
 800b63c:	4805      	ldr	r0, [pc, #20]	; (800b654 <fiprintf+0x20>)
 800b63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b642:	6800      	ldr	r0, [r0, #0]
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	f7ff fceb 	bl	800b020 <_vfiprintf_r>
 800b64a:	b002      	add	sp, #8
 800b64c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b650:	b003      	add	sp, #12
 800b652:	4770      	bx	lr
 800b654:	2000006c 	.word	0x2000006c

0800b658 <__swhatbuf_r>:
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	460c      	mov	r4, r1
 800b65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b660:	2900      	cmp	r1, #0
 800b662:	b096      	sub	sp, #88	; 0x58
 800b664:	4615      	mov	r5, r2
 800b666:	461e      	mov	r6, r3
 800b668:	da0d      	bge.n	800b686 <__swhatbuf_r+0x2e>
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b670:	f04f 0100 	mov.w	r1, #0
 800b674:	bf0c      	ite	eq
 800b676:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b67a:	2340      	movne	r3, #64	; 0x40
 800b67c:	2000      	movs	r0, #0
 800b67e:	6031      	str	r1, [r6, #0]
 800b680:	602b      	str	r3, [r5, #0]
 800b682:	b016      	add	sp, #88	; 0x58
 800b684:	bd70      	pop	{r4, r5, r6, pc}
 800b686:	466a      	mov	r2, sp
 800b688:	f000 f848 	bl	800b71c <_fstat_r>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	dbec      	blt.n	800b66a <__swhatbuf_r+0x12>
 800b690:	9901      	ldr	r1, [sp, #4]
 800b692:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b696:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b69a:	4259      	negs	r1, r3
 800b69c:	4159      	adcs	r1, r3
 800b69e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6a2:	e7eb      	b.n	800b67c <__swhatbuf_r+0x24>

0800b6a4 <__smakebuf_r>:
 800b6a4:	898b      	ldrh	r3, [r1, #12]
 800b6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6a8:	079d      	lsls	r5, r3, #30
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	d507      	bpl.n	800b6c0 <__smakebuf_r+0x1c>
 800b6b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	6123      	str	r3, [r4, #16]
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	6163      	str	r3, [r4, #20]
 800b6bc:	b002      	add	sp, #8
 800b6be:	bd70      	pop	{r4, r5, r6, pc}
 800b6c0:	ab01      	add	r3, sp, #4
 800b6c2:	466a      	mov	r2, sp
 800b6c4:	f7ff ffc8 	bl	800b658 <__swhatbuf_r>
 800b6c8:	9900      	ldr	r1, [sp, #0]
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7fe ff1d 	bl	800a50c <_malloc_r>
 800b6d2:	b948      	cbnz	r0, 800b6e8 <__smakebuf_r+0x44>
 800b6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6d8:	059a      	lsls	r2, r3, #22
 800b6da:	d4ef      	bmi.n	800b6bc <__smakebuf_r+0x18>
 800b6dc:	f023 0303 	bic.w	r3, r3, #3
 800b6e0:	f043 0302 	orr.w	r3, r3, #2
 800b6e4:	81a3      	strh	r3, [r4, #12]
 800b6e6:	e7e3      	b.n	800b6b0 <__smakebuf_r+0xc>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	6020      	str	r0, [r4, #0]
 800b6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f0:	81a3      	strh	r3, [r4, #12]
 800b6f2:	9b00      	ldr	r3, [sp, #0]
 800b6f4:	6163      	str	r3, [r4, #20]
 800b6f6:	9b01      	ldr	r3, [sp, #4]
 800b6f8:	6120      	str	r0, [r4, #16]
 800b6fa:	b15b      	cbz	r3, 800b714 <__smakebuf_r+0x70>
 800b6fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b700:	4630      	mov	r0, r6
 800b702:	f000 f81d 	bl	800b740 <_isatty_r>
 800b706:	b128      	cbz	r0, 800b714 <__smakebuf_r+0x70>
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	f023 0303 	bic.w	r3, r3, #3
 800b70e:	f043 0301 	orr.w	r3, r3, #1
 800b712:	81a3      	strh	r3, [r4, #12]
 800b714:	89a3      	ldrh	r3, [r4, #12]
 800b716:	431d      	orrs	r5, r3
 800b718:	81a5      	strh	r5, [r4, #12]
 800b71a:	e7cf      	b.n	800b6bc <__smakebuf_r+0x18>

0800b71c <_fstat_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4d07      	ldr	r5, [pc, #28]	; (800b73c <_fstat_r+0x20>)
 800b720:	2300      	movs	r3, #0
 800b722:	4604      	mov	r4, r0
 800b724:	4608      	mov	r0, r1
 800b726:	4611      	mov	r1, r2
 800b728:	602b      	str	r3, [r5, #0]
 800b72a:	f7f6 fe72 	bl	8002412 <_fstat>
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	d102      	bne.n	800b738 <_fstat_r+0x1c>
 800b732:	682b      	ldr	r3, [r5, #0]
 800b734:	b103      	cbz	r3, 800b738 <_fstat_r+0x1c>
 800b736:	6023      	str	r3, [r4, #0]
 800b738:	bd38      	pop	{r3, r4, r5, pc}
 800b73a:	bf00      	nop
 800b73c:	200005e4 	.word	0x200005e4

0800b740 <_isatty_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d06      	ldr	r5, [pc, #24]	; (800b75c <_isatty_r+0x1c>)
 800b744:	2300      	movs	r3, #0
 800b746:	4604      	mov	r4, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	f7f6 fe71 	bl	8002432 <_isatty>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d102      	bne.n	800b75a <_isatty_r+0x1a>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	b103      	cbz	r3, 800b75a <_isatty_r+0x1a>
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	200005e4 	.word	0x200005e4

0800b760 <abort>:
 800b760:	b508      	push	{r3, lr}
 800b762:	2006      	movs	r0, #6
 800b764:	f000 f834 	bl	800b7d0 <raise>
 800b768:	2001      	movs	r0, #1
 800b76a:	f7f6 fe03 	bl	8002374 <_exit>

0800b76e <_malloc_usable_size_r>:
 800b76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b772:	1f18      	subs	r0, r3, #4
 800b774:	2b00      	cmp	r3, #0
 800b776:	bfbc      	itt	lt
 800b778:	580b      	ldrlt	r3, [r1, r0]
 800b77a:	18c0      	addlt	r0, r0, r3
 800b77c:	4770      	bx	lr

0800b77e <_raise_r>:
 800b77e:	291f      	cmp	r1, #31
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4604      	mov	r4, r0
 800b784:	460d      	mov	r5, r1
 800b786:	d904      	bls.n	800b792 <_raise_r+0x14>
 800b788:	2316      	movs	r3, #22
 800b78a:	6003      	str	r3, [r0, #0]
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	bd38      	pop	{r3, r4, r5, pc}
 800b792:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b794:	b112      	cbz	r2, 800b79c <_raise_r+0x1e>
 800b796:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b79a:	b94b      	cbnz	r3, 800b7b0 <_raise_r+0x32>
 800b79c:	4620      	mov	r0, r4
 800b79e:	f000 f831 	bl	800b804 <_getpid_r>
 800b7a2:	462a      	mov	r2, r5
 800b7a4:	4601      	mov	r1, r0
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7ac:	f000 b818 	b.w	800b7e0 <_kill_r>
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d00a      	beq.n	800b7ca <_raise_r+0x4c>
 800b7b4:	1c59      	adds	r1, r3, #1
 800b7b6:	d103      	bne.n	800b7c0 <_raise_r+0x42>
 800b7b8:	2316      	movs	r3, #22
 800b7ba:	6003      	str	r3, [r0, #0]
 800b7bc:	2001      	movs	r0, #1
 800b7be:	e7e7      	b.n	800b790 <_raise_r+0x12>
 800b7c0:	2400      	movs	r4, #0
 800b7c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	4798      	blx	r3
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	e7e0      	b.n	800b790 <_raise_r+0x12>
	...

0800b7d0 <raise>:
 800b7d0:	4b02      	ldr	r3, [pc, #8]	; (800b7dc <raise+0xc>)
 800b7d2:	4601      	mov	r1, r0
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	f7ff bfd2 	b.w	800b77e <_raise_r>
 800b7da:	bf00      	nop
 800b7dc:	2000006c 	.word	0x2000006c

0800b7e0 <_kill_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4d07      	ldr	r5, [pc, #28]	; (800b800 <_kill_r+0x20>)
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	4608      	mov	r0, r1
 800b7ea:	4611      	mov	r1, r2
 800b7ec:	602b      	str	r3, [r5, #0]
 800b7ee:	f7f6 fdb1 	bl	8002354 <_kill>
 800b7f2:	1c43      	adds	r3, r0, #1
 800b7f4:	d102      	bne.n	800b7fc <_kill_r+0x1c>
 800b7f6:	682b      	ldr	r3, [r5, #0]
 800b7f8:	b103      	cbz	r3, 800b7fc <_kill_r+0x1c>
 800b7fa:	6023      	str	r3, [r4, #0]
 800b7fc:	bd38      	pop	{r3, r4, r5, pc}
 800b7fe:	bf00      	nop
 800b800:	200005e4 	.word	0x200005e4

0800b804 <_getpid_r>:
 800b804:	f7f6 bd9e 	b.w	8002344 <_getpid>

0800b808 <_init>:
 800b808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80a:	bf00      	nop
 800b80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80e:	bc08      	pop	{r3}
 800b810:	469e      	mov	lr, r3
 800b812:	4770      	bx	lr

0800b814 <_fini>:
 800b814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b816:	bf00      	nop
 800b818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b81a:	bc08      	pop	{r3}
 800b81c:	469e      	mov	lr, r3
 800b81e:	4770      	bx	lr
