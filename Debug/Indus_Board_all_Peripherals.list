
Indus_Board_all_Peripherals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b788  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800b968  0800b968  0001b968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdbc  0800bdbc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdbc  0800bdbc  0001bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdc4  0800bdc4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdc4  0800bdc4  0001bdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdc8  0800bdc8  0001bdc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bdcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200001dc  0800bfa8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800bfa8  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eff7  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398a  00000000  00000000  0003f246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc8  00000000  00000000  00042bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015b0  00000000  00000000  00044798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004999  00000000  00000000  00045d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000207a9  00000000  00000000  0004a6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4d0b  00000000  00000000  0006ae8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089dc  00000000  00000000  0014fb98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00158574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b950 	.word	0x0800b950

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800b950 	.word	0x0800b950

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <__io_putchar>:
 * @brief //Modified Function Prototype for Printf
 * @param none
 * @return None
 **************************************************************************/
PUTCHAR_PROTOTYPE
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f02:	2201      	movs	r2, #1
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <__io_putchar+0x20>)
 8000f06:	f006 fc85 	bl	8007814 <HAL_UART_Transmit>
  return ch;
 8000f0a:	687b      	ldr	r3, [r7, #4]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000040c 	.word	0x2000040c

08000f18 <getinput>:
uint16_t B1 = 0;
uint16_t B2 = 0;



void getinput(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
	char temp1[10];
	char humd1[10];

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	485b      	ldr	r0, [pc, #364]	; (8001090 <getinput+0x178>)
 8000f22:	f003 fbdb 	bl	80046dc <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d02f      	beq.n	8000f8c <getinput+0x74>
		HAL_ADC_Start(&hadc1);
 8000f2c:	4859      	ldr	r0, [pc, #356]	; (8001094 <getinput+0x17c>)
 8000f2e:	f001 fffb 	bl	8002f28 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,1000);
 8000f32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f36:	4857      	ldr	r0, [pc, #348]	; (8001094 <getinput+0x17c>)
 8000f38:	f002 f8b2 	bl	80030a0 <HAL_ADC_PollForConversion>
		TTemp = (HAL_ADC_GetValue(&hadc1) / 160) + 16;
 8000f3c:	4855      	ldr	r0, [pc, #340]	; (8001094 <getinput+0x17c>)
 8000f3e:	f002 f987 	bl	8003250 <HAL_ADC_GetValue>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4a54      	ldr	r2, [pc, #336]	; (8001098 <getinput+0x180>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	09db      	lsrs	r3, r3, #7
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	3310      	adds	r3, #16
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	4b52      	ldr	r3, [pc, #328]	; (800109c <getinput+0x184>)
 8000f54:	801a      	strh	r2, [r3, #0]
		sprintf(temp1, "%d", TTemp);
 8000f56:	4b51      	ldr	r3, [pc, #324]	; (800109c <getinput+0x184>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	494f      	ldr	r1, [pc, #316]	; (80010a0 <getinput+0x188>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f008 fb96 	bl	8009694 <siprintf>

		lcd_clear();
 8000f68:	f000 fa54 	bl	8001414 <lcd_clear>
		lcd_set_cursor(0, 0);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 fa2b 	bl	80013ca <lcd_set_cursor>
		lcd_write_string("SET Temperature");
 8000f74:	484b      	ldr	r0, [pc, #300]	; (80010a4 <getinput+0x18c>)
 8000f76:	f000 fa13 	bl	80013a0 <lcd_write_string>
		lcd_set_cursor(1, 0);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f000 fa24 	bl	80013ca <lcd_set_cursor>
		lcd_write_string(temp1);
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fa0a 	bl	80013a0 <lcd_write_string>


	}

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	4840      	ldr	r0, [pc, #256]	; (8001090 <getinput+0x178>)
 8000f90:	f003 fba4 	bl	80046dc <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d02b      	beq.n	8000ff2 <getinput+0xda>
			HAL_ADC_Start(&hadc1);
 8000f9a:	483e      	ldr	r0, [pc, #248]	; (8001094 <getinput+0x17c>)
 8000f9c:	f001 ffc4 	bl	8002f28 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1,1000);
 8000fa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fa4:	483b      	ldr	r0, [pc, #236]	; (8001094 <getinput+0x17c>)
 8000fa6:	f002 f87b 	bl	80030a0 <HAL_ADC_PollForConversion>
			THumd = HAL_ADC_GetValue(&hadc1) / 40;
 8000faa:	483a      	ldr	r0, [pc, #232]	; (8001094 <getinput+0x17c>)
 8000fac:	f002 f950 	bl	8003250 <HAL_ADC_GetValue>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a39      	ldr	r2, [pc, #228]	; (8001098 <getinput+0x180>)
 8000fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb8:	095b      	lsrs	r3, r3, #5
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <getinput+0x190>)
 8000fbe:	801a      	strh	r2, [r3, #0]
			sprintf(humd1, "%d", THumd);
 8000fc0:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <getinput+0x190>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4935      	ldr	r1, [pc, #212]	; (80010a0 <getinput+0x188>)
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f008 fb62 	bl	8009694 <siprintf>

			lcd_clear();
 8000fd0:	f000 fa20 	bl	8001414 <lcd_clear>
			lcd_set_cursor(0, 0);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f9f7 	bl	80013ca <lcd_set_cursor>
			lcd_write_string("SET Humidity");
 8000fdc:	4833      	ldr	r0, [pc, #204]	; (80010ac <getinput+0x194>)
 8000fde:	f000 f9df 	bl	80013a0 <lcd_write_string>
			lcd_set_cursor(1, 0);
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 f9f0 	bl	80013ca <lcd_set_cursor>
			lcd_write_string(humd1);
 8000fea:	463b      	mov	r3, r7
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f9d7 	bl	80013a0 <lcd_write_string>
		}

	GetDeviceIDSht21();
 8000ff2:	f000 fe55 	bl	8001ca0 <GetDeviceIDSht21>
	GetSlaveAcknowledgment();
 8000ff6:	f000 fe29 	bl	8001c4c <GetSlaveAcknowledgment>
	GetTempratureSht21();
 8000ffa:	f000 fe7f 	bl	8001cfc <GetTempratureSht21>
	GetHumidyShtc3();
 8000ffe:	f000 fec5 	bl	8001d8c <GetHumidyShtc3>
	temp = Read_Temprature() / 1000;
 8001002:	f000 ff31 	bl	8001e68 <Read_Temprature>
 8001006:	4603      	mov	r3, r0
 8001008:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <getinput+0x198>)
 800100a:	fb82 1203 	smull	r1, r2, r2, r3
 800100e:	1192      	asrs	r2, r2, #6
 8001010:	17db      	asrs	r3, r3, #31
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <getinput+0x19c>)
 8001018:	801a      	strh	r2, [r3, #0]
	humd = Read_Humidity() / 1000;
 800101a:	f000 ff51 	bl	8001ec0 <Read_Humidity>
 800101e:	4603      	mov	r3, r0
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <getinput+0x198>)
 8001022:	fb82 1203 	smull	r1, r2, r2, r3
 8001026:	1192      	asrs	r2, r2, #6
 8001028:	17db      	asrs	r3, r3, #31
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <getinput+0x1a0>)
 8001030:	801a      	strh	r2, [r3, #0]

	sprintf(temp1, "%d", temp);
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <getinput+0x19c>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4918      	ldr	r1, [pc, #96]	; (80010a0 <getinput+0x188>)
 800103e:	4618      	mov	r0, r3
 8001040:	f008 fb28 	bl	8009694 <siprintf>
	sprintf(humd1, "%d", humd);
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <getinput+0x1a0>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	463b      	mov	r3, r7
 800104c:	4914      	ldr	r1, [pc, #80]	; (80010a0 <getinput+0x188>)
 800104e:	4618      	mov	r0, r3
 8001050:	f008 fb20 	bl	8009694 <siprintf>

	lcd_clear();
 8001054:	f000 f9de 	bl	8001414 <lcd_clear>
	lcd_set_cursor(0, 0);
 8001058:	2100      	movs	r1, #0
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f9b5 	bl	80013ca <lcd_set_cursor>
	lcd_write_string("Temperature ");
 8001060:	4816      	ldr	r0, [pc, #88]	; (80010bc <getinput+0x1a4>)
 8001062:	f000 f99d 	bl	80013a0 <lcd_write_string>
	lcd_write_string(temp1);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f998 	bl	80013a0 <lcd_write_string>
	lcd_set_cursor(1, 0);
 8001070:	2100      	movs	r1, #0
 8001072:	2001      	movs	r0, #1
 8001074:	f000 f9a9 	bl	80013ca <lcd_set_cursor>
	lcd_write_string("Humidity ");
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <getinput+0x1a8>)
 800107a:	f000 f991 	bl	80013a0 <lcd_write_string>
	lcd_write_string(humd1);
 800107e:	463b      	mov	r3, r7
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f98d 	bl	80013a0 <lcd_write_string>


}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	48000400 	.word	0x48000400
 8001094:	200001f8 	.word	0x200001f8
 8001098:	cccccccd 	.word	0xcccccccd
 800109c:	20000002 	.word	0x20000002
 80010a0:	0800b968 	.word	0x0800b968
 80010a4:	0800b96c 	.word	0x0800b96c
 80010a8:	20000004 	.word	0x20000004
 80010ac:	0800b97c 	.word	0x0800b97c
 80010b0:	10624dd3 	.word	0x10624dd3
 80010b4:	2000049c 	.word	0x2000049c
 80010b8:	2000049e 	.word	0x2000049e
 80010bc:	0800b98c 	.word	0x0800b98c
 80010c0:	0800b99c 	.word	0x0800b99c

080010c4 <accuate>:

void accuate(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	if(TTemp < temp){
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <accuate+0xb8>)
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <accuate+0xbc>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d20f      	bcs.n	80010f4 <accuate+0x30>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2180      	movs	r1, #128	; 0x80
 80010d8:	482a      	ldr	r0, [pc, #168]	; (8001184 <accuate+0xc0>)
 80010da:	f003 fb17 	bl	800470c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e4:	4827      	ldr	r0, [pc, #156]	; (8001184 <accuate+0xc0>)
 80010e6:	f003 fb11 	bl	800470c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2110      	movs	r1, #16
 80010ee:	4826      	ldr	r0, [pc, #152]	; (8001188 <accuate+0xc4>)
 80010f0:	f003 fb0c 	bl	800470c <HAL_GPIO_WritePin>
	}
	if(TTemp > temp){
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <accuate+0xb8>)
 80010f6:	881a      	ldrh	r2, [r3, #0]
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <accuate+0xbc>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d90f      	bls.n	8001120 <accuate+0x5c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8001100:	2201      	movs	r2, #1
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	481f      	ldr	r0, [pc, #124]	; (8001184 <accuate+0xc0>)
 8001106:	f003 fb01 	bl	800470c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001110:	481c      	ldr	r0, [pc, #112]	; (8001184 <accuate+0xc0>)
 8001112:	f003 fafb 	bl	800470c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2110      	movs	r1, #16
 800111a:	481b      	ldr	r0, [pc, #108]	; (8001188 <accuate+0xc4>)
 800111c:	f003 faf6 	bl	800470c <HAL_GPIO_WritePin>
	}
	if(TTemp == temp)
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <accuate+0xb8>)
 8001122:	881a      	ldrh	r2, [r3, #0]
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <accuate+0xbc>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d10f      	bne.n	800114c <accuate+0x88>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 800112c:	2201      	movs	r2, #1
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	4814      	ldr	r0, [pc, #80]	; (8001184 <accuate+0xc0>)
 8001132:	f003 faeb 	bl	800470c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113c:	4811      	ldr	r0, [pc, #68]	; (8001184 <accuate+0xc0>)
 800113e:	f003 fae5 	bl	800470c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001142:	2201      	movs	r2, #1
 8001144:	2110      	movs	r1, #16
 8001146:	4810      	ldr	r0, [pc, #64]	; (8001188 <accuate+0xc4>)
 8001148:	f003 fae0 	bl	800470c <HAL_GPIO_WritePin>

	}



	if(THumd < humd){
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <accuate+0xc8>)
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <accuate+0xcc>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d204      	bcs.n	8001162 <accuate+0x9e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8001158:	2201      	movs	r2, #1
 800115a:	2120      	movs	r1, #32
 800115c:	480a      	ldr	r0, [pc, #40]	; (8001188 <accuate+0xc4>)
 800115e:	f003 fad5 	bl	800470c <HAL_GPIO_WritePin>
	}
	if(THumd > humd ){
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <accuate+0xc8>)
 8001164:	881a      	ldrh	r2, [r3, #0]
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <accuate+0xcc>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d904      	bls.n	8001178 <accuate+0xb4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2120      	movs	r1, #32
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <accuate+0xc4>)
 8001174:	f003 faca 	bl	800470c <HAL_GPIO_WritePin>
	}
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000002 	.word	0x20000002
 8001180:	2000049c 	.word	0x2000049c
 8001184:	48001000 	.word	0x48001000
 8001188:	48000400 	.word	0x48000400
 800118c:	20000004 	.word	0x20000004
 8001190:	2000049e 	.word	0x2000049e

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119a:	f001 fa78 	bl	800268e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119e:	f000 f95b 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a2:	f000 fc7d 	bl	8001aa0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011a6:	f000 f997 	bl	80014d8 <MX_ADC1_Init>
  MX_DAC1_Init();
 80011aa:	f000 fa0d 	bl	80015c8 <MX_DAC1_Init>
  MX_I2C2_Init();
 80011ae:	f000 fa45 	bl	800163c <MX_I2C2_Init>
  MX_SPI2_Init();
 80011b2:	f000 fac3 	bl	800173c <MX_SPI2_Init>
  MX_TIM1_Init();
 80011b6:	f000 faff 	bl	80017b8 <MX_TIM1_Init>
  MX_TIM16_Init();
 80011ba:	f000 fbad 	bl	8001918 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80011be:	f000 fc23 	bl	8001a08 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80011c2:	f000 fa7b 	bl	80016bc <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2180      	movs	r1, #128	; 0x80
 80011ca:	481a      	ldr	r0, [pc, #104]	; (8001234 <main+0xa0>)
 80011cc:	f003 fa9e 	bl	800470c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d6:	4817      	ldr	r0, [pc, #92]	; (8001234 <main+0xa0>)
 80011d8:	f003 fa98 	bl	800470c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	2110      	movs	r1, #16
 80011e0:	4815      	ldr	r0, [pc, #84]	; (8001238 <main+0xa4>)
 80011e2:	f003 fa93 	bl	800470c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2120      	movs	r1, #32
 80011ea:	4813      	ldr	r0, [pc, #76]	; (8001238 <main+0xa4>)
 80011ec:	f003 fa8e 	bl	800470c <HAL_GPIO_WritePin>

  lcd_init();
 80011f0:	f000 f8a7 	bl	8001342 <lcd_init>
  lcd_backlight(1); // Turn on backlight
 80011f4:	2001      	movs	r0, #1
 80011f6:	f000 f917 	bl	8001428 <lcd_backlight>
  uint16_t Data = 10;
 80011fa:	230a      	movs	r3, #10
 80011fc:	82fb      	strh	r3, [r7, #22]
  char *text = "EmbeddedThere";
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <main+0xa8>)
 8001200:	613b      	str	r3, [r7, #16]
  char int_to_str[10];
  sprintf(int_to_str, "%d", Data);
 8001202:	8afa      	ldrh	r2, [r7, #22]
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	490e      	ldr	r1, [pc, #56]	; (8001240 <main+0xac>)
 8001208:	4618      	mov	r0, r3
 800120a:	f008 fa43 	bl	8009694 <siprintf>

  lcd_clear();
 800120e:	f000 f901 	bl	8001414 <lcd_clear>
  lcd_set_cursor(0, 0);
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f000 f8d8 	bl	80013ca <lcd_set_cursor>
  lcd_write_string(text);
 800121a:	6938      	ldr	r0, [r7, #16]
 800121c:	f000 f8c0 	bl	80013a0 <lcd_write_string>
  lcd_write_string(int_to_str);
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f8bc 	bl	80013a0 <lcd_write_string>

  while (1){
    /* USER CODE END WHILE */
	  getinput();
 8001228:	f7ff fe76 	bl	8000f18 <getinput>
	  accuate();
 800122c:	f7ff ff4a 	bl	80010c4 <accuate>
	  getinput();
 8001230:	e7fa      	b.n	8001228 <main+0x94>
 8001232:	bf00      	nop
 8001234:	48001000 	.word	0x48001000
 8001238:	48000400 	.word	0x48000400
 800123c:	0800b9a8 	.word	0x0800b9a8
 8001240:	0800b968 	.word	0x0800b968

08001244 <lcd_write_nibble>:

  }
  /* USER CODE END 3 */
}

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
 800124a:	4603      	mov	r3, r0
 800124c:	460a      	mov	r2, r1
 800124e:	71fb      	strb	r3, [r7, #7]
 8001250:	4613      	mov	r3, r2
 8001252:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	b2db      	uxtb	r3, r3
 800125a:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	4313      	orrs	r3, r2
 8001262:	b2db      	uxtb	r3, r3
 8001264:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <lcd_write_nibble+0x7c>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	b25a      	sxtb	r2, r3
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b25b      	sxtb	r3, r3
 8001276:	b2db      	uxtb	r3, r3
 8001278:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	b2db      	uxtb	r3, r3
 8001282:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR << 1, &data, 1, 100);
 8001284:	f107 020f 	add.w	r2, r7, #15
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	214e      	movs	r1, #78	; 0x4e
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <lcd_write_nibble+0x80>)
 8001292:	f003 fb05 	bl	80048a0 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8001296:	2001      	movs	r0, #1
 8001298:	f001 fa6a 	bl	8002770 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	f023 0304 	bic.w	r3, r3, #4
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR << 1, &data, 1, 100);
 80012a6:	f107 020f 	add.w	r2, r7, #15
 80012aa:	2364      	movs	r3, #100	; 0x64
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	214e      	movs	r1, #78	; 0x4e
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <lcd_write_nibble+0x80>)
 80012b4:	f003 faf4 	bl	80048a0 <HAL_I2C_Master_Transmit>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	200002c4 	.word	0x200002c4

080012c8 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffad 	bl	8001244 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ffa8 	bl	8001244 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d002      	beq.n	8001300 <lcd_send_cmd+0x38>
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d102      	bne.n	8001306 <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 8001300:	2002      	movs	r0, #2
 8001302:	f001 fa35 	bl	8002770 <HAL_Delay>
  }
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2101      	movs	r1, #1
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff8a 	bl	8001244 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	2101      	movs	r1, #1
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff85 	bl	8001244 <lcd_write_nibble>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <lcd_init>:

void lcd_init() {
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8001346:	2032      	movs	r0, #50	; 0x32
 8001348:	f001 fa12 	bl	8002770 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800134c:	2100      	movs	r1, #0
 800134e:	2003      	movs	r0, #3
 8001350:	f7ff ff78 	bl	8001244 <lcd_write_nibble>
  HAL_Delay(5);
 8001354:	2005      	movs	r0, #5
 8001356:	f001 fa0b 	bl	8002770 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800135a:	2100      	movs	r1, #0
 800135c:	2003      	movs	r0, #3
 800135e:	f7ff ff71 	bl	8001244 <lcd_write_nibble>
  HAL_Delay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f001 fa04 	bl	8002770 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001368:	2100      	movs	r1, #0
 800136a:	2003      	movs	r0, #3
 800136c:	f7ff ff6a 	bl	8001244 <lcd_write_nibble>
  HAL_Delay(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f001 f9fd 	bl	8002770 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8001376:	2100      	movs	r1, #0
 8001378:	2002      	movs	r0, #2
 800137a:	f7ff ff63 	bl	8001244 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f7ff ffa2 	bl	80012c8 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8001384:	200c      	movs	r0, #12
 8001386:	f7ff ff9f 	bl	80012c8 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 800138a:	2006      	movs	r0, #6
 800138c:	f7ff ff9c 	bl	80012c8 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff ff99 	bl	80012c8 <lcd_send_cmd>
  HAL_Delay(2);
 8001396:	2002      	movs	r0, #2
 8001398:	f001 f9ea 	bl	8002770 <HAL_Delay>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}

080013a0 <lcd_write_string>:

void lcd_write_string(char *str) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  while (*str) {
 80013a8:	e006      	b.n	80013b8 <lcd_write_string+0x18>
    lcd_send_data(*str++);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ffab 	bl	800130e <lcd_send_data>
  while (*str) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f4      	bne.n	80013aa <lcd_write_string+0xa>
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	460a      	mov	r2, r1
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	4613      	mov	r3, r2
 80013d8:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <lcd_set_cursor+0x1c>
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d003      	beq.n	80013ec <lcd_set_cursor+0x22>
 80013e4:	e005      	b.n	80013f2 <lcd_set_cursor+0x28>
        case 0:
            address = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]
            break;
 80013ea:	e004      	b.n	80013f6 <lcd_set_cursor+0x2c>
        case 1:
            address = 0x40;
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	73fb      	strb	r3, [r7, #15]
            break;
 80013f0:	e001      	b.n	80013f6 <lcd_set_cursor+0x2c>
        default:
            address = 0x00;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	4413      	add	r3, r2
 80013fc:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff5e 	bl	80012c8 <lcd_send_cmd>
}
 800140c:	bf00      	nop
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <lcd_clear>:

void lcd_clear(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff ff55 	bl	80012c8 <lcd_send_cmd>
    HAL_Delay(2);
 800141e:	2002      	movs	r0, #2
 8001420:	f001 f9a6 	bl	8002770 <HAL_Delay>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <lcd_backlight>:

void lcd_backlight(uint8_t state) {
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if (state) {
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <lcd_backlight+0x18>
    backlight_state = 1;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <lcd_backlight+0x2c>)
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = 0;
  }
}
 800143e:	e002      	b.n	8001446 <lcd_backlight+0x1e>
    backlight_state = 0;
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <lcd_backlight+0x2c>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000000 	.word	0x20000000

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	; 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	2238      	movs	r2, #56	; 0x38
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f008 f977 	bl	800975a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800147e:	f004 f811 	bl	80054a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148c:	2340      	movs	r3, #64	; 0x40
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001490:	2300      	movs	r3, #0
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001494:	f107 0318 	add.w	r3, r7, #24
 8001498:	4618      	mov	r0, r3
 800149a:	f004 f8b7 	bl	800560c <HAL_RCC_OscConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014a4:	f000 fbcc 	bl	8001c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a8:	230f      	movs	r3, #15
 80014aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ac:	2301      	movs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 fbbb 	bl	8005c3c <HAL_RCC_ClockConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80014cc:	f000 fbb8 	bl	8001c40 <Error_Handler>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3750      	adds	r7, #80	; 0x50
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2220      	movs	r2, #32
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f008 f932 	bl	800975a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014f6:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <MX_ADC1_Init+0xe8>)
 80014f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014fe:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001500:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001504:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <MX_ADC1_Init+0xe8>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001518:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <MX_ADC1_Init+0xe8>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001520:	2204      	movs	r2, #4
 8001522:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <MX_ADC1_Init+0xe8>)
 800152c:	2200      	movs	r2, #0
 800152e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001532:	2201      	movs	r2, #1
 8001534:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001540:	2200      	movs	r2, #0
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001546:	2200      	movs	r2, #0
 8001548:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <MX_ADC1_Init+0xe8>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001554:	2200      	movs	r2, #0
 8001556:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <MX_ADC1_Init+0xe8>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001560:	4817      	ldr	r0, [pc, #92]	; (80015c0 <MX_ADC1_Init+0xe8>)
 8001562:	f001 fb57 	bl	8002c14 <HAL_ADC_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800156c:	f000 fb68 	bl	8001c40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	4811      	ldr	r0, [pc, #68]	; (80015c0 <MX_ADC1_Init+0xe8>)
 800157c:	f002 faee 	bl	8003b5c <HAL_ADCEx_MultiModeConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001586:	f000 fb5b 	bl	8001c40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_ADC1_Init+0xec>)
 800158c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800158e:	2306      	movs	r3, #6
 8001590:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001596:	237f      	movs	r3, #127	; 0x7f
 8001598:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800159a:	2304      	movs	r3, #4
 800159c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <MX_ADC1_Init+0xe8>)
 80015a8:	f001 fe60 	bl	800326c <HAL_ADC_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80015b2:	f000 fb45 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	3730      	adds	r7, #48	; 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001f8 	.word	0x200001f8
 80015c4:	04300002 	.word	0x04300002

080015c8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	; 0x30
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2230      	movs	r2, #48	; 0x30
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f008 f8c0 	bl	800975a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_DAC1_Init+0x6c>)
 80015dc:	4a16      	ldr	r2, [pc, #88]	; (8001638 <MX_DAC1_Init+0x70>)
 80015de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015e0:	4814      	ldr	r0, [pc, #80]	; (8001634 <MX_DAC1_Init+0x6c>)
 80015e2:	f002 fc6e 	bl	8003ec2 <HAL_DAC_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015ec:	f000 fb28 	bl	8001c40 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80015f0:	2302      	movs	r3, #2
 80015f2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800160c:	2301      	movs	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_DAC1_Init+0x6c>)
 800161c:	f002 fc74 	bl	8003f08 <HAL_DAC_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001626:	f000 fb0b 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3730      	adds	r7, #48	; 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000264 	.word	0x20000264
 8001638:	50000800 	.word	0x50000800

0800163c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_I2C2_Init+0x74>)
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <MX_I2C2_Init+0x78>)
 8001644:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_I2C2_Init+0x74>)
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <MX_I2C2_Init+0x7c>)
 800164a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_I2C2_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_I2C2_Init+0x74>)
 8001654:	2201      	movs	r2, #1
 8001656:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_I2C2_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_I2C2_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_I2C2_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_I2C2_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_I2C2_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <MX_I2C2_Init+0x74>)
 8001678:	f003 f883 	bl	8004782 <HAL_I2C_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001682:	f000 fadd 	bl	8001c40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <MX_I2C2_Init+0x74>)
 800168a:	f003 fe73 	bl	8005374 <HAL_I2CEx_ConfigAnalogFilter>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001694:	f000 fad4 	bl	8001c40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_I2C2_Init+0x74>)
 800169c:	f003 feb5 	bl	800540a <HAL_I2CEx_ConfigDigitalFilter>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016a6:	f000 facb 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000278 	.word	0x20000278
 80016b4:	40005800 	.word	0x40005800
 80016b8:	00303d5b 	.word	0x00303d5b

080016bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_I2C3_Init+0x74>)
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <MX_I2C3_Init+0x78>)
 80016c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_I2C3_Init+0x74>)
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <MX_I2C3_Init+0x7c>)
 80016ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_I2C3_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_I2C3_Init+0x74>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_I2C3_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_I2C3_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_I2C3_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_I2C3_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_I2C3_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <MX_I2C3_Init+0x74>)
 80016f8:	f003 f843 	bl	8004782 <HAL_I2C_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001702:	f000 fa9d 	bl	8001c40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001706:	2100      	movs	r1, #0
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <MX_I2C3_Init+0x74>)
 800170a:	f003 fe33 	bl	8005374 <HAL_I2CEx_ConfigAnalogFilter>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001714:	f000 fa94 	bl	8001c40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001718:	2100      	movs	r1, #0
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_I2C3_Init+0x74>)
 800171c:	f003 fe75 	bl	800540a <HAL_I2CEx_ConfigDigitalFilter>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001726:	f000 fa8b 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200002c4 	.word	0x200002c4
 8001734:	40007800 	.word	0x40007800
 8001738:	00303d5b 	.word	0x00303d5b

0800173c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_SPI2_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <MX_SPI2_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_SPI2_Init+0x74>)
 8001748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800174c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_SPI2_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_SPI2_Init+0x74>)
 8001756:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800175a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_SPI2_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_SPI2_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_SPI2_Init+0x74>)
 800176a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_SPI2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_SPI2_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_SPI2_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_SPI2_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_SPI2_Init+0x74>)
 800178a:	2207      	movs	r2, #7
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_SPI2_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_SPI2_Init+0x74>)
 8001796:	2208      	movs	r2, #8
 8001798:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_SPI2_Init+0x74>)
 800179c:	f004 fe5a 	bl	8006454 <HAL_SPI_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 fa4b 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000310 	.word	0x20000310
 80017b4:	40003800 	.word	0x40003800

080017b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b09c      	sub	sp, #112	; 0x70
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2234      	movs	r2, #52	; 0x34
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f007 ffb1 	bl	800975a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f8:	4b45      	ldr	r3, [pc, #276]	; (8001910 <MX_TIM1_Init+0x158>)
 80017fa:	4a46      	ldr	r2, [pc, #280]	; (8001914 <MX_TIM1_Init+0x15c>)
 80017fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017fe:	4b44      	ldr	r3, [pc, #272]	; (8001910 <MX_TIM1_Init+0x158>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b42      	ldr	r3, [pc, #264]	; (8001910 <MX_TIM1_Init+0x158>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <MX_TIM1_Init+0x158>)
 800180c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001810:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001812:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <MX_TIM1_Init+0x158>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001818:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <MX_TIM1_Init+0x158>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b3c      	ldr	r3, [pc, #240]	; (8001910 <MX_TIM1_Init+0x158>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001824:	483a      	ldr	r0, [pc, #232]	; (8001910 <MX_TIM1_Init+0x158>)
 8001826:	f004 fec0 	bl	80065aa <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001830:	f000 fa06 	bl	8001c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001838:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800183a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800183e:	4619      	mov	r1, r3
 8001840:	4833      	ldr	r0, [pc, #204]	; (8001910 <MX_TIM1_Init+0x158>)
 8001842:	f005 f959 	bl	8006af8 <HAL_TIM_ConfigClockSource>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800184c:	f000 f9f8 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001850:	482f      	ldr	r0, [pc, #188]	; (8001910 <MX_TIM1_Init+0x158>)
 8001852:	f004 ff62 	bl	800671a <HAL_TIM_PWM_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800185c:	f000 f9f0 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001870:	4619      	mov	r1, r3
 8001872:	4827      	ldr	r0, [pc, #156]	; (8001910 <MX_TIM1_Init+0x158>)
 8001874:	f005 fe5c 	bl	8007530 <HAL_TIMEx_MasterConfigSynchronization>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800187e:	f000 f9df 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001882:	2360      	movs	r3, #96	; 0x60
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188a:	2300      	movs	r3, #0
 800188c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800188e:	2300      	movs	r3, #0
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800189e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018a2:	2204      	movs	r2, #4
 80018a4:	4619      	mov	r1, r3
 80018a6:	481a      	ldr	r0, [pc, #104]	; (8001910 <MX_TIM1_Init+0x158>)
 80018a8:	f005 f812 	bl	80068d0 <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018b2:	f000 f9c5 	bl	8001c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM1_Init+0x158>)
 80018f4:	f005 fe9e 	bl	8007634 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80018fe:	f000 f99f 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM1_Init+0x158>)
 8001904:	f000 fce8 	bl	80022d8 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3770      	adds	r7, #112	; 0x70
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000374 	.word	0x20000374
 8001914:	40012c00 	.word	0x40012c00

08001918 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b094      	sub	sp, #80	; 0x50
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800191e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001932:	463b      	mov	r3, r7
 8001934:	2234      	movs	r2, #52	; 0x34
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f007 ff0e 	bl	800975a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800193e:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <MX_TIM16_Init+0xe8>)
 8001940:	4a30      	ldr	r2, [pc, #192]	; (8001a04 <MX_TIM16_Init+0xec>)
 8001942:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 37000;
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <MX_TIM16_Init+0xe8>)
 8001946:	f249 0288 	movw	r2, #37000	; 0x9088
 800194a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <MX_TIM16_Init+0xe8>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <MX_TIM16_Init+0xe8>)
 8001954:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001958:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <MX_TIM16_Init+0xe8>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001960:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <MX_TIM16_Init+0xe8>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <MX_TIM16_Init+0xe8>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800196c:	4824      	ldr	r0, [pc, #144]	; (8001a00 <MX_TIM16_Init+0xe8>)
 800196e:	f004 fe1c 	bl	80065aa <HAL_TIM_Base_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8001978:	f000 f962 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800197c:	4820      	ldr	r0, [pc, #128]	; (8001a00 <MX_TIM16_Init+0xe8>)
 800197e:	f004 fe6b 	bl	8006658 <HAL_TIM_OC_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8001988:	f000 f95a 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800198c:	2330      	movs	r3, #48	; 0x30
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001994:	2300      	movs	r3, #0
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001998:	2300      	movs	r3, #0
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4813      	ldr	r0, [pc, #76]	; (8001a00 <MX_TIM16_Init+0xe8>)
 80019b2:	f004 ff13 	bl	80067dc <HAL_TIM_OC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80019bc:	f000 f940 	bl	8001c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <MX_TIM16_Init+0xe8>)
 80019e8:	f005 fe24 	bl	8007634 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80019f2:	f000 f925 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	3750      	adds	r7, #80	; 0x50
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200003c0 	.word	0x200003c0
 8001a04:	40014400 	.word	0x40014400

08001a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a0e:	4a23      	ldr	r2, [pc, #140]	; (8001a9c <MX_USART1_UART_Init+0x94>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a52:	f005 fe8f 	bl	8007774 <HAL_UART_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a5c:	f000 f8f0 	bl	8001c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a60:	2100      	movs	r1, #0
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a64:	f007 f823 	bl	8008aae <HAL_UARTEx_SetTxFifoThreshold>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a6e:	f000 f8e7 	bl	8001c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a72:	2100      	movs	r1, #0
 8001a74:	4808      	ldr	r0, [pc, #32]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a76:	f007 f858 	bl	8008b2a <HAL_UARTEx_SetRxFifoThreshold>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a80:	f000 f8de 	bl	8001c40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_USART1_UART_Init+0x90>)
 8001a86:	f006 ffd9 	bl	8008a3c <HAL_UARTEx_DisableFifoMode>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a90:	f000 f8d6 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000040c 	.word	0x2000040c
 8001a9c:	40013800 	.word	0x40013800

08001aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	4b5d      	ldr	r3, [pc, #372]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	4a5c      	ldr	r2, [pc, #368]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b57      	ldr	r3, [pc, #348]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	4a56      	ldr	r2, [pc, #344]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ada:	4b54      	ldr	r3, [pc, #336]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4b51      	ldr	r3, [pc, #324]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a50      	ldr	r2, [pc, #320]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001afe:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0a:	4b48      	ldr	r3, [pc, #288]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	4b45      	ldr	r3, [pc, #276]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4a44      	ldr	r2, [pc, #272]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b22:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <MX_GPIO_Init+0x18c>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001b34:	483e      	ldr	r0, [pc, #248]	; (8001c30 <MX_GPIO_Init+0x190>)
 8001b36:	f002 fde9 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2136      	movs	r1, #54	; 0x36
 8001b3e:	483d      	ldr	r0, [pc, #244]	; (8001c34 <MX_GPIO_Init+0x194>)
 8001b40:	f002 fde4 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001b4a:	483b      	ldr	r0, [pc, #236]	; (8001c38 <MX_GPIO_Init+0x198>)
 8001b4c:	f002 fdde 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001b56:	4839      	ldr	r0, [pc, #228]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001b58:	f002 fdd8 	bl	800470c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001b5c:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	482e      	ldr	r0, [pc, #184]	; (8001c30 <MX_GPIO_Init+0x190>)
 8001b76:	f002 fc2f 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4828      	ldr	r0, [pc, #160]	; (8001c30 <MX_GPIO_Init+0x190>)
 8001b90:	f002 fc22 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8001b94:	2336      	movs	r3, #54	; 0x36
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4822      	ldr	r0, [pc, #136]	; (8001c34 <MX_GPIO_Init+0x194>)
 8001bac:	f002 fc14 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001bb0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	481b      	ldr	r0, [pc, #108]	; (8001c38 <MX_GPIO_Init+0x198>)
 8001bca:	f002 fc05 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001bce:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4619      	mov	r1, r3
 8001be6:	4815      	ldr	r0, [pc, #84]	; (8001c3c <MX_GPIO_Init+0x19c>)
 8001be8:	f002 fbf6 	bl	80043d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bec:	23c0      	movs	r3, #192	; 0xc0
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480d      	ldr	r0, [pc, #52]	; (8001c34 <MX_GPIO_Init+0x194>)
 8001c00:	f002 fbea 	bl	80043d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2008      	movs	r0, #8
 8001c0a:	f002 f926 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c0e:	2008      	movs	r0, #8
 8001c10:	f002 f93d 	bl	8003e8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2009      	movs	r0, #9
 8001c1a:	f002 f91e 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c1e:	2009      	movs	r0, #9
 8001c20:	f002 f935 	bl	8003e8e <HAL_NVIC_EnableIRQ>

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000800 	.word	0x48000800
 8001c34:	48000400 	.word	0x48000400
 8001c38:	48001000 	.word	0x48001000
 8001c3c:	48000c00 	.word	0x48000c00

08001c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <Error_Handler+0x8>
	...

08001c4c <GetSlaveAcknowledgment>:
 * @brief To get acknowledment from slave(Sensor)
 * @param None
 * @return None
 ******************************************************************************
 */
void GetSlaveAcknowledgment(){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
	char buffer10[32];
		if (HAL_OK == Device_check())
 8001c52:	f000 f961 	bl	8001f18 <Device_check>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10b      	bne.n	8001c74 <GetSlaveAcknowledgment+0x28>
  {
    	  sprintf(buffer10,"\n\rSHTC3 Device Ready");
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	490d      	ldr	r1, [pc, #52]	; (8001c94 <GetSlaveAcknowledgment+0x48>)
 8001c60:	4618      	mov	r0, r3
 8001c62:	f007 fd17 	bl	8009694 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer10, 20, 100);
 8001c66:	4639      	mov	r1, r7
 8001c68:	2364      	movs	r3, #100	; 0x64
 8001c6a:	2214      	movs	r2, #20
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <GetSlaveAcknowledgment+0x4c>)
 8001c6e:	f005 fdd1 	bl	8007814 <HAL_UART_Transmit>
    }
    else{
    	  sprintf(buffer10,"\n\rSHTC3 Device Not Ready");
    	  HAL_UART_Transmit(&huart1,(uint8_t *) buffer10, 20, 100);
    }
}
 8001c72:	e00a      	b.n	8001c8a <GetSlaveAcknowledgment+0x3e>
    	  sprintf(buffer10,"\n\rSHTC3 Device Not Ready");
 8001c74:	463b      	mov	r3, r7
 8001c76:	4909      	ldr	r1, [pc, #36]	; (8001c9c <GetSlaveAcknowledgment+0x50>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f007 fd0b 	bl	8009694 <siprintf>
    	  HAL_UART_Transmit(&huart1,(uint8_t *) buffer10, 20, 100);
 8001c7e:	4639      	mov	r1, r7
 8001c80:	2364      	movs	r3, #100	; 0x64
 8001c82:	2214      	movs	r2, #20
 8001c84:	4804      	ldr	r0, [pc, #16]	; (8001c98 <GetSlaveAcknowledgment+0x4c>)
 8001c86:	f005 fdc5 	bl	8007814 <HAL_UART_Transmit>
}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	0800b9b8 	.word	0x0800b9b8
 8001c98:	2000040c 	.word	0x2000040c
 8001c9c:	0800b9d0 	.word	0x0800b9d0

08001ca0 <GetDeviceIDSht21>:
 * @brief To get device(Sensor)ID
 * @param None
 * @return None
 ******************************************************************************
 */
void GetDeviceIDSht21(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
char buffer8[32]={0};
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
 8001cba:	615a      	str	r2, [r3, #20]
 8001cbc:	619a      	str	r2, [r3, #24]
	uint16_t buffer7=0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	84fb      	strh	r3, [r7, #38]	; 0x26
buffer7 = Read_Device_Id();
 8001cc2:	f000 f8a5 	bl	8001e10 <Read_Device_Id>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	84fb      	strh	r3, [r7, #38]	; 0x26
	  sprintf(buffer8,"\n\rID-%x",buffer7);
 8001cca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	4909      	ldr	r1, [pc, #36]	; (8001cf4 <GetDeviceIDSht21+0x54>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f007 fcdf 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)buffer8,11,100);
 8001cd6:	1d39      	adds	r1, r7, #4
 8001cd8:	2364      	movs	r3, #100	; 0x64
 8001cda:	220b      	movs	r2, #11
 8001cdc:	4806      	ldr	r0, [pc, #24]	; (8001cf8 <GetDeviceIDSht21+0x58>)
 8001cde:	f005 fd99 	bl	8007814 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001ce2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce6:	f000 fd43 	bl	8002770 <HAL_Delay>
}
 8001cea:	bf00      	nop
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	0800b9ec 	.word	0x0800b9ec
 8001cf8:	2000040c 	.word	0x2000040c

08001cfc <GetTempratureSht21>:
 * @brief To get Temperature value
 * @param None
 * @return None
 ******************************************************************************
 */
void GetTempratureSht21(){
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
char buffer8[27]={0};
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	f8c3 2013 	str.w	r2, [r3, #19]
	uint16_t buffer7 = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	83fb      	strh	r3, [r7, #30]
buffer7 = Read_Temprature();
 8001d1c:	f000 f8a4 	bl	8001e68 <Read_Temprature>
 8001d20:	4603      	mov	r3, r0
 8001d22:	83fb      	strh	r3, [r7, #30]
	buffer7 = 175 * (float)buffer7 / 65536.0f - 45.0f;
 8001d24:	8bfb      	ldrh	r3, [r7, #30]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001d78 <GetTempratureSht21+0x7c>
 8001d32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d36:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001d7c <GetTempratureSht21+0x80>
 8001d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d3e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001d80 <GetTempratureSht21+0x84>
 8001d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d4a:	ee17 3a90 	vmov	r3, s15
 8001d4e:	83fb      	strh	r3, [r7, #30]
	  sprintf(buffer8,"\n\rTemp->%d",buffer7);
 8001d50:	8bfa      	ldrh	r2, [r7, #30]
 8001d52:	463b      	mov	r3, r7
 8001d54:	490b      	ldr	r1, [pc, #44]	; (8001d84 <GetTempratureSht21+0x88>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	f007 fc9c 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)buffer8,11,100);
 8001d5c:	4639      	mov	r1, r7
 8001d5e:	2364      	movs	r3, #100	; 0x64
 8001d60:	220b      	movs	r2, #11
 8001d62:	4809      	ldr	r0, [pc, #36]	; (8001d88 <GetTempratureSht21+0x8c>)
 8001d64:	f005 fd56 	bl	8007814 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001d68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d6c:	f000 fd00 	bl	8002770 <HAL_Delay>
}
 8001d70:	bf00      	nop
 8001d72:	3720      	adds	r7, #32
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	432f0000 	.word	0x432f0000
 8001d7c:	47800000 	.word	0x47800000
 8001d80:	42340000 	.word	0x42340000
 8001d84:	0800b9f4 	.word	0x0800b9f4
 8001d88:	2000040c 	.word	0x2000040c

08001d8c <GetHumidyShtc3>:
 * @brief To get Relative Humidity Value
 * @param None
 * @return None
 ******************************************************************************
 */
void GetHumidyShtc3(){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
char buffer8[27]={0};
 8001d92:	2300      	movs	r3, #0
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
 8001da4:	f8c3 2013 	str.w	r2, [r3, #19]
uint16_t buffer17 = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	83fb      	strh	r3, [r7, #30]
buffer17 = Read_Humidity();
 8001dac:	f000 f888 	bl	8001ec0 <Read_Humidity>
 8001db0:	4603      	mov	r3, r0
 8001db2:	83fb      	strh	r3, [r7, #30]
	buffer17 = 100 * (float)buffer17 / 65536.0f;
 8001db4:	8bfb      	ldrh	r3, [r7, #30]
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dbe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001e00 <GetHumidyShtc3+0x74>
 8001dc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dc6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001e04 <GetHumidyShtc3+0x78>
 8001dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd2:	ee17 3a90 	vmov	r3, s15
 8001dd6:	83fb      	strh	r3, [r7, #30]
	sprintf(buffer8,"\n\rRH-%d %%",buffer17);
 8001dd8:	8bfa      	ldrh	r2, [r7, #30]
 8001dda:	463b      	mov	r3, r7
 8001ddc:	490a      	ldr	r1, [pc, #40]	; (8001e08 <GetHumidyShtc3+0x7c>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f007 fc58 	bl	8009694 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)buffer8,11,100);
 8001de4:	4639      	mov	r1, r7
 8001de6:	2364      	movs	r3, #100	; 0x64
 8001de8:	220b      	movs	r2, #11
 8001dea:	4808      	ldr	r0, [pc, #32]	; (8001e0c <GetHumidyShtc3+0x80>)
 8001dec:	f005 fd12 	bl	8007814 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001df0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001df4:	f000 fcbc 	bl	8002770 <HAL_Delay>
}
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	42c80000 	.word	0x42c80000
 8001e04:	47800000 	.word	0x47800000
 8001e08:	0800ba00 	.word	0x0800ba00
 8001e0c:	2000040c 	.word	0x2000040c

08001e10 <Read_Device_Id>:


/*API for sensing temperature*/
uint16_t Read_Device_Id(void){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af02      	add	r7, sp, #8
		uint8_t command1[2];
			uint8_t Rx_buf[2];
    uint16_t data=0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	80fb      	strh	r3, [r7, #6]
	command1[0]=CMD19;
 8001e1a:	23ef      	movs	r3, #239	; 0xef
 8001e1c:	713b      	strb	r3, [r7, #4]
	command1[1]=CMD20;
 8001e1e:	23c8      	movs	r3, #200	; 0xc8
 8001e20:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit(&hi2c2,SLAVEADDERESS,&command1[0],2,100);
 8001e22:	1d3a      	adds	r2, r7, #4
 8001e24:	2364      	movs	r3, #100	; 0x64
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2302      	movs	r3, #2
 8001e2a:	21e0      	movs	r1, #224	; 0xe0
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <Read_Device_Id+0x54>)
 8001e2e:	f002 fd37 	bl	80048a0 <HAL_I2C_Master_Transmit>
HAL_Delay(100);
 8001e32:	2064      	movs	r0, #100	; 0x64
 8001e34:	f000 fc9c 	bl	8002770 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2,SLAVEADDERESS,Rx_buf,2,100);                 //HAL API fro i2c master Rx
 8001e38:	463a      	mov	r2, r7
 8001e3a:	2364      	movs	r3, #100	; 0x64
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2302      	movs	r3, #2
 8001e40:	21e0      	movs	r1, #224	; 0xe0
 8001e42:	4808      	ldr	r0, [pc, #32]	; (8001e64 <Read_Device_Id+0x54>)
 8001e44:	f002 fe20 	bl	8004a88 <HAL_I2C_Master_Receive>
		data = ((Rx_buf[0]<<8)|Rx_buf[1]);
 8001e48:	783b      	ldrb	r3, [r7, #0]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	b21a      	sxth	r2, r3
 8001e4e:	787b      	ldrb	r3, [r7, #1]
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	80fb      	strh	r3, [r7, #6]
		return data;
 8001e58:	88fb      	ldrh	r3, [r7, #6]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000278 	.word	0x20000278

08001e68 <Read_Temprature>:


/*Read Temperature data*/
uint16_t Read_Temprature(){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af02      	add	r7, sp, #8
		uint8_t command2[2];
			uint8_t Rx_buf1[2];
    uint16_t data=0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	80fb      	strh	r3, [r7, #6]
	command2[0]=CMD21;
 8001e72:	237c      	movs	r3, #124	; 0x7c
 8001e74:	713b      	strb	r3, [r7, #4]
	command2[1]=CMD22;
 8001e76:	23a2      	movs	r3, #162	; 0xa2
 8001e78:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit(&hi2c2,SLAVEADDERESS,&command2[0],2,100);
 8001e7a:	1d3a      	adds	r2, r7, #4
 8001e7c:	2364      	movs	r3, #100	; 0x64
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2302      	movs	r3, #2
 8001e82:	21e0      	movs	r1, #224	; 0xe0
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <Read_Temprature+0x54>)
 8001e86:	f002 fd0b 	bl	80048a0 <HAL_I2C_Master_Transmit>
HAL_Delay(100);
 8001e8a:	2064      	movs	r0, #100	; 0x64
 8001e8c:	f000 fc70 	bl	8002770 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2,SLAVEADDERESS,Rx_buf1,2,100);                 //HAL API fro i2c master Rx
 8001e90:	463a      	mov	r2, r7
 8001e92:	2364      	movs	r3, #100	; 0x64
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2302      	movs	r3, #2
 8001e98:	21e0      	movs	r1, #224	; 0xe0
 8001e9a:	4808      	ldr	r0, [pc, #32]	; (8001ebc <Read_Temprature+0x54>)
 8001e9c:	f002 fdf4 	bl	8004a88 <HAL_I2C_Master_Receive>
		data = ((Rx_buf1[0]<<8)|Rx_buf1[1]);
 8001ea0:	783b      	ldrb	r3, [r7, #0]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	787b      	ldrb	r3, [r7, #1]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	80fb      	strh	r3, [r7, #6]
		return data;
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000278 	.word	0x20000278

08001ec0 <Read_Humidity>:


/*Read Humidity Data*/
uint16_t Read_Humidity(){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af02      	add	r7, sp, #8
uint8_t command3[2];
			uint8_t Rx_buf2[2];
    uint16_t data=0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	80fb      	strh	r3, [r7, #6]
	command3[0]=CMD23;
 8001eca:	235c      	movs	r3, #92	; 0x5c
 8001ecc:	713b      	strb	r3, [r7, #4]
	command3[1]=CMD24;
 8001ece:	2324      	movs	r3, #36	; 0x24
 8001ed0:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit(&hi2c2,SLAVEADDERESS,&command3[0],2,100);
 8001ed2:	1d3a      	adds	r2, r7, #4
 8001ed4:	2364      	movs	r3, #100	; 0x64
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2302      	movs	r3, #2
 8001eda:	21e0      	movs	r1, #224	; 0xe0
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <Read_Humidity+0x54>)
 8001ede:	f002 fcdf 	bl	80048a0 <HAL_I2C_Master_Transmit>
HAL_Delay(100);
 8001ee2:	2064      	movs	r0, #100	; 0x64
 8001ee4:	f000 fc44 	bl	8002770 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2,SLAVEADDERESS,Rx_buf2,2,100);                 //HAL API fro i2c master Rx
 8001ee8:	463a      	mov	r2, r7
 8001eea:	2364      	movs	r3, #100	; 0x64
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2302      	movs	r3, #2
 8001ef0:	21e0      	movs	r1, #224	; 0xe0
 8001ef2:	4808      	ldr	r0, [pc, #32]	; (8001f14 <Read_Humidity+0x54>)
 8001ef4:	f002 fdc8 	bl	8004a88 <HAL_I2C_Master_Receive>
		data = ((Rx_buf2[0]<<8)|Rx_buf2[1]);
 8001ef8:	783b      	ldrb	r3, [r7, #0]
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	b21a      	sxth	r2, r3
 8001efe:	787b      	ldrb	r3, [r7, #1]
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	80fb      	strh	r3, [r7, #6]
		return data;
 8001f08:	88fb      	ldrh	r3, [r7, #6]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000278 	.word	0x20000278

08001f18 <Device_check>:

/*Check for I2C Device*/
uint8_t Device_check(void){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
	uint8_t DeviceAddress1=SLAVEADDERESS;
 8001f1e:	23e0      	movs	r3, #224	; 0xe0
 8001f20:	71fb      	strb	r3, [r7, #7]
    if (HAL_OK == HAL_I2C_IsDeviceReady(&hi2c2, DeviceAddress1, 1, 100))
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	b299      	uxth	r1, r3
 8001f26:	2364      	movs	r3, #100	; 0x64
 8001f28:	2201      	movs	r2, #1
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <Device_check+0x2c>)
 8001f2c:	f002 fea2 	bl	8004c74 <HAL_I2C_IsDeviceReady>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <Device_check+0x22>
    {
    	  return 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e000      	b.n	8001f3c <Device_check+0x24>
    }
    else{
	      return 1;
 8001f3a:	2301      	movs	r3, #1
        }
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000278 	.word	0x20000278

08001f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_MspInit+0x44>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_MspInit+0x44>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6613      	str	r3, [r2, #96]	; 0x60
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_MspInit+0x44>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_MspInit+0x44>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_MspInit+0x44>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6593      	str	r3, [r2, #88]	; 0x58
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_MspInit+0x44>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f7e:	f003 fb35 	bl	80055ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000

08001f90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b09a      	sub	sp, #104	; 0x68
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	2244      	movs	r2, #68	; 0x44
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f007 fbd2 	bl	800975a <memset>
  if(hadc->Instance==ADC1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fbe:	d134      	bne.n	800202a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001fc6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001fca:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 f84f 	bl	8006074 <HAL_RCCEx_PeriphCLKConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001fdc:	f7ff fe30 	bl	8001c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_ADC_MspInit+0xa4>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	4a13      	ldr	r2, [pc, #76]	; (8002034 <HAL_ADC_MspInit+0xa4>)
 8001fe6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_ADC_MspInit+0xa4>)
 8001fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_ADC_MspInit+0xa4>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <HAL_ADC_MspInit+0xa4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_ADC_MspInit+0xa4>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002010:	2303      	movs	r3, #3
 8002012:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002014:	2303      	movs	r3, #3
 8002016:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002020:	4619      	mov	r1, r3
 8002022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002026:	f002 f9d7 	bl	80043d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800202a:	bf00      	nop
 800202c:	3768      	adds	r7, #104	; 0x68
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000

08002038 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <HAL_DAC_MspInit+0x74>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d124      	bne.n	80020a4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_DAC_MspInit+0x78>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <HAL_DAC_MspInit+0x78>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_DAC_MspInit+0x78>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_DAC_MspInit+0x78>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <HAL_DAC_MspInit+0x78>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <HAL_DAC_MspInit+0x78>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800208a:	2310      	movs	r3, #16
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208e:	2303      	movs	r3, #3
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a0:	f002 f99a 	bl	80043d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	; 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	50000800 	.word	0x50000800
 80020b0:	40021000 	.word	0x40021000

080020b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b09c      	sub	sp, #112	; 0x70
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	2244      	movs	r2, #68	; 0x44
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f007 fb40 	bl	800975a <memset>
  if(hi2c->Instance==I2C2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a3e      	ldr	r2, [pc, #248]	; (80021d8 <HAL_I2C_MspInit+0x124>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d138      	bne.n	8002156 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 ffbf 	bl	8006074 <HAL_RCCEx_PeriphCLKConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80020fc:	f7ff fda0 	bl	8001c40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_I2C_MspInit+0x128>)
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	4a35      	ldr	r2, [pc, #212]	; (80021dc <HAL_I2C_MspInit+0x128>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <HAL_I2C_MspInit+0x128>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002118:	f44f 7340 	mov.w	r3, #768	; 0x300
 800211c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211e:	2312      	movs	r3, #18
 8002120:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800212a:	2304      	movs	r3, #4
 800212c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002138:	f002 f94e 	bl	80043d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <HAL_I2C_MspInit+0x128>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	4a26      	ldr	r2, [pc, #152]	; (80021dc <HAL_I2C_MspInit+0x128>)
 8002142:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002146:	6593      	str	r3, [r2, #88]	; 0x58
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_I2C_MspInit+0x128>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002154:	e03c      	b.n	80021d0 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_I2C_MspInit+0x12c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d137      	bne.n	80021d0 <HAL_I2C_MspInit+0x11c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002164:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002166:	2300      	movs	r3, #0
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800216a:	f107 0318 	add.w	r3, r7, #24
 800216e:	4618      	mov	r0, r3
 8002170:	f003 ff80 	bl	8006074 <HAL_RCCEx_PeriphCLKConfig>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_MspInit+0xca>
      Error_Handler();
 800217a:	f7ff fd61 	bl	8001c40 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_I2C_MspInit+0x128>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	4a16      	ldr	r2, [pc, #88]	; (80021dc <HAL_I2C_MspInit+0x128>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_I2C_MspInit+0x128>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002196:	f44f 7340 	mov.w	r3, #768	; 0x300
 800219a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800219c:	2312      	movs	r3, #18
 800219e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80021a8:	2308      	movs	r3, #8
 80021aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021b0:	4619      	mov	r1, r3
 80021b2:	480c      	ldr	r0, [pc, #48]	; (80021e4 <HAL_I2C_MspInit+0x130>)
 80021b4:	f002 f910 	bl	80043d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_I2C_MspInit+0x128>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_I2C_MspInit+0x128>)
 80021be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021c2:	6593      	str	r3, [r2, #88]	; 0x58
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_I2C_MspInit+0x128>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
}
 80021d0:	bf00      	nop
 80021d2:	3770      	adds	r7, #112	; 0x70
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40005800 	.word	0x40005800
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007800 	.word	0x40007800
 80021e4:	48000800 	.word	0x48000800

080021e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_SPI_MspInit+0x7c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d128      	bne.n	800225c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_SPI_MspInit+0x80>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	4a16      	ldr	r2, [pc, #88]	; (8002268 <HAL_SPI_MspInit+0x80>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002214:	6593      	str	r3, [r2, #88]	; 0x58
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_SPI_MspInit+0x80>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_SPI_MspInit+0x80>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_SPI_MspInit+0x80>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <HAL_SPI_MspInit+0x80>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800223a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800224c:	2305      	movs	r3, #5
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <HAL_SPI_MspInit+0x84>)
 8002258:	f002 f8be 	bl	80043d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	; 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40003800 	.word	0x40003800
 8002268:	40021000 	.word	0x40021000
 800226c:	48000400 	.word	0x48000400

08002270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <HAL_TIM_Base_MspInit+0x5c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10c      	bne.n	800229c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_TIM_Base_MspInit+0x60>)
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_TIM_Base_MspInit+0x60>)
 8002288:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800228c:	6613      	str	r3, [r2, #96]	; 0x60
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_TIM_Base_MspInit+0x60>)
 8002290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800229a:	e010      	b.n	80022be <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <HAL_TIM_Base_MspInit+0x64>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10b      	bne.n	80022be <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_TIM_Base_MspInit+0x60>)
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_TIM_Base_MspInit+0x60>)
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	6613      	str	r3, [r2, #96]	; 0x60
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_TIM_Base_MspInit+0x60>)
 80022b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
}
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40014400 	.word	0x40014400

080022d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_TIM_MspPostInit+0x64>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d11c      	bne.n	8002334 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_TIM_MspPostInit+0x68>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <HAL_TIM_MspPostInit+0x68>)
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_TIM_MspPostInit+0x68>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002312:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002316:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002324:	2302      	movs	r3, #2
 8002326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	4619      	mov	r1, r3
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <HAL_TIM_MspPostInit+0x6c>)
 8002330:	f002 f852 	bl	80043d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002334:	bf00      	nop
 8002336:	3720      	adds	r7, #32
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40021000 	.word	0x40021000
 8002344:	48001000 	.word	0x48001000

08002348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b09a      	sub	sp, #104	; 0x68
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002360:	f107 0310 	add.w	r3, r7, #16
 8002364:	2244      	movs	r2, #68	; 0x44
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f007 f9f6 	bl	800975a <memset>
  if(huart->Instance==USART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a22      	ldr	r2, [pc, #136]	; (80023fc <HAL_UART_MspInit+0xb4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d13d      	bne.n	80023f4 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002378:	2301      	movs	r3, #1
 800237a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fe75 	bl	8006074 <HAL_RCCEx_PeriphCLKConfig>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002390:	f7ff fc56 	bl	8001c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <HAL_UART_MspInit+0xb8>)
 8002396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002398:	4a19      	ldr	r2, [pc, #100]	; (8002400 <HAL_UART_MspInit+0xb8>)
 800239a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239e:	6613      	str	r3, [r2, #96]	; 0x60
 80023a0:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_UART_MspInit+0xb8>)
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_UART_MspInit+0xb8>)
 80023ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b0:	4a13      	ldr	r2, [pc, #76]	; (8002400 <HAL_UART_MspInit+0xb8>)
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_UART_MspInit+0xb8>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023c4:	2330      	movs	r3, #48	; 0x30
 80023c6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023d4:	2307      	movs	r3, #7
 80023d6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023dc:	4619      	mov	r1, r3
 80023de:	4809      	ldr	r0, [pc, #36]	; (8002404 <HAL_UART_MspInit+0xbc>)
 80023e0:	f001 fffa 	bl	80043d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2100      	movs	r1, #0
 80023e8:	2025      	movs	r0, #37	; 0x25
 80023ea:	f001 fd36 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ee:	2025      	movs	r0, #37	; 0x25
 80023f0:	f001 fd4d 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023f4:	bf00      	nop
 80023f6:	3768      	adds	r7, #104	; 0x68
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40013800 	.word	0x40013800
 8002400:	40021000 	.word	0x40021000
 8002404:	48000800 	.word	0x48000800

08002408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800240c:	e7fe      	b.n	800240c <NMI_Handler+0x4>

0800240e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <HardFault_Handler+0x4>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <MemManage_Handler+0x4>

0800241a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241e:	e7fe      	b.n	800241e <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <UsageFault_Handler+0x4>

08002426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002454:	f000 f96e 	bl	8002734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}

0800245c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002460:	2004      	movs	r0, #4
 8002462:	f002 f96b 	bl	800473c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}

0800246a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800246e:	2008      	movs	r0, #8
 8002470:	f002 f964 	bl	800473c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <USART1_IRQHandler+0x10>)
 800247e:	f005 fa5f 	bl	8007940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000040c 	.word	0x2000040c

0800248c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return 1;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_kill>:

int _kill(int pid, int sig)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024a6:	f007 f9ab 	bl	8009800 <__errno>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2216      	movs	r2, #22
 80024ae:	601a      	str	r2, [r3, #0]
  return -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_exit>:

void _exit (int status)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ffe7 	bl	800249c <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ce:	e7fe      	b.n	80024ce <_exit+0x12>

080024d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e00a      	b.n	80024f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024e2:	f3af 8000 	nop.w
 80024e6:	4601      	mov	r1, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	60ba      	str	r2, [r7, #8]
 80024ee:	b2ca      	uxtb	r2, r1
 80024f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	dbf0      	blt.n	80024e2 <_read+0x12>
  }

  return len;
 8002500:	687b      	ldr	r3, [r7, #4]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e009      	b.n	8002530 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	60ba      	str	r2, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fce5 	bl	8000ef4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf1      	blt.n	800251c <_write+0x12>
  }
  return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_close>:

int _close(int file)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256a:	605a      	str	r2, [r3, #4]
  return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_isatty>:

int _isatty(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f007 f910 	bl	8009800 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20008000 	.word	0x20008000
 800260c:	00000400 	.word	0x00000400
 8002610:	200004a0 	.word	0x200004a0
 8002614:	200005f8 	.word	0x200005f8

08002618 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800263c:	480d      	ldr	r0, [pc, #52]	; (8002674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800263e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002640:	480d      	ldr	r0, [pc, #52]	; (8002678 <LoopForever+0x6>)
  ldr r1, =_edata
 8002642:	490e      	ldr	r1, [pc, #56]	; (800267c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002644:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <LoopForever+0xe>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002658:	4c0b      	ldr	r4, [pc, #44]	; (8002688 <LoopForever+0x16>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002666:	f7ff ffd7 	bl	8002618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266a:	f007 f8cf 	bl	800980c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800266e:	f7fe fd91 	bl	8001194 <main>

08002672 <LoopForever>:

LoopForever:
    b LoopForever
 8002672:	e7fe      	b.n	8002672 <LoopForever>
  ldr   r0, =_estack
 8002674:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002680:	0800bdcc 	.word	0x0800bdcc
  ldr r2, =_sbss
 8002684:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002688:	200005f4 	.word	0x200005f4

0800268c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC1_2_IRQHandler>

0800268e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f001 fbd3 	bl	8003e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800269e:	200f      	movs	r0, #15
 80026a0:	f000 f80e 	bl	80026c0 <HAL_InitTick>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	71fb      	strb	r3, [r7, #7]
 80026ae:	e001      	b.n	80026b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026b0:	f7ff fc4a 	bl	8001f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026b4:	79fb      	ldrb	r3, [r7, #7]

}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_InitTick+0x68>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d022      	beq.n	800271a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_InitTick+0x6c>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_InitTick+0x68>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f001 fbde 	bl	8003eaa <HAL_SYSTICK_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10f      	bne.n	8002714 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b0f      	cmp	r3, #15
 80026f8:	d809      	bhi.n	800270e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026fa:	2200      	movs	r2, #0
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002702:	f001 fbaa 	bl	8003e5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_InitTick+0x70>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e007      	b.n	800271e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	e004      	b.n	800271e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e001      	b.n	800271e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000010 	.word	0x20000010
 800272c:	20000008 	.word	0x20000008
 8002730:	2000000c 	.word	0x2000000c

08002734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_IncTick+0x1c>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_IncTick+0x20>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4413      	add	r3, r2
 8002742:	4a03      	ldr	r2, [pc, #12]	; (8002750 <HAL_IncTick+0x1c>)
 8002744:	6013      	str	r3, [r2, #0]
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	200004a4 	.word	0x200004a4
 8002754:	20000010 	.word	0x20000010

08002758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return uwTick;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_GetTick+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	200004a4 	.word	0x200004a4

08002770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff ffee 	bl	8002758 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d004      	beq.n	8002794 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_Delay+0x40>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002794:	bf00      	nop
 8002796:	f7ff ffdf 	bl	8002758 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d8f7      	bhi.n	8002796 <HAL_Delay+0x26>
  {
  }
}
 80027a6:	bf00      	nop
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000010 	.word	0x20000010

080027b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3360      	adds	r3, #96	; 0x60
 800282e:	461a      	mov	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <LL_ADC_SetOffset+0x44>)
 800283e:	4013      	ands	r3, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	4313      	orrs	r3, r2
 800284c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	03fff000 	.word	0x03fff000

08002864 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3360      	adds	r3, #96	; 0x60
 8002872:	461a      	mov	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3360      	adds	r3, #96	; 0x60
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b087      	sub	sp, #28
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3360      	adds	r3, #96	; 0x60
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3360      	adds	r3, #96	; 0x60
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	431a      	orrs	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	615a      	str	r2, [r3, #20]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800297e:	b480      	push	{r7}
 8002980:	b087      	sub	sp, #28
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3330      	adds	r3, #48	; 0x30
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	4413      	add	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f003 031f 	and.w	r3, r3, #31
 80029a8:	211f      	movs	r1, #31
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	401a      	ands	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0e9b      	lsrs	r3, r3, #26
 80029b6:	f003 011f 	and.w	r1, r3, #31
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	f003 031f 	and.w	r3, r3, #31
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	431a      	orrs	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	3314      	adds	r3, #20
 80029e6:	461a      	mov	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	0e5b      	lsrs	r3, r3, #25
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	4413      	add	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	0d1b      	lsrs	r3, r3, #20
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2107      	movs	r1, #7
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	0d1b      	lsrs	r3, r3, #20
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a20:	bf00      	nop
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a0f      	ldr	r2, [pc, #60]	; (8002a78 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10a      	bne.n	8002a56 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002a54:	e00a      	b.n	8002a6c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a62:	43db      	mvns	r3, r3
 8002a64:	401a      	ands	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	407f0000 	.word	0x407f0000

08002a7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 031f 	and.w	r3, r3, #31
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6093      	str	r3, [r2, #8]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b3c:	d101      	bne.n	8002b42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b64:	f043 0201 	orr.w	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <LL_ADC_IsEnabled+0x18>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <LL_ADC_IsEnabled+0x1a>
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bb2:	f043 0204 	orr.w	r2, r3, #4
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d101      	bne.n	8002bde <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d101      	bne.n	8002c04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e177      	b.n	8002f1e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff f9a7 	bl	8001f90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff3f 	bl	8002ad8 <LL_ADC_IsDeepPowerDownEnabled>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff25 	bl	8002ab4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff ff5a 	bl	8002b28 <LL_ADC_IsInternalRegulatorEnabled>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d115      	bne.n	8002ca6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff3e 	bl	8002b00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c84:	4b9c      	ldr	r3, [pc, #624]	; (8002ef8 <HAL_ADC_Init+0x2e4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	4a9c      	ldr	r2, [pc, #624]	; (8002efc <HAL_ADC_Init+0x2e8>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	3301      	adds	r3, #1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c98:	e002      	b.n	8002ca0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f9      	bne.n	8002c9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff3c 	bl	8002b28 <LL_ADC_IsInternalRegulatorEnabled>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10d      	bne.n	8002cd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	f043 0210 	orr.w	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff75 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 8002cdc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 8110 	bne.w	8002f0c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 810c 	bne.w	8002f0c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002cfc:	f043 0202 	orr.w	r2, r3, #2
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff35 	bl	8002b78 <LL_ADC_IsEnabled>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d111      	bne.n	8002d38 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002d18:	f7ff ff2e 	bl	8002b78 <LL_ADC_IsEnabled>
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	4878      	ldr	r0, [pc, #480]	; (8002f00 <HAL_ADC_Init+0x2ec>)
 8002d20:	f7ff ff2a 	bl	8002b78 <LL_ADC_IsEnabled>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4323      	orrs	r3, r4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4619      	mov	r1, r3
 8002d32:	4874      	ldr	r0, [pc, #464]	; (8002f04 <HAL_ADC_Init+0x2f0>)
 8002d34:	f7ff fd3e 	bl	80027b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7f5b      	ldrb	r3, [r3, #29]
 8002d3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d42:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d48:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d4e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d56:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d106      	bne.n	8002d74 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	045b      	lsls	r3, r3, #17
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	4b5c      	ldr	r3, [pc, #368]	; (8002f08 <HAL_ADC_Init+0x2f4>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	69b9      	ldr	r1, [r7, #24]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff01 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 8002dc4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ff0e 	bl	8002bec <LL_ADC_INJ_IsConversionOngoing>
 8002dd0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d16d      	bne.n	8002eb4 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d16a      	bne.n	8002eb4 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002de2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dfa:	f023 0302 	bic.w	r3, r3, #2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	69b9      	ldr	r1, [r7, #24]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d017      	beq.n	8002e40 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e28:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6911      	ldr	r1, [r2, #16]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6812      	ldr	r2, [r2, #0]
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002e3e:	e013      	b.n	8002e68 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e64:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d118      	bne.n	8002ea4 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e7c:	f023 0304 	bic.w	r3, r3, #4
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e88:	4311      	orrs	r1, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e94:	430a      	orrs	r2, r1
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	611a      	str	r2, [r3, #16]
 8002ea2:	e007      	b.n	8002eb4 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10c      	bne.n	8002ed6 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f023 010f 	bic.w	r1, r3, #15
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	1e5a      	subs	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed4:	e007      	b.n	8002ee6 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 020f 	bic.w	r2, r2, #15
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	f023 0303 	bic.w	r3, r3, #3
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ef6:	e011      	b.n	8002f1c <HAL_ADC_Init+0x308>
 8002ef8:	20000008 	.word	0x20000008
 8002efc:	053e2d63 	.word	0x053e2d63
 8002f00:	50000100 	.word	0x50000100
 8002f04:	50000300 	.word	0x50000300
 8002f08:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	f043 0210 	orr.w	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd90      	pop	{r4, r7, pc}
 8002f26:	bf00      	nop

08002f28 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f30:	4859      	ldr	r0, [pc, #356]	; (8003098 <HAL_ADC_Start+0x170>)
 8002f32:	f7ff fda3 	bl	8002a7c <LL_ADC_GetMultimode>
 8002f36:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fe42 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f040 809f 	bne.w	8003088 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_Start+0x30>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e09a      	b.n	800308e <HAL_ADC_Start+0x166>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fd73 	bl	8003a4c <ADC_Enable>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 8086 	bne.w	800307e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a44      	ldr	r2, [pc, #272]	; (800309c <HAL_ADC_Start+0x174>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d002      	beq.n	8002f96 <HAL_ADC_Start+0x6e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	e001      	b.n	8002f9a <HAL_ADC_Start+0x72>
 8002f96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d002      	beq.n	8002fa8 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc0:	d106      	bne.n	8002fd0 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc6:	f023 0206 	bic.w	r2, r3, #6
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	661a      	str	r2, [r3, #96]	; 0x60
 8002fce:	e002      	b.n	8002fd6 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	221c      	movs	r2, #28
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	; (800309c <HAL_ADC_Start+0x174>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d002      	beq.n	8002ff6 <HAL_ADC_Start+0xce>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e001      	b.n	8002ffa <HAL_ADC_Start+0xd2>
 8002ff6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d008      	beq.n	8003014 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d002      	beq.n	8003014 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b09      	cmp	r3, #9
 8003012:	d114      	bne.n	800303e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800302a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fdb1 	bl	8002b9e <LL_ADC_REG_StartConversion>
 800303c:	e026      	b.n	800308c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a13      	ldr	r2, [pc, #76]	; (800309c <HAL_ADC_Start+0x174>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d002      	beq.n	800305a <HAL_ADC_Start+0x132>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	e001      	b.n	800305e <HAL_ADC_Start+0x136>
 800305a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800305e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00f      	beq.n	800308c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003074:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	65da      	str	r2, [r3, #92]	; 0x5c
 800307c:	e006      	b.n	800308c <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003086:	e001      	b.n	800308c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003088:	2302      	movs	r3, #2
 800308a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800308c:	7dfb      	ldrb	r3, [r7, #23]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	50000300 	.word	0x50000300
 800309c:	50000100 	.word	0x50000100

080030a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030aa:	4867      	ldr	r0, [pc, #412]	; (8003248 <HAL_ADC_PollForConversion+0x1a8>)
 80030ac:	f7ff fce6 	bl	8002a7c <LL_ADC_GetMultimode>
 80030b0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d102      	bne.n	80030c0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80030ba:	2308      	movs	r3, #8
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	e02a      	b.n	8003116 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d002      	beq.n	80030d2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b09      	cmp	r3, #9
 80030d0:	d111      	bne.n	80030f6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0a6      	b.n	800323e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80030f0:	2304      	movs	r3, #4
 80030f2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80030f4:	e00f      	b.n	8003116 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030f6:	4854      	ldr	r0, [pc, #336]	; (8003248 <HAL_ADC_PollForConversion+0x1a8>)
 80030f8:	f7ff fcce 	bl	8002a98 <LL_ADC_GetMultiDMATransfer>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e095      	b.n	800323e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003112:	2304      	movs	r3, #4
 8003114:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003116:	f7ff fb1f 	bl	8002758 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800311c:	e021      	b.n	8003162 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d01d      	beq.n	8003162 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003126:	f7ff fb17 	bl	8002758 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d302      	bcc.n	800313c <HAL_ADC_PollForConversion+0x9c>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d112      	bne.n	8003162 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	f043 0204 	orr.w	r2, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e06d      	b.n	800323e <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0d6      	beq.n	800311e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fbe9 	bl	8002958 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01c      	beq.n	80031c6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7f5b      	ldrb	r3, [r3, #29]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d118      	bne.n	80031c6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d111      	bne.n	80031c6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d105      	bne.n	80031c6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	f043 0201 	orr.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a20      	ldr	r2, [pc, #128]	; (800324c <HAL_ADC_PollForConversion+0x1ac>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d002      	beq.n	80031d6 <HAL_ADC_PollForConversion+0x136>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	e001      	b.n	80031da <HAL_ADC_PollForConversion+0x13a>
 80031d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	4293      	cmp	r3, r2
 80031e0:	d008      	beq.n	80031f4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d002      	beq.n	80031f4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b09      	cmp	r3, #9
 80031f2:	d104      	bne.n	80031fe <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	e00d      	b.n	800321a <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <HAL_ADC_PollForConversion+0x1ac>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d002      	beq.n	800320e <HAL_ADC_PollForConversion+0x16e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	e001      	b.n	8003212 <HAL_ADC_PollForConversion+0x172>
 800320e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003212:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d104      	bne.n	800322a <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2208      	movs	r2, #8
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	e008      	b.n	800323c <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d103      	bne.n	800323c <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	220c      	movs	r2, #12
 800323a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	50000300 	.word	0x50000300
 800324c:	50000100 	.word	0x50000100

08003250 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b0b6      	sub	sp, #216	; 0xd8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x22>
 800328a:	2302      	movs	r3, #2
 800328c:	e3c8      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x7b4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fc93 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 83ad 	bne.w	8003a02 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	f7ff fb62 	bl	800297e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fc81 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 80032c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fc8d 	bl	8002bec <LL_ADC_INJ_IsConversionOngoing>
 80032d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 81d9 	bne.w	8003692 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 81d4 	bne.w	8003692 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032f2:	d10f      	bne.n	8003314 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	4619      	mov	r1, r3
 8003300:	f7ff fb69 	bl	80029d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fb10 	bl	8002932 <LL_ADC_SetSamplingTimeCommonConfig>
 8003312:	e00e      	b.n	8003332 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	461a      	mov	r2, r3
 8003322:	f7ff fb58 	bl	80029d6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fb00 	bl	8002932 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d022      	beq.n	800339a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6919      	ldr	r1, [r3, #16]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003364:	f7ff fa5a 	bl	800281c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6919      	ldr	r1, [r3, #16]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	461a      	mov	r2, r3
 8003376:	f7ff faa6 	bl	80028c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6919      	ldr	r1, [r3, #16]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	7f1b      	ldrb	r3, [r3, #28]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d102      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x124>
 800338a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800338e:	e000      	b.n	8003392 <HAL_ADC_ConfigChannel+0x126>
 8003390:	2300      	movs	r3, #0
 8003392:	461a      	mov	r2, r3
 8003394:	f7ff fab2 	bl	80028fc <LL_ADC_SetOffsetSaturation>
 8003398:	e17b      	b.n	8003692 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fa5f 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x15a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fa54 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	0e9b      	lsrs	r3, r3, #26
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	e01e      	b.n	8003404 <HAL_ADC_ConfigChannel+0x198>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fa49 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80033f4:	2320      	movs	r3, #32
 80033f6:	e004      	b.n	8003402 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80033f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <HAL_ADC_ConfigChannel+0x1b0>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0e9b      	lsrs	r3, r3, #26
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	e018      	b.n	800344e <HAL_ADC_ConfigChannel+0x1e2>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003438:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003440:	2320      	movs	r3, #32
 8003442:	e004      	b.n	800344e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003444:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800344e:	429a      	cmp	r2, r3
 8003450:	d106      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fa18 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff f9fc 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800346c:	4603      	mov	r3, r0
 800346e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <HAL_ADC_ConfigChannel+0x220>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f9f1 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003482:	4603      	mov	r3, r0
 8003484:	0e9b      	lsrs	r3, r3, #26
 8003486:	f003 021f 	and.w	r2, r3, #31
 800348a:	e01e      	b.n	80034ca <HAL_ADC_ConfigChannel+0x25e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2101      	movs	r1, #1
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f9e6 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003498:	4603      	mov	r3, r0
 800349a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034a2:	fa93 f3a3 	rbit	r3, r3
 80034a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80034aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80034b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80034ba:	2320      	movs	r3, #32
 80034bc:	e004      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80034be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x276>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0e9b      	lsrs	r3, r3, #26
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	e018      	b.n	8003514 <HAL_ADC_ConfigChannel+0x2a8>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80034f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80034fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003506:	2320      	movs	r3, #32
 8003508:	e004      	b.n	8003514 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800350a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800350e:	fab3 f383 	clz	r3, r3
 8003512:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003514:	429a      	cmp	r2, r3
 8003516:	d106      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2200      	movs	r2, #0
 800351e:	2101      	movs	r1, #1
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff f9b5 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff f999 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003532:	4603      	mov	r3, r0
 8003534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x2e6>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f98e 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003548:	4603      	mov	r3, r0
 800354a:	0e9b      	lsrs	r3, r3, #26
 800354c:	f003 021f 	and.w	r2, r3, #31
 8003550:	e01e      	b.n	8003590 <HAL_ADC_ConfigChannel+0x324>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff f983 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800355e:	4603      	mov	r3, r0
 8003560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003574:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003580:	2320      	movs	r3, #32
 8003582:	e004      	b.n	800358e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003584:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x33c>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	e016      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x36a>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80035ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80035c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80035c8:	2320      	movs	r3, #32
 80035ca:	e004      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80035cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d106      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f954 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2103      	movs	r1, #3
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f938 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x3a8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2103      	movs	r1, #3
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff f92d 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800360a:	4603      	mov	r3, r0
 800360c:	0e9b      	lsrs	r3, r3, #26
 800360e:	f003 021f 	and.w	r2, r3, #31
 8003612:	e017      	b.n	8003644 <HAL_ADC_ConfigChannel+0x3d8>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2103      	movs	r1, #3
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f922 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003620:	4603      	mov	r3, r0
 8003622:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800362c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800362e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003636:	2320      	movs	r3, #32
 8003638:	e003      	b.n	8003642 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800363a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <HAL_ADC_ConfigChannel+0x3f0>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0e9b      	lsrs	r3, r3, #26
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	e011      	b.n	8003680 <HAL_ADC_ConfigChannel+0x414>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800366a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800366c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800366e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003674:	2320      	movs	r3, #32
 8003676:	e003      	b.n	8003680 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003680:	429a      	cmp	r2, r3
 8003682:	d106      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2200      	movs	r2, #0
 800368a:	2103      	movs	r1, #3
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff f8ff 	bl	8002890 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fa6e 	bl	8002b78 <LL_ADC_IsEnabled>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 8140 	bne.w	8003924 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	6819      	ldr	r1, [r3, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	461a      	mov	r2, r3
 80036b2:	f7ff f9bb 	bl	8002a2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	4a8f      	ldr	r2, [pc, #572]	; (80038f8 <HAL_ADC_ConfigChannel+0x68c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	f040 8131 	bne.w	8003924 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10b      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x47e>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	0e9b      	lsrs	r3, r3, #26
 80036d8:	3301      	adds	r3, #1
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2b09      	cmp	r3, #9
 80036e0:	bf94      	ite	ls
 80036e2:	2301      	movls	r3, #1
 80036e4:	2300      	movhi	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	e019      	b.n	800371e <HAL_ADC_ConfigChannel+0x4b2>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80036f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036fa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80036fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e003      	b.n	800370e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	2b09      	cmp	r3, #9
 8003716:	bf94      	ite	ls
 8003718:	2301      	movls	r3, #1
 800371a:	2300      	movhi	r3, #0
 800371c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800371e:	2b00      	cmp	r3, #0
 8003720:	d079      	beq.n	8003816 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <HAL_ADC_ConfigChannel+0x4d2>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	0e9b      	lsrs	r3, r3, #26
 8003734:	3301      	adds	r3, #1
 8003736:	069b      	lsls	r3, r3, #26
 8003738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800373c:	e015      	b.n	800376a <HAL_ADC_ConfigChannel+0x4fe>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800374c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003756:	2320      	movs	r3, #32
 8003758:	e003      	b.n	8003762 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800375a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800375c:	fab3 f383 	clz	r3, r3
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3301      	adds	r3, #1
 8003764:	069b      	lsls	r3, r3, #26
 8003766:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_ADC_ConfigChannel+0x51e>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	0e9b      	lsrs	r3, r3, #26
 800377c:	3301      	adds	r3, #1
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2101      	movs	r1, #1
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	e017      	b.n	80037ba <HAL_ADC_ConfigChannel+0x54e>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800379c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e003      	b.n	80037ae <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80037a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	ea42 0103 	orr.w	r1, r2, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x574>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	0e9b      	lsrs	r3, r3, #26
 80037d0:	3301      	adds	r3, #1
 80037d2:	f003 021f 	and.w	r2, r3, #31
 80037d6:	4613      	mov	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4413      	add	r3, r2
 80037dc:	051b      	lsls	r3, r3, #20
 80037de:	e018      	b.n	8003812 <HAL_ADC_ConfigChannel+0x5a6>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80037f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80037f8:	2320      	movs	r3, #32
 80037fa:	e003      	b.n	8003804 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80037fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	3301      	adds	r3, #1
 8003806:	f003 021f 	and.w	r2, r3, #31
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003812:	430b      	orrs	r3, r1
 8003814:	e081      	b.n	800391a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x5c6>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	3301      	adds	r3, #1
 800382a:	069b      	lsls	r3, r3, #26
 800382c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003830:	e015      	b.n	800385e <HAL_ADC_ConfigChannel+0x5f2>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800384a:	2320      	movs	r3, #32
 800384c:	e003      	b.n	8003856 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	fab3 f383 	clz	r3, r3
 8003854:	b2db      	uxtb	r3, r3
 8003856:	3301      	adds	r3, #1
 8003858:	069b      	lsls	r3, r3, #26
 800385a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_ADC_ConfigChannel+0x612>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	0e9b      	lsrs	r3, r3, #26
 8003870:	3301      	adds	r3, #1
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2101      	movs	r1, #1
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	e017      	b.n	80038ae <HAL_ADC_ConfigChannel+0x642>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	61fb      	str	r3, [r7, #28]
  return result;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003896:	2320      	movs	r3, #32
 8003898:	e003      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	2101      	movs	r1, #1
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	ea42 0103 	orr.w	r1, r2, r3
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <HAL_ADC_ConfigChannel+0x66e>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	0e9b      	lsrs	r3, r3, #26
 80038c4:	3301      	adds	r3, #1
 80038c6:	f003 021f 	and.w	r2, r3, #31
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	3b1e      	subs	r3, #30
 80038d2:	051b      	lsls	r3, r3, #20
 80038d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038d8:	e01e      	b.n	8003918 <HAL_ADC_ConfigChannel+0x6ac>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	613b      	str	r3, [r7, #16]
  return result;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80038f2:	2320      	movs	r3, #32
 80038f4:	e006      	b.n	8003904 <HAL_ADC_ConfigChannel+0x698>
 80038f6:	bf00      	nop
 80038f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	3301      	adds	r3, #1
 8003906:	f003 021f 	and.w	r2, r3, #31
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	3b1e      	subs	r3, #30
 8003912:	051b      	lsls	r3, r3, #20
 8003914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003918:	430b      	orrs	r3, r1
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	6892      	ldr	r2, [r2, #8]
 800391e:	4619      	mov	r1, r3
 8003920:	f7ff f859 	bl	80029d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b3f      	ldr	r3, [pc, #252]	; (8003a28 <HAL_ADC_ConfigChannel+0x7bc>)
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d071      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003930:	483e      	ldr	r0, [pc, #248]	; (8003a2c <HAL_ADC_ConfigChannel+0x7c0>)
 8003932:	f7fe ff65 	bl	8002800 <LL_ADC_GetCommonPathInternalCh>
 8003936:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a3c      	ldr	r2, [pc, #240]	; (8003a30 <HAL_ADC_ConfigChannel+0x7c4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_ADC_ConfigChannel+0x6e2>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a3a      	ldr	r2, [pc, #232]	; (8003a34 <HAL_ADC_ConfigChannel+0x7c8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d127      	bne.n	800399e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800394e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d121      	bne.n	800399e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003962:	d157      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003968:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800396c:	4619      	mov	r1, r3
 800396e:	482f      	ldr	r0, [pc, #188]	; (8003a2c <HAL_ADC_ConfigChannel+0x7c0>)
 8003970:	f7fe ff33 	bl	80027da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003974:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <HAL_ADC_ConfigChannel+0x7cc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	4a30      	ldr	r2, [pc, #192]	; (8003a3c <HAL_ADC_ConfigChannel+0x7d0>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800398e:	e002      	b.n	8003996 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b01      	subs	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f9      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800399c:	e03a      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <HAL_ADC_ConfigChannel+0x7d4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d113      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x764>
 80039a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10d      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <HAL_ADC_ConfigChannel+0x7d8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d02a      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c6:	4619      	mov	r1, r3
 80039c8:	4818      	ldr	r0, [pc, #96]	; (8003a2c <HAL_ADC_ConfigChannel+0x7c0>)
 80039ca:	f7fe ff06 	bl	80027da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039ce:	e021      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <HAL_ADC_ConfigChannel+0x7dc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d11c      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d116      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_ADC_ConfigChannel+0x7d8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d011      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039f8:	4619      	mov	r1, r3
 80039fa:	480c      	ldr	r0, [pc, #48]	; (8003a2c <HAL_ADC_ConfigChannel+0x7c0>)
 80039fc:	f7fe feed 	bl	80027da <LL_ADC_SetCommonPathInternalCh>
 8003a00:	e008      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	f043 0220 	orr.w	r2, r3, #32
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a1c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	37d8      	adds	r7, #216	; 0xd8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	80080000 	.word	0x80080000
 8003a2c:	50000300 	.word	0x50000300
 8003a30:	c3210000 	.word	0xc3210000
 8003a34:	90c00010 	.word	0x90c00010
 8003a38:	20000008 	.word	0x20000008
 8003a3c:	053e2d63 	.word	0x053e2d63
 8003a40:	c7520000 	.word	0xc7520000
 8003a44:	50000100 	.word	0x50000100
 8003a48:	cb840000 	.word	0xcb840000

08003a4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff f88d 	bl	8002b78 <LL_ADC_IsEnabled>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d14d      	bne.n	8003b00 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <ADC_Enable+0xc0>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	f043 0210 	orr.w	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e039      	b.n	8003b02 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff f85c 	bl	8002b50 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a98:	f7fe fe5e 	bl	8002758 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a9e:	e028      	b.n	8003af2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff f867 	bl	8002b78 <LL_ADC_IsEnabled>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d104      	bne.n	8003aba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f84b 	bl	8002b50 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003aba:	f7fe fe4d 	bl	8002758 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d914      	bls.n	8003af2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d00d      	beq.n	8003af2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	f043 0210 	orr.w	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e007      	b.n	8003b02 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d1cf      	bne.n	8003aa0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	8000003f 	.word	0x8000003f

08003b10 <LL_ADC_IsEnabled>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <LL_ADC_IsEnabled+0x18>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <LL_ADC_IsEnabled+0x1a>
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d101      	bne.n	8003b4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b0a1      	sub	sp, #132	; 0x84
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e08b      	b.n	8003c92 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003b82:	2300      	movs	r3, #0
 8003b84:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003b86:	2300      	movs	r3, #0
 8003b88:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b92:	d102      	bne.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b94:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	e001      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e06a      	b.n	8003c92 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ffb9 	bl	8003b36 <LL_ADC_REG_IsConversionOngoing>
 8003bc4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ffb3 	bl	8003b36 <LL_ADC_REG_IsConversionOngoing>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d14c      	bne.n	8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d149      	bne.n	8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003bde:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d028      	beq.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bfa:	035b      	lsls	r3, r3, #13
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c08:	f7ff ff82 	bl	8003b10 <LL_ADC_IsEnabled>
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	4823      	ldr	r0, [pc, #140]	; (8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c10:	f7ff ff7e 	bl	8003b10 <LL_ADC_IsEnabled>
 8003c14:	4603      	mov	r3, r0
 8003c16:	4323      	orrs	r3, r4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d133      	bne.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c24:	f023 030f 	bic.w	r3, r3, #15
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	6811      	ldr	r1, [r2, #0]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	6892      	ldr	r2, [r2, #8]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	431a      	orrs	r2, r3
 8003c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c36:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c38:	e024      	b.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c44:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c46:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c4a:	f7ff ff61 	bl	8003b10 <LL_ADC_IsEnabled>
 8003c4e:	4604      	mov	r4, r0
 8003c50:	4812      	ldr	r0, [pc, #72]	; (8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003c52:	f7ff ff5d 	bl	8003b10 <LL_ADC_IsEnabled>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4323      	orrs	r3, r4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d112      	bne.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c66:	f023 030f 	bic.w	r3, r3, #15
 8003c6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c6c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c6e:	e009      	b.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c82:	e000      	b.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3784      	adds	r7, #132	; 0x84
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd90      	pop	{r4, r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	50000100 	.word	0x50000100
 8003ca0:	50000300 	.word	0x50000300

08003ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd6:	4a04      	ldr	r2, [pc, #16]	; (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	60d3      	str	r3, [r2, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 0307 	and.w	r3, r3, #7
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db0b      	blt.n	8003d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	4907      	ldr	r1, [pc, #28]	; (8003d40 <__NVIC_EnableIRQ+0x38>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2001      	movs	r0, #1
 8003d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000e100 	.word	0xe000e100

08003d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	db0a      	blt.n	8003d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	490c      	ldr	r1, [pc, #48]	; (8003d90 <__NVIC_SetPriority+0x4c>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	440b      	add	r3, r1
 8003d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d6c:	e00a      	b.n	8003d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4908      	ldr	r1, [pc, #32]	; (8003d94 <__NVIC_SetPriority+0x50>)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3b04      	subs	r3, #4
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	440b      	add	r3, r1
 8003d82:	761a      	strb	r2, [r3, #24]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000e100 	.word	0xe000e100
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f1c3 0307 	rsb	r3, r3, #7
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	bf28      	it	cs
 8003db6:	2304      	movcs	r3, #4
 8003db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d902      	bls.n	8003dc8 <NVIC_EncodePriority+0x30>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3b03      	subs	r3, #3
 8003dc6:	e000      	b.n	8003dca <NVIC_EncodePriority+0x32>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	401a      	ands	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de0:	f04f 31ff 	mov.w	r1, #4294967295
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	43d9      	mvns	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	4313      	orrs	r3, r2
         );
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3724      	adds	r7, #36	; 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e10:	d301      	bcc.n	8003e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00f      	b.n	8003e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e16:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <SysTick_Config+0x40>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e1e:	210f      	movs	r1, #15
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	f7ff ff8e 	bl	8003d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <SysTick_Config+0x40>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2e:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <SysTick_Config+0x40>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	e000e010 	.word	0xe000e010

08003e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff29 	bl	8003ca4 <__NVIC_SetPriorityGrouping>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	4603      	mov	r3, r0
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e68:	f7ff ff40 	bl	8003cec <__NVIC_GetPriorityGrouping>
 8003e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	6978      	ldr	r0, [r7, #20]
 8003e74:	f7ff ff90 	bl	8003d98 <NVIC_EncodePriority>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff5f 	bl	8003d44 <__NVIC_SetPriority>
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	4603      	mov	r3, r0
 8003e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff33 	bl	8003d08 <__NVIC_EnableIRQ>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ffa4 	bl	8003e00 <SysTick_Config>
 8003eb8:	4603      	mov	r3, r0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e014      	b.n	8003efe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	791b      	ldrb	r3, [r3, #4]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d105      	bne.n	8003eea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7fe f8a7 	bl	8002038 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	795b      	ldrb	r3, [r3, #5]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_DAC_ConfigChannel+0x18>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e192      	b.n	8004246 <HAL_DAC_ConfigChannel+0x33e>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d174      	bne.n	800401e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003f34:	f7fe fc10 	bl	8002758 <HAL_GetTick>
 8003f38:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d134      	bne.n	8003faa <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003f40:	e011      	b.n	8003f66 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003f42:	f7fe fc09 	bl	8002758 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d90a      	bls.n	8003f66 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f043 0208 	orr.w	r2, r3, #8
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2203      	movs	r2, #3
 8003f60:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e16f      	b.n	8004246 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e6      	bne.n	8003f42 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003f74:	2001      	movs	r0, #1
 8003f76:	f7fe fbfb 	bl	8002770 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
 8003f84:	e01e      	b.n	8003fc4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003f86:	f7fe fbe7 	bl	8002758 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d90a      	bls.n	8003faa <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f043 0208 	orr.w	r2, r3, #8
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e14d      	b.n	8004246 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	dbe8      	blt.n	8003f86 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	f7fe fbdb 	bl	8002770 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fc2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	ea02 0103 	and.w	r1, r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	21ff      	movs	r1, #255	; 0xff
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	ea02 0103 	and.w	r1, r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	409a      	lsls	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d11d      	bne.n	8004062 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	221f      	movs	r2, #31
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403e:	4013      	ands	r3, r2
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004056:	4313      	orrs	r3, r2
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2207      	movs	r2, #7
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43db      	mvns	r3, r3
 8004078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407a:	4013      	ands	r3, r2
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d102      	bne.n	800408c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004086:	2300      	movs	r3, #0
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	e00f      	b.n	80040ac <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d102      	bne.n	800409a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004094:	2301      	movs	r3, #1
 8004096:	623b      	str	r3, [r7, #32]
 8004098:	e008      	b.n	80040ac <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80040a2:	2301      	movs	r3, #1
 80040a4:	623b      	str	r3, [r7, #32]
 80040a6:	e001      	b.n	80040ac <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	6a3a      	ldr	r2, [r7, #32]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ce:	4013      	ands	r3, r2
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	791b      	ldrb	r3, [r3, #4]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d102      	bne.n	80040e0 <HAL_DAC_ConfigChannel+0x1d8>
 80040da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040de:	e000      	b.n	80040e2 <HAL_DAC_ConfigChannel+0x1da>
 80040e0:	2300      	movs	r3, #0
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	4013      	ands	r3, r2
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	795b      	ldrb	r3, [r3, #5]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d102      	bne.n	800410c <HAL_DAC_ConfigChannel+0x204>
 8004106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800410a:	e000      	b.n	800410e <HAL_DAC_ConfigChannel+0x206>
 800410c:	2300      	movs	r3, #0
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d114      	bne.n	800414e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004124:	f001 ff28 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8004128:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4a48      	ldr	r2, [pc, #288]	; (8004250 <HAL_DAC_ConfigChannel+0x348>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d904      	bls.n	800413c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	e00f      	b.n	800415c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4a45      	ldr	r2, [pc, #276]	; (8004254 <HAL_DAC_ConfigChannel+0x34c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d90a      	bls.n	800415a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
 800414c:	e006      	b.n	800415c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	4313      	orrs	r3, r2
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
 8004158:	e000      	b.n	800415c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800415a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	4313      	orrs	r3, r2
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6819      	ldr	r1, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43da      	mvns	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	400a      	ands	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f003 0310 	and.w	r3, r3, #16
 80041a2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	4013      	ands	r3, r2
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c6:	4313      	orrs	r3, r2
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6819      	ldr	r1, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	22c0      	movs	r2, #192	; 0xc0
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43da      	mvns	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	400a      	ands	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	089b      	lsrs	r3, r3, #2
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	f640 710f 	movw	r1, #3855	; 0xf0f
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	ea02 0103 	and.w	r1, r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	409a      	lsls	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3728      	adds	r7, #40	; 0x28
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	09896800 	.word	0x09896800
 8004254:	04c4b400 	.word	0x04c4b400

08004258 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d005      	beq.n	800427c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2204      	movs	r2, #4
 8004274:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e037      	b.n	80042ec <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 020e 	bic.w	r2, r2, #14
 800428a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004296:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800429a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	f003 021f 	and.w	r2, r3, #31
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2101      	movs	r1, #1
 80042ba:	fa01 f202 	lsl.w	r2, r1, r2
 80042be:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042c8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00c      	beq.n	80042ec <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042ea:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d00d      	beq.n	800433e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2204      	movs	r2, #4
 8004326:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	e047      	b.n	80043ce <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 020e 	bic.w	r2, r2, #14
 800434c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800436c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	f003 021f 	and.w	r2, r3, #31
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	2101      	movs	r1, #1
 800437c:	fa01 f202 	lsl.w	r2, r1, r2
 8004380:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800438a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00c      	beq.n	80043ae <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	4798      	blx	r3
    }
  }
  return status;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043e6:	e15a      	b.n	800469e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	2101      	movs	r1, #1
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 814c 	beq.w	8004698 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d005      	beq.n	8004418 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004414:	2b02      	cmp	r3, #2
 8004416:	d130      	bne.n	800447a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800444e:	2201      	movs	r2, #1
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43db      	mvns	r3, r3
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	f003 0201 	and.w	r2, r3, #1
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b03      	cmp	r3, #3
 8004484:	d017      	beq.n	80044b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	2203      	movs	r2, #3
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d123      	bne.n	800450a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	08da      	lsrs	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3208      	adds	r2, #8
 80044ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	220f      	movs	r2, #15
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4013      	ands	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	08da      	lsrs	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3208      	adds	r2, #8
 8004504:	6939      	ldr	r1, [r7, #16]
 8004506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	2203      	movs	r2, #3
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 0203 	and.w	r2, r3, #3
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80a6 	beq.w	8004698 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454c:	4b5b      	ldr	r3, [pc, #364]	; (80046bc <HAL_GPIO_Init+0x2e4>)
 800454e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004550:	4a5a      	ldr	r2, [pc, #360]	; (80046bc <HAL_GPIO_Init+0x2e4>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6613      	str	r3, [r2, #96]	; 0x60
 8004558:	4b58      	ldr	r3, [pc, #352]	; (80046bc <HAL_GPIO_Init+0x2e4>)
 800455a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004564:	4a56      	ldr	r2, [pc, #344]	; (80046c0 <HAL_GPIO_Init+0x2e8>)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	089b      	lsrs	r3, r3, #2
 800456a:	3302      	adds	r3, #2
 800456c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	220f      	movs	r2, #15
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	43db      	mvns	r3, r3
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4013      	ands	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800458e:	d01f      	beq.n	80045d0 <HAL_GPIO_Init+0x1f8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a4c      	ldr	r2, [pc, #304]	; (80046c4 <HAL_GPIO_Init+0x2ec>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d019      	beq.n	80045cc <HAL_GPIO_Init+0x1f4>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a4b      	ldr	r2, [pc, #300]	; (80046c8 <HAL_GPIO_Init+0x2f0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <HAL_GPIO_Init+0x1f0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a4a      	ldr	r2, [pc, #296]	; (80046cc <HAL_GPIO_Init+0x2f4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00d      	beq.n	80045c4 <HAL_GPIO_Init+0x1ec>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a49      	ldr	r2, [pc, #292]	; (80046d0 <HAL_GPIO_Init+0x2f8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d007      	beq.n	80045c0 <HAL_GPIO_Init+0x1e8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a48      	ldr	r2, [pc, #288]	; (80046d4 <HAL_GPIO_Init+0x2fc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d101      	bne.n	80045bc <HAL_GPIO_Init+0x1e4>
 80045b8:	2305      	movs	r3, #5
 80045ba:	e00a      	b.n	80045d2 <HAL_GPIO_Init+0x1fa>
 80045bc:	2306      	movs	r3, #6
 80045be:	e008      	b.n	80045d2 <HAL_GPIO_Init+0x1fa>
 80045c0:	2304      	movs	r3, #4
 80045c2:	e006      	b.n	80045d2 <HAL_GPIO_Init+0x1fa>
 80045c4:	2303      	movs	r3, #3
 80045c6:	e004      	b.n	80045d2 <HAL_GPIO_Init+0x1fa>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e002      	b.n	80045d2 <HAL_GPIO_Init+0x1fa>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_GPIO_Init+0x1fa>
 80045d0:	2300      	movs	r3, #0
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	f002 0203 	and.w	r2, r2, #3
 80045d8:	0092      	lsls	r2, r2, #2
 80045da:	4093      	lsls	r3, r2
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045e2:	4937      	ldr	r1, [pc, #220]	; (80046c0 <HAL_GPIO_Init+0x2e8>)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	3302      	adds	r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045f0:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <HAL_GPIO_Init+0x300>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004614:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <HAL_GPIO_Init+0x300>)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800461a:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <HAL_GPIO_Init+0x300>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800463e:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <HAL_GPIO_Init+0x300>)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004644:	4b24      	ldr	r3, [pc, #144]	; (80046d8 <HAL_GPIO_Init+0x300>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	43db      	mvns	r3, r3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004668:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <HAL_GPIO_Init+0x300>)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800466e:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_GPIO_Init+0x300>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	43db      	mvns	r3, r3
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004692:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <HAL_GPIO_Init+0x300>)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	3301      	adds	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f47f ae9d 	bne.w	80043e8 <HAL_GPIO_Init+0x10>
  }
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40010000 	.word	0x40010000
 80046c4:	48000400 	.word	0x48000400
 80046c8:	48000800 	.word	0x48000800
 80046cc:	48000c00 	.word	0x48000c00
 80046d0:	48001000 	.word	0x48001000
 80046d4:	48001400 	.word	0x48001400
 80046d8:	40010400 	.word	0x40010400

080046dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	887b      	ldrh	r3, [r7, #2]
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	73fb      	strb	r3, [r7, #15]
 80046f8:	e001      	b.n	80046fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	807b      	strh	r3, [r7, #2]
 8004718:	4613      	mov	r3, r2
 800471a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800471c:	787b      	ldrb	r3, [r7, #1]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004722:	887a      	ldrh	r2, [r7, #2]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004728:	e002      	b.n	8004730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800472a:	887a      	ldrh	r2, [r7, #2]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	4013      	ands	r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d006      	beq.n	8004760 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004752:	4a05      	ldr	r2, [pc, #20]	; (8004768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 f806 	bl	800476c <HAL_GPIO_EXTI_Callback>
  }
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40010400 	.word	0x40010400

0800476c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e081      	b.n	8004898 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7fd fc83 	bl	80020b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2224      	movs	r2, #36	; 0x24
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d107      	bne.n	80047fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f8:	609a      	str	r2, [r3, #8]
 80047fa:	e006      	b.n	800480a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004808:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b02      	cmp	r3, #2
 8004810:	d104      	bne.n	800481c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800481a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800483e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69d9      	ldr	r1, [r3, #28]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1a      	ldr	r2, [r3, #32]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	461a      	mov	r2, r3
 80048ac:	460b      	mov	r3, r1
 80048ae:	817b      	strh	r3, [r7, #10]
 80048b0:	4613      	mov	r3, r2
 80048b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b20      	cmp	r3, #32
 80048be:	f040 80da 	bne.w	8004a76 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_I2C_Master_Transmit+0x30>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e0d3      	b.n	8004a78 <HAL_I2C_Master_Transmit+0x1d8>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048d8:	f7fd ff3e 	bl	8002758 <HAL_GetTick>
 80048dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	2319      	movs	r3, #25
 80048e4:	2201      	movs	r2, #1
 80048e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 faed 	bl	8004eca <I2C_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0be      	b.n	8004a78 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2221      	movs	r2, #33	; 0x21
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2210      	movs	r2, #16
 8004906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	893a      	ldrh	r2, [r7, #8]
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	2bff      	cmp	r3, #255	; 0xff
 800492a:	d90e      	bls.n	800494a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	22ff      	movs	r2, #255	; 0xff
 8004930:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004936:	b2da      	uxtb	r2, r3
 8004938:	8979      	ldrh	r1, [r7, #10]
 800493a:	4b51      	ldr	r3, [pc, #324]	; (8004a80 <HAL_I2C_Master_Transmit+0x1e0>)
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fce4 	bl	8005310 <I2C_TransferConfig>
 8004948:	e06c      	b.n	8004a24 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	b2da      	uxtb	r2, r3
 800495a:	8979      	ldrh	r1, [r7, #10]
 800495c:	4b48      	ldr	r3, [pc, #288]	; (8004a80 <HAL_I2C_Master_Transmit+0x1e0>)
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fcd3 	bl	8005310 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800496a:	e05b      	b.n	8004a24 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	6a39      	ldr	r1, [r7, #32]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 faea 	bl	8004f4a <I2C_WaitOnTXISFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e07b      	b.n	8004a78 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d034      	beq.n	8004a24 <HAL_I2C_Master_Transmit+0x184>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d130      	bne.n	8004a24 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	; 0x80
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 fa7c 	bl	8004eca <I2C_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e04d      	b.n	8004a78 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2bff      	cmp	r3, #255	; 0xff
 80049e4:	d90e      	bls.n	8004a04 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	22ff      	movs	r2, #255	; 0xff
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	8979      	ldrh	r1, [r7, #10]
 80049f4:	2300      	movs	r3, #0
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fc87 	bl	8005310 <I2C_TransferConfig>
 8004a02:	e00f      	b.n	8004a24 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	8979      	ldrh	r1, [r7, #10]
 8004a16:	2300      	movs	r3, #0
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fc76 	bl	8005310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d19e      	bne.n	800496c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	6a39      	ldr	r1, [r7, #32]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fac9 	bl	8004fca <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e01a      	b.n	8004a78 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2220      	movs	r2, #32
 8004a48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <HAL_I2C_Master_Transmit+0x1e4>)
 8004a56:	400b      	ands	r3, r1
 8004a58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e000      	b.n	8004a78 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004a76:	2302      	movs	r3, #2
  }
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	80002000 	.word	0x80002000
 8004a84:	fe00e800 	.word	0xfe00e800

08004a88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	461a      	mov	r2, r3
 8004a94:	460b      	mov	r3, r1
 8004a96:	817b      	strh	r3, [r7, #10]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	f040 80db 	bne.w	8004c60 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_I2C_Master_Receive+0x30>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e0d4      	b.n	8004c62 <HAL_I2C_Master_Receive+0x1da>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ac0:	f7fd fe4a 	bl	8002758 <HAL_GetTick>
 8004ac4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	2319      	movs	r3, #25
 8004acc:	2201      	movs	r2, #1
 8004ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f9f9 	bl	8004eca <I2C_WaitOnFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e0bf      	b.n	8004c62 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2222      	movs	r2, #34	; 0x22
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2210      	movs	r2, #16
 8004aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	893a      	ldrh	r2, [r7, #8]
 8004b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2bff      	cmp	r3, #255	; 0xff
 8004b12:	d90e      	bls.n	8004b32 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	8979      	ldrh	r1, [r7, #10]
 8004b22:	4b52      	ldr	r3, [pc, #328]	; (8004c6c <HAL_I2C_Master_Receive+0x1e4>)
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fbf0 	bl	8005310 <I2C_TransferConfig>
 8004b30:	e06d      	b.n	8004c0e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	8979      	ldrh	r1, [r7, #10]
 8004b44:	4b49      	ldr	r3, [pc, #292]	; (8004c6c <HAL_I2C_Master_Receive+0x1e4>)
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fbdf 	bl	8005310 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004b52:	e05c      	b.n	8004c0e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	6a39      	ldr	r1, [r7, #32]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fa73 	bl	8005044 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e07c      	b.n	8004c62 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d034      	beq.n	8004c0e <HAL_I2C_Master_Receive+0x186>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d130      	bne.n	8004c0e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2180      	movs	r1, #128	; 0x80
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f987 	bl	8004eca <I2C_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e04d      	b.n	8004c62 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2bff      	cmp	r3, #255	; 0xff
 8004bce:	d90e      	bls.n	8004bee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	8979      	ldrh	r1, [r7, #10]
 8004bde:	2300      	movs	r3, #0
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fb92 	bl	8005310 <I2C_TransferConfig>
 8004bec:	e00f      	b.n	8004c0e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	8979      	ldrh	r1, [r7, #10]
 8004c00:	2300      	movs	r3, #0
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fb81 	bl	8005310 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d19d      	bne.n	8004b54 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	6a39      	ldr	r1, [r7, #32]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f9d4 	bl	8004fca <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e01a      	b.n	8004c62 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2220      	movs	r2, #32
 8004c32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6859      	ldr	r1, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <HAL_I2C_Master_Receive+0x1e8>)
 8004c40:	400b      	ands	r3, r1
 8004c42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	80002400 	.word	0x80002400
 8004c70:	fe00e800 	.word	0xfe00e800

08004c74 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	603b      	str	r3, [r7, #0]
 8004c80:	460b      	mov	r3, r1
 8004c82:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	f040 80f1 	bne.w	8004e78 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca4:	d101      	bne.n	8004caa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e0e7      	b.n	8004e7a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2C_IsDeviceReady+0x44>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0e0      	b.n	8004e7a <HAL_I2C_IsDeviceReady+0x206>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2224      	movs	r2, #36	; 0x24
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d107      	bne.n	8004ce6 <HAL_I2C_IsDeviceReady+0x72>
 8004cd6:	897b      	ldrh	r3, [r7, #10]
 8004cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ce0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ce4:	e004      	b.n	8004cf0 <HAL_I2C_IsDeviceReady+0x7c>
 8004ce6:	897b      	ldrh	r3, [r7, #10]
 8004ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cec:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004cf6:	f7fd fd2f 	bl	8002758 <HAL_GetTick>
 8004cfa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	bf0c      	ite	eq
 8004d0a:	2301      	moveq	r3, #1
 8004d0c:	2300      	movne	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d28:	e034      	b.n	8004d94 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d01a      	beq.n	8004d68 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d32:	f7fd fd11 	bl	8002758 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d302      	bcc.n	8004d48 <HAL_I2C_IsDeviceReady+0xd4>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10f      	bne.n	8004d68 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e088      	b.n	8004e7a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b10      	cmp	r3, #16
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2301      	moveq	r3, #1
 8004d8e:	2300      	movne	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d94:	7ffb      	ldrb	r3, [r7, #31]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d102      	bne.n	8004da0 <HAL_I2C_IsDeviceReady+0x12c>
 8004d9a:	7fbb      	ldrb	r3, [r7, #30]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0c4      	beq.n	8004d2a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d01a      	beq.n	8004de4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2120      	movs	r1, #32
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f886 	bl	8004eca <I2C_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e058      	b.n	8004e7a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e04a      	b.n	8004e7a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	2120      	movs	r1, #32
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f86b 	bl	8004eca <I2C_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e03d      	b.n	8004e7a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2210      	movs	r2, #16
 8004e04:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d118      	bne.n	8004e48 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e24:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2120      	movs	r1, #32
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f84a 	bl	8004eca <I2C_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e01c      	b.n	8004e7a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2220      	movs	r2, #32
 8004e46:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	f63f af3b 	bhi.w	8004cce <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d103      	bne.n	8004ea0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d007      	beq.n	8004ebe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	619a      	str	r2, [r3, #24]
  }
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eda:	e022      	b.n	8004f22 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d01e      	beq.n	8004f22 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee4:	f7fd fc38 	bl	8002758 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d302      	bcc.n	8004efa <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d113      	bne.n	8004f22 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e00f      	b.n	8004f42 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	bf0c      	ite	eq
 8004f32:	2301      	moveq	r3, #1
 8004f34:	2300      	movne	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d0cd      	beq.n	8004edc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f56:	e02c      	b.n	8004fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f8eb 	bl	8005138 <I2C_IsErrorOccurred>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e02a      	b.n	8004fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d01e      	beq.n	8004fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f74:	f7fd fbf0 	bl	8002758 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d113      	bne.n	8004fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	f043 0220 	orr.w	r2, r3, #32
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e007      	b.n	8004fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d1cb      	bne.n	8004f58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fd6:	e028      	b.n	800502a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f8ab 	bl	8005138 <I2C_IsErrorOccurred>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e026      	b.n	800503a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fec:	f7fd fbb4 	bl	8002758 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d302      	bcc.n	8005002 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d113      	bne.n	800502a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f043 0220 	orr.w	r2, r3, #32
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e007      	b.n	800503a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b20      	cmp	r3, #32
 8005036:	d1cf      	bne.n	8004fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005050:	e064      	b.n	800511c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f86e 	bl	8005138 <I2C_IsErrorOccurred>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e062      	b.n	800512c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b20      	cmp	r3, #32
 8005072:	d138      	bne.n	80050e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b04      	cmp	r3, #4
 8005080:	d105      	bne.n	800508e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e04e      	b.n	800512c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b10      	cmp	r3, #16
 800509a:	d107      	bne.n	80050ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2210      	movs	r2, #16
 80050a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2204      	movs	r2, #4
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44
 80050aa:	e002      	b.n	80050b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2220      	movs	r2, #32
 80050b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6859      	ldr	r1, [r3, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	4b1b      	ldr	r3, [pc, #108]	; (8005134 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80050c6:	400b      	ands	r3, r1
 80050c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e022      	b.n	800512c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e6:	f7fd fb37 	bl	8002758 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d302      	bcc.n	80050fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10f      	bne.n	800511c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	f043 0220 	orr.w	r2, r3, #32
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e007      	b.n	800512c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b04      	cmp	r3, #4
 8005128:	d193      	bne.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	fe00e800 	.word	0xfe00e800

08005138 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d075      	beq.n	8005250 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2210      	movs	r2, #16
 800516a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800516c:	e056      	b.n	800521c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005174:	d052      	beq.n	800521c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005176:	f7fd faef 	bl	8002758 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	429a      	cmp	r2, r3
 8005184:	d302      	bcc.n	800518c <I2C_IsErrorOccurred+0x54>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d147      	bne.n	800521c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005196:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800519e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ae:	d12e      	bne.n	800520e <I2C_IsErrorOccurred+0xd6>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b6:	d02a      	beq.n	800520e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d027      	beq.n	800520e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051cc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051ce:	f7fd fac3 	bl	8002758 <HAL_GetTick>
 80051d2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051d4:	e01b      	b.n	800520e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051d6:	f7fd fabf 	bl	8002758 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b19      	cmp	r3, #25
 80051e2:	d914      	bls.n	800520e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	f043 0220 	orr.w	r2, r3, #32
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b20      	cmp	r3, #32
 800521a:	d1dc      	bne.n	80051d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b20      	cmp	r3, #32
 8005228:	d003      	beq.n	8005232 <I2C_IsErrorOccurred+0xfa>
 800522a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800522e:	2b00      	cmp	r3, #0
 8005230:	d09d      	beq.n	800516e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005236:	2b00      	cmp	r3, #0
 8005238:	d103      	bne.n	8005242 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2220      	movs	r2, #32
 8005240:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	f043 0304 	orr.w	r3, r3, #4
 8005248:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005272:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	f043 0308 	orr.w	r3, r3, #8
 800528a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005294:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00b      	beq.n	80052be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	f043 0302 	orr.w	r3, r3, #2
 80052ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80052be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01c      	beq.n	8005300 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7ff fddb 	bl	8004e82 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6859      	ldr	r1, [r3, #4]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b0d      	ldr	r3, [pc, #52]	; (800530c <I2C_IsErrorOccurred+0x1d4>)
 80052d8:	400b      	ands	r3, r1
 80052da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005304:	4618      	mov	r0, r3
 8005306:	3728      	adds	r7, #40	; 0x28
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	fe00e800 	.word	0xfe00e800

08005310 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	817b      	strh	r3, [r7, #10]
 800531e:	4613      	mov	r3, r2
 8005320:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005322:	897b      	ldrh	r3, [r7, #10]
 8005324:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005328:	7a7b      	ldrb	r3, [r7, #9]
 800532a:	041b      	lsls	r3, r3, #16
 800532c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005330:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	4313      	orrs	r3, r2
 800533a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800533e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	0d5b      	lsrs	r3, r3, #21
 800534a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800534e:	4b08      	ldr	r3, [pc, #32]	; (8005370 <I2C_TransferConfig+0x60>)
 8005350:	430b      	orrs	r3, r1
 8005352:	43db      	mvns	r3, r3
 8005354:	ea02 0103 	and.w	r1, r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	03ff63ff 	.word	0x03ff63ff

08005374 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b20      	cmp	r3, #32
 8005388:	d138      	bne.n	80053fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005394:	2302      	movs	r3, #2
 8005396:	e032      	b.n	80053fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2224      	movs	r2, #36	; 0x24
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0201 	bic.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6819      	ldr	r1, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e000      	b.n	80053fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053fc:	2302      	movs	r3, #2
  }
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b20      	cmp	r3, #32
 800541e:	d139      	bne.n	8005494 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800542a:	2302      	movs	r3, #2
 800542c:	e033      	b.n	8005496 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2224      	movs	r2, #36	; 0x24
 800543a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0201 	bic.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800545c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e000      	b.n	8005496 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005494:	2302      	movs	r3, #2
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d141      	bne.n	8005536 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054b2:	4b4b      	ldr	r3, [pc, #300]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	d131      	bne.n	8005524 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054c0:	4b47      	ldr	r3, [pc, #284]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c6:	4a46      	ldr	r2, [pc, #280]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054d0:	4b43      	ldr	r3, [pc, #268]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054d8:	4a41      	ldr	r2, [pc, #260]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054e0:	4b40      	ldr	r3, [pc, #256]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2232      	movs	r2, #50	; 0x32
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	4a3f      	ldr	r2, [pc, #252]	; (80055e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	0c9b      	lsrs	r3, r3, #18
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054f6:	e002      	b.n	80054fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054fe:	4b38      	ldr	r3, [pc, #224]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550a:	d102      	bne.n	8005512 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f2      	bne.n	80054f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005512:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551e:	d158      	bne.n	80055d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e057      	b.n	80055d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005524:	4b2e      	ldr	r3, [pc, #184]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552a:	4a2d      	ldr	r2, [pc, #180]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800552c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005530:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005534:	e04d      	b.n	80055d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553c:	d141      	bne.n	80055c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800553e:	4b28      	ldr	r3, [pc, #160]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554a:	d131      	bne.n	80055b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800554c:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800554e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005552:	4a23      	ldr	r2, [pc, #140]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005558:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800555c:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005564:	4a1e      	ldr	r2, [pc, #120]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800556a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2232      	movs	r2, #50	; 0x32
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	0c9b      	lsrs	r3, r3, #18
 800557e:	3301      	adds	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005582:	e002      	b.n	800558a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3b01      	subs	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800558a:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005596:	d102      	bne.n	800559e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f2      	bne.n	8005584 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800559e:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055aa:	d112      	bne.n	80055d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e011      	b.n	80055d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b6:	4a0a      	ldr	r2, [pc, #40]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80055c0:	e007      	b.n	80055d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055c2:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055ca:	4a05      	ldr	r2, [pc, #20]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40007000 	.word	0x40007000
 80055e4:	20000008 	.word	0x20000008
 80055e8:	431bde83 	.word	0x431bde83

080055ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	4a04      	ldr	r2, [pc, #16]	; (8005608 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055fa:	6093      	str	r3, [r2, #8]
}
 80055fc:	bf00      	nop
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40007000 	.word	0x40007000

0800560c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e306      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d075      	beq.n	8005716 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800562a:	4b97      	ldr	r3, [pc, #604]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005634:	4b94      	ldr	r3, [pc, #592]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b0c      	cmp	r3, #12
 8005642:	d102      	bne.n	800564a <HAL_RCC_OscConfig+0x3e>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d002      	beq.n	8005650 <HAL_RCC_OscConfig+0x44>
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b08      	cmp	r3, #8
 800564e:	d10b      	bne.n	8005668 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005650:	4b8d      	ldr	r3, [pc, #564]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d05b      	beq.n	8005714 <HAL_RCC_OscConfig+0x108>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d157      	bne.n	8005714 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e2e1      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d106      	bne.n	8005680 <HAL_RCC_OscConfig+0x74>
 8005672:	4b85      	ldr	r3, [pc, #532]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a84      	ldr	r2, [pc, #528]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e01d      	b.n	80056bc <HAL_RCC_OscConfig+0xb0>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005688:	d10c      	bne.n	80056a4 <HAL_RCC_OscConfig+0x98>
 800568a:	4b7f      	ldr	r3, [pc, #508]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a7e      	ldr	r2, [pc, #504]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	4b7c      	ldr	r3, [pc, #496]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a7b      	ldr	r2, [pc, #492]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 800569c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	e00b      	b.n	80056bc <HAL_RCC_OscConfig+0xb0>
 80056a4:	4b78      	ldr	r3, [pc, #480]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a77      	ldr	r2, [pc, #476]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 80056aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	4b75      	ldr	r3, [pc, #468]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a74      	ldr	r2, [pc, #464]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 80056b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d013      	beq.n	80056ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fd f848 	bl	8002758 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056cc:	f7fd f844 	bl	8002758 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b64      	cmp	r3, #100	; 0x64
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e2a6      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056de:	4b6a      	ldr	r3, [pc, #424]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0xc0>
 80056ea:	e014      	b.n	8005716 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fd f834 	bl	8002758 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f4:	f7fd f830 	bl	8002758 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b64      	cmp	r3, #100	; 0x64
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e292      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005706:	4b60      	ldr	r3, [pc, #384]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f0      	bne.n	80056f4 <HAL_RCC_OscConfig+0xe8>
 8005712:	e000      	b.n	8005716 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d075      	beq.n	800580e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005722:	4b59      	ldr	r3, [pc, #356]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 030c 	and.w	r3, r3, #12
 800572a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800572c:	4b56      	ldr	r3, [pc, #344]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b0c      	cmp	r3, #12
 800573a:	d102      	bne.n	8005742 <HAL_RCC_OscConfig+0x136>
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d002      	beq.n	8005748 <HAL_RCC_OscConfig+0x13c>
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	2b04      	cmp	r3, #4
 8005746:	d11f      	bne.n	8005788 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005748:	4b4f      	ldr	r3, [pc, #316]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <HAL_RCC_OscConfig+0x154>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e265      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005760:	4b49      	ldr	r3, [pc, #292]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	061b      	lsls	r3, r3, #24
 800576e:	4946      	ldr	r1, [pc, #280]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005770:	4313      	orrs	r3, r2
 8005772:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005774:	4b45      	ldr	r3, [pc, #276]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f7fc ffa1 	bl	80026c0 <HAL_InitTick>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d043      	beq.n	800580c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e251      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d023      	beq.n	80057d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005790:	4b3d      	ldr	r3, [pc, #244]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a3c      	ldr	r2, [pc, #240]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fc ffdc 	bl	8002758 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a4:	f7fc ffd8 	bl	8002758 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e23a      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057b6:	4b34      	ldr	r3, [pc, #208]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0f0      	beq.n	80057a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c2:	4b31      	ldr	r3, [pc, #196]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	061b      	lsls	r3, r3, #24
 80057d0:	492d      	ldr	r1, [pc, #180]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	604b      	str	r3, [r1, #4]
 80057d6:	e01a      	b.n	800580e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d8:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 80057de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fc ffb8 	bl	8002758 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ec:	f7fc ffb4 	bl	8002758 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e216      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057fe:	4b22      	ldr	r3, [pc, #136]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x1e0>
 800580a:	e000      	b.n	800580e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800580c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d041      	beq.n	800589e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01c      	beq.n	800585c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005822:	4b19      	ldr	r3, [pc, #100]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005828:	4a17      	ldr	r2, [pc, #92]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005832:	f7fc ff91 	bl	8002758 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800583a:	f7fc ff8d 	bl	8002758 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e1ef      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800584c:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 800584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0ef      	beq.n	800583a <HAL_RCC_OscConfig+0x22e>
 800585a:	e020      	b.n	800589e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 800585e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005862:	4a09      	ldr	r2, [pc, #36]	; (8005888 <HAL_RCC_OscConfig+0x27c>)
 8005864:	f023 0301 	bic.w	r3, r3, #1
 8005868:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586c:	f7fc ff74 	bl	8002758 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005872:	e00d      	b.n	8005890 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005874:	f7fc ff70 	bl	8002758 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d906      	bls.n	8005890 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e1d2      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
 8005886:	bf00      	nop
 8005888:	40021000 	.word	0x40021000
 800588c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005890:	4b8c      	ldr	r3, [pc, #560]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1ea      	bne.n	8005874 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 80a6 	beq.w	80059f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ac:	2300      	movs	r3, #0
 80058ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058b0:	4b84      	ldr	r3, [pc, #528]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_OscConfig+0x2b4>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <HAL_RCC_OscConfig+0x2b6>
 80058c0:	2300      	movs	r3, #0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00d      	beq.n	80058e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058c6:	4b7f      	ldr	r3, [pc, #508]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	4a7e      	ldr	r2, [pc, #504]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 80058cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d0:	6593      	str	r3, [r2, #88]	; 0x58
 80058d2:	4b7c      	ldr	r3, [pc, #496]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058de:	2301      	movs	r3, #1
 80058e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058e2:	4b79      	ldr	r3, [pc, #484]	; (8005ac8 <HAL_RCC_OscConfig+0x4bc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d118      	bne.n	8005920 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ee:	4b76      	ldr	r3, [pc, #472]	; (8005ac8 <HAL_RCC_OscConfig+0x4bc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a75      	ldr	r2, [pc, #468]	; (8005ac8 <HAL_RCC_OscConfig+0x4bc>)
 80058f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058fa:	f7fc ff2d 	bl	8002758 <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005902:	f7fc ff29 	bl	8002758 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e18b      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005914:	4b6c      	ldr	r3, [pc, #432]	; (8005ac8 <HAL_RCC_OscConfig+0x4bc>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0f0      	beq.n	8005902 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d108      	bne.n	800593a <HAL_RCC_OscConfig+0x32e>
 8005928:	4b66      	ldr	r3, [pc, #408]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	4a65      	ldr	r2, [pc, #404]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005938:	e024      	b.n	8005984 <HAL_RCC_OscConfig+0x378>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b05      	cmp	r3, #5
 8005940:	d110      	bne.n	8005964 <HAL_RCC_OscConfig+0x358>
 8005942:	4b60      	ldr	r3, [pc, #384]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	4a5e      	ldr	r2, [pc, #376]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 800594a:	f043 0304 	orr.w	r3, r3, #4
 800594e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005952:	4b5c      	ldr	r3, [pc, #368]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	4a5a      	ldr	r2, [pc, #360]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 800595a:	f043 0301 	orr.w	r3, r3, #1
 800595e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005962:	e00f      	b.n	8005984 <HAL_RCC_OscConfig+0x378>
 8005964:	4b57      	ldr	r3, [pc, #348]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596a:	4a56      	ldr	r2, [pc, #344]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005974:	4b53      	ldr	r3, [pc, #332]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597a:	4a52      	ldr	r2, [pc, #328]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 800597c:	f023 0304 	bic.w	r3, r3, #4
 8005980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d016      	beq.n	80059ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fc fee4 	bl	8002758 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005992:	e00a      	b.n	80059aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005994:	f7fc fee0 	bl	8002758 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e140      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059aa:	4b46      	ldr	r3, [pc, #280]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0ed      	beq.n	8005994 <HAL_RCC_OscConfig+0x388>
 80059b8:	e015      	b.n	80059e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ba:	f7fc fecd 	bl	8002758 <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059c0:	e00a      	b.n	80059d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c2:	f7fc fec9 	bl	8002758 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e129      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059d8:	4b3a      	ldr	r3, [pc, #232]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ed      	bne.n	80059c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059e6:	7ffb      	ldrb	r3, [r7, #31]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d105      	bne.n	80059f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ec:	4b35      	ldr	r3, [pc, #212]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	4a34      	ldr	r2, [pc, #208]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 80059f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d03c      	beq.n	8005a7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01c      	beq.n	8005a46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a0c:	4b2d      	ldr	r3, [pc, #180]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a12:	4a2c      	ldr	r2, [pc, #176]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1c:	f7fc fe9c 	bl	8002758 <HAL_GetTick>
 8005a20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a22:	e008      	b.n	8005a36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a24:	f7fc fe98 	bl	8002758 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e0fa      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a36:	4b23      	ldr	r3, [pc, #140]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0ef      	beq.n	8005a24 <HAL_RCC_OscConfig+0x418>
 8005a44:	e01b      	b.n	8005a7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a46:	4b1f      	ldr	r3, [pc, #124]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a56:	f7fc fe7f 	bl	8002758 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a5e:	f7fc fe7b 	bl	8002758 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e0dd      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a70:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1ef      	bne.n	8005a5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80d1 	beq.w	8005c2a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b0c      	cmp	r3, #12
 8005a92:	f000 808b 	beq.w	8005bac <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d15e      	bne.n	8005b5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a9e:	4b09      	ldr	r3, [pc, #36]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a08      	ldr	r2, [pc, #32]	; (8005ac4 <HAL_RCC_OscConfig+0x4b8>)
 8005aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aaa:	f7fc fe55 	bl	8002758 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab0:	e00c      	b.n	8005acc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab2:	f7fc fe51 	bl	8002758 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d905      	bls.n	8005acc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e0b3      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005acc:	4b59      	ldr	r3, [pc, #356]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1ec      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ad8:	4b56      	ldr	r3, [pc, #344]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	4b56      	ldr	r3, [pc, #344]	; (8005c38 <HAL_RCC_OscConfig+0x62c>)
 8005ade:	4013      	ands	r3, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6a11      	ldr	r1, [r2, #32]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ae8:	3a01      	subs	r2, #1
 8005aea:	0112      	lsls	r2, r2, #4
 8005aec:	4311      	orrs	r1, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005af2:	0212      	lsls	r2, r2, #8
 8005af4:	4311      	orrs	r1, r2
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005afa:	0852      	lsrs	r2, r2, #1
 8005afc:	3a01      	subs	r2, #1
 8005afe:	0552      	lsls	r2, r2, #21
 8005b00:	4311      	orrs	r1, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b06:	0852      	lsrs	r2, r2, #1
 8005b08:	3a01      	subs	r2, #1
 8005b0a:	0652      	lsls	r2, r2, #25
 8005b0c:	4311      	orrs	r1, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b12:	06d2      	lsls	r2, r2, #27
 8005b14:	430a      	orrs	r2, r1
 8005b16:	4947      	ldr	r1, [pc, #284]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b1c:	4b45      	ldr	r3, [pc, #276]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a44      	ldr	r2, [pc, #272]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b28:	4b42      	ldr	r3, [pc, #264]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a41      	ldr	r2, [pc, #260]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fc fe10 	bl	8002758 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b3c:	f7fc fe0c 	bl	8002758 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e06e      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b4e:	4b39      	ldr	r3, [pc, #228]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0x530>
 8005b5a:	e066      	b.n	8005c2a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5c:	4b35      	ldr	r3, [pc, #212]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a34      	ldr	r2, [pc, #208]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b66:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b68:	4b32      	ldr	r3, [pc, #200]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a31      	ldr	r2, [pc, #196]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b74:	4b2f      	ldr	r3, [pc, #188]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4a2e      	ldr	r2, [pc, #184]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005b7a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fc fde8 	bl	8002758 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8c:	f7fc fde4 	bl	8002758 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e046      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b9e:	4b25      	ldr	r3, [pc, #148]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f0      	bne.n	8005b8c <HAL_RCC_OscConfig+0x580>
 8005baa:	e03e      	b.n	8005c2a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e039      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005bb8:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <HAL_RCC_OscConfig+0x628>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f003 0203 	and.w	r2, r3, #3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d12c      	bne.n	8005c26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d123      	bne.n	8005c26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d11b      	bne.n	8005c26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d113      	bne.n	8005c26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d109      	bne.n	8005c26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d001      	beq.n	8005c2a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3720      	adds	r7, #32
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40021000 	.word	0x40021000
 8005c38:	019f800c 	.word	0x019f800c

08005c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e11e      	b.n	8005e92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c54:	4b91      	ldr	r3, [pc, #580]	; (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d910      	bls.n	8005c84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c62:	4b8e      	ldr	r3, [pc, #568]	; (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f023 020f 	bic.w	r2, r3, #15
 8005c6a:	498c      	ldr	r1, [pc, #560]	; (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c72:	4b8a      	ldr	r3, [pc, #552]	; (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e106      	b.n	8005e92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d073      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d129      	bne.n	8005cec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c98:	4b81      	ldr	r3, [pc, #516]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0f4      	b.n	8005e92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005ca8:	f000 f99e 	bl	8005fe8 <RCC_GetSysClockFreqFromPLLSource>
 8005cac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4a7c      	ldr	r2, [pc, #496]	; (8005ea4 <HAL_RCC_ClockConfig+0x268>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d93f      	bls.n	8005d36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005cb6:	4b7a      	ldr	r3, [pc, #488]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d009      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d033      	beq.n	8005d36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d12f      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cd6:	4b72      	ldr	r3, [pc, #456]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cde:	4a70      	ldr	r2, [pc, #448]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ce6:	2380      	movs	r3, #128	; 0x80
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	e024      	b.n	8005d36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d107      	bne.n	8005d04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cf4:	4b6a      	ldr	r3, [pc, #424]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d109      	bne.n	8005d14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0c6      	b.n	8005e92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d04:	4b66      	ldr	r3, [pc, #408]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0be      	b.n	8005e92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005d14:	f000 f8ce 	bl	8005eb4 <HAL_RCC_GetSysClockFreq>
 8005d18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4a61      	ldr	r2, [pc, #388]	; (8005ea4 <HAL_RCC_ClockConfig+0x268>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d909      	bls.n	8005d36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d22:	4b5f      	ldr	r3, [pc, #380]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d2a:	4a5d      	ldr	r2, [pc, #372]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d36:	4b5a      	ldr	r3, [pc, #360]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f023 0203 	bic.w	r2, r3, #3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	4957      	ldr	r1, [pc, #348]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d48:	f7fc fd06 	bl	8002758 <HAL_GetTick>
 8005d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d4e:	e00a      	b.n	8005d66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d50:	f7fc fd02 	bl	8002758 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e095      	b.n	8005e92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d66:	4b4e      	ldr	r3, [pc, #312]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 020c 	and.w	r2, r3, #12
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d1eb      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d023      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d90:	4b43      	ldr	r3, [pc, #268]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4a42      	ldr	r2, [pc, #264]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005d96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005da8:	4b3d      	ldr	r3, [pc, #244]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005db0:	4a3b      	ldr	r2, [pc, #236]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005db2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005db6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db8:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	4936      	ldr	r1, [pc, #216]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	608b      	str	r3, [r1, #8]
 8005dca:	e008      	b.n	8005dde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b80      	cmp	r3, #128	; 0x80
 8005dd0:	d105      	bne.n	8005dde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005dd2:	4b33      	ldr	r3, [pc, #204]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	4a32      	ldr	r2, [pc, #200]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ddc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dde:	4b2f      	ldr	r3, [pc, #188]	; (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d21d      	bcs.n	8005e28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dec:	4b2b      	ldr	r3, [pc, #172]	; (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f023 020f 	bic.w	r2, r3, #15
 8005df4:	4929      	ldr	r1, [pc, #164]	; (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005dfc:	f7fc fcac 	bl	8002758 <HAL_GetTick>
 8005e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e02:	e00a      	b.n	8005e1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e04:	f7fc fca8 	bl	8002758 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e03b      	b.n	8005e92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <HAL_RCC_ClockConfig+0x260>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d1ed      	bne.n	8005e04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e34:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4917      	ldr	r1, [pc, #92]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d009      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e52:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	490f      	ldr	r1, [pc, #60]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e66:	f000 f825 	bl	8005eb4 <HAL_RCC_GetSysClockFreq>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <HAL_RCC_ClockConfig+0x264>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	091b      	lsrs	r3, r3, #4
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	490c      	ldr	r1, [pc, #48]	; (8005ea8 <HAL_RCC_ClockConfig+0x26c>)
 8005e78:	5ccb      	ldrb	r3, [r1, r3]
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <HAL_RCC_ClockConfig+0x270>)
 8005e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e86:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <HAL_RCC_ClockConfig+0x274>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fc fc18 	bl	80026c0 <HAL_InitTick>
 8005e90:	4603      	mov	r3, r0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40022000 	.word	0x40022000
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	04c4b400 	.word	0x04c4b400
 8005ea8:	0800ba0c 	.word	0x0800ba0c
 8005eac:	20000008 	.word	0x20000008
 8005eb0:	2000000c 	.word	0x2000000c

08005eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005eba:	4b2c      	ldr	r3, [pc, #176]	; (8005f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d102      	bne.n	8005ecc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ec6:	4b2a      	ldr	r3, [pc, #168]	; (8005f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	e047      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ecc:	4b27      	ldr	r3, [pc, #156]	; (8005f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 030c 	and.w	r3, r3, #12
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d102      	bne.n	8005ede <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ed8:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	e03e      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005ede:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 030c 	and.w	r3, r3, #12
 8005ee6:	2b0c      	cmp	r3, #12
 8005ee8:	d136      	bne.n	8005f58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005eea:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ef4:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	3301      	adds	r3, #1
 8005f00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d10c      	bne.n	8005f22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f08:	4a1a      	ldr	r2, [pc, #104]	; (8005f74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f12:	68d2      	ldr	r2, [r2, #12]
 8005f14:	0a12      	lsrs	r2, r2, #8
 8005f16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f1a:	fb02 f303 	mul.w	r3, r2, r3
 8005f1e:	617b      	str	r3, [r7, #20]
      break;
 8005f20:	e00c      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f22:	4a13      	ldr	r2, [pc, #76]	; (8005f70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	4a10      	ldr	r2, [pc, #64]	; (8005f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f2c:	68d2      	ldr	r2, [r2, #12]
 8005f2e:	0a12      	lsrs	r2, r2, #8
 8005f30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f34:	fb02 f303 	mul.w	r3, r2, r3
 8005f38:	617b      	str	r3, [r7, #20]
      break;
 8005f3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	0e5b      	lsrs	r3, r3, #25
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	3301      	adds	r3, #1
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	e001      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f5c:	693b      	ldr	r3, [r7, #16]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	00f42400 	.word	0x00f42400
 8005f74:	007a1200 	.word	0x007a1200

08005f78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f7c:	4b03      	ldr	r3, [pc, #12]	; (8005f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000008 	.word	0x20000008

08005f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f94:	f7ff fff0 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	0a1b      	lsrs	r3, r3, #8
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	4904      	ldr	r1, [pc, #16]	; (8005fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fa6:	5ccb      	ldrb	r3, [r1, r3]
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	0800ba1c 	.word	0x0800ba1c

08005fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fc0:	f7ff ffda 	bl	8005f78 <HAL_RCC_GetHCLKFreq>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	0adb      	lsrs	r3, r3, #11
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	4904      	ldr	r1, [pc, #16]	; (8005fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fd2:	5ccb      	ldrb	r3, [r1, r3]
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	0800ba1c 	.word	0x0800ba1c

08005fe8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fee:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ff8:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	3301      	adds	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b03      	cmp	r3, #3
 800600a:	d10c      	bne.n	8006026 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800600c:	4a17      	ldr	r2, [pc, #92]	; (800606c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	4a14      	ldr	r2, [pc, #80]	; (8006068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006016:	68d2      	ldr	r2, [r2, #12]
 8006018:	0a12      	lsrs	r2, r2, #8
 800601a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	617b      	str	r3, [r7, #20]
    break;
 8006024:	e00c      	b.n	8006040 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006026:	4a12      	ldr	r2, [pc, #72]	; (8006070 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	fbb2 f3f3 	udiv	r3, r2, r3
 800602e:	4a0e      	ldr	r2, [pc, #56]	; (8006068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006030:	68d2      	ldr	r2, [r2, #12]
 8006032:	0a12      	lsrs	r2, r2, #8
 8006034:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006038:	fb02 f303 	mul.w	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]
    break;
 800603e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	0e5b      	lsrs	r3, r3, #25
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	3301      	adds	r3, #1
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	fbb2 f3f3 	udiv	r3, r2, r3
 8006058:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800605a:	687b      	ldr	r3, [r7, #4]
}
 800605c:	4618      	mov	r0, r3
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	40021000 	.word	0x40021000
 800606c:	007a1200 	.word	0x007a1200
 8006070:	00f42400 	.word	0x00f42400

08006074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800607c:	2300      	movs	r3, #0
 800607e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006080:	2300      	movs	r3, #0
 8006082:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8098 	beq.w	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006092:	2300      	movs	r3, #0
 8006094:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006096:	4b43      	ldr	r3, [pc, #268]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10d      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a2:	4b40      	ldr	r3, [pc, #256]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	4a3f      	ldr	r2, [pc, #252]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ac:	6593      	str	r3, [r2, #88]	; 0x58
 80060ae:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b6:	60bb      	str	r3, [r7, #8]
 80060b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ba:	2301      	movs	r3, #1
 80060bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060be:	4b3a      	ldr	r3, [pc, #232]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a39      	ldr	r2, [pc, #228]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060ca:	f7fc fb45 	bl	8002758 <HAL_GetTick>
 80060ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060d0:	e009      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d2:	f7fc fb41 	bl	8002758 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d902      	bls.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	74fb      	strb	r3, [r7, #19]
        break;
 80060e4:	e005      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060e6:	4b30      	ldr	r3, [pc, #192]	; (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0ef      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80060f2:	7cfb      	ldrb	r3, [r7, #19]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d159      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060f8:	4b2a      	ldr	r3, [pc, #168]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006102:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01e      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	429a      	cmp	r2, r3
 8006112:	d019      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006114:	4b23      	ldr	r3, [pc, #140]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800611e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006120:	4b20      	ldr	r3, [pc, #128]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006130:	4b1c      	ldr	r3, [pc, #112]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006136:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006140:	4a18      	ldr	r2, [pc, #96]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d016      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006152:	f7fc fb01 	bl	8002758 <HAL_GetTick>
 8006156:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006158:	e00b      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615a:	f7fc fafd 	bl	8002758 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f241 3288 	movw	r2, #5000	; 0x1388
 8006168:	4293      	cmp	r3, r2
 800616a:	d902      	bls.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	74fb      	strb	r3, [r7, #19]
            break;
 8006170:	e006      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006172:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ec      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006180:	7cfb      	ldrb	r3, [r7, #19]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10b      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006186:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	4903      	ldr	r1, [pc, #12]	; (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800619c:	e008      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800619e:	7cfb      	ldrb	r3, [r7, #19]
 80061a0:	74bb      	strb	r3, [r7, #18]
 80061a2:	e005      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80061a4:	40021000 	.word	0x40021000
 80061a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ac:	7cfb      	ldrb	r3, [r7, #19]
 80061ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061b0:	7c7b      	ldrb	r3, [r7, #17]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d105      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b6:	4ba6      	ldr	r3, [pc, #664]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ba:	4aa5      	ldr	r2, [pc, #660]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061ce:	4ba0      	ldr	r3, [pc, #640]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d4:	f023 0203 	bic.w	r2, r3, #3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	499c      	ldr	r1, [pc, #624]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061f0:	4b97      	ldr	r3, [pc, #604]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f6:	f023 020c 	bic.w	r2, r3, #12
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	4994      	ldr	r1, [pc, #592]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006212:	4b8f      	ldr	r3, [pc, #572]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006218:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	498b      	ldr	r1, [pc, #556]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006234:	4b86      	ldr	r3, [pc, #536]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	4983      	ldr	r1, [pc, #524]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006256:	4b7e      	ldr	r3, [pc, #504]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	497a      	ldr	r1, [pc, #488]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00a      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006278:	4b75      	ldr	r3, [pc, #468]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800627a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	4972      	ldr	r1, [pc, #456]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800629a:	4b6d      	ldr	r3, [pc, #436]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	4969      	ldr	r1, [pc, #420]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062bc:	4b64      	ldr	r3, [pc, #400]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	4961      	ldr	r1, [pc, #388]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062de:	4b5c      	ldr	r3, [pc, #368]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	4958      	ldr	r1, [pc, #352]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d015      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006300:	4b53      	ldr	r3, [pc, #332]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006306:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	4950      	ldr	r1, [pc, #320]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631e:	d105      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006320:	4b4b      	ldr	r3, [pc, #300]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4a4a      	ldr	r2, [pc, #296]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800632a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006334:	2b00      	cmp	r3, #0
 8006336:	d015      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006338:	4b45      	ldr	r3, [pc, #276]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	4942      	ldr	r1, [pc, #264]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006348:	4313      	orrs	r3, r2
 800634a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006356:	d105      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006358:	4b3d      	ldr	r3, [pc, #244]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	4a3c      	ldr	r2, [pc, #240]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800635e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006362:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d015      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006370:	4b37      	ldr	r3, [pc, #220]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006376:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	4934      	ldr	r1, [pc, #208]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800638e:	d105      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006390:	4b2f      	ldr	r3, [pc, #188]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4a2e      	ldr	r2, [pc, #184]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800639a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d015      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063a8:	4b29      	ldr	r3, [pc, #164]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b6:	4926      	ldr	r1, [pc, #152]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063c6:	d105      	bne.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063c8:	4b21      	ldr	r3, [pc, #132]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	4a20      	ldr	r2, [pc, #128]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d015      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063e0:	4b1b      	ldr	r3, [pc, #108]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	4918      	ldr	r1, [pc, #96]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063fe:	d105      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006400:	4b13      	ldr	r3, [pc, #76]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	4a12      	ldr	r2, [pc, #72]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800640a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d015      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006418:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006426:	490a      	ldr	r1, [pc, #40]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006436:	d105      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006438:	4b05      	ldr	r3, [pc, #20]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4a04      	ldr	r2, [pc, #16]	; (8006450 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006442:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006444:	7cbb      	ldrb	r3, [r7, #18]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40021000 	.word	0x40021000

08006454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e09d      	b.n	80065a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	2b00      	cmp	r3, #0
 800646c:	d108      	bne.n	8006480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006476:	d009      	beq.n	800648c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	61da      	str	r2, [r3, #28]
 800647e:	e005      	b.n	800648c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fb fe9e 	bl	80021e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064cc:	d902      	bls.n	80064d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	e002      	b.n	80064da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064e2:	d007      	beq.n	80064f4 <HAL_SPI_Init+0xa0>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064ec:	d002      	beq.n	80064f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006504:	431a      	orrs	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006536:	ea42 0103 	orr.w	r1, r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	0c1b      	lsrs	r3, r3, #16
 8006550:	f003 0204 	and.w	r2, r3, #4
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006570:	ea42 0103 	orr.w	r1, r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006590:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e049      	b.n	8006650 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d106      	bne.n	80065d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fb fe4d 	bl	8002270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f000 fb7f 	bl	8006cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e049      	b.n	80066fe <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f841 	bl	8006706 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f000 fb28 	bl	8006cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e049      	b.n	80067c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d106      	bne.n	8006746 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f841 	bl	80067c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3304      	adds	r3, #4
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f000 fac7 	bl	8006cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e066      	b.n	80068c8 <HAL_TIM_OC_ConfigChannel+0xec>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b14      	cmp	r3, #20
 8006806:	d857      	bhi.n	80068b8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <HAL_TIM_OC_ConfigChannel+0x34>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006865 	.word	0x08006865
 8006814:	080068b9 	.word	0x080068b9
 8006818:	080068b9 	.word	0x080068b9
 800681c:	080068b9 	.word	0x080068b9
 8006820:	08006873 	.word	0x08006873
 8006824:	080068b9 	.word	0x080068b9
 8006828:	080068b9 	.word	0x080068b9
 800682c:	080068b9 	.word	0x080068b9
 8006830:	08006881 	.word	0x08006881
 8006834:	080068b9 	.word	0x080068b9
 8006838:	080068b9 	.word	0x080068b9
 800683c:	080068b9 	.word	0x080068b9
 8006840:	0800688f 	.word	0x0800688f
 8006844:	080068b9 	.word	0x080068b9
 8006848:	080068b9 	.word	0x080068b9
 800684c:	080068b9 	.word	0x080068b9
 8006850:	0800689d 	.word	0x0800689d
 8006854:	080068b9 	.word	0x080068b9
 8006858:	080068b9 	.word	0x080068b9
 800685c:	080068b9 	.word	0x080068b9
 8006860:	080068ab 	.word	0x080068ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 face 	bl	8006e0c <TIM_OC1_SetConfig>
      break;
 8006870:	e025      	b.n	80068be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68b9      	ldr	r1, [r7, #8]
 8006878:	4618      	mov	r0, r3
 800687a:	f000 fb57 	bl	8006f2c <TIM_OC2_SetConfig>
      break;
 800687e:	e01e      	b.n	80068be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fbda 	bl	8007040 <TIM_OC3_SetConfig>
      break;
 800688c:	e017      	b.n	80068be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fc5b 	bl	8007150 <TIM_OC4_SetConfig>
      break;
 800689a:	e010      	b.n	80068be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fcde 	bl	8007264 <TIM_OC5_SetConfig>
      break;
 80068a8:	e009      	b.n	80068be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fd3b 	bl	800732c <TIM_OC6_SetConfig>
      break;
 80068b6:	e002      	b.n	80068be <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	75fb      	strb	r3, [r7, #23]
      break;
 80068bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e0ff      	b.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b14      	cmp	r3, #20
 80068fa:	f200 80f0 	bhi.w	8006ade <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006959 	.word	0x08006959
 8006908:	08006adf 	.word	0x08006adf
 800690c:	08006adf 	.word	0x08006adf
 8006910:	08006adf 	.word	0x08006adf
 8006914:	08006999 	.word	0x08006999
 8006918:	08006adf 	.word	0x08006adf
 800691c:	08006adf 	.word	0x08006adf
 8006920:	08006adf 	.word	0x08006adf
 8006924:	080069db 	.word	0x080069db
 8006928:	08006adf 	.word	0x08006adf
 800692c:	08006adf 	.word	0x08006adf
 8006930:	08006adf 	.word	0x08006adf
 8006934:	08006a1b 	.word	0x08006a1b
 8006938:	08006adf 	.word	0x08006adf
 800693c:	08006adf 	.word	0x08006adf
 8006940:	08006adf 	.word	0x08006adf
 8006944:	08006a5d 	.word	0x08006a5d
 8006948:	08006adf 	.word	0x08006adf
 800694c:	08006adf 	.word	0x08006adf
 8006950:	08006adf 	.word	0x08006adf
 8006954:	08006a9d 	.word	0x08006a9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fa54 	bl	8006e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0208 	orr.w	r2, r2, #8
 8006972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0204 	bic.w	r2, r2, #4
 8006982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6999      	ldr	r1, [r3, #24]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	619a      	str	r2, [r3, #24]
      break;
 8006996:	e0a5      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fac4 	bl	8006f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6999      	ldr	r1, [r3, #24]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	021a      	lsls	r2, r3, #8
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	619a      	str	r2, [r3, #24]
      break;
 80069d8:	e084      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 fb2d 	bl	8007040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f042 0208 	orr.w	r2, r2, #8
 80069f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0204 	bic.w	r2, r2, #4
 8006a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69d9      	ldr	r1, [r3, #28]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	61da      	str	r2, [r3, #28]
      break;
 8006a18:	e064      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fb95 	bl	8007150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69d9      	ldr	r1, [r3, #28]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	021a      	lsls	r2, r3, #8
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	61da      	str	r2, [r3, #28]
      break;
 8006a5a:	e043      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fbfe 	bl	8007264 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0208 	orr.w	r2, r2, #8
 8006a76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0204 	bic.w	r2, r2, #4
 8006a86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a9a:	e023      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fc42 	bl	800732c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	021a      	lsls	r2, r3, #8
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006adc:	e002      	b.n	8006ae4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop

08006af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIM_ConfigClockSource+0x1c>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e0de      	b.n	8006cd2 <HAL_TIM_ConfigClockSource+0x1da>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a63      	ldr	r2, [pc, #396]	; (8006cdc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	f000 80a9 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b54:	4a61      	ldr	r2, [pc, #388]	; (8006cdc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	f200 80ae 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b5c:	4a60      	ldr	r2, [pc, #384]	; (8006ce0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	f000 80a1 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b64:	4a5e      	ldr	r2, [pc, #376]	; (8006ce0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	f200 80a6 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b6c:	4a5d      	ldr	r2, [pc, #372]	; (8006ce4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	f000 8099 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b74:	4a5b      	ldr	r2, [pc, #364]	; (8006ce4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	f200 809e 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b7c:	4a5a      	ldr	r2, [pc, #360]	; (8006ce8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	f000 8091 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b84:	4a58      	ldr	r2, [pc, #352]	; (8006ce8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	f200 8096 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b90:	f000 8089 	beq.w	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006b94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b98:	f200 808e 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba0:	d03e      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0x128>
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba6:	f200 8087 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bae:	f000 8086 	beq.w	8006cbe <HAL_TIM_ConfigClockSource+0x1c6>
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb6:	d87f      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006bb8:	2b70      	cmp	r3, #112	; 0x70
 8006bba:	d01a      	beq.n	8006bf2 <HAL_TIM_ConfigClockSource+0xfa>
 8006bbc:	2b70      	cmp	r3, #112	; 0x70
 8006bbe:	d87b      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006bc0:	2b60      	cmp	r3, #96	; 0x60
 8006bc2:	d050      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x16e>
 8006bc4:	2b60      	cmp	r3, #96	; 0x60
 8006bc6:	d877      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006bc8:	2b50      	cmp	r3, #80	; 0x50
 8006bca:	d03c      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0x14e>
 8006bcc:	2b50      	cmp	r3, #80	; 0x50
 8006bce:	d873      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d058      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x18e>
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d86f      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006bd8:	2b30      	cmp	r3, #48	; 0x30
 8006bda:	d064      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006bdc:	2b30      	cmp	r3, #48	; 0x30
 8006bde:	d86b      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d060      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d867      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d05c      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006bec:	2b10      	cmp	r3, #16
 8006bee:	d05a      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006bf0:	e062      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	6899      	ldr	r1, [r3, #8]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f000 fc75 	bl	80074f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	609a      	str	r2, [r3, #8]
      break;
 8006c1e:	e04f      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6899      	ldr	r1, [r3, #8]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f000 fc5e 	bl	80074f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c42:	609a      	str	r2, [r3, #8]
      break;
 8006c44:	e03c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6859      	ldr	r1, [r3, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	461a      	mov	r2, r3
 8006c54:	f000 fbd0 	bl	80073f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2150      	movs	r1, #80	; 0x50
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fc29 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 8006c64:	e02c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	6859      	ldr	r1, [r3, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f000 fbef 	bl	8007456 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2160      	movs	r1, #96	; 0x60
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fc19 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 8006c84:	e01c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6859      	ldr	r1, [r3, #4]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f000 fbb0 	bl	80073f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2140      	movs	r1, #64	; 0x40
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fc09 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 8006ca4:	e00c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	f000 fc00 	bl	80074b6 <TIM_ITRx_SetConfig>
      break;
 8006cb6:	e003      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
      break;
 8006cbc:	e000      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	00100070 	.word	0x00100070
 8006ce0:	00100040 	.word	0x00100040
 8006ce4:	00100030 	.word	0x00100030
 8006ce8:	00100020 	.word	0x00100020

08006cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a3c      	ldr	r2, [pc, #240]	; (8006df0 <TIM_Base_SetConfig+0x104>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00f      	beq.n	8006d24 <TIM_Base_SetConfig+0x38>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0a:	d00b      	beq.n	8006d24 <TIM_Base_SetConfig+0x38>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a39      	ldr	r2, [pc, #228]	; (8006df4 <TIM_Base_SetConfig+0x108>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_Base_SetConfig+0x38>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a38      	ldr	r2, [pc, #224]	; (8006df8 <TIM_Base_SetConfig+0x10c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_Base_SetConfig+0x38>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a37      	ldr	r2, [pc, #220]	; (8006dfc <TIM_Base_SetConfig+0x110>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d108      	bne.n	8006d36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2d      	ldr	r2, [pc, #180]	; (8006df0 <TIM_Base_SetConfig+0x104>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d01b      	beq.n	8006d76 <TIM_Base_SetConfig+0x8a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d44:	d017      	beq.n	8006d76 <TIM_Base_SetConfig+0x8a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a2a      	ldr	r2, [pc, #168]	; (8006df4 <TIM_Base_SetConfig+0x108>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d013      	beq.n	8006d76 <TIM_Base_SetConfig+0x8a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a29      	ldr	r2, [pc, #164]	; (8006df8 <TIM_Base_SetConfig+0x10c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00f      	beq.n	8006d76 <TIM_Base_SetConfig+0x8a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a28      	ldr	r2, [pc, #160]	; (8006dfc <TIM_Base_SetConfig+0x110>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00b      	beq.n	8006d76 <TIM_Base_SetConfig+0x8a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <TIM_Base_SetConfig+0x8a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <TIM_Base_SetConfig+0x118>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_Base_SetConfig+0x8a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a25      	ldr	r2, [pc, #148]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d108      	bne.n	8006d88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a10      	ldr	r2, [pc, #64]	; (8006df0 <TIM_Base_SetConfig+0x104>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00f      	beq.n	8006dd4 <TIM_Base_SetConfig+0xe8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a11      	ldr	r2, [pc, #68]	; (8006dfc <TIM_Base_SetConfig+0x110>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00b      	beq.n	8006dd4 <TIM_Base_SetConfig+0xe8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a10      	ldr	r2, [pc, #64]	; (8006e00 <TIM_Base_SetConfig+0x114>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d007      	beq.n	8006dd4 <TIM_Base_SetConfig+0xe8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a0f      	ldr	r2, [pc, #60]	; (8006e04 <TIM_Base_SetConfig+0x118>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_Base_SetConfig+0xe8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a0e      	ldr	r2, [pc, #56]	; (8006e08 <TIM_Base_SetConfig+0x11c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d103      	bne.n	8006ddc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	691a      	ldr	r2, [r3, #16]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	615a      	str	r2, [r3, #20]
}
 8006de2:	bf00      	nop
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40012c00 	.word	0x40012c00
 8006df4:	40000400 	.word	0x40000400
 8006df8:	40000800 	.word	0x40000800
 8006dfc:	40013400 	.word	0x40013400
 8006e00:	40014000 	.word	0x40014000
 8006e04:	40014400 	.word	0x40014400
 8006e08:	40014800 	.word	0x40014800

08006e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f023 0201 	bic.w	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0303 	bic.w	r3, r3, #3
 8006e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f023 0302 	bic.w	r3, r3, #2
 8006e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a2c      	ldr	r2, [pc, #176]	; (8006f18 <TIM_OC1_SetConfig+0x10c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00f      	beq.n	8006e8c <TIM_OC1_SetConfig+0x80>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a2b      	ldr	r2, [pc, #172]	; (8006f1c <TIM_OC1_SetConfig+0x110>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00b      	beq.n	8006e8c <TIM_OC1_SetConfig+0x80>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a2a      	ldr	r2, [pc, #168]	; (8006f20 <TIM_OC1_SetConfig+0x114>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d007      	beq.n	8006e8c <TIM_OC1_SetConfig+0x80>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a29      	ldr	r2, [pc, #164]	; (8006f24 <TIM_OC1_SetConfig+0x118>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d003      	beq.n	8006e8c <TIM_OC1_SetConfig+0x80>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a28      	ldr	r2, [pc, #160]	; (8006f28 <TIM_OC1_SetConfig+0x11c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d10c      	bne.n	8006ea6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f023 0308 	bic.w	r3, r3, #8
 8006e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f023 0304 	bic.w	r3, r3, #4
 8006ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1b      	ldr	r2, [pc, #108]	; (8006f18 <TIM_OC1_SetConfig+0x10c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00f      	beq.n	8006ece <TIM_OC1_SetConfig+0xc2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a1a      	ldr	r2, [pc, #104]	; (8006f1c <TIM_OC1_SetConfig+0x110>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00b      	beq.n	8006ece <TIM_OC1_SetConfig+0xc2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a19      	ldr	r2, [pc, #100]	; (8006f20 <TIM_OC1_SetConfig+0x114>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d007      	beq.n	8006ece <TIM_OC1_SetConfig+0xc2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a18      	ldr	r2, [pc, #96]	; (8006f24 <TIM_OC1_SetConfig+0x118>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d003      	beq.n	8006ece <TIM_OC1_SetConfig+0xc2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <TIM_OC1_SetConfig+0x11c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d111      	bne.n	8006ef2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	621a      	str	r2, [r3, #32]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	40012c00 	.word	0x40012c00
 8006f1c:	40013400 	.word	0x40013400
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40014400 	.word	0x40014400
 8006f28:	40014800 	.word	0x40014800

08006f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f023 0210 	bic.w	r2, r3, #16
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	021b      	lsls	r3, r3, #8
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f023 0320 	bic.w	r3, r3, #32
 8006f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a28      	ldr	r2, [pc, #160]	; (800702c <TIM_OC2_SetConfig+0x100>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_OC2_SetConfig+0x6c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a27      	ldr	r2, [pc, #156]	; (8007030 <TIM_OC2_SetConfig+0x104>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d10d      	bne.n	8006fb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a1d      	ldr	r2, [pc, #116]	; (800702c <TIM_OC2_SetConfig+0x100>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00f      	beq.n	8006fdc <TIM_OC2_SetConfig+0xb0>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a1c      	ldr	r2, [pc, #112]	; (8007030 <TIM_OC2_SetConfig+0x104>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00b      	beq.n	8006fdc <TIM_OC2_SetConfig+0xb0>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a1b      	ldr	r2, [pc, #108]	; (8007034 <TIM_OC2_SetConfig+0x108>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d007      	beq.n	8006fdc <TIM_OC2_SetConfig+0xb0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a1a      	ldr	r2, [pc, #104]	; (8007038 <TIM_OC2_SetConfig+0x10c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_OC2_SetConfig+0xb0>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a19      	ldr	r2, [pc, #100]	; (800703c <TIM_OC2_SetConfig+0x110>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d113      	bne.n	8007004 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4313      	orrs	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	621a      	str	r2, [r3, #32]
}
 800701e:	bf00      	nop
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	40012c00 	.word	0x40012c00
 8007030:	40013400 	.word	0x40013400
 8007034:	40014000 	.word	0x40014000
 8007038:	40014400 	.word	0x40014400
 800703c:	40014800 	.word	0x40014800

08007040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0303 	bic.w	r3, r3, #3
 800707a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800708c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a27      	ldr	r2, [pc, #156]	; (800713c <TIM_OC3_SetConfig+0xfc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_OC3_SetConfig+0x6a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a26      	ldr	r2, [pc, #152]	; (8007140 <TIM_OC3_SetConfig+0x100>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d10d      	bne.n	80070c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a1c      	ldr	r2, [pc, #112]	; (800713c <TIM_OC3_SetConfig+0xfc>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00f      	beq.n	80070ee <TIM_OC3_SetConfig+0xae>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a1b      	ldr	r2, [pc, #108]	; (8007140 <TIM_OC3_SetConfig+0x100>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00b      	beq.n	80070ee <TIM_OC3_SetConfig+0xae>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a1a      	ldr	r2, [pc, #104]	; (8007144 <TIM_OC3_SetConfig+0x104>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d007      	beq.n	80070ee <TIM_OC3_SetConfig+0xae>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a19      	ldr	r2, [pc, #100]	; (8007148 <TIM_OC3_SetConfig+0x108>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d003      	beq.n	80070ee <TIM_OC3_SetConfig+0xae>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a18      	ldr	r2, [pc, #96]	; (800714c <TIM_OC3_SetConfig+0x10c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d113      	bne.n	8007116 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	4313      	orrs	r3, r2
 8007114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	621a      	str	r2, [r3, #32]
}
 8007130:	bf00      	nop
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	40012c00 	.word	0x40012c00
 8007140:	40013400 	.word	0x40013400
 8007144:	40014000 	.word	0x40014000
 8007148:	40014400 	.word	0x40014400
 800714c:	40014800 	.word	0x40014800

08007150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800718a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	021b      	lsls	r3, r3, #8
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800719e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	031b      	lsls	r3, r3, #12
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a28      	ldr	r2, [pc, #160]	; (8007250 <TIM_OC4_SetConfig+0x100>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d003      	beq.n	80071bc <TIM_OC4_SetConfig+0x6c>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a27      	ldr	r2, [pc, #156]	; (8007254 <TIM_OC4_SetConfig+0x104>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d10d      	bne.n	80071d8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	031b      	lsls	r3, r3, #12
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a1d      	ldr	r2, [pc, #116]	; (8007250 <TIM_OC4_SetConfig+0x100>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00f      	beq.n	8007200 <TIM_OC4_SetConfig+0xb0>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a1c      	ldr	r2, [pc, #112]	; (8007254 <TIM_OC4_SetConfig+0x104>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00b      	beq.n	8007200 <TIM_OC4_SetConfig+0xb0>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a1b      	ldr	r2, [pc, #108]	; (8007258 <TIM_OC4_SetConfig+0x108>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d007      	beq.n	8007200 <TIM_OC4_SetConfig+0xb0>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a1a      	ldr	r2, [pc, #104]	; (800725c <TIM_OC4_SetConfig+0x10c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_OC4_SetConfig+0xb0>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a19      	ldr	r2, [pc, #100]	; (8007260 <TIM_OC4_SetConfig+0x110>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d113      	bne.n	8007228 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007206:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800720e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	019b      	lsls	r3, r3, #6
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4313      	orrs	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	019b      	lsls	r3, r3, #6
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40013400 	.word	0x40013400
 8007258:	40014000 	.word	0x40014000
 800725c:	40014400 	.word	0x40014400
 8007260:	40014800 	.word	0x40014800

08007264 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	041b      	lsls	r3, r3, #16
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a17      	ldr	r2, [pc, #92]	; (8007318 <TIM_OC5_SetConfig+0xb4>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00f      	beq.n	80072de <TIM_OC5_SetConfig+0x7a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a16      	ldr	r2, [pc, #88]	; (800731c <TIM_OC5_SetConfig+0xb8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00b      	beq.n	80072de <TIM_OC5_SetConfig+0x7a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a15      	ldr	r2, [pc, #84]	; (8007320 <TIM_OC5_SetConfig+0xbc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d007      	beq.n	80072de <TIM_OC5_SetConfig+0x7a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a14      	ldr	r2, [pc, #80]	; (8007324 <TIM_OC5_SetConfig+0xc0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d003      	beq.n	80072de <TIM_OC5_SetConfig+0x7a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a13      	ldr	r2, [pc, #76]	; (8007328 <TIM_OC5_SetConfig+0xc4>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d109      	bne.n	80072f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	021b      	lsls	r3, r3, #8
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	621a      	str	r2, [r3, #32]
}
 800730c:	bf00      	nop
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	40012c00 	.word	0x40012c00
 800731c:	40013400 	.word	0x40013400
 8007320:	40014000 	.word	0x40014000
 8007324:	40014400 	.word	0x40014400
 8007328:	40014800 	.word	0x40014800

0800732c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800735a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800735e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	021b      	lsls	r3, r3, #8
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	051b      	lsls	r3, r3, #20
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <TIM_OC6_SetConfig+0xb8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00f      	beq.n	80073a8 <TIM_OC6_SetConfig+0x7c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <TIM_OC6_SetConfig+0xbc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00b      	beq.n	80073a8 <TIM_OC6_SetConfig+0x7c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a16      	ldr	r2, [pc, #88]	; (80073ec <TIM_OC6_SetConfig+0xc0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d007      	beq.n	80073a8 <TIM_OC6_SetConfig+0x7c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a15      	ldr	r2, [pc, #84]	; (80073f0 <TIM_OC6_SetConfig+0xc4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d003      	beq.n	80073a8 <TIM_OC6_SetConfig+0x7c>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a14      	ldr	r2, [pc, #80]	; (80073f4 <TIM_OC6_SetConfig+0xc8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d109      	bne.n	80073bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	029b      	lsls	r3, r3, #10
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40012c00 	.word	0x40012c00
 80073e8:	40013400 	.word	0x40013400
 80073ec:	40014000 	.word	0x40014000
 80073f0:	40014400 	.word	0x40014400
 80073f4:	40014800 	.word	0x40014800

080073f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f023 0201 	bic.w	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f023 030a 	bic.w	r3, r3, #10
 8007434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007456:	b480      	push	{r7}
 8007458:	b087      	sub	sp, #28
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	f023 0210 	bic.w	r2, r3, #16
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	031b      	lsls	r3, r3, #12
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	011b      	lsls	r3, r3, #4
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	4313      	orrs	r3, r2
 800749c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80074cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f043 0307 	orr.w	r3, r3, #7
 80074dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	609a      	str	r2, [r3, #8]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800750a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	021a      	lsls	r2, r3, #8
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	431a      	orrs	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4313      	orrs	r3, r2
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	609a      	str	r2, [r3, #8]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007540:	2b01      	cmp	r3, #1
 8007542:	d101      	bne.n	8007548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007544:	2302      	movs	r3, #2
 8007546:	e065      	b.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a2c      	ldr	r2, [pc, #176]	; (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d004      	beq.n	800757c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a2b      	ldr	r2, [pc, #172]	; (8007624 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d108      	bne.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007582:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007598:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d018      	beq.n	80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075be:	d013      	beq.n	80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a18      	ldr	r2, [pc, #96]	; (8007628 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00e      	beq.n	80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a17      	ldr	r2, [pc, #92]	; (800762c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d009      	beq.n	80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a12      	ldr	r2, [pc, #72]	; (8007624 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d004      	beq.n	80075e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a13      	ldr	r2, [pc, #76]	; (8007630 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d10c      	bne.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3714      	adds	r7, #20
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	40012c00 	.word	0x40012c00
 8007624:	40013400 	.word	0x40013400
 8007628:	40000400 	.word	0x40000400
 800762c:	40000800 	.word	0x40000800
 8007630:	40014000 	.word	0x40014000

08007634 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800764c:	2302      	movs	r3, #2
 800764e:	e087      	b.n	8007760 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	041b      	lsls	r3, r3, #16
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a27      	ldr	r2, [pc, #156]	; (800776c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d004      	beq.n	80076de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a25      	ldr	r2, [pc, #148]	; (8007770 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d106      	bne.n	80076ec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1e      	ldr	r2, [pc, #120]	; (800776c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a1d      	ldr	r2, [pc, #116]	; (8007770 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d126      	bne.n	800774e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	051b      	lsls	r3, r3, #20
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0e      	ldr	r2, [pc, #56]	; (800776c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d004      	beq.n	8007740 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a0d      	ldr	r2, [pc, #52]	; (8007770 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d106      	bne.n	800774e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	40012c00 	.word	0x40012c00
 8007770:	40013400 	.word	0x40013400

08007774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e042      	b.n	800780c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800778c:	2b00      	cmp	r3, #0
 800778e:	d106      	bne.n	800779e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7fa fdd5 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2224      	movs	r2, #36	; 0x24
 80077a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f022 0201 	bic.w	r2, r2, #1
 80077b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fbfa 	bl	8007fb0 <UART_SetConfig>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e022      	b.n	800780c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 feba 	bl	8008548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0201 	orr.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 ff41 	bl	800868c <UART_CheckIdleState>
 800780a:	4603      	mov	r3, r0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	4613      	mov	r3, r2
 8007822:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800782a:	2b20      	cmp	r3, #32
 800782c:	f040 8083 	bne.w	8007936 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <HAL_UART_Transmit+0x28>
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e07b      	b.n	8007938 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_UART_Transmit+0x3a>
 800784a:	2302      	movs	r3, #2
 800784c:	e074      	b.n	8007938 <HAL_UART_Transmit+0x124>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2221      	movs	r2, #33	; 0x21
 8007862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007866:	f7fa ff77 	bl	8002758 <HAL_GetTick>
 800786a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	88fa      	ldrh	r2, [r7, #6]
 8007870:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	88fa      	ldrh	r2, [r7, #6]
 8007878:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007884:	d108      	bne.n	8007898 <HAL_UART_Transmit+0x84>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	61bb      	str	r3, [r7, #24]
 8007896:	e003      	b.n	80078a0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800789c:	2300      	movs	r3, #0
 800789e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80078a8:	e02c      	b.n	8007904 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2200      	movs	r2, #0
 80078b2:	2180      	movs	r1, #128	; 0x80
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 ff34 	bl	8008722 <UART_WaitOnFlagUntilTimeout>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e039      	b.n	8007938 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10b      	bne.n	80078e2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	3302      	adds	r3, #2
 80078de:	61bb      	str	r3, [r7, #24]
 80078e0:	e007      	b.n	80078f2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	781a      	ldrb	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	3301      	adds	r3, #1
 80078f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1cc      	bne.n	80078aa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2200      	movs	r2, #0
 8007918:	2140      	movs	r1, #64	; 0x40
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 ff01 	bl	8008722 <UART_WaitOnFlagUntilTimeout>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e006      	b.n	8007938 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	e000      	b.n	8007938 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007936:	2302      	movs	r3, #2
  }
}
 8007938:	4618      	mov	r0, r3
 800793a:	3720      	adds	r7, #32
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b0ba      	sub	sp, #232	; 0xe8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007966:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800796a:	f640 030f 	movw	r3, #2063	; 0x80f
 800796e:	4013      	ands	r3, r2
 8007970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007978:	2b00      	cmp	r3, #0
 800797a:	d11b      	bne.n	80079b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800797c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b00      	cmp	r3, #0
 8007986:	d015      	beq.n	80079b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	d105      	bne.n	80079a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d009      	beq.n	80079b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 82d6 	beq.w	8007f56 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
      }
      return;
 80079b2:	e2d0      	b.n	8007f56 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 811f 	beq.w	8007bfc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80079be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80079c2:	4b8b      	ldr	r3, [pc, #556]	; (8007bf0 <HAL_UART_IRQHandler+0x2b0>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80079ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079ce:	4b89      	ldr	r3, [pc, #548]	; (8007bf4 <HAL_UART_IRQHandler+0x2b4>)
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8112 	beq.w	8007bfc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d011      	beq.n	8007a08 <HAL_UART_IRQHandler+0xc8>
 80079e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2201      	movs	r2, #1
 80079f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079fe:	f043 0201 	orr.w	r2, r3, #1
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d011      	beq.n	8007a38 <HAL_UART_IRQHandler+0xf8>
 8007a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2202      	movs	r2, #2
 8007a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a2e:	f043 0204 	orr.w	r2, r3, #4
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d011      	beq.n	8007a68 <HAL_UART_IRQHandler+0x128>
 8007a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2204      	movs	r2, #4
 8007a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a5e:	f043 0202 	orr.w	r2, r3, #2
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6c:	f003 0308 	and.w	r3, r3, #8
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d017      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a78:	f003 0320 	and.w	r3, r3, #32
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d105      	bne.n	8007a8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a84:	4b5a      	ldr	r3, [pc, #360]	; (8007bf0 <HAL_UART_IRQHandler+0x2b0>)
 8007a86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2208      	movs	r2, #8
 8007a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9a:	f043 0208 	orr.w	r2, r3, #8
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d012      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x196>
 8007ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00c      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007acc:	f043 0220 	orr.w	r2, r3, #32
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 823c 	beq.w	8007f5a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae6:	f003 0320 	and.w	r3, r3, #32
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d013      	beq.n	8007b16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d105      	bne.n	8007b06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d007      	beq.n	8007b16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b40      	cmp	r3, #64	; 0x40
 8007b2c:	d005      	beq.n	8007b3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d04f      	beq.n	8007bda <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 feb9 	bl	80088b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4a:	2b40      	cmp	r3, #64	; 0x40
 8007b4c:	d141      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3308      	adds	r3, #8
 8007b54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3308      	adds	r3, #8
 8007b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1d9      	bne.n	8007b4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d013      	beq.n	8007bca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba6:	4a14      	ldr	r2, [pc, #80]	; (8007bf8 <HAL_UART_IRQHandler+0x2b8>)
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fc fbab 	bl	800430a <HAL_DMA_Abort_IT>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d017      	beq.n	8007bea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc8:	e00f      	b.n	8007bea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f9da 	bl	8007f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd0:	e00b      	b.n	8007bea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f9d6 	bl	8007f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd8:	e007      	b.n	8007bea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9d2 	bl	8007f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007be8:	e1b7      	b.n	8007f5a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bea:	bf00      	nop
    return;
 8007bec:	e1b5      	b.n	8007f5a <HAL_UART_IRQHandler+0x61a>
 8007bee:	bf00      	nop
 8007bf0:	10000001 	.word	0x10000001
 8007bf4:	04000120 	.word	0x04000120
 8007bf8:	0800897f 	.word	0x0800897f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	f040 814a 	bne.w	8007e9a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0310 	and.w	r3, r3, #16
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 8143 	beq.w	8007e9a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 813c 	beq.w	8007e9a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2210      	movs	r2, #16
 8007c28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c34:	2b40      	cmp	r3, #64	; 0x40
 8007c36:	f040 80b5 	bne.w	8007da4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 8187 	beq.w	8007f5e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	f080 817f 	bcs.w	8007f5e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0320 	and.w	r3, r3, #32
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 8086 	bne.w	8007d88 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007caa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1da      	bne.n	8007c7c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e1      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3308      	adds	r3, #8
 8007d22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e3      	bne.n	8007d02 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d58:	f023 0310 	bic.w	r3, r3, #16
 8007d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e4      	bne.n	8007d48 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fc fa68 	bl	8004258 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f8fb 	bl	8007f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007da2:	e0dc      	b.n	8007f5e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80ce 	beq.w	8007f62 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007dc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 80c9 	beq.w	8007f62 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007df2:	647b      	str	r3, [r7, #68]	; 0x44
 8007df4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007df8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e4      	bne.n	8007dd0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	e853 3f00 	ldrex	r3, [r3]
 8007e14:	623b      	str	r3, [r7, #32]
   return(result);
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e1c:	f023 0301 	bic.w	r3, r3, #1
 8007e20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3308      	adds	r3, #8
 8007e2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e2e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e36:	e841 2300 	strex	r3, r2, [r1]
 8007e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1e1      	bne.n	8007e06 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2220      	movs	r2, #32
 8007e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0310 	bic.w	r3, r3, #16
 8007e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e78:	61fb      	str	r3, [r7, #28]
 8007e7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7c:	69b9      	ldr	r1, [r7, #24]
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	e841 2300 	strex	r3, r2, [r1]
 8007e84:	617b      	str	r3, [r7, #20]
   return(result);
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1e4      	bne.n	8007e56 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f880 	bl	8007f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e98:	e063      	b.n	8007f62 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00e      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x584>
 8007ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007eba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fd9f 	bl	8008a00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ec2:	e051      	b.n	8007f68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d014      	beq.n	8007efa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d105      	bne.n	8007ee8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d008      	beq.n	8007efa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d03a      	beq.n	8007f66 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
    }
    return;
 8007ef8:	e035      	b.n	8007f66 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <HAL_UART_IRQHandler+0x5da>
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fd49 	bl	80089aa <UART_EndTransmit_IT>
    return;
 8007f18:	e026      	b.n	8007f68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d009      	beq.n	8007f3a <HAL_UART_IRQHandler+0x5fa>
 8007f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fd78 	bl	8008a28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f38:	e016      	b.n	8007f68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d010      	beq.n	8007f68 <HAL_UART_IRQHandler+0x628>
 8007f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	da0c      	bge.n	8007f68 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fd60 	bl	8008a14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f54:	e008      	b.n	8007f68 <HAL_UART_IRQHandler+0x628>
      return;
 8007f56:	bf00      	nop
 8007f58:	e006      	b.n	8007f68 <HAL_UART_IRQHandler+0x628>
    return;
 8007f5a:	bf00      	nop
 8007f5c:	e004      	b.n	8007f68 <HAL_UART_IRQHandler+0x628>
      return;
 8007f5e:	bf00      	nop
 8007f60:	e002      	b.n	8007f68 <HAL_UART_IRQHandler+0x628>
      return;
 8007f62:	bf00      	nop
 8007f64:	e000      	b.n	8007f68 <HAL_UART_IRQHandler+0x628>
    return;
 8007f66:	bf00      	nop
  }
}
 8007f68:	37e8      	adds	r7, #232	; 0xe8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop

08007f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fb4:	b08c      	sub	sp, #48	; 0x30
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	4bab      	ldr	r3, [pc, #684]	; (800828c <UART_SetConfig+0x2dc>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	697a      	ldr	r2, [r7, #20]
 8007fe4:	6812      	ldr	r2, [r2, #0]
 8007fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4aa0      	ldr	r2, [pc, #640]	; (8008290 <UART_SetConfig+0x2e0>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d004      	beq.n	800801c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008018:	4313      	orrs	r3, r2
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008026:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	6812      	ldr	r2, [r2, #0]
 800802e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008030:	430b      	orrs	r3, r1
 8008032:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803a:	f023 010f 	bic.w	r1, r3, #15
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a91      	ldr	r2, [pc, #580]	; (8008294 <UART_SetConfig+0x2e4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d125      	bne.n	80080a0 <UART_SetConfig+0xf0>
 8008054:	4b90      	ldr	r3, [pc, #576]	; (8008298 <UART_SetConfig+0x2e8>)
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	2b03      	cmp	r3, #3
 8008060:	d81a      	bhi.n	8008098 <UART_SetConfig+0xe8>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <UART_SetConfig+0xb8>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	08008079 	.word	0x08008079
 800806c:	08008089 	.word	0x08008089
 8008070:	08008081 	.word	0x08008081
 8008074:	08008091 	.word	0x08008091
 8008078:	2301      	movs	r3, #1
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807e:	e0d6      	b.n	800822e <UART_SetConfig+0x27e>
 8008080:	2302      	movs	r3, #2
 8008082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008086:	e0d2      	b.n	800822e <UART_SetConfig+0x27e>
 8008088:	2304      	movs	r3, #4
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800808e:	e0ce      	b.n	800822e <UART_SetConfig+0x27e>
 8008090:	2308      	movs	r3, #8
 8008092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008096:	e0ca      	b.n	800822e <UART_SetConfig+0x27e>
 8008098:	2310      	movs	r3, #16
 800809a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800809e:	e0c6      	b.n	800822e <UART_SetConfig+0x27e>
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a7d      	ldr	r2, [pc, #500]	; (800829c <UART_SetConfig+0x2ec>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d138      	bne.n	800811c <UART_SetConfig+0x16c>
 80080aa:	4b7b      	ldr	r3, [pc, #492]	; (8008298 <UART_SetConfig+0x2e8>)
 80080ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b0:	f003 030c 	and.w	r3, r3, #12
 80080b4:	2b0c      	cmp	r3, #12
 80080b6:	d82d      	bhi.n	8008114 <UART_SetConfig+0x164>
 80080b8:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <UART_SetConfig+0x110>)
 80080ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080be:	bf00      	nop
 80080c0:	080080f5 	.word	0x080080f5
 80080c4:	08008115 	.word	0x08008115
 80080c8:	08008115 	.word	0x08008115
 80080cc:	08008115 	.word	0x08008115
 80080d0:	08008105 	.word	0x08008105
 80080d4:	08008115 	.word	0x08008115
 80080d8:	08008115 	.word	0x08008115
 80080dc:	08008115 	.word	0x08008115
 80080e0:	080080fd 	.word	0x080080fd
 80080e4:	08008115 	.word	0x08008115
 80080e8:	08008115 	.word	0x08008115
 80080ec:	08008115 	.word	0x08008115
 80080f0:	0800810d 	.word	0x0800810d
 80080f4:	2300      	movs	r3, #0
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080fa:	e098      	b.n	800822e <UART_SetConfig+0x27e>
 80080fc:	2302      	movs	r3, #2
 80080fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008102:	e094      	b.n	800822e <UART_SetConfig+0x27e>
 8008104:	2304      	movs	r3, #4
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800810a:	e090      	b.n	800822e <UART_SetConfig+0x27e>
 800810c:	2308      	movs	r3, #8
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008112:	e08c      	b.n	800822e <UART_SetConfig+0x27e>
 8008114:	2310      	movs	r3, #16
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811a:	e088      	b.n	800822e <UART_SetConfig+0x27e>
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a5f      	ldr	r2, [pc, #380]	; (80082a0 <UART_SetConfig+0x2f0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d125      	bne.n	8008172 <UART_SetConfig+0x1c2>
 8008126:	4b5c      	ldr	r3, [pc, #368]	; (8008298 <UART_SetConfig+0x2e8>)
 8008128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008130:	2b30      	cmp	r3, #48	; 0x30
 8008132:	d016      	beq.n	8008162 <UART_SetConfig+0x1b2>
 8008134:	2b30      	cmp	r3, #48	; 0x30
 8008136:	d818      	bhi.n	800816a <UART_SetConfig+0x1ba>
 8008138:	2b20      	cmp	r3, #32
 800813a:	d00a      	beq.n	8008152 <UART_SetConfig+0x1a2>
 800813c:	2b20      	cmp	r3, #32
 800813e:	d814      	bhi.n	800816a <UART_SetConfig+0x1ba>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <UART_SetConfig+0x19a>
 8008144:	2b10      	cmp	r3, #16
 8008146:	d008      	beq.n	800815a <UART_SetConfig+0x1aa>
 8008148:	e00f      	b.n	800816a <UART_SetConfig+0x1ba>
 800814a:	2300      	movs	r3, #0
 800814c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008150:	e06d      	b.n	800822e <UART_SetConfig+0x27e>
 8008152:	2302      	movs	r3, #2
 8008154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008158:	e069      	b.n	800822e <UART_SetConfig+0x27e>
 800815a:	2304      	movs	r3, #4
 800815c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008160:	e065      	b.n	800822e <UART_SetConfig+0x27e>
 8008162:	2308      	movs	r3, #8
 8008164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008168:	e061      	b.n	800822e <UART_SetConfig+0x27e>
 800816a:	2310      	movs	r3, #16
 800816c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008170:	e05d      	b.n	800822e <UART_SetConfig+0x27e>
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a4b      	ldr	r2, [pc, #300]	; (80082a4 <UART_SetConfig+0x2f4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d125      	bne.n	80081c8 <UART_SetConfig+0x218>
 800817c:	4b46      	ldr	r3, [pc, #280]	; (8008298 <UART_SetConfig+0x2e8>)
 800817e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008182:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008186:	2bc0      	cmp	r3, #192	; 0xc0
 8008188:	d016      	beq.n	80081b8 <UART_SetConfig+0x208>
 800818a:	2bc0      	cmp	r3, #192	; 0xc0
 800818c:	d818      	bhi.n	80081c0 <UART_SetConfig+0x210>
 800818e:	2b80      	cmp	r3, #128	; 0x80
 8008190:	d00a      	beq.n	80081a8 <UART_SetConfig+0x1f8>
 8008192:	2b80      	cmp	r3, #128	; 0x80
 8008194:	d814      	bhi.n	80081c0 <UART_SetConfig+0x210>
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <UART_SetConfig+0x1f0>
 800819a:	2b40      	cmp	r3, #64	; 0x40
 800819c:	d008      	beq.n	80081b0 <UART_SetConfig+0x200>
 800819e:	e00f      	b.n	80081c0 <UART_SetConfig+0x210>
 80081a0:	2300      	movs	r3, #0
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a6:	e042      	b.n	800822e <UART_SetConfig+0x27e>
 80081a8:	2302      	movs	r3, #2
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ae:	e03e      	b.n	800822e <UART_SetConfig+0x27e>
 80081b0:	2304      	movs	r3, #4
 80081b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b6:	e03a      	b.n	800822e <UART_SetConfig+0x27e>
 80081b8:	2308      	movs	r3, #8
 80081ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081be:	e036      	b.n	800822e <UART_SetConfig+0x27e>
 80081c0:	2310      	movs	r3, #16
 80081c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081c6:	e032      	b.n	800822e <UART_SetConfig+0x27e>
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a30      	ldr	r2, [pc, #192]	; (8008290 <UART_SetConfig+0x2e0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d12a      	bne.n	8008228 <UART_SetConfig+0x278>
 80081d2:	4b31      	ldr	r3, [pc, #196]	; (8008298 <UART_SetConfig+0x2e8>)
 80081d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e0:	d01a      	beq.n	8008218 <UART_SetConfig+0x268>
 80081e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e6:	d81b      	bhi.n	8008220 <UART_SetConfig+0x270>
 80081e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ec:	d00c      	beq.n	8008208 <UART_SetConfig+0x258>
 80081ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f2:	d815      	bhi.n	8008220 <UART_SetConfig+0x270>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <UART_SetConfig+0x250>
 80081f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081fc:	d008      	beq.n	8008210 <UART_SetConfig+0x260>
 80081fe:	e00f      	b.n	8008220 <UART_SetConfig+0x270>
 8008200:	2300      	movs	r3, #0
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008206:	e012      	b.n	800822e <UART_SetConfig+0x27e>
 8008208:	2302      	movs	r3, #2
 800820a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820e:	e00e      	b.n	800822e <UART_SetConfig+0x27e>
 8008210:	2304      	movs	r3, #4
 8008212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008216:	e00a      	b.n	800822e <UART_SetConfig+0x27e>
 8008218:	2308      	movs	r3, #8
 800821a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800821e:	e006      	b.n	800822e <UART_SetConfig+0x27e>
 8008220:	2310      	movs	r3, #16
 8008222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008226:	e002      	b.n	800822e <UART_SetConfig+0x27e>
 8008228:	2310      	movs	r3, #16
 800822a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a17      	ldr	r2, [pc, #92]	; (8008290 <UART_SetConfig+0x2e0>)
 8008234:	4293      	cmp	r3, r2
 8008236:	f040 80a8 	bne.w	800838a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800823a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800823e:	2b08      	cmp	r3, #8
 8008240:	d834      	bhi.n	80082ac <UART_SetConfig+0x2fc>
 8008242:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <UART_SetConfig+0x298>)
 8008244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008248:	0800826d 	.word	0x0800826d
 800824c:	080082ad 	.word	0x080082ad
 8008250:	08008275 	.word	0x08008275
 8008254:	080082ad 	.word	0x080082ad
 8008258:	0800827b 	.word	0x0800827b
 800825c:	080082ad 	.word	0x080082ad
 8008260:	080082ad 	.word	0x080082ad
 8008264:	080082ad 	.word	0x080082ad
 8008268:	08008283 	.word	0x08008283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800826c:	f7fd fe90 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 8008270:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008272:	e021      	b.n	80082b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <UART_SetConfig+0x2f8>)
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008278:	e01e      	b.n	80082b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800827a:	f7fd fe1b 	bl	8005eb4 <HAL_RCC_GetSysClockFreq>
 800827e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008280:	e01a      	b.n	80082b8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008286:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008288:	e016      	b.n	80082b8 <UART_SetConfig+0x308>
 800828a:	bf00      	nop
 800828c:	cfff69f3 	.word	0xcfff69f3
 8008290:	40008000 	.word	0x40008000
 8008294:	40013800 	.word	0x40013800
 8008298:	40021000 	.word	0x40021000
 800829c:	40004400 	.word	0x40004400
 80082a0:	40004800 	.word	0x40004800
 80082a4:	40004c00 	.word	0x40004c00
 80082a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 812a 	beq.w	8008514 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	4a9e      	ldr	r2, [pc, #632]	; (8008540 <UART_SetConfig+0x590>)
 80082c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082ca:	461a      	mov	r2, r3
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80082d2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	4613      	mov	r3, r2
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	4413      	add	r3, r2
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d305      	bcc.n	80082f0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082ea:	69ba      	ldr	r2, [r7, #24]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d903      	bls.n	80082f8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082f6:	e10d      	b.n	8008514 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	2200      	movs	r2, #0
 80082fc:	60bb      	str	r3, [r7, #8]
 80082fe:	60fa      	str	r2, [r7, #12]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	4a8e      	ldr	r2, [pc, #568]	; (8008540 <UART_SetConfig+0x590>)
 8008306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800830a:	b29b      	uxth	r3, r3
 800830c:	2200      	movs	r2, #0
 800830e:	603b      	str	r3, [r7, #0]
 8008310:	607a      	str	r2, [r7, #4]
 8008312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800831a:	f7f8 fc6d 	bl	8000bf8 <__aeabi_uldivmod>
 800831e:	4602      	mov	r2, r0
 8008320:	460b      	mov	r3, r1
 8008322:	4610      	mov	r0, r2
 8008324:	4619      	mov	r1, r3
 8008326:	f04f 0200 	mov.w	r2, #0
 800832a:	f04f 0300 	mov.w	r3, #0
 800832e:	020b      	lsls	r3, r1, #8
 8008330:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008334:	0202      	lsls	r2, r0, #8
 8008336:	6979      	ldr	r1, [r7, #20]
 8008338:	6849      	ldr	r1, [r1, #4]
 800833a:	0849      	lsrs	r1, r1, #1
 800833c:	2000      	movs	r0, #0
 800833e:	460c      	mov	r4, r1
 8008340:	4605      	mov	r5, r0
 8008342:	eb12 0804 	adds.w	r8, r2, r4
 8008346:	eb43 0905 	adc.w	r9, r3, r5
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	469a      	mov	sl, r3
 8008352:	4693      	mov	fp, r2
 8008354:	4652      	mov	r2, sl
 8008356:	465b      	mov	r3, fp
 8008358:	4640      	mov	r0, r8
 800835a:	4649      	mov	r1, r9
 800835c:	f7f8 fc4c 	bl	8000bf8 <__aeabi_uldivmod>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4613      	mov	r3, r2
 8008366:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800836e:	d308      	bcc.n	8008382 <UART_SetConfig+0x3d2>
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008376:	d204      	bcs.n	8008382 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6a3a      	ldr	r2, [r7, #32]
 800837e:	60da      	str	r2, [r3, #12]
 8008380:	e0c8      	b.n	8008514 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008388:	e0c4      	b.n	8008514 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008392:	d167      	bne.n	8008464 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008398:	2b08      	cmp	r3, #8
 800839a:	d828      	bhi.n	80083ee <UART_SetConfig+0x43e>
 800839c:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <UART_SetConfig+0x3f4>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	080083c9 	.word	0x080083c9
 80083a8:	080083d1 	.word	0x080083d1
 80083ac:	080083d9 	.word	0x080083d9
 80083b0:	080083ef 	.word	0x080083ef
 80083b4:	080083df 	.word	0x080083df
 80083b8:	080083ef 	.word	0x080083ef
 80083bc:	080083ef 	.word	0x080083ef
 80083c0:	080083ef 	.word	0x080083ef
 80083c4:	080083e7 	.word	0x080083e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083c8:	f7fd fde2 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 80083cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ce:	e014      	b.n	80083fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083d0:	f7fd fdf4 	bl	8005fbc <HAL_RCC_GetPCLK2Freq>
 80083d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083d6:	e010      	b.n	80083fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083d8:	4b5a      	ldr	r3, [pc, #360]	; (8008544 <UART_SetConfig+0x594>)
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083dc:	e00d      	b.n	80083fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083de:	f7fd fd69 	bl	8005eb4 <HAL_RCC_GetSysClockFreq>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083e4:	e009      	b.n	80083fa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083ec:	e005      	b.n	80083fa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8089 	beq.w	8008514 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	4a4e      	ldr	r2, [pc, #312]	; (8008540 <UART_SetConfig+0x590>)
 8008408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800840c:	461a      	mov	r2, r3
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	fbb3 f3f2 	udiv	r3, r3, r2
 8008414:	005a      	lsls	r2, r3, #1
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	085b      	lsrs	r3, r3, #1
 800841c:	441a      	add	r2, r3
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	fbb2 f3f3 	udiv	r3, r2, r3
 8008426:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	2b0f      	cmp	r3, #15
 800842c:	d916      	bls.n	800845c <UART_SetConfig+0x4ac>
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008434:	d212      	bcs.n	800845c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	b29b      	uxth	r3, r3
 800843a:	f023 030f 	bic.w	r3, r3, #15
 800843e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	085b      	lsrs	r3, r3, #1
 8008444:	b29b      	uxth	r3, r3
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	b29a      	uxth	r2, r3
 800844c:	8bfb      	ldrh	r3, [r7, #30]
 800844e:	4313      	orrs	r3, r2
 8008450:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	8bfa      	ldrh	r2, [r7, #30]
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e05b      	b.n	8008514 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008462:	e057      	b.n	8008514 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008464:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008468:	2b08      	cmp	r3, #8
 800846a:	d828      	bhi.n	80084be <UART_SetConfig+0x50e>
 800846c:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <UART_SetConfig+0x4c4>)
 800846e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008472:	bf00      	nop
 8008474:	08008499 	.word	0x08008499
 8008478:	080084a1 	.word	0x080084a1
 800847c:	080084a9 	.word	0x080084a9
 8008480:	080084bf 	.word	0x080084bf
 8008484:	080084af 	.word	0x080084af
 8008488:	080084bf 	.word	0x080084bf
 800848c:	080084bf 	.word	0x080084bf
 8008490:	080084bf 	.word	0x080084bf
 8008494:	080084b7 	.word	0x080084b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008498:	f7fd fd7a 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 800849c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800849e:	e014      	b.n	80084ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084a0:	f7fd fd8c 	bl	8005fbc <HAL_RCC_GetPCLK2Freq>
 80084a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084a6:	e010      	b.n	80084ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084a8:	4b26      	ldr	r3, [pc, #152]	; (8008544 <UART_SetConfig+0x594>)
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084ac:	e00d      	b.n	80084ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ae:	f7fd fd01 	bl	8005eb4 <HAL_RCC_GetSysClockFreq>
 80084b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084b4:	e009      	b.n	80084ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084bc:	e005      	b.n	80084ca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084c8:	bf00      	nop
    }

    if (pclk != 0U)
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d021      	beq.n	8008514 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	4a1a      	ldr	r2, [pc, #104]	; (8008540 <UART_SetConfig+0x590>)
 80084d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084da:	461a      	mov	r2, r3
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	fbb3 f2f2 	udiv	r2, r3, r2
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	085b      	lsrs	r3, r3, #1
 80084e8:	441a      	add	r2, r3
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	2b0f      	cmp	r3, #15
 80084f8:	d909      	bls.n	800850e <UART_SetConfig+0x55e>
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008500:	d205      	bcs.n	800850e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	b29a      	uxth	r2, r3
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60da      	str	r2, [r3, #12]
 800850c:	e002      	b.n	8008514 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2201      	movs	r2, #1
 8008518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	2201      	movs	r2, #1
 8008520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	2200      	movs	r2, #0
 8008528:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2200      	movs	r2, #0
 800852e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008530:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008534:	4618      	mov	r0, r3
 8008536:	3730      	adds	r7, #48	; 0x30
 8008538:	46bd      	mov	sp, r7
 800853a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800853e:	bf00      	nop
 8008540:	0800ba24 	.word	0x0800ba24
 8008544:	00f42400 	.word	0x00f42400

08008548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00a      	beq.n	8008572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	430a      	orrs	r2, r1
 80085d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00a      	beq.n	80085fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01a      	beq.n	800865e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008646:	d10a      	bne.n	800865e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	605a      	str	r2, [r3, #4]
  }
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af02      	add	r7, sp, #8
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800869c:	f7fa f85c 	bl	8002758 <HAL_GetTick>
 80086a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0308 	and.w	r3, r3, #8
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d10e      	bne.n	80086ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f82f 	bl	8008722 <UART_WaitOnFlagUntilTimeout>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e025      	b.n	800871a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d10e      	bne.n	80086fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f819 	bl	8008722 <UART_WaitOnFlagUntilTimeout>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e00f      	b.n	800871a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2220      	movs	r2, #32
 8008706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b09c      	sub	sp, #112	; 0x70
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	603b      	str	r3, [r7, #0]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008732:	e0a9      	b.n	8008888 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873a:	f000 80a5 	beq.w	8008888 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800873e:	f7fa f80b 	bl	8002758 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800874a:	429a      	cmp	r2, r3
 800874c:	d302      	bcc.n	8008754 <UART_WaitOnFlagUntilTimeout+0x32>
 800874e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008750:	2b00      	cmp	r3, #0
 8008752:	d140      	bne.n	80087d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008764:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008768:	667b      	str	r3, [r7, #100]	; 0x64
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008772:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008774:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008776:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1e6      	bne.n	8008754 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3308      	adds	r3, #8
 800878c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	f023 0301 	bic.w	r3, r3, #1
 800879c:	663b      	str	r3, [r7, #96]	; 0x60
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3308      	adds	r3, #8
 80087a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80087a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e5      	bne.n	8008786 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2220      	movs	r2, #32
 80087be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e069      	b.n	80088aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d051      	beq.n	8008888 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087f2:	d149      	bne.n	8008888 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008812:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800881c:	637b      	str	r3, [r7, #52]	; 0x34
 800881e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e6      	bne.n	80087fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	613b      	str	r3, [r7, #16]
   return(result);
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f023 0301 	bic.w	r3, r3, #1
 8008846:	66bb      	str	r3, [r7, #104]	; 0x68
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3308      	adds	r3, #8
 800884e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008850:	623a      	str	r2, [r7, #32]
 8008852:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	69f9      	ldr	r1, [r7, #28]
 8008856:	6a3a      	ldr	r2, [r7, #32]
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	61bb      	str	r3, [r7, #24]
   return(result);
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e5      	bne.n	8008830 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2220      	movs	r2, #32
 8008868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2220      	movs	r2, #32
 8008870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2220      	movs	r2, #32
 8008878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e010      	b.n	80088aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69da      	ldr	r2, [r3, #28]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	4013      	ands	r3, r2
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	429a      	cmp	r2, r3
 8008896:	bf0c      	ite	eq
 8008898:	2301      	moveq	r3, #1
 800889a:	2300      	movne	r3, #0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	461a      	mov	r2, r3
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	f43f af46 	beq.w	8008734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3770      	adds	r7, #112	; 0x70
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b095      	sub	sp, #84	; 0x54
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d8:	643b      	str	r3, [r7, #64]	; 0x40
 80088da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e6      	bne.n	80088ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3308      	adds	r3, #8
 80088f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008902:	f023 0301 	bic.w	r3, r3, #1
 8008906:	64bb      	str	r3, [r7, #72]	; 0x48
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3308      	adds	r3, #8
 800890e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e3      	bne.n	80088ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008928:	2b01      	cmp	r3, #1
 800892a:	d118      	bne.n	800895e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	60bb      	str	r3, [r7, #8]
   return(result);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f023 0310 	bic.w	r3, r3, #16
 8008940:	647b      	str	r3, [r7, #68]	; 0x44
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800894a:	61bb      	str	r3, [r7, #24]
 800894c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	6979      	ldr	r1, [r7, #20]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	613b      	str	r3, [r7, #16]
   return(result);
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e6      	bne.n	800892c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008972:	bf00      	nop
 8008974:	3754      	adds	r7, #84	; 0x54
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f7ff faf1 	bl	8007f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a2:	bf00      	nop
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b088      	sub	sp, #32
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	60bb      	str	r3, [r7, #8]
   return(result);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089c6:	61fb      	str	r3, [r7, #28]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	461a      	mov	r2, r3
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	61bb      	str	r3, [r7, #24]
 80089d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6979      	ldr	r1, [r7, #20]
 80089d6:	69ba      	ldr	r2, [r7, #24]
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	613b      	str	r3, [r7, #16]
   return(result);
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e6      	bne.n	80089b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2220      	movs	r2, #32
 80089e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff fabc 	bl	8007f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089f8:	bf00      	nop
 80089fa:	3720      	adds	r7, #32
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e027      	b.n	8008aa2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2224      	movs	r2, #36	; 0x24
 8008a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0201 	bic.w	r2, r2, #1
 8008a78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e02d      	b.n	8008b22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2224      	movs	r2, #36	; 0x24
 8008ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0201 	bic.w	r2, r2, #1
 8008aec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f850 	bl	8008ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d101      	bne.n	8008b42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e02d      	b.n	8008b9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2224      	movs	r2, #36	; 0x24
 8008b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 0201 	bic.w	r2, r2, #1
 8008b68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f812 	bl	8008ba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d108      	bne.n	8008bca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bc8:	e031      	b.n	8008c2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bca:	2308      	movs	r3, #8
 8008bcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bce:	2308      	movs	r3, #8
 8008bd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	0e5b      	lsrs	r3, r3, #25
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	0f5b      	lsrs	r3, r3, #29
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	f003 0307 	and.w	r3, r3, #7
 8008bf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bf2:	7bbb      	ldrb	r3, [r7, #14]
 8008bf4:	7b3a      	ldrb	r2, [r7, #12]
 8008bf6:	4911      	ldr	r1, [pc, #68]	; (8008c3c <UARTEx_SetNbDataToProcess+0x94>)
 8008bf8:	5c8a      	ldrb	r2, [r1, r2]
 8008bfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bfe:	7b3a      	ldrb	r2, [r7, #12]
 8008c00:	490f      	ldr	r1, [pc, #60]	; (8008c40 <UARTEx_SetNbDataToProcess+0x98>)
 8008c02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	7b7a      	ldrb	r2, [r7, #13]
 8008c14:	4909      	ldr	r1, [pc, #36]	; (8008c3c <UARTEx_SetNbDataToProcess+0x94>)
 8008c16:	5c8a      	ldrb	r2, [r1, r2]
 8008c18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c1c:	7b7a      	ldrb	r2, [r7, #13]
 8008c1e:	4908      	ldr	r1, [pc, #32]	; (8008c40 <UARTEx_SetNbDataToProcess+0x98>)
 8008c20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c22:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c2e:	bf00      	nop
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	0800ba3c 	.word	0x0800ba3c
 8008c40:	0800ba44 	.word	0x0800ba44

08008c44 <__cvt>:
 8008c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c48:	ec55 4b10 	vmov	r4, r5, d0
 8008c4c:	2d00      	cmp	r5, #0
 8008c4e:	460e      	mov	r6, r1
 8008c50:	4619      	mov	r1, r3
 8008c52:	462b      	mov	r3, r5
 8008c54:	bfbb      	ittet	lt
 8008c56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008c5a:	461d      	movlt	r5, r3
 8008c5c:	2300      	movge	r3, #0
 8008c5e:	232d      	movlt	r3, #45	; 0x2d
 8008c60:	700b      	strb	r3, [r1, #0]
 8008c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c68:	4691      	mov	r9, r2
 8008c6a:	f023 0820 	bic.w	r8, r3, #32
 8008c6e:	bfbc      	itt	lt
 8008c70:	4622      	movlt	r2, r4
 8008c72:	4614      	movlt	r4, r2
 8008c74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c78:	d005      	beq.n	8008c86 <__cvt+0x42>
 8008c7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c7e:	d100      	bne.n	8008c82 <__cvt+0x3e>
 8008c80:	3601      	adds	r6, #1
 8008c82:	2102      	movs	r1, #2
 8008c84:	e000      	b.n	8008c88 <__cvt+0x44>
 8008c86:	2103      	movs	r1, #3
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	9301      	str	r3, [sp, #4]
 8008c8c:	ab02      	add	r3, sp, #8
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	ec45 4b10 	vmov	d0, r4, r5
 8008c94:	4653      	mov	r3, sl
 8008c96:	4632      	mov	r2, r6
 8008c98:	f000 fe76 	bl	8009988 <_dtoa_r>
 8008c9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	d102      	bne.n	8008caa <__cvt+0x66>
 8008ca4:	f019 0f01 	tst.w	r9, #1
 8008ca8:	d022      	beq.n	8008cf0 <__cvt+0xac>
 8008caa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cae:	eb07 0906 	add.w	r9, r7, r6
 8008cb2:	d110      	bne.n	8008cd6 <__cvt+0x92>
 8008cb4:	783b      	ldrb	r3, [r7, #0]
 8008cb6:	2b30      	cmp	r3, #48	; 0x30
 8008cb8:	d10a      	bne.n	8008cd0 <__cvt+0x8c>
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	f7f7 ff29 	bl	8000b18 <__aeabi_dcmpeq>
 8008cc6:	b918      	cbnz	r0, 8008cd0 <__cvt+0x8c>
 8008cc8:	f1c6 0601 	rsb	r6, r6, #1
 8008ccc:	f8ca 6000 	str.w	r6, [sl]
 8008cd0:	f8da 3000 	ldr.w	r3, [sl]
 8008cd4:	4499      	add	r9, r3
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4620      	mov	r0, r4
 8008cdc:	4629      	mov	r1, r5
 8008cde:	f7f7 ff1b 	bl	8000b18 <__aeabi_dcmpeq>
 8008ce2:	b108      	cbz	r0, 8008ce8 <__cvt+0xa4>
 8008ce4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ce8:	2230      	movs	r2, #48	; 0x30
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	454b      	cmp	r3, r9
 8008cee:	d307      	bcc.n	8008d00 <__cvt+0xbc>
 8008cf0:	9b03      	ldr	r3, [sp, #12]
 8008cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cf4:	1bdb      	subs	r3, r3, r7
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	b004      	add	sp, #16
 8008cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d00:	1c59      	adds	r1, r3, #1
 8008d02:	9103      	str	r1, [sp, #12]
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	e7f0      	b.n	8008cea <__cvt+0xa6>

08008d08 <__exponent>:
 8008d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	bfb8      	it	lt
 8008d10:	4249      	neglt	r1, r1
 8008d12:	f803 2b02 	strb.w	r2, [r3], #2
 8008d16:	bfb4      	ite	lt
 8008d18:	222d      	movlt	r2, #45	; 0x2d
 8008d1a:	222b      	movge	r2, #43	; 0x2b
 8008d1c:	2909      	cmp	r1, #9
 8008d1e:	7042      	strb	r2, [r0, #1]
 8008d20:	dd2a      	ble.n	8008d78 <__exponent+0x70>
 8008d22:	f10d 0207 	add.w	r2, sp, #7
 8008d26:	4617      	mov	r7, r2
 8008d28:	260a      	movs	r6, #10
 8008d2a:	4694      	mov	ip, r2
 8008d2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008d30:	fb06 1415 	mls	r4, r6, r5, r1
 8008d34:	3430      	adds	r4, #48	; 0x30
 8008d36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	2c63      	cmp	r4, #99	; 0x63
 8008d3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008d42:	4629      	mov	r1, r5
 8008d44:	dcf1      	bgt.n	8008d2a <__exponent+0x22>
 8008d46:	3130      	adds	r1, #48	; 0x30
 8008d48:	f1ac 0402 	sub.w	r4, ip, #2
 8008d4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008d50:	1c41      	adds	r1, r0, #1
 8008d52:	4622      	mov	r2, r4
 8008d54:	42ba      	cmp	r2, r7
 8008d56:	d30a      	bcc.n	8008d6e <__exponent+0x66>
 8008d58:	f10d 0209 	add.w	r2, sp, #9
 8008d5c:	eba2 020c 	sub.w	r2, r2, ip
 8008d60:	42bc      	cmp	r4, r7
 8008d62:	bf88      	it	hi
 8008d64:	2200      	movhi	r2, #0
 8008d66:	4413      	add	r3, r2
 8008d68:	1a18      	subs	r0, r3, r0
 8008d6a:	b003      	add	sp, #12
 8008d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008d72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008d76:	e7ed      	b.n	8008d54 <__exponent+0x4c>
 8008d78:	2330      	movs	r3, #48	; 0x30
 8008d7a:	3130      	adds	r1, #48	; 0x30
 8008d7c:	7083      	strb	r3, [r0, #2]
 8008d7e:	70c1      	strb	r1, [r0, #3]
 8008d80:	1d03      	adds	r3, r0, #4
 8008d82:	e7f1      	b.n	8008d68 <__exponent+0x60>

08008d84 <_printf_float>:
 8008d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	ed2d 8b02 	vpush	{d8}
 8008d8c:	b08d      	sub	sp, #52	; 0x34
 8008d8e:	460c      	mov	r4, r1
 8008d90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008d94:	4616      	mov	r6, r2
 8008d96:	461f      	mov	r7, r3
 8008d98:	4605      	mov	r5, r0
 8008d9a:	f000 fce7 	bl	800976c <_localeconv_r>
 8008d9e:	f8d0 a000 	ldr.w	sl, [r0]
 8008da2:	4650      	mov	r0, sl
 8008da4:	f7f7 fa8c 	bl	80002c0 <strlen>
 8008da8:	2300      	movs	r3, #0
 8008daa:	930a      	str	r3, [sp, #40]	; 0x28
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	9305      	str	r3, [sp, #20]
 8008db0:	f8d8 3000 	ldr.w	r3, [r8]
 8008db4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008db8:	3307      	adds	r3, #7
 8008dba:	f023 0307 	bic.w	r3, r3, #7
 8008dbe:	f103 0208 	add.w	r2, r3, #8
 8008dc2:	f8c8 2000 	str.w	r2, [r8]
 8008dc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dce:	9307      	str	r3, [sp, #28]
 8008dd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008dd4:	ee08 0a10 	vmov	s16, r0
 8008dd8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008ddc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008de0:	4b9e      	ldr	r3, [pc, #632]	; (800905c <_printf_float+0x2d8>)
 8008de2:	f04f 32ff 	mov.w	r2, #4294967295
 8008de6:	f7f7 fec9 	bl	8000b7c <__aeabi_dcmpun>
 8008dea:	bb88      	cbnz	r0, 8008e50 <_printf_float+0xcc>
 8008dec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008df0:	4b9a      	ldr	r3, [pc, #616]	; (800905c <_printf_float+0x2d8>)
 8008df2:	f04f 32ff 	mov.w	r2, #4294967295
 8008df6:	f7f7 fea3 	bl	8000b40 <__aeabi_dcmple>
 8008dfa:	bb48      	cbnz	r0, 8008e50 <_printf_float+0xcc>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4640      	mov	r0, r8
 8008e02:	4649      	mov	r1, r9
 8008e04:	f7f7 fe92 	bl	8000b2c <__aeabi_dcmplt>
 8008e08:	b110      	cbz	r0, 8008e10 <_printf_float+0x8c>
 8008e0a:	232d      	movs	r3, #45	; 0x2d
 8008e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e10:	4a93      	ldr	r2, [pc, #588]	; (8009060 <_printf_float+0x2dc>)
 8008e12:	4b94      	ldr	r3, [pc, #592]	; (8009064 <_printf_float+0x2e0>)
 8008e14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e18:	bf94      	ite	ls
 8008e1a:	4690      	movls	r8, r2
 8008e1c:	4698      	movhi	r8, r3
 8008e1e:	2303      	movs	r3, #3
 8008e20:	6123      	str	r3, [r4, #16]
 8008e22:	9b05      	ldr	r3, [sp, #20]
 8008e24:	f023 0304 	bic.w	r3, r3, #4
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	f04f 0900 	mov.w	r9, #0
 8008e2e:	9700      	str	r7, [sp, #0]
 8008e30:	4633      	mov	r3, r6
 8008e32:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e34:	4621      	mov	r1, r4
 8008e36:	4628      	mov	r0, r5
 8008e38:	f000 f9da 	bl	80091f0 <_printf_common>
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	f040 8090 	bne.w	8008f62 <_printf_float+0x1de>
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295
 8008e46:	b00d      	add	sp, #52	; 0x34
 8008e48:	ecbd 8b02 	vpop	{d8}
 8008e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e50:	4642      	mov	r2, r8
 8008e52:	464b      	mov	r3, r9
 8008e54:	4640      	mov	r0, r8
 8008e56:	4649      	mov	r1, r9
 8008e58:	f7f7 fe90 	bl	8000b7c <__aeabi_dcmpun>
 8008e5c:	b140      	cbz	r0, 8008e70 <_printf_float+0xec>
 8008e5e:	464b      	mov	r3, r9
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	bfbc      	itt	lt
 8008e64:	232d      	movlt	r3, #45	; 0x2d
 8008e66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e6a:	4a7f      	ldr	r2, [pc, #508]	; (8009068 <_printf_float+0x2e4>)
 8008e6c:	4b7f      	ldr	r3, [pc, #508]	; (800906c <_printf_float+0x2e8>)
 8008e6e:	e7d1      	b.n	8008e14 <_printf_float+0x90>
 8008e70:	6863      	ldr	r3, [r4, #4]
 8008e72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008e76:	9206      	str	r2, [sp, #24]
 8008e78:	1c5a      	adds	r2, r3, #1
 8008e7a:	d13f      	bne.n	8008efc <_printf_float+0x178>
 8008e7c:	2306      	movs	r3, #6
 8008e7e:	6063      	str	r3, [r4, #4]
 8008e80:	9b05      	ldr	r3, [sp, #20]
 8008e82:	6861      	ldr	r1, [r4, #4]
 8008e84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9303      	str	r3, [sp, #12]
 8008e8c:	ab0a      	add	r3, sp, #40	; 0x28
 8008e8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008e92:	ab09      	add	r3, sp, #36	; 0x24
 8008e94:	ec49 8b10 	vmov	d0, r8, r9
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	6022      	str	r2, [r4, #0]
 8008e9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f7ff fecf 	bl	8008c44 <__cvt>
 8008ea6:	9b06      	ldr	r3, [sp, #24]
 8008ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008eaa:	2b47      	cmp	r3, #71	; 0x47
 8008eac:	4680      	mov	r8, r0
 8008eae:	d108      	bne.n	8008ec2 <_printf_float+0x13e>
 8008eb0:	1cc8      	adds	r0, r1, #3
 8008eb2:	db02      	blt.n	8008eba <_printf_float+0x136>
 8008eb4:	6863      	ldr	r3, [r4, #4]
 8008eb6:	4299      	cmp	r1, r3
 8008eb8:	dd41      	ble.n	8008f3e <_printf_float+0x1ba>
 8008eba:	f1ab 0302 	sub.w	r3, fp, #2
 8008ebe:	fa5f fb83 	uxtb.w	fp, r3
 8008ec2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ec6:	d820      	bhi.n	8008f0a <_printf_float+0x186>
 8008ec8:	3901      	subs	r1, #1
 8008eca:	465a      	mov	r2, fp
 8008ecc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ed0:	9109      	str	r1, [sp, #36]	; 0x24
 8008ed2:	f7ff ff19 	bl	8008d08 <__exponent>
 8008ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed8:	1813      	adds	r3, r2, r0
 8008eda:	2a01      	cmp	r2, #1
 8008edc:	4681      	mov	r9, r0
 8008ede:	6123      	str	r3, [r4, #16]
 8008ee0:	dc02      	bgt.n	8008ee8 <_printf_float+0x164>
 8008ee2:	6822      	ldr	r2, [r4, #0]
 8008ee4:	07d2      	lsls	r2, r2, #31
 8008ee6:	d501      	bpl.n	8008eec <_printf_float+0x168>
 8008ee8:	3301      	adds	r3, #1
 8008eea:	6123      	str	r3, [r4, #16]
 8008eec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d09c      	beq.n	8008e2e <_printf_float+0xaa>
 8008ef4:	232d      	movs	r3, #45	; 0x2d
 8008ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008efa:	e798      	b.n	8008e2e <_printf_float+0xaa>
 8008efc:	9a06      	ldr	r2, [sp, #24]
 8008efe:	2a47      	cmp	r2, #71	; 0x47
 8008f00:	d1be      	bne.n	8008e80 <_printf_float+0xfc>
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1bc      	bne.n	8008e80 <_printf_float+0xfc>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e7b9      	b.n	8008e7e <_printf_float+0xfa>
 8008f0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f0e:	d118      	bne.n	8008f42 <_printf_float+0x1be>
 8008f10:	2900      	cmp	r1, #0
 8008f12:	6863      	ldr	r3, [r4, #4]
 8008f14:	dd0b      	ble.n	8008f2e <_printf_float+0x1aa>
 8008f16:	6121      	str	r1, [r4, #16]
 8008f18:	b913      	cbnz	r3, 8008f20 <_printf_float+0x19c>
 8008f1a:	6822      	ldr	r2, [r4, #0]
 8008f1c:	07d0      	lsls	r0, r2, #31
 8008f1e:	d502      	bpl.n	8008f26 <_printf_float+0x1a2>
 8008f20:	3301      	adds	r3, #1
 8008f22:	440b      	add	r3, r1
 8008f24:	6123      	str	r3, [r4, #16]
 8008f26:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f28:	f04f 0900 	mov.w	r9, #0
 8008f2c:	e7de      	b.n	8008eec <_printf_float+0x168>
 8008f2e:	b913      	cbnz	r3, 8008f36 <_printf_float+0x1b2>
 8008f30:	6822      	ldr	r2, [r4, #0]
 8008f32:	07d2      	lsls	r2, r2, #31
 8008f34:	d501      	bpl.n	8008f3a <_printf_float+0x1b6>
 8008f36:	3302      	adds	r3, #2
 8008f38:	e7f4      	b.n	8008f24 <_printf_float+0x1a0>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e7f2      	b.n	8008f24 <_printf_float+0x1a0>
 8008f3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f44:	4299      	cmp	r1, r3
 8008f46:	db05      	blt.n	8008f54 <_printf_float+0x1d0>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	6121      	str	r1, [r4, #16]
 8008f4c:	07d8      	lsls	r0, r3, #31
 8008f4e:	d5ea      	bpl.n	8008f26 <_printf_float+0x1a2>
 8008f50:	1c4b      	adds	r3, r1, #1
 8008f52:	e7e7      	b.n	8008f24 <_printf_float+0x1a0>
 8008f54:	2900      	cmp	r1, #0
 8008f56:	bfd4      	ite	le
 8008f58:	f1c1 0202 	rsble	r2, r1, #2
 8008f5c:	2201      	movgt	r2, #1
 8008f5e:	4413      	add	r3, r2
 8008f60:	e7e0      	b.n	8008f24 <_printf_float+0x1a0>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	055a      	lsls	r2, r3, #21
 8008f66:	d407      	bmi.n	8008f78 <_printf_float+0x1f4>
 8008f68:	6923      	ldr	r3, [r4, #16]
 8008f6a:	4642      	mov	r2, r8
 8008f6c:	4631      	mov	r1, r6
 8008f6e:	4628      	mov	r0, r5
 8008f70:	47b8      	blx	r7
 8008f72:	3001      	adds	r0, #1
 8008f74:	d12c      	bne.n	8008fd0 <_printf_float+0x24c>
 8008f76:	e764      	b.n	8008e42 <_printf_float+0xbe>
 8008f78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f7c:	f240 80e0 	bls.w	8009140 <_printf_float+0x3bc>
 8008f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f84:	2200      	movs	r2, #0
 8008f86:	2300      	movs	r3, #0
 8008f88:	f7f7 fdc6 	bl	8000b18 <__aeabi_dcmpeq>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d034      	beq.n	8008ffa <_printf_float+0x276>
 8008f90:	4a37      	ldr	r2, [pc, #220]	; (8009070 <_printf_float+0x2ec>)
 8008f92:	2301      	movs	r3, #1
 8008f94:	4631      	mov	r1, r6
 8008f96:	4628      	mov	r0, r5
 8008f98:	47b8      	blx	r7
 8008f9a:	3001      	adds	r0, #1
 8008f9c:	f43f af51 	beq.w	8008e42 <_printf_float+0xbe>
 8008fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	db02      	blt.n	8008fae <_printf_float+0x22a>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	07d8      	lsls	r0, r3, #31
 8008fac:	d510      	bpl.n	8008fd0 <_printf_float+0x24c>
 8008fae:	ee18 3a10 	vmov	r3, s16
 8008fb2:	4652      	mov	r2, sl
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b8      	blx	r7
 8008fba:	3001      	adds	r0, #1
 8008fbc:	f43f af41 	beq.w	8008e42 <_printf_float+0xbe>
 8008fc0:	f04f 0800 	mov.w	r8, #0
 8008fc4:	f104 091a 	add.w	r9, r4, #26
 8008fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	4543      	cmp	r3, r8
 8008fce:	dc09      	bgt.n	8008fe4 <_printf_float+0x260>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	079b      	lsls	r3, r3, #30
 8008fd4:	f100 8107 	bmi.w	80091e6 <_printf_float+0x462>
 8008fd8:	68e0      	ldr	r0, [r4, #12]
 8008fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fdc:	4298      	cmp	r0, r3
 8008fde:	bfb8      	it	lt
 8008fe0:	4618      	movlt	r0, r3
 8008fe2:	e730      	b.n	8008e46 <_printf_float+0xc2>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	464a      	mov	r2, r9
 8008fe8:	4631      	mov	r1, r6
 8008fea:	4628      	mov	r0, r5
 8008fec:	47b8      	blx	r7
 8008fee:	3001      	adds	r0, #1
 8008ff0:	f43f af27 	beq.w	8008e42 <_printf_float+0xbe>
 8008ff4:	f108 0801 	add.w	r8, r8, #1
 8008ff8:	e7e6      	b.n	8008fc8 <_printf_float+0x244>
 8008ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dc39      	bgt.n	8009074 <_printf_float+0x2f0>
 8009000:	4a1b      	ldr	r2, [pc, #108]	; (8009070 <_printf_float+0x2ec>)
 8009002:	2301      	movs	r3, #1
 8009004:	4631      	mov	r1, r6
 8009006:	4628      	mov	r0, r5
 8009008:	47b8      	blx	r7
 800900a:	3001      	adds	r0, #1
 800900c:	f43f af19 	beq.w	8008e42 <_printf_float+0xbe>
 8009010:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009014:	4313      	orrs	r3, r2
 8009016:	d102      	bne.n	800901e <_printf_float+0x29a>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	07d9      	lsls	r1, r3, #31
 800901c:	d5d8      	bpl.n	8008fd0 <_printf_float+0x24c>
 800901e:	ee18 3a10 	vmov	r3, s16
 8009022:	4652      	mov	r2, sl
 8009024:	4631      	mov	r1, r6
 8009026:	4628      	mov	r0, r5
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	f43f af09 	beq.w	8008e42 <_printf_float+0xbe>
 8009030:	f04f 0900 	mov.w	r9, #0
 8009034:	f104 0a1a 	add.w	sl, r4, #26
 8009038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903a:	425b      	negs	r3, r3
 800903c:	454b      	cmp	r3, r9
 800903e:	dc01      	bgt.n	8009044 <_printf_float+0x2c0>
 8009040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009042:	e792      	b.n	8008f6a <_printf_float+0x1e6>
 8009044:	2301      	movs	r3, #1
 8009046:	4652      	mov	r2, sl
 8009048:	4631      	mov	r1, r6
 800904a:	4628      	mov	r0, r5
 800904c:	47b8      	blx	r7
 800904e:	3001      	adds	r0, #1
 8009050:	f43f aef7 	beq.w	8008e42 <_printf_float+0xbe>
 8009054:	f109 0901 	add.w	r9, r9, #1
 8009058:	e7ee      	b.n	8009038 <_printf_float+0x2b4>
 800905a:	bf00      	nop
 800905c:	7fefffff 	.word	0x7fefffff
 8009060:	0800ba4c 	.word	0x0800ba4c
 8009064:	0800ba50 	.word	0x0800ba50
 8009068:	0800ba54 	.word	0x0800ba54
 800906c:	0800ba58 	.word	0x0800ba58
 8009070:	0800ba5c 	.word	0x0800ba5c
 8009074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009076:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009078:	429a      	cmp	r2, r3
 800907a:	bfa8      	it	ge
 800907c:	461a      	movge	r2, r3
 800907e:	2a00      	cmp	r2, #0
 8009080:	4691      	mov	r9, r2
 8009082:	dc37      	bgt.n	80090f4 <_printf_float+0x370>
 8009084:	f04f 0b00 	mov.w	fp, #0
 8009088:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800908c:	f104 021a 	add.w	r2, r4, #26
 8009090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009092:	9305      	str	r3, [sp, #20]
 8009094:	eba3 0309 	sub.w	r3, r3, r9
 8009098:	455b      	cmp	r3, fp
 800909a:	dc33      	bgt.n	8009104 <_printf_float+0x380>
 800909c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090a0:	429a      	cmp	r2, r3
 80090a2:	db3b      	blt.n	800911c <_printf_float+0x398>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	07da      	lsls	r2, r3, #31
 80090a8:	d438      	bmi.n	800911c <_printf_float+0x398>
 80090aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80090ae:	eba2 0903 	sub.w	r9, r2, r3
 80090b2:	9b05      	ldr	r3, [sp, #20]
 80090b4:	1ad2      	subs	r2, r2, r3
 80090b6:	4591      	cmp	r9, r2
 80090b8:	bfa8      	it	ge
 80090ba:	4691      	movge	r9, r2
 80090bc:	f1b9 0f00 	cmp.w	r9, #0
 80090c0:	dc35      	bgt.n	800912e <_printf_float+0x3aa>
 80090c2:	f04f 0800 	mov.w	r8, #0
 80090c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090ca:	f104 0a1a 	add.w	sl, r4, #26
 80090ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090d2:	1a9b      	subs	r3, r3, r2
 80090d4:	eba3 0309 	sub.w	r3, r3, r9
 80090d8:	4543      	cmp	r3, r8
 80090da:	f77f af79 	ble.w	8008fd0 <_printf_float+0x24c>
 80090de:	2301      	movs	r3, #1
 80090e0:	4652      	mov	r2, sl
 80090e2:	4631      	mov	r1, r6
 80090e4:	4628      	mov	r0, r5
 80090e6:	47b8      	blx	r7
 80090e8:	3001      	adds	r0, #1
 80090ea:	f43f aeaa 	beq.w	8008e42 <_printf_float+0xbe>
 80090ee:	f108 0801 	add.w	r8, r8, #1
 80090f2:	e7ec      	b.n	80090ce <_printf_float+0x34a>
 80090f4:	4613      	mov	r3, r2
 80090f6:	4631      	mov	r1, r6
 80090f8:	4642      	mov	r2, r8
 80090fa:	4628      	mov	r0, r5
 80090fc:	47b8      	blx	r7
 80090fe:	3001      	adds	r0, #1
 8009100:	d1c0      	bne.n	8009084 <_printf_float+0x300>
 8009102:	e69e      	b.n	8008e42 <_printf_float+0xbe>
 8009104:	2301      	movs	r3, #1
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	9205      	str	r2, [sp, #20]
 800910c:	47b8      	blx	r7
 800910e:	3001      	adds	r0, #1
 8009110:	f43f ae97 	beq.w	8008e42 <_printf_float+0xbe>
 8009114:	9a05      	ldr	r2, [sp, #20]
 8009116:	f10b 0b01 	add.w	fp, fp, #1
 800911a:	e7b9      	b.n	8009090 <_printf_float+0x30c>
 800911c:	ee18 3a10 	vmov	r3, s16
 8009120:	4652      	mov	r2, sl
 8009122:	4631      	mov	r1, r6
 8009124:	4628      	mov	r0, r5
 8009126:	47b8      	blx	r7
 8009128:	3001      	adds	r0, #1
 800912a:	d1be      	bne.n	80090aa <_printf_float+0x326>
 800912c:	e689      	b.n	8008e42 <_printf_float+0xbe>
 800912e:	9a05      	ldr	r2, [sp, #20]
 8009130:	464b      	mov	r3, r9
 8009132:	4442      	add	r2, r8
 8009134:	4631      	mov	r1, r6
 8009136:	4628      	mov	r0, r5
 8009138:	47b8      	blx	r7
 800913a:	3001      	adds	r0, #1
 800913c:	d1c1      	bne.n	80090c2 <_printf_float+0x33e>
 800913e:	e680      	b.n	8008e42 <_printf_float+0xbe>
 8009140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009142:	2a01      	cmp	r2, #1
 8009144:	dc01      	bgt.n	800914a <_printf_float+0x3c6>
 8009146:	07db      	lsls	r3, r3, #31
 8009148:	d53a      	bpl.n	80091c0 <_printf_float+0x43c>
 800914a:	2301      	movs	r3, #1
 800914c:	4642      	mov	r2, r8
 800914e:	4631      	mov	r1, r6
 8009150:	4628      	mov	r0, r5
 8009152:	47b8      	blx	r7
 8009154:	3001      	adds	r0, #1
 8009156:	f43f ae74 	beq.w	8008e42 <_printf_float+0xbe>
 800915a:	ee18 3a10 	vmov	r3, s16
 800915e:	4652      	mov	r2, sl
 8009160:	4631      	mov	r1, r6
 8009162:	4628      	mov	r0, r5
 8009164:	47b8      	blx	r7
 8009166:	3001      	adds	r0, #1
 8009168:	f43f ae6b 	beq.w	8008e42 <_printf_float+0xbe>
 800916c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009170:	2200      	movs	r2, #0
 8009172:	2300      	movs	r3, #0
 8009174:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009178:	f7f7 fcce 	bl	8000b18 <__aeabi_dcmpeq>
 800917c:	b9d8      	cbnz	r0, 80091b6 <_printf_float+0x432>
 800917e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009182:	f108 0201 	add.w	r2, r8, #1
 8009186:	4631      	mov	r1, r6
 8009188:	4628      	mov	r0, r5
 800918a:	47b8      	blx	r7
 800918c:	3001      	adds	r0, #1
 800918e:	d10e      	bne.n	80091ae <_printf_float+0x42a>
 8009190:	e657      	b.n	8008e42 <_printf_float+0xbe>
 8009192:	2301      	movs	r3, #1
 8009194:	4652      	mov	r2, sl
 8009196:	4631      	mov	r1, r6
 8009198:	4628      	mov	r0, r5
 800919a:	47b8      	blx	r7
 800919c:	3001      	adds	r0, #1
 800919e:	f43f ae50 	beq.w	8008e42 <_printf_float+0xbe>
 80091a2:	f108 0801 	add.w	r8, r8, #1
 80091a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a8:	3b01      	subs	r3, #1
 80091aa:	4543      	cmp	r3, r8
 80091ac:	dcf1      	bgt.n	8009192 <_printf_float+0x40e>
 80091ae:	464b      	mov	r3, r9
 80091b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091b4:	e6da      	b.n	8008f6c <_printf_float+0x1e8>
 80091b6:	f04f 0800 	mov.w	r8, #0
 80091ba:	f104 0a1a 	add.w	sl, r4, #26
 80091be:	e7f2      	b.n	80091a6 <_printf_float+0x422>
 80091c0:	2301      	movs	r3, #1
 80091c2:	4642      	mov	r2, r8
 80091c4:	e7df      	b.n	8009186 <_printf_float+0x402>
 80091c6:	2301      	movs	r3, #1
 80091c8:	464a      	mov	r2, r9
 80091ca:	4631      	mov	r1, r6
 80091cc:	4628      	mov	r0, r5
 80091ce:	47b8      	blx	r7
 80091d0:	3001      	adds	r0, #1
 80091d2:	f43f ae36 	beq.w	8008e42 <_printf_float+0xbe>
 80091d6:	f108 0801 	add.w	r8, r8, #1
 80091da:	68e3      	ldr	r3, [r4, #12]
 80091dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091de:	1a5b      	subs	r3, r3, r1
 80091e0:	4543      	cmp	r3, r8
 80091e2:	dcf0      	bgt.n	80091c6 <_printf_float+0x442>
 80091e4:	e6f8      	b.n	8008fd8 <_printf_float+0x254>
 80091e6:	f04f 0800 	mov.w	r8, #0
 80091ea:	f104 0919 	add.w	r9, r4, #25
 80091ee:	e7f4      	b.n	80091da <_printf_float+0x456>

080091f0 <_printf_common>:
 80091f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f4:	4616      	mov	r6, r2
 80091f6:	4699      	mov	r9, r3
 80091f8:	688a      	ldr	r2, [r1, #8]
 80091fa:	690b      	ldr	r3, [r1, #16]
 80091fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009200:	4293      	cmp	r3, r2
 8009202:	bfb8      	it	lt
 8009204:	4613      	movlt	r3, r2
 8009206:	6033      	str	r3, [r6, #0]
 8009208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800920c:	4607      	mov	r7, r0
 800920e:	460c      	mov	r4, r1
 8009210:	b10a      	cbz	r2, 8009216 <_printf_common+0x26>
 8009212:	3301      	adds	r3, #1
 8009214:	6033      	str	r3, [r6, #0]
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	0699      	lsls	r1, r3, #26
 800921a:	bf42      	ittt	mi
 800921c:	6833      	ldrmi	r3, [r6, #0]
 800921e:	3302      	addmi	r3, #2
 8009220:	6033      	strmi	r3, [r6, #0]
 8009222:	6825      	ldr	r5, [r4, #0]
 8009224:	f015 0506 	ands.w	r5, r5, #6
 8009228:	d106      	bne.n	8009238 <_printf_common+0x48>
 800922a:	f104 0a19 	add.w	sl, r4, #25
 800922e:	68e3      	ldr	r3, [r4, #12]
 8009230:	6832      	ldr	r2, [r6, #0]
 8009232:	1a9b      	subs	r3, r3, r2
 8009234:	42ab      	cmp	r3, r5
 8009236:	dc26      	bgt.n	8009286 <_printf_common+0x96>
 8009238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800923c:	1e13      	subs	r3, r2, #0
 800923e:	6822      	ldr	r2, [r4, #0]
 8009240:	bf18      	it	ne
 8009242:	2301      	movne	r3, #1
 8009244:	0692      	lsls	r2, r2, #26
 8009246:	d42b      	bmi.n	80092a0 <_printf_common+0xb0>
 8009248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800924c:	4649      	mov	r1, r9
 800924e:	4638      	mov	r0, r7
 8009250:	47c0      	blx	r8
 8009252:	3001      	adds	r0, #1
 8009254:	d01e      	beq.n	8009294 <_printf_common+0xa4>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	6922      	ldr	r2, [r4, #16]
 800925a:	f003 0306 	and.w	r3, r3, #6
 800925e:	2b04      	cmp	r3, #4
 8009260:	bf02      	ittt	eq
 8009262:	68e5      	ldreq	r5, [r4, #12]
 8009264:	6833      	ldreq	r3, [r6, #0]
 8009266:	1aed      	subeq	r5, r5, r3
 8009268:	68a3      	ldr	r3, [r4, #8]
 800926a:	bf0c      	ite	eq
 800926c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009270:	2500      	movne	r5, #0
 8009272:	4293      	cmp	r3, r2
 8009274:	bfc4      	itt	gt
 8009276:	1a9b      	subgt	r3, r3, r2
 8009278:	18ed      	addgt	r5, r5, r3
 800927a:	2600      	movs	r6, #0
 800927c:	341a      	adds	r4, #26
 800927e:	42b5      	cmp	r5, r6
 8009280:	d11a      	bne.n	80092b8 <_printf_common+0xc8>
 8009282:	2000      	movs	r0, #0
 8009284:	e008      	b.n	8009298 <_printf_common+0xa8>
 8009286:	2301      	movs	r3, #1
 8009288:	4652      	mov	r2, sl
 800928a:	4649      	mov	r1, r9
 800928c:	4638      	mov	r0, r7
 800928e:	47c0      	blx	r8
 8009290:	3001      	adds	r0, #1
 8009292:	d103      	bne.n	800929c <_printf_common+0xac>
 8009294:	f04f 30ff 	mov.w	r0, #4294967295
 8009298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929c:	3501      	adds	r5, #1
 800929e:	e7c6      	b.n	800922e <_printf_common+0x3e>
 80092a0:	18e1      	adds	r1, r4, r3
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	2030      	movs	r0, #48	; 0x30
 80092a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092aa:	4422      	add	r2, r4
 80092ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092b4:	3302      	adds	r3, #2
 80092b6:	e7c7      	b.n	8009248 <_printf_common+0x58>
 80092b8:	2301      	movs	r3, #1
 80092ba:	4622      	mov	r2, r4
 80092bc:	4649      	mov	r1, r9
 80092be:	4638      	mov	r0, r7
 80092c0:	47c0      	blx	r8
 80092c2:	3001      	adds	r0, #1
 80092c4:	d0e6      	beq.n	8009294 <_printf_common+0xa4>
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7d9      	b.n	800927e <_printf_common+0x8e>
	...

080092cc <_printf_i>:
 80092cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092d0:	7e0f      	ldrb	r7, [r1, #24]
 80092d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092d4:	2f78      	cmp	r7, #120	; 0x78
 80092d6:	4691      	mov	r9, r2
 80092d8:	4680      	mov	r8, r0
 80092da:	460c      	mov	r4, r1
 80092dc:	469a      	mov	sl, r3
 80092de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092e2:	d807      	bhi.n	80092f4 <_printf_i+0x28>
 80092e4:	2f62      	cmp	r7, #98	; 0x62
 80092e6:	d80a      	bhi.n	80092fe <_printf_i+0x32>
 80092e8:	2f00      	cmp	r7, #0
 80092ea:	f000 80d4 	beq.w	8009496 <_printf_i+0x1ca>
 80092ee:	2f58      	cmp	r7, #88	; 0x58
 80092f0:	f000 80c0 	beq.w	8009474 <_printf_i+0x1a8>
 80092f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092fc:	e03a      	b.n	8009374 <_printf_i+0xa8>
 80092fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009302:	2b15      	cmp	r3, #21
 8009304:	d8f6      	bhi.n	80092f4 <_printf_i+0x28>
 8009306:	a101      	add	r1, pc, #4	; (adr r1, 800930c <_printf_i+0x40>)
 8009308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800930c:	08009365 	.word	0x08009365
 8009310:	08009379 	.word	0x08009379
 8009314:	080092f5 	.word	0x080092f5
 8009318:	080092f5 	.word	0x080092f5
 800931c:	080092f5 	.word	0x080092f5
 8009320:	080092f5 	.word	0x080092f5
 8009324:	08009379 	.word	0x08009379
 8009328:	080092f5 	.word	0x080092f5
 800932c:	080092f5 	.word	0x080092f5
 8009330:	080092f5 	.word	0x080092f5
 8009334:	080092f5 	.word	0x080092f5
 8009338:	0800947d 	.word	0x0800947d
 800933c:	080093a5 	.word	0x080093a5
 8009340:	08009437 	.word	0x08009437
 8009344:	080092f5 	.word	0x080092f5
 8009348:	080092f5 	.word	0x080092f5
 800934c:	0800949f 	.word	0x0800949f
 8009350:	080092f5 	.word	0x080092f5
 8009354:	080093a5 	.word	0x080093a5
 8009358:	080092f5 	.word	0x080092f5
 800935c:	080092f5 	.word	0x080092f5
 8009360:	0800943f 	.word	0x0800943f
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	1d1a      	adds	r2, r3, #4
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	602a      	str	r2, [r5, #0]
 800936c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009374:	2301      	movs	r3, #1
 8009376:	e09f      	b.n	80094b8 <_printf_i+0x1ec>
 8009378:	6820      	ldr	r0, [r4, #0]
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	0607      	lsls	r7, r0, #24
 800937e:	f103 0104 	add.w	r1, r3, #4
 8009382:	6029      	str	r1, [r5, #0]
 8009384:	d501      	bpl.n	800938a <_printf_i+0xbe>
 8009386:	681e      	ldr	r6, [r3, #0]
 8009388:	e003      	b.n	8009392 <_printf_i+0xc6>
 800938a:	0646      	lsls	r6, r0, #25
 800938c:	d5fb      	bpl.n	8009386 <_printf_i+0xba>
 800938e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009392:	2e00      	cmp	r6, #0
 8009394:	da03      	bge.n	800939e <_printf_i+0xd2>
 8009396:	232d      	movs	r3, #45	; 0x2d
 8009398:	4276      	negs	r6, r6
 800939a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800939e:	485a      	ldr	r0, [pc, #360]	; (8009508 <_printf_i+0x23c>)
 80093a0:	230a      	movs	r3, #10
 80093a2:	e012      	b.n	80093ca <_printf_i+0xfe>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	6820      	ldr	r0, [r4, #0]
 80093a8:	1d19      	adds	r1, r3, #4
 80093aa:	6029      	str	r1, [r5, #0]
 80093ac:	0605      	lsls	r5, r0, #24
 80093ae:	d501      	bpl.n	80093b4 <_printf_i+0xe8>
 80093b0:	681e      	ldr	r6, [r3, #0]
 80093b2:	e002      	b.n	80093ba <_printf_i+0xee>
 80093b4:	0641      	lsls	r1, r0, #25
 80093b6:	d5fb      	bpl.n	80093b0 <_printf_i+0xe4>
 80093b8:	881e      	ldrh	r6, [r3, #0]
 80093ba:	4853      	ldr	r0, [pc, #332]	; (8009508 <_printf_i+0x23c>)
 80093bc:	2f6f      	cmp	r7, #111	; 0x6f
 80093be:	bf0c      	ite	eq
 80093c0:	2308      	moveq	r3, #8
 80093c2:	230a      	movne	r3, #10
 80093c4:	2100      	movs	r1, #0
 80093c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093ca:	6865      	ldr	r5, [r4, #4]
 80093cc:	60a5      	str	r5, [r4, #8]
 80093ce:	2d00      	cmp	r5, #0
 80093d0:	bfa2      	ittt	ge
 80093d2:	6821      	ldrge	r1, [r4, #0]
 80093d4:	f021 0104 	bicge.w	r1, r1, #4
 80093d8:	6021      	strge	r1, [r4, #0]
 80093da:	b90e      	cbnz	r6, 80093e0 <_printf_i+0x114>
 80093dc:	2d00      	cmp	r5, #0
 80093de:	d04b      	beq.n	8009478 <_printf_i+0x1ac>
 80093e0:	4615      	mov	r5, r2
 80093e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80093e6:	fb03 6711 	mls	r7, r3, r1, r6
 80093ea:	5dc7      	ldrb	r7, [r0, r7]
 80093ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093f0:	4637      	mov	r7, r6
 80093f2:	42bb      	cmp	r3, r7
 80093f4:	460e      	mov	r6, r1
 80093f6:	d9f4      	bls.n	80093e2 <_printf_i+0x116>
 80093f8:	2b08      	cmp	r3, #8
 80093fa:	d10b      	bne.n	8009414 <_printf_i+0x148>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	07de      	lsls	r6, r3, #31
 8009400:	d508      	bpl.n	8009414 <_printf_i+0x148>
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	6861      	ldr	r1, [r4, #4]
 8009406:	4299      	cmp	r1, r3
 8009408:	bfde      	ittt	le
 800940a:	2330      	movle	r3, #48	; 0x30
 800940c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009410:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009414:	1b52      	subs	r2, r2, r5
 8009416:	6122      	str	r2, [r4, #16]
 8009418:	f8cd a000 	str.w	sl, [sp]
 800941c:	464b      	mov	r3, r9
 800941e:	aa03      	add	r2, sp, #12
 8009420:	4621      	mov	r1, r4
 8009422:	4640      	mov	r0, r8
 8009424:	f7ff fee4 	bl	80091f0 <_printf_common>
 8009428:	3001      	adds	r0, #1
 800942a:	d14a      	bne.n	80094c2 <_printf_i+0x1f6>
 800942c:	f04f 30ff 	mov.w	r0, #4294967295
 8009430:	b004      	add	sp, #16
 8009432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	f043 0320 	orr.w	r3, r3, #32
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	4833      	ldr	r0, [pc, #204]	; (800950c <_printf_i+0x240>)
 8009440:	2778      	movs	r7, #120	; 0x78
 8009442:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	6829      	ldr	r1, [r5, #0]
 800944a:	061f      	lsls	r7, r3, #24
 800944c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009450:	d402      	bmi.n	8009458 <_printf_i+0x18c>
 8009452:	065f      	lsls	r7, r3, #25
 8009454:	bf48      	it	mi
 8009456:	b2b6      	uxthmi	r6, r6
 8009458:	07df      	lsls	r7, r3, #31
 800945a:	bf48      	it	mi
 800945c:	f043 0320 	orrmi.w	r3, r3, #32
 8009460:	6029      	str	r1, [r5, #0]
 8009462:	bf48      	it	mi
 8009464:	6023      	strmi	r3, [r4, #0]
 8009466:	b91e      	cbnz	r6, 8009470 <_printf_i+0x1a4>
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	f023 0320 	bic.w	r3, r3, #32
 800946e:	6023      	str	r3, [r4, #0]
 8009470:	2310      	movs	r3, #16
 8009472:	e7a7      	b.n	80093c4 <_printf_i+0xf8>
 8009474:	4824      	ldr	r0, [pc, #144]	; (8009508 <_printf_i+0x23c>)
 8009476:	e7e4      	b.n	8009442 <_printf_i+0x176>
 8009478:	4615      	mov	r5, r2
 800947a:	e7bd      	b.n	80093f8 <_printf_i+0x12c>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	6826      	ldr	r6, [r4, #0]
 8009480:	6961      	ldr	r1, [r4, #20]
 8009482:	1d18      	adds	r0, r3, #4
 8009484:	6028      	str	r0, [r5, #0]
 8009486:	0635      	lsls	r5, r6, #24
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	d501      	bpl.n	8009490 <_printf_i+0x1c4>
 800948c:	6019      	str	r1, [r3, #0]
 800948e:	e002      	b.n	8009496 <_printf_i+0x1ca>
 8009490:	0670      	lsls	r0, r6, #25
 8009492:	d5fb      	bpl.n	800948c <_printf_i+0x1c0>
 8009494:	8019      	strh	r1, [r3, #0]
 8009496:	2300      	movs	r3, #0
 8009498:	6123      	str	r3, [r4, #16]
 800949a:	4615      	mov	r5, r2
 800949c:	e7bc      	b.n	8009418 <_printf_i+0x14c>
 800949e:	682b      	ldr	r3, [r5, #0]
 80094a0:	1d1a      	adds	r2, r3, #4
 80094a2:	602a      	str	r2, [r5, #0]
 80094a4:	681d      	ldr	r5, [r3, #0]
 80094a6:	6862      	ldr	r2, [r4, #4]
 80094a8:	2100      	movs	r1, #0
 80094aa:	4628      	mov	r0, r5
 80094ac:	f7f6 feb8 	bl	8000220 <memchr>
 80094b0:	b108      	cbz	r0, 80094b6 <_printf_i+0x1ea>
 80094b2:	1b40      	subs	r0, r0, r5
 80094b4:	6060      	str	r0, [r4, #4]
 80094b6:	6863      	ldr	r3, [r4, #4]
 80094b8:	6123      	str	r3, [r4, #16]
 80094ba:	2300      	movs	r3, #0
 80094bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c0:	e7aa      	b.n	8009418 <_printf_i+0x14c>
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	462a      	mov	r2, r5
 80094c6:	4649      	mov	r1, r9
 80094c8:	4640      	mov	r0, r8
 80094ca:	47d0      	blx	sl
 80094cc:	3001      	adds	r0, #1
 80094ce:	d0ad      	beq.n	800942c <_printf_i+0x160>
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	079b      	lsls	r3, r3, #30
 80094d4:	d413      	bmi.n	80094fe <_printf_i+0x232>
 80094d6:	68e0      	ldr	r0, [r4, #12]
 80094d8:	9b03      	ldr	r3, [sp, #12]
 80094da:	4298      	cmp	r0, r3
 80094dc:	bfb8      	it	lt
 80094de:	4618      	movlt	r0, r3
 80094e0:	e7a6      	b.n	8009430 <_printf_i+0x164>
 80094e2:	2301      	movs	r3, #1
 80094e4:	4632      	mov	r2, r6
 80094e6:	4649      	mov	r1, r9
 80094e8:	4640      	mov	r0, r8
 80094ea:	47d0      	blx	sl
 80094ec:	3001      	adds	r0, #1
 80094ee:	d09d      	beq.n	800942c <_printf_i+0x160>
 80094f0:	3501      	adds	r5, #1
 80094f2:	68e3      	ldr	r3, [r4, #12]
 80094f4:	9903      	ldr	r1, [sp, #12]
 80094f6:	1a5b      	subs	r3, r3, r1
 80094f8:	42ab      	cmp	r3, r5
 80094fa:	dcf2      	bgt.n	80094e2 <_printf_i+0x216>
 80094fc:	e7eb      	b.n	80094d6 <_printf_i+0x20a>
 80094fe:	2500      	movs	r5, #0
 8009500:	f104 0619 	add.w	r6, r4, #25
 8009504:	e7f5      	b.n	80094f2 <_printf_i+0x226>
 8009506:	bf00      	nop
 8009508:	0800ba5e 	.word	0x0800ba5e
 800950c:	0800ba6f 	.word	0x0800ba6f

08009510 <std>:
 8009510:	2300      	movs	r3, #0
 8009512:	b510      	push	{r4, lr}
 8009514:	4604      	mov	r4, r0
 8009516:	e9c0 3300 	strd	r3, r3, [r0]
 800951a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800951e:	6083      	str	r3, [r0, #8]
 8009520:	8181      	strh	r1, [r0, #12]
 8009522:	6643      	str	r3, [r0, #100]	; 0x64
 8009524:	81c2      	strh	r2, [r0, #14]
 8009526:	6183      	str	r3, [r0, #24]
 8009528:	4619      	mov	r1, r3
 800952a:	2208      	movs	r2, #8
 800952c:	305c      	adds	r0, #92	; 0x5c
 800952e:	f000 f914 	bl	800975a <memset>
 8009532:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <std+0x58>)
 8009534:	6263      	str	r3, [r4, #36]	; 0x24
 8009536:	4b0d      	ldr	r3, [pc, #52]	; (800956c <std+0x5c>)
 8009538:	62a3      	str	r3, [r4, #40]	; 0x28
 800953a:	4b0d      	ldr	r3, [pc, #52]	; (8009570 <std+0x60>)
 800953c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <std+0x64>)
 8009540:	6323      	str	r3, [r4, #48]	; 0x30
 8009542:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <std+0x68>)
 8009544:	6224      	str	r4, [r4, #32]
 8009546:	429c      	cmp	r4, r3
 8009548:	d006      	beq.n	8009558 <std+0x48>
 800954a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800954e:	4294      	cmp	r4, r2
 8009550:	d002      	beq.n	8009558 <std+0x48>
 8009552:	33d0      	adds	r3, #208	; 0xd0
 8009554:	429c      	cmp	r4, r3
 8009556:	d105      	bne.n	8009564 <std+0x54>
 8009558:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800955c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009560:	f000 b978 	b.w	8009854 <__retarget_lock_init_recursive>
 8009564:	bd10      	pop	{r4, pc}
 8009566:	bf00      	nop
 8009568:	080096d5 	.word	0x080096d5
 800956c:	080096f7 	.word	0x080096f7
 8009570:	0800972f 	.word	0x0800972f
 8009574:	08009753 	.word	0x08009753
 8009578:	200004a8 	.word	0x200004a8

0800957c <stdio_exit_handler>:
 800957c:	4a02      	ldr	r2, [pc, #8]	; (8009588 <stdio_exit_handler+0xc>)
 800957e:	4903      	ldr	r1, [pc, #12]	; (800958c <stdio_exit_handler+0x10>)
 8009580:	4803      	ldr	r0, [pc, #12]	; (8009590 <stdio_exit_handler+0x14>)
 8009582:	f000 b869 	b.w	8009658 <_fwalk_sglue>
 8009586:	bf00      	nop
 8009588:	20000014 	.word	0x20000014
 800958c:	0800b4a9 	.word	0x0800b4a9
 8009590:	20000020 	.word	0x20000020

08009594 <cleanup_stdio>:
 8009594:	6841      	ldr	r1, [r0, #4]
 8009596:	4b0c      	ldr	r3, [pc, #48]	; (80095c8 <cleanup_stdio+0x34>)
 8009598:	4299      	cmp	r1, r3
 800959a:	b510      	push	{r4, lr}
 800959c:	4604      	mov	r4, r0
 800959e:	d001      	beq.n	80095a4 <cleanup_stdio+0x10>
 80095a0:	f001 ff82 	bl	800b4a8 <_fflush_r>
 80095a4:	68a1      	ldr	r1, [r4, #8]
 80095a6:	4b09      	ldr	r3, [pc, #36]	; (80095cc <cleanup_stdio+0x38>)
 80095a8:	4299      	cmp	r1, r3
 80095aa:	d002      	beq.n	80095b2 <cleanup_stdio+0x1e>
 80095ac:	4620      	mov	r0, r4
 80095ae:	f001 ff7b 	bl	800b4a8 <_fflush_r>
 80095b2:	68e1      	ldr	r1, [r4, #12]
 80095b4:	4b06      	ldr	r3, [pc, #24]	; (80095d0 <cleanup_stdio+0x3c>)
 80095b6:	4299      	cmp	r1, r3
 80095b8:	d004      	beq.n	80095c4 <cleanup_stdio+0x30>
 80095ba:	4620      	mov	r0, r4
 80095bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095c0:	f001 bf72 	b.w	800b4a8 <_fflush_r>
 80095c4:	bd10      	pop	{r4, pc}
 80095c6:	bf00      	nop
 80095c8:	200004a8 	.word	0x200004a8
 80095cc:	20000510 	.word	0x20000510
 80095d0:	20000578 	.word	0x20000578

080095d4 <global_stdio_init.part.0>:
 80095d4:	b510      	push	{r4, lr}
 80095d6:	4b0b      	ldr	r3, [pc, #44]	; (8009604 <global_stdio_init.part.0+0x30>)
 80095d8:	4c0b      	ldr	r4, [pc, #44]	; (8009608 <global_stdio_init.part.0+0x34>)
 80095da:	4a0c      	ldr	r2, [pc, #48]	; (800960c <global_stdio_init.part.0+0x38>)
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	4620      	mov	r0, r4
 80095e0:	2200      	movs	r2, #0
 80095e2:	2104      	movs	r1, #4
 80095e4:	f7ff ff94 	bl	8009510 <std>
 80095e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80095ec:	2201      	movs	r2, #1
 80095ee:	2109      	movs	r1, #9
 80095f0:	f7ff ff8e 	bl	8009510 <std>
 80095f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80095f8:	2202      	movs	r2, #2
 80095fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095fe:	2112      	movs	r1, #18
 8009600:	f7ff bf86 	b.w	8009510 <std>
 8009604:	200005e0 	.word	0x200005e0
 8009608:	200004a8 	.word	0x200004a8
 800960c:	0800957d 	.word	0x0800957d

08009610 <__sfp_lock_acquire>:
 8009610:	4801      	ldr	r0, [pc, #4]	; (8009618 <__sfp_lock_acquire+0x8>)
 8009612:	f000 b920 	b.w	8009856 <__retarget_lock_acquire_recursive>
 8009616:	bf00      	nop
 8009618:	200005e9 	.word	0x200005e9

0800961c <__sfp_lock_release>:
 800961c:	4801      	ldr	r0, [pc, #4]	; (8009624 <__sfp_lock_release+0x8>)
 800961e:	f000 b91b 	b.w	8009858 <__retarget_lock_release_recursive>
 8009622:	bf00      	nop
 8009624:	200005e9 	.word	0x200005e9

08009628 <__sinit>:
 8009628:	b510      	push	{r4, lr}
 800962a:	4604      	mov	r4, r0
 800962c:	f7ff fff0 	bl	8009610 <__sfp_lock_acquire>
 8009630:	6a23      	ldr	r3, [r4, #32]
 8009632:	b11b      	cbz	r3, 800963c <__sinit+0x14>
 8009634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009638:	f7ff bff0 	b.w	800961c <__sfp_lock_release>
 800963c:	4b04      	ldr	r3, [pc, #16]	; (8009650 <__sinit+0x28>)
 800963e:	6223      	str	r3, [r4, #32]
 8009640:	4b04      	ldr	r3, [pc, #16]	; (8009654 <__sinit+0x2c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1f5      	bne.n	8009634 <__sinit+0xc>
 8009648:	f7ff ffc4 	bl	80095d4 <global_stdio_init.part.0>
 800964c:	e7f2      	b.n	8009634 <__sinit+0xc>
 800964e:	bf00      	nop
 8009650:	08009595 	.word	0x08009595
 8009654:	200005e0 	.word	0x200005e0

08009658 <_fwalk_sglue>:
 8009658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800965c:	4607      	mov	r7, r0
 800965e:	4688      	mov	r8, r1
 8009660:	4614      	mov	r4, r2
 8009662:	2600      	movs	r6, #0
 8009664:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009668:	f1b9 0901 	subs.w	r9, r9, #1
 800966c:	d505      	bpl.n	800967a <_fwalk_sglue+0x22>
 800966e:	6824      	ldr	r4, [r4, #0]
 8009670:	2c00      	cmp	r4, #0
 8009672:	d1f7      	bne.n	8009664 <_fwalk_sglue+0xc>
 8009674:	4630      	mov	r0, r6
 8009676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800967a:	89ab      	ldrh	r3, [r5, #12]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d907      	bls.n	8009690 <_fwalk_sglue+0x38>
 8009680:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009684:	3301      	adds	r3, #1
 8009686:	d003      	beq.n	8009690 <_fwalk_sglue+0x38>
 8009688:	4629      	mov	r1, r5
 800968a:	4638      	mov	r0, r7
 800968c:	47c0      	blx	r8
 800968e:	4306      	orrs	r6, r0
 8009690:	3568      	adds	r5, #104	; 0x68
 8009692:	e7e9      	b.n	8009668 <_fwalk_sglue+0x10>

08009694 <siprintf>:
 8009694:	b40e      	push	{r1, r2, r3}
 8009696:	b500      	push	{lr}
 8009698:	b09c      	sub	sp, #112	; 0x70
 800969a:	ab1d      	add	r3, sp, #116	; 0x74
 800969c:	9002      	str	r0, [sp, #8]
 800969e:	9006      	str	r0, [sp, #24]
 80096a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096a4:	4809      	ldr	r0, [pc, #36]	; (80096cc <siprintf+0x38>)
 80096a6:	9107      	str	r1, [sp, #28]
 80096a8:	9104      	str	r1, [sp, #16]
 80096aa:	4909      	ldr	r1, [pc, #36]	; (80096d0 <siprintf+0x3c>)
 80096ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b0:	9105      	str	r1, [sp, #20]
 80096b2:	6800      	ldr	r0, [r0, #0]
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	a902      	add	r1, sp, #8
 80096b8:	f001 fc2e 	bl	800af18 <_svfiprintf_r>
 80096bc:	9b02      	ldr	r3, [sp, #8]
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	b01c      	add	sp, #112	; 0x70
 80096c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096c8:	b003      	add	sp, #12
 80096ca:	4770      	bx	lr
 80096cc:	2000006c 	.word	0x2000006c
 80096d0:	ffff0208 	.word	0xffff0208

080096d4 <__sread>:
 80096d4:	b510      	push	{r4, lr}
 80096d6:	460c      	mov	r4, r1
 80096d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096dc:	f000 f86c 	bl	80097b8 <_read_r>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	bfab      	itete	ge
 80096e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096e6:	89a3      	ldrhlt	r3, [r4, #12]
 80096e8:	181b      	addge	r3, r3, r0
 80096ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096ee:	bfac      	ite	ge
 80096f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80096f2:	81a3      	strhlt	r3, [r4, #12]
 80096f4:	bd10      	pop	{r4, pc}

080096f6 <__swrite>:
 80096f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096fa:	461f      	mov	r7, r3
 80096fc:	898b      	ldrh	r3, [r1, #12]
 80096fe:	05db      	lsls	r3, r3, #23
 8009700:	4605      	mov	r5, r0
 8009702:	460c      	mov	r4, r1
 8009704:	4616      	mov	r6, r2
 8009706:	d505      	bpl.n	8009714 <__swrite+0x1e>
 8009708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800970c:	2302      	movs	r3, #2
 800970e:	2200      	movs	r2, #0
 8009710:	f000 f840 	bl	8009794 <_lseek_r>
 8009714:	89a3      	ldrh	r3, [r4, #12]
 8009716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800971a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800971e:	81a3      	strh	r3, [r4, #12]
 8009720:	4632      	mov	r2, r6
 8009722:	463b      	mov	r3, r7
 8009724:	4628      	mov	r0, r5
 8009726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800972a:	f000 b857 	b.w	80097dc <_write_r>

0800972e <__sseek>:
 800972e:	b510      	push	{r4, lr}
 8009730:	460c      	mov	r4, r1
 8009732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009736:	f000 f82d 	bl	8009794 <_lseek_r>
 800973a:	1c43      	adds	r3, r0, #1
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	bf15      	itete	ne
 8009740:	6560      	strne	r0, [r4, #84]	; 0x54
 8009742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800974a:	81a3      	strheq	r3, [r4, #12]
 800974c:	bf18      	it	ne
 800974e:	81a3      	strhne	r3, [r4, #12]
 8009750:	bd10      	pop	{r4, pc}

08009752 <__sclose>:
 8009752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009756:	f000 b80d 	b.w	8009774 <_close_r>

0800975a <memset>:
 800975a:	4402      	add	r2, r0
 800975c:	4603      	mov	r3, r0
 800975e:	4293      	cmp	r3, r2
 8009760:	d100      	bne.n	8009764 <memset+0xa>
 8009762:	4770      	bx	lr
 8009764:	f803 1b01 	strb.w	r1, [r3], #1
 8009768:	e7f9      	b.n	800975e <memset+0x4>
	...

0800976c <_localeconv_r>:
 800976c:	4800      	ldr	r0, [pc, #0]	; (8009770 <_localeconv_r+0x4>)
 800976e:	4770      	bx	lr
 8009770:	20000160 	.word	0x20000160

08009774 <_close_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4d06      	ldr	r5, [pc, #24]	; (8009790 <_close_r+0x1c>)
 8009778:	2300      	movs	r3, #0
 800977a:	4604      	mov	r4, r0
 800977c:	4608      	mov	r0, r1
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	f7f8 fedf 	bl	8002542 <_close>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d102      	bne.n	800978e <_close_r+0x1a>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	b103      	cbz	r3, 800978e <_close_r+0x1a>
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	200005e4 	.word	0x200005e4

08009794 <_lseek_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4d07      	ldr	r5, [pc, #28]	; (80097b4 <_lseek_r+0x20>)
 8009798:	4604      	mov	r4, r0
 800979a:	4608      	mov	r0, r1
 800979c:	4611      	mov	r1, r2
 800979e:	2200      	movs	r2, #0
 80097a0:	602a      	str	r2, [r5, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	f7f8 fef4 	bl	8002590 <_lseek>
 80097a8:	1c43      	adds	r3, r0, #1
 80097aa:	d102      	bne.n	80097b2 <_lseek_r+0x1e>
 80097ac:	682b      	ldr	r3, [r5, #0]
 80097ae:	b103      	cbz	r3, 80097b2 <_lseek_r+0x1e>
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	bd38      	pop	{r3, r4, r5, pc}
 80097b4:	200005e4 	.word	0x200005e4

080097b8 <_read_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4d07      	ldr	r5, [pc, #28]	; (80097d8 <_read_r+0x20>)
 80097bc:	4604      	mov	r4, r0
 80097be:	4608      	mov	r0, r1
 80097c0:	4611      	mov	r1, r2
 80097c2:	2200      	movs	r2, #0
 80097c4:	602a      	str	r2, [r5, #0]
 80097c6:	461a      	mov	r2, r3
 80097c8:	f7f8 fe82 	bl	80024d0 <_read>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d102      	bne.n	80097d6 <_read_r+0x1e>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	b103      	cbz	r3, 80097d6 <_read_r+0x1e>
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
 80097d8:	200005e4 	.word	0x200005e4

080097dc <_write_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4d07      	ldr	r5, [pc, #28]	; (80097fc <_write_r+0x20>)
 80097e0:	4604      	mov	r4, r0
 80097e2:	4608      	mov	r0, r1
 80097e4:	4611      	mov	r1, r2
 80097e6:	2200      	movs	r2, #0
 80097e8:	602a      	str	r2, [r5, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	f7f8 fe8d 	bl	800250a <_write>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d102      	bne.n	80097fa <_write_r+0x1e>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	b103      	cbz	r3, 80097fa <_write_r+0x1e>
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	200005e4 	.word	0x200005e4

08009800 <__errno>:
 8009800:	4b01      	ldr	r3, [pc, #4]	; (8009808 <__errno+0x8>)
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	2000006c 	.word	0x2000006c

0800980c <__libc_init_array>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	4d0d      	ldr	r5, [pc, #52]	; (8009844 <__libc_init_array+0x38>)
 8009810:	4c0d      	ldr	r4, [pc, #52]	; (8009848 <__libc_init_array+0x3c>)
 8009812:	1b64      	subs	r4, r4, r5
 8009814:	10a4      	asrs	r4, r4, #2
 8009816:	2600      	movs	r6, #0
 8009818:	42a6      	cmp	r6, r4
 800981a:	d109      	bne.n	8009830 <__libc_init_array+0x24>
 800981c:	4d0b      	ldr	r5, [pc, #44]	; (800984c <__libc_init_array+0x40>)
 800981e:	4c0c      	ldr	r4, [pc, #48]	; (8009850 <__libc_init_array+0x44>)
 8009820:	f002 f896 	bl	800b950 <_init>
 8009824:	1b64      	subs	r4, r4, r5
 8009826:	10a4      	asrs	r4, r4, #2
 8009828:	2600      	movs	r6, #0
 800982a:	42a6      	cmp	r6, r4
 800982c:	d105      	bne.n	800983a <__libc_init_array+0x2e>
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	f855 3b04 	ldr.w	r3, [r5], #4
 8009834:	4798      	blx	r3
 8009836:	3601      	adds	r6, #1
 8009838:	e7ee      	b.n	8009818 <__libc_init_array+0xc>
 800983a:	f855 3b04 	ldr.w	r3, [r5], #4
 800983e:	4798      	blx	r3
 8009840:	3601      	adds	r6, #1
 8009842:	e7f2      	b.n	800982a <__libc_init_array+0x1e>
 8009844:	0800bdc4 	.word	0x0800bdc4
 8009848:	0800bdc4 	.word	0x0800bdc4
 800984c:	0800bdc4 	.word	0x0800bdc4
 8009850:	0800bdc8 	.word	0x0800bdc8

08009854 <__retarget_lock_init_recursive>:
 8009854:	4770      	bx	lr

08009856 <__retarget_lock_acquire_recursive>:
 8009856:	4770      	bx	lr

08009858 <__retarget_lock_release_recursive>:
 8009858:	4770      	bx	lr

0800985a <memcpy>:
 800985a:	440a      	add	r2, r1
 800985c:	4291      	cmp	r1, r2
 800985e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009862:	d100      	bne.n	8009866 <memcpy+0xc>
 8009864:	4770      	bx	lr
 8009866:	b510      	push	{r4, lr}
 8009868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800986c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009870:	4291      	cmp	r1, r2
 8009872:	d1f9      	bne.n	8009868 <memcpy+0xe>
 8009874:	bd10      	pop	{r4, pc}

08009876 <quorem>:
 8009876:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987a:	6903      	ldr	r3, [r0, #16]
 800987c:	690c      	ldr	r4, [r1, #16]
 800987e:	42a3      	cmp	r3, r4
 8009880:	4607      	mov	r7, r0
 8009882:	db7e      	blt.n	8009982 <quorem+0x10c>
 8009884:	3c01      	subs	r4, #1
 8009886:	f101 0814 	add.w	r8, r1, #20
 800988a:	f100 0514 	add.w	r5, r0, #20
 800988e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009898:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800989c:	3301      	adds	r3, #1
 800989e:	429a      	cmp	r2, r3
 80098a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80098ac:	d331      	bcc.n	8009912 <quorem+0x9c>
 80098ae:	f04f 0e00 	mov.w	lr, #0
 80098b2:	4640      	mov	r0, r8
 80098b4:	46ac      	mov	ip, r5
 80098b6:	46f2      	mov	sl, lr
 80098b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80098bc:	b293      	uxth	r3, r2
 80098be:	fb06 e303 	mla	r3, r6, r3, lr
 80098c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098c6:	0c1a      	lsrs	r2, r3, #16
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	ebaa 0303 	sub.w	r3, sl, r3
 80098ce:	f8dc a000 	ldr.w	sl, [ip]
 80098d2:	fa13 f38a 	uxtah	r3, r3, sl
 80098d6:	fb06 220e 	mla	r2, r6, lr, r2
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	9b00      	ldr	r3, [sp, #0]
 80098de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098e2:	b292      	uxth	r2, r2
 80098e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80098f0:	4581      	cmp	r9, r0
 80098f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098f6:	f84c 3b04 	str.w	r3, [ip], #4
 80098fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098fe:	d2db      	bcs.n	80098b8 <quorem+0x42>
 8009900:	f855 300b 	ldr.w	r3, [r5, fp]
 8009904:	b92b      	cbnz	r3, 8009912 <quorem+0x9c>
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	3b04      	subs	r3, #4
 800990a:	429d      	cmp	r5, r3
 800990c:	461a      	mov	r2, r3
 800990e:	d32c      	bcc.n	800996a <quorem+0xf4>
 8009910:	613c      	str	r4, [r7, #16]
 8009912:	4638      	mov	r0, r7
 8009914:	f001 f9a6 	bl	800ac64 <__mcmp>
 8009918:	2800      	cmp	r0, #0
 800991a:	db22      	blt.n	8009962 <quorem+0xec>
 800991c:	3601      	adds	r6, #1
 800991e:	4629      	mov	r1, r5
 8009920:	2000      	movs	r0, #0
 8009922:	f858 2b04 	ldr.w	r2, [r8], #4
 8009926:	f8d1 c000 	ldr.w	ip, [r1]
 800992a:	b293      	uxth	r3, r2
 800992c:	1ac3      	subs	r3, r0, r3
 800992e:	0c12      	lsrs	r2, r2, #16
 8009930:	fa13 f38c 	uxtah	r3, r3, ip
 8009934:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800993c:	b29b      	uxth	r3, r3
 800993e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009942:	45c1      	cmp	r9, r8
 8009944:	f841 3b04 	str.w	r3, [r1], #4
 8009948:	ea4f 4022 	mov.w	r0, r2, asr #16
 800994c:	d2e9      	bcs.n	8009922 <quorem+0xac>
 800994e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009956:	b922      	cbnz	r2, 8009962 <quorem+0xec>
 8009958:	3b04      	subs	r3, #4
 800995a:	429d      	cmp	r5, r3
 800995c:	461a      	mov	r2, r3
 800995e:	d30a      	bcc.n	8009976 <quorem+0x100>
 8009960:	613c      	str	r4, [r7, #16]
 8009962:	4630      	mov	r0, r6
 8009964:	b003      	add	sp, #12
 8009966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996a:	6812      	ldr	r2, [r2, #0]
 800996c:	3b04      	subs	r3, #4
 800996e:	2a00      	cmp	r2, #0
 8009970:	d1ce      	bne.n	8009910 <quorem+0x9a>
 8009972:	3c01      	subs	r4, #1
 8009974:	e7c9      	b.n	800990a <quorem+0x94>
 8009976:	6812      	ldr	r2, [r2, #0]
 8009978:	3b04      	subs	r3, #4
 800997a:	2a00      	cmp	r2, #0
 800997c:	d1f0      	bne.n	8009960 <quorem+0xea>
 800997e:	3c01      	subs	r4, #1
 8009980:	e7eb      	b.n	800995a <quorem+0xe4>
 8009982:	2000      	movs	r0, #0
 8009984:	e7ee      	b.n	8009964 <quorem+0xee>
	...

08009988 <_dtoa_r>:
 8009988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998c:	ed2d 8b04 	vpush	{d8-d9}
 8009990:	69c5      	ldr	r5, [r0, #28]
 8009992:	b093      	sub	sp, #76	; 0x4c
 8009994:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009998:	ec57 6b10 	vmov	r6, r7, d0
 800999c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099a0:	9107      	str	r1, [sp, #28]
 80099a2:	4604      	mov	r4, r0
 80099a4:	920a      	str	r2, [sp, #40]	; 0x28
 80099a6:	930d      	str	r3, [sp, #52]	; 0x34
 80099a8:	b975      	cbnz	r5, 80099c8 <_dtoa_r+0x40>
 80099aa:	2010      	movs	r0, #16
 80099ac:	f000 fe2a 	bl	800a604 <malloc>
 80099b0:	4602      	mov	r2, r0
 80099b2:	61e0      	str	r0, [r4, #28]
 80099b4:	b920      	cbnz	r0, 80099c0 <_dtoa_r+0x38>
 80099b6:	4bae      	ldr	r3, [pc, #696]	; (8009c70 <_dtoa_r+0x2e8>)
 80099b8:	21ef      	movs	r1, #239	; 0xef
 80099ba:	48ae      	ldr	r0, [pc, #696]	; (8009c74 <_dtoa_r+0x2ec>)
 80099bc:	f001 fe5c 	bl	800b678 <__assert_func>
 80099c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099c4:	6005      	str	r5, [r0, #0]
 80099c6:	60c5      	str	r5, [r0, #12]
 80099c8:	69e3      	ldr	r3, [r4, #28]
 80099ca:	6819      	ldr	r1, [r3, #0]
 80099cc:	b151      	cbz	r1, 80099e4 <_dtoa_r+0x5c>
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	604a      	str	r2, [r1, #4]
 80099d2:	2301      	movs	r3, #1
 80099d4:	4093      	lsls	r3, r2
 80099d6:	608b      	str	r3, [r1, #8]
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 ff07 	bl	800a7ec <_Bfree>
 80099de:	69e3      	ldr	r3, [r4, #28]
 80099e0:	2200      	movs	r2, #0
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	1e3b      	subs	r3, r7, #0
 80099e6:	bfbb      	ittet	lt
 80099e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099ec:	9303      	strlt	r3, [sp, #12]
 80099ee:	2300      	movge	r3, #0
 80099f0:	2201      	movlt	r2, #1
 80099f2:	bfac      	ite	ge
 80099f4:	f8c8 3000 	strge.w	r3, [r8]
 80099f8:	f8c8 2000 	strlt.w	r2, [r8]
 80099fc:	4b9e      	ldr	r3, [pc, #632]	; (8009c78 <_dtoa_r+0x2f0>)
 80099fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a02:	ea33 0308 	bics.w	r3, r3, r8
 8009a06:	d11b      	bne.n	8009a40 <_dtoa_r+0xb8>
 8009a08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009a14:	4333      	orrs	r3, r6
 8009a16:	f000 8593 	beq.w	800a540 <_dtoa_r+0xbb8>
 8009a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a1c:	b963      	cbnz	r3, 8009a38 <_dtoa_r+0xb0>
 8009a1e:	4b97      	ldr	r3, [pc, #604]	; (8009c7c <_dtoa_r+0x2f4>)
 8009a20:	e027      	b.n	8009a72 <_dtoa_r+0xea>
 8009a22:	4b97      	ldr	r3, [pc, #604]	; (8009c80 <_dtoa_r+0x2f8>)
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	3308      	adds	r3, #8
 8009a28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	9800      	ldr	r0, [sp, #0]
 8009a2e:	b013      	add	sp, #76	; 0x4c
 8009a30:	ecbd 8b04 	vpop	{d8-d9}
 8009a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a38:	4b90      	ldr	r3, [pc, #576]	; (8009c7c <_dtoa_r+0x2f4>)
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	3303      	adds	r3, #3
 8009a3e:	e7f3      	b.n	8009a28 <_dtoa_r+0xa0>
 8009a40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a44:	2200      	movs	r2, #0
 8009a46:	ec51 0b17 	vmov	r0, r1, d7
 8009a4a:	eeb0 8a47 	vmov.f32	s16, s14
 8009a4e:	eef0 8a67 	vmov.f32	s17, s15
 8009a52:	2300      	movs	r3, #0
 8009a54:	f7f7 f860 	bl	8000b18 <__aeabi_dcmpeq>
 8009a58:	4681      	mov	r9, r0
 8009a5a:	b160      	cbz	r0, 8009a76 <_dtoa_r+0xee>
 8009a5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a5e:	2301      	movs	r3, #1
 8009a60:	6013      	str	r3, [r2, #0]
 8009a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 8568 	beq.w	800a53a <_dtoa_r+0xbb2>
 8009a6a:	4b86      	ldr	r3, [pc, #536]	; (8009c84 <_dtoa_r+0x2fc>)
 8009a6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a6e:	6013      	str	r3, [r2, #0]
 8009a70:	3b01      	subs	r3, #1
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	e7da      	b.n	8009a2c <_dtoa_r+0xa4>
 8009a76:	aa10      	add	r2, sp, #64	; 0x40
 8009a78:	a911      	add	r1, sp, #68	; 0x44
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	eeb0 0a48 	vmov.f32	s0, s16
 8009a80:	eef0 0a68 	vmov.f32	s1, s17
 8009a84:	f001 f994 	bl	800adb0 <__d2b>
 8009a88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009a8c:	4682      	mov	sl, r0
 8009a8e:	2d00      	cmp	r5, #0
 8009a90:	d07f      	beq.n	8009b92 <_dtoa_r+0x20a>
 8009a92:	ee18 3a90 	vmov	r3, s17
 8009a96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009a9e:	ec51 0b18 	vmov	r0, r1, d8
 8009aa2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009aa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009aaa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009aae:	4619      	mov	r1, r3
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	4b75      	ldr	r3, [pc, #468]	; (8009c88 <_dtoa_r+0x300>)
 8009ab4:	f7f6 fc10 	bl	80002d8 <__aeabi_dsub>
 8009ab8:	a367      	add	r3, pc, #412	; (adr r3, 8009c58 <_dtoa_r+0x2d0>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 fdc3 	bl	8000648 <__aeabi_dmul>
 8009ac2:	a367      	add	r3, pc, #412	; (adr r3, 8009c60 <_dtoa_r+0x2d8>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	f7f6 fc08 	bl	80002dc <__adddf3>
 8009acc:	4606      	mov	r6, r0
 8009ace:	4628      	mov	r0, r5
 8009ad0:	460f      	mov	r7, r1
 8009ad2:	f7f6 fd4f 	bl	8000574 <__aeabi_i2d>
 8009ad6:	a364      	add	r3, pc, #400	; (adr r3, 8009c68 <_dtoa_r+0x2e0>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f7f6 fdb4 	bl	8000648 <__aeabi_dmul>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4630      	mov	r0, r6
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	f7f6 fbf8 	bl	80002dc <__adddf3>
 8009aec:	4606      	mov	r6, r0
 8009aee:	460f      	mov	r7, r1
 8009af0:	f7f7 f85a 	bl	8000ba8 <__aeabi_d2iz>
 8009af4:	2200      	movs	r2, #0
 8009af6:	4683      	mov	fp, r0
 8009af8:	2300      	movs	r3, #0
 8009afa:	4630      	mov	r0, r6
 8009afc:	4639      	mov	r1, r7
 8009afe:	f7f7 f815 	bl	8000b2c <__aeabi_dcmplt>
 8009b02:	b148      	cbz	r0, 8009b18 <_dtoa_r+0x190>
 8009b04:	4658      	mov	r0, fp
 8009b06:	f7f6 fd35 	bl	8000574 <__aeabi_i2d>
 8009b0a:	4632      	mov	r2, r6
 8009b0c:	463b      	mov	r3, r7
 8009b0e:	f7f7 f803 	bl	8000b18 <__aeabi_dcmpeq>
 8009b12:	b908      	cbnz	r0, 8009b18 <_dtoa_r+0x190>
 8009b14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b18:	f1bb 0f16 	cmp.w	fp, #22
 8009b1c:	d857      	bhi.n	8009bce <_dtoa_r+0x246>
 8009b1e:	4b5b      	ldr	r3, [pc, #364]	; (8009c8c <_dtoa_r+0x304>)
 8009b20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b28:	ec51 0b18 	vmov	r0, r1, d8
 8009b2c:	f7f6 fffe 	bl	8000b2c <__aeabi_dcmplt>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d04e      	beq.n	8009bd2 <_dtoa_r+0x24a>
 8009b34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b38:	2300      	movs	r3, #0
 8009b3a:	930c      	str	r3, [sp, #48]	; 0x30
 8009b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b3e:	1b5b      	subs	r3, r3, r5
 8009b40:	1e5a      	subs	r2, r3, #1
 8009b42:	bf45      	ittet	mi
 8009b44:	f1c3 0301 	rsbmi	r3, r3, #1
 8009b48:	9305      	strmi	r3, [sp, #20]
 8009b4a:	2300      	movpl	r3, #0
 8009b4c:	2300      	movmi	r3, #0
 8009b4e:	9206      	str	r2, [sp, #24]
 8009b50:	bf54      	ite	pl
 8009b52:	9305      	strpl	r3, [sp, #20]
 8009b54:	9306      	strmi	r3, [sp, #24]
 8009b56:	f1bb 0f00 	cmp.w	fp, #0
 8009b5a:	db3c      	blt.n	8009bd6 <_dtoa_r+0x24e>
 8009b5c:	9b06      	ldr	r3, [sp, #24]
 8009b5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009b62:	445b      	add	r3, fp
 8009b64:	9306      	str	r3, [sp, #24]
 8009b66:	2300      	movs	r3, #0
 8009b68:	9308      	str	r3, [sp, #32]
 8009b6a:	9b07      	ldr	r3, [sp, #28]
 8009b6c:	2b09      	cmp	r3, #9
 8009b6e:	d868      	bhi.n	8009c42 <_dtoa_r+0x2ba>
 8009b70:	2b05      	cmp	r3, #5
 8009b72:	bfc4      	itt	gt
 8009b74:	3b04      	subgt	r3, #4
 8009b76:	9307      	strgt	r3, [sp, #28]
 8009b78:	9b07      	ldr	r3, [sp, #28]
 8009b7a:	f1a3 0302 	sub.w	r3, r3, #2
 8009b7e:	bfcc      	ite	gt
 8009b80:	2500      	movgt	r5, #0
 8009b82:	2501      	movle	r5, #1
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	f200 8085 	bhi.w	8009c94 <_dtoa_r+0x30c>
 8009b8a:	e8df f003 	tbb	[pc, r3]
 8009b8e:	3b2e      	.short	0x3b2e
 8009b90:	5839      	.short	0x5839
 8009b92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b96:	441d      	add	r5, r3
 8009b98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b9c:	2b20      	cmp	r3, #32
 8009b9e:	bfc1      	itttt	gt
 8009ba0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ba4:	fa08 f803 	lslgt.w	r8, r8, r3
 8009ba8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009bac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009bb0:	bfd6      	itet	le
 8009bb2:	f1c3 0320 	rsble	r3, r3, #32
 8009bb6:	ea48 0003 	orrgt.w	r0, r8, r3
 8009bba:	fa06 f003 	lslle.w	r0, r6, r3
 8009bbe:	f7f6 fcc9 	bl	8000554 <__aeabi_ui2d>
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009bc8:	3d01      	subs	r5, #1
 8009bca:	920e      	str	r2, [sp, #56]	; 0x38
 8009bcc:	e76f      	b.n	8009aae <_dtoa_r+0x126>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e7b3      	b.n	8009b3a <_dtoa_r+0x1b2>
 8009bd2:	900c      	str	r0, [sp, #48]	; 0x30
 8009bd4:	e7b2      	b.n	8009b3c <_dtoa_r+0x1b4>
 8009bd6:	9b05      	ldr	r3, [sp, #20]
 8009bd8:	eba3 030b 	sub.w	r3, r3, fp
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	f1cb 0300 	rsb	r3, fp, #0
 8009be2:	9308      	str	r3, [sp, #32]
 8009be4:	2300      	movs	r3, #0
 8009be6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009be8:	e7bf      	b.n	8009b6a <_dtoa_r+0x1e2>
 8009bea:	2300      	movs	r3, #0
 8009bec:	9309      	str	r3, [sp, #36]	; 0x24
 8009bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dc52      	bgt.n	8009c9a <_dtoa_r+0x312>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	920a      	str	r2, [sp, #40]	; 0x28
 8009bfe:	e00b      	b.n	8009c18 <_dtoa_r+0x290>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7f3      	b.n	8009bec <_dtoa_r+0x264>
 8009c04:	2300      	movs	r3, #0
 8009c06:	9309      	str	r3, [sp, #36]	; 0x24
 8009c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c0a:	445b      	add	r3, fp
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	9304      	str	r3, [sp, #16]
 8009c14:	bfb8      	it	lt
 8009c16:	2301      	movlt	r3, #1
 8009c18:	69e0      	ldr	r0, [r4, #28]
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	f102 0614 	add.w	r6, r2, #20
 8009c22:	429e      	cmp	r6, r3
 8009c24:	d93d      	bls.n	8009ca2 <_dtoa_r+0x31a>
 8009c26:	6041      	str	r1, [r0, #4]
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fd9f 	bl	800a76c <_Balloc>
 8009c2e:	9000      	str	r0, [sp, #0]
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d139      	bne.n	8009ca8 <_dtoa_r+0x320>
 8009c34:	4b16      	ldr	r3, [pc, #88]	; (8009c90 <_dtoa_r+0x308>)
 8009c36:	4602      	mov	r2, r0
 8009c38:	f240 11af 	movw	r1, #431	; 0x1af
 8009c3c:	e6bd      	b.n	80099ba <_dtoa_r+0x32>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e7e1      	b.n	8009c06 <_dtoa_r+0x27e>
 8009c42:	2501      	movs	r5, #1
 8009c44:	2300      	movs	r3, #0
 8009c46:	9307      	str	r3, [sp, #28]
 8009c48:	9509      	str	r5, [sp, #36]	; 0x24
 8009c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	9304      	str	r3, [sp, #16]
 8009c52:	2200      	movs	r2, #0
 8009c54:	2312      	movs	r3, #18
 8009c56:	e7d1      	b.n	8009bfc <_dtoa_r+0x274>
 8009c58:	636f4361 	.word	0x636f4361
 8009c5c:	3fd287a7 	.word	0x3fd287a7
 8009c60:	8b60c8b3 	.word	0x8b60c8b3
 8009c64:	3fc68a28 	.word	0x3fc68a28
 8009c68:	509f79fb 	.word	0x509f79fb
 8009c6c:	3fd34413 	.word	0x3fd34413
 8009c70:	0800ba8d 	.word	0x0800ba8d
 8009c74:	0800baa4 	.word	0x0800baa4
 8009c78:	7ff00000 	.word	0x7ff00000
 8009c7c:	0800ba89 	.word	0x0800ba89
 8009c80:	0800ba80 	.word	0x0800ba80
 8009c84:	0800ba5d 	.word	0x0800ba5d
 8009c88:	3ff80000 	.word	0x3ff80000
 8009c8c:	0800bb90 	.word	0x0800bb90
 8009c90:	0800bafc 	.word	0x0800bafc
 8009c94:	2301      	movs	r3, #1
 8009c96:	9309      	str	r3, [sp, #36]	; 0x24
 8009c98:	e7d7      	b.n	8009c4a <_dtoa_r+0x2c2>
 8009c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	9304      	str	r3, [sp, #16]
 8009ca0:	e7ba      	b.n	8009c18 <_dtoa_r+0x290>
 8009ca2:	3101      	adds	r1, #1
 8009ca4:	0052      	lsls	r2, r2, #1
 8009ca6:	e7ba      	b.n	8009c1e <_dtoa_r+0x296>
 8009ca8:	69e3      	ldr	r3, [r4, #28]
 8009caa:	9a00      	ldr	r2, [sp, #0]
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	2b0e      	cmp	r3, #14
 8009cb2:	f200 80a8 	bhi.w	8009e06 <_dtoa_r+0x47e>
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	f000 80a5 	beq.w	8009e06 <_dtoa_r+0x47e>
 8009cbc:	f1bb 0f00 	cmp.w	fp, #0
 8009cc0:	dd38      	ble.n	8009d34 <_dtoa_r+0x3ac>
 8009cc2:	4bc0      	ldr	r3, [pc, #768]	; (8009fc4 <_dtoa_r+0x63c>)
 8009cc4:	f00b 020f 	and.w	r2, fp, #15
 8009cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ccc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009cd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009cd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009cd8:	d019      	beq.n	8009d0e <_dtoa_r+0x386>
 8009cda:	4bbb      	ldr	r3, [pc, #748]	; (8009fc8 <_dtoa_r+0x640>)
 8009cdc:	ec51 0b18 	vmov	r0, r1, d8
 8009ce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ce4:	f7f6 fdda 	bl	800089c <__aeabi_ddiv>
 8009ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cec:	f008 080f 	and.w	r8, r8, #15
 8009cf0:	2503      	movs	r5, #3
 8009cf2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009fc8 <_dtoa_r+0x640>
 8009cf6:	f1b8 0f00 	cmp.w	r8, #0
 8009cfa:	d10a      	bne.n	8009d12 <_dtoa_r+0x38a>
 8009cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d00:	4632      	mov	r2, r6
 8009d02:	463b      	mov	r3, r7
 8009d04:	f7f6 fdca 	bl	800089c <__aeabi_ddiv>
 8009d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d0c:	e02b      	b.n	8009d66 <_dtoa_r+0x3de>
 8009d0e:	2502      	movs	r5, #2
 8009d10:	e7ef      	b.n	8009cf2 <_dtoa_r+0x36a>
 8009d12:	f018 0f01 	tst.w	r8, #1
 8009d16:	d008      	beq.n	8009d2a <_dtoa_r+0x3a2>
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d20:	f7f6 fc92 	bl	8000648 <__aeabi_dmul>
 8009d24:	3501      	adds	r5, #1
 8009d26:	4606      	mov	r6, r0
 8009d28:	460f      	mov	r7, r1
 8009d2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d2e:	f109 0908 	add.w	r9, r9, #8
 8009d32:	e7e0      	b.n	8009cf6 <_dtoa_r+0x36e>
 8009d34:	f000 809f 	beq.w	8009e76 <_dtoa_r+0x4ee>
 8009d38:	f1cb 0600 	rsb	r6, fp, #0
 8009d3c:	4ba1      	ldr	r3, [pc, #644]	; (8009fc4 <_dtoa_r+0x63c>)
 8009d3e:	4fa2      	ldr	r7, [pc, #648]	; (8009fc8 <_dtoa_r+0x640>)
 8009d40:	f006 020f 	and.w	r2, r6, #15
 8009d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	ec51 0b18 	vmov	r0, r1, d8
 8009d50:	f7f6 fc7a 	bl	8000648 <__aeabi_dmul>
 8009d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d58:	1136      	asrs	r6, r6, #4
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	2502      	movs	r5, #2
 8009d5e:	2e00      	cmp	r6, #0
 8009d60:	d17e      	bne.n	8009e60 <_dtoa_r+0x4d8>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1d0      	bne.n	8009d08 <_dtoa_r+0x380>
 8009d66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 8084 	beq.w	8009e7a <_dtoa_r+0x4f2>
 8009d72:	4b96      	ldr	r3, [pc, #600]	; (8009fcc <_dtoa_r+0x644>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	4640      	mov	r0, r8
 8009d78:	4649      	mov	r1, r9
 8009d7a:	f7f6 fed7 	bl	8000b2c <__aeabi_dcmplt>
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d07b      	beq.n	8009e7a <_dtoa_r+0x4f2>
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d078      	beq.n	8009e7a <_dtoa_r+0x4f2>
 8009d88:	9b01      	ldr	r3, [sp, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	dd39      	ble.n	8009e02 <_dtoa_r+0x47a>
 8009d8e:	4b90      	ldr	r3, [pc, #576]	; (8009fd0 <_dtoa_r+0x648>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	4640      	mov	r0, r8
 8009d94:	4649      	mov	r1, r9
 8009d96:	f7f6 fc57 	bl	8000648 <__aeabi_dmul>
 8009d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d9e:	9e01      	ldr	r6, [sp, #4]
 8009da0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009da4:	3501      	adds	r5, #1
 8009da6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009daa:	4628      	mov	r0, r5
 8009dac:	f7f6 fbe2 	bl	8000574 <__aeabi_i2d>
 8009db0:	4642      	mov	r2, r8
 8009db2:	464b      	mov	r3, r9
 8009db4:	f7f6 fc48 	bl	8000648 <__aeabi_dmul>
 8009db8:	4b86      	ldr	r3, [pc, #536]	; (8009fd4 <_dtoa_r+0x64c>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f7f6 fa8e 	bl	80002dc <__adddf3>
 8009dc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dc8:	9303      	str	r3, [sp, #12]
 8009dca:	2e00      	cmp	r6, #0
 8009dcc:	d158      	bne.n	8009e80 <_dtoa_r+0x4f8>
 8009dce:	4b82      	ldr	r3, [pc, #520]	; (8009fd8 <_dtoa_r+0x650>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	f7f6 fa7f 	bl	80002d8 <__aeabi_dsub>
 8009dda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dde:	4680      	mov	r8, r0
 8009de0:	4689      	mov	r9, r1
 8009de2:	f7f6 fec1 	bl	8000b68 <__aeabi_dcmpgt>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	f040 8296 	bne.w	800a318 <_dtoa_r+0x990>
 8009dec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009df0:	4640      	mov	r0, r8
 8009df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009df6:	4649      	mov	r1, r9
 8009df8:	f7f6 fe98 	bl	8000b2c <__aeabi_dcmplt>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	f040 8289 	bne.w	800a314 <_dtoa_r+0x98c>
 8009e02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f2c0 814e 	blt.w	800a0aa <_dtoa_r+0x722>
 8009e0e:	f1bb 0f0e 	cmp.w	fp, #14
 8009e12:	f300 814a 	bgt.w	800a0aa <_dtoa_r+0x722>
 8009e16:	4b6b      	ldr	r3, [pc, #428]	; (8009fc4 <_dtoa_r+0x63c>)
 8009e18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f280 80dc 	bge.w	8009fe0 <_dtoa_r+0x658>
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f300 80d8 	bgt.w	8009fe0 <_dtoa_r+0x658>
 8009e30:	f040 826f 	bne.w	800a312 <_dtoa_r+0x98a>
 8009e34:	4b68      	ldr	r3, [pc, #416]	; (8009fd8 <_dtoa_r+0x650>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	4640      	mov	r0, r8
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	f7f6 fc04 	bl	8000648 <__aeabi_dmul>
 8009e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e44:	f7f6 fe86 	bl	8000b54 <__aeabi_dcmpge>
 8009e48:	9e04      	ldr	r6, [sp, #16]
 8009e4a:	4637      	mov	r7, r6
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	f040 8245 	bne.w	800a2dc <_dtoa_r+0x954>
 8009e52:	9d00      	ldr	r5, [sp, #0]
 8009e54:	2331      	movs	r3, #49	; 0x31
 8009e56:	f805 3b01 	strb.w	r3, [r5], #1
 8009e5a:	f10b 0b01 	add.w	fp, fp, #1
 8009e5e:	e241      	b.n	800a2e4 <_dtoa_r+0x95c>
 8009e60:	07f2      	lsls	r2, r6, #31
 8009e62:	d505      	bpl.n	8009e70 <_dtoa_r+0x4e8>
 8009e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e68:	f7f6 fbee 	bl	8000648 <__aeabi_dmul>
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	2301      	movs	r3, #1
 8009e70:	1076      	asrs	r6, r6, #1
 8009e72:	3708      	adds	r7, #8
 8009e74:	e773      	b.n	8009d5e <_dtoa_r+0x3d6>
 8009e76:	2502      	movs	r5, #2
 8009e78:	e775      	b.n	8009d66 <_dtoa_r+0x3de>
 8009e7a:	9e04      	ldr	r6, [sp, #16]
 8009e7c:	465f      	mov	r7, fp
 8009e7e:	e792      	b.n	8009da6 <_dtoa_r+0x41e>
 8009e80:	9900      	ldr	r1, [sp, #0]
 8009e82:	4b50      	ldr	r3, [pc, #320]	; (8009fc4 <_dtoa_r+0x63c>)
 8009e84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e88:	4431      	add	r1, r6
 8009e8a:	9102      	str	r1, [sp, #8]
 8009e8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e8e:	eeb0 9a47 	vmov.f32	s18, s14
 8009e92:	eef0 9a67 	vmov.f32	s19, s15
 8009e96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e9e:	2900      	cmp	r1, #0
 8009ea0:	d044      	beq.n	8009f2c <_dtoa_r+0x5a4>
 8009ea2:	494e      	ldr	r1, [pc, #312]	; (8009fdc <_dtoa_r+0x654>)
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	f7f6 fcf9 	bl	800089c <__aeabi_ddiv>
 8009eaa:	ec53 2b19 	vmov	r2, r3, d9
 8009eae:	f7f6 fa13 	bl	80002d8 <__aeabi_dsub>
 8009eb2:	9d00      	ldr	r5, [sp, #0]
 8009eb4:	ec41 0b19 	vmov	d9, r0, r1
 8009eb8:	4649      	mov	r1, r9
 8009eba:	4640      	mov	r0, r8
 8009ebc:	f7f6 fe74 	bl	8000ba8 <__aeabi_d2iz>
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	f7f6 fb57 	bl	8000574 <__aeabi_i2d>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4640      	mov	r0, r8
 8009ecc:	4649      	mov	r1, r9
 8009ece:	f7f6 fa03 	bl	80002d8 <__aeabi_dsub>
 8009ed2:	3630      	adds	r6, #48	; 0x30
 8009ed4:	f805 6b01 	strb.w	r6, [r5], #1
 8009ed8:	ec53 2b19 	vmov	r2, r3, d9
 8009edc:	4680      	mov	r8, r0
 8009ede:	4689      	mov	r9, r1
 8009ee0:	f7f6 fe24 	bl	8000b2c <__aeabi_dcmplt>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d164      	bne.n	8009fb2 <_dtoa_r+0x62a>
 8009ee8:	4642      	mov	r2, r8
 8009eea:	464b      	mov	r3, r9
 8009eec:	4937      	ldr	r1, [pc, #220]	; (8009fcc <_dtoa_r+0x644>)
 8009eee:	2000      	movs	r0, #0
 8009ef0:	f7f6 f9f2 	bl	80002d8 <__aeabi_dsub>
 8009ef4:	ec53 2b19 	vmov	r2, r3, d9
 8009ef8:	f7f6 fe18 	bl	8000b2c <__aeabi_dcmplt>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f040 80b6 	bne.w	800a06e <_dtoa_r+0x6e6>
 8009f02:	9b02      	ldr	r3, [sp, #8]
 8009f04:	429d      	cmp	r5, r3
 8009f06:	f43f af7c 	beq.w	8009e02 <_dtoa_r+0x47a>
 8009f0a:	4b31      	ldr	r3, [pc, #196]	; (8009fd0 <_dtoa_r+0x648>)
 8009f0c:	ec51 0b19 	vmov	r0, r1, d9
 8009f10:	2200      	movs	r2, #0
 8009f12:	f7f6 fb99 	bl	8000648 <__aeabi_dmul>
 8009f16:	4b2e      	ldr	r3, [pc, #184]	; (8009fd0 <_dtoa_r+0x648>)
 8009f18:	ec41 0b19 	vmov	d9, r0, r1
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4640      	mov	r0, r8
 8009f20:	4649      	mov	r1, r9
 8009f22:	f7f6 fb91 	bl	8000648 <__aeabi_dmul>
 8009f26:	4680      	mov	r8, r0
 8009f28:	4689      	mov	r9, r1
 8009f2a:	e7c5      	b.n	8009eb8 <_dtoa_r+0x530>
 8009f2c:	ec51 0b17 	vmov	r0, r1, d7
 8009f30:	f7f6 fb8a 	bl	8000648 <__aeabi_dmul>
 8009f34:	9b02      	ldr	r3, [sp, #8]
 8009f36:	9d00      	ldr	r5, [sp, #0]
 8009f38:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f3a:	ec41 0b19 	vmov	d9, r0, r1
 8009f3e:	4649      	mov	r1, r9
 8009f40:	4640      	mov	r0, r8
 8009f42:	f7f6 fe31 	bl	8000ba8 <__aeabi_d2iz>
 8009f46:	4606      	mov	r6, r0
 8009f48:	f7f6 fb14 	bl	8000574 <__aeabi_i2d>
 8009f4c:	3630      	adds	r6, #48	; 0x30
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4640      	mov	r0, r8
 8009f54:	4649      	mov	r1, r9
 8009f56:	f7f6 f9bf 	bl	80002d8 <__aeabi_dsub>
 8009f5a:	f805 6b01 	strb.w	r6, [r5], #1
 8009f5e:	9b02      	ldr	r3, [sp, #8]
 8009f60:	429d      	cmp	r5, r3
 8009f62:	4680      	mov	r8, r0
 8009f64:	4689      	mov	r9, r1
 8009f66:	f04f 0200 	mov.w	r2, #0
 8009f6a:	d124      	bne.n	8009fb6 <_dtoa_r+0x62e>
 8009f6c:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <_dtoa_r+0x654>)
 8009f6e:	ec51 0b19 	vmov	r0, r1, d9
 8009f72:	f7f6 f9b3 	bl	80002dc <__adddf3>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	f7f6 fdf3 	bl	8000b68 <__aeabi_dcmpgt>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d173      	bne.n	800a06e <_dtoa_r+0x6e6>
 8009f86:	ec53 2b19 	vmov	r2, r3, d9
 8009f8a:	4914      	ldr	r1, [pc, #80]	; (8009fdc <_dtoa_r+0x654>)
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	f7f6 f9a3 	bl	80002d8 <__aeabi_dsub>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4640      	mov	r0, r8
 8009f98:	4649      	mov	r1, r9
 8009f9a:	f7f6 fdc7 	bl	8000b2c <__aeabi_dcmplt>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	f43f af2f 	beq.w	8009e02 <_dtoa_r+0x47a>
 8009fa4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fa6:	1e6b      	subs	r3, r5, #1
 8009fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009faa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fae:	2b30      	cmp	r3, #48	; 0x30
 8009fb0:	d0f8      	beq.n	8009fa4 <_dtoa_r+0x61c>
 8009fb2:	46bb      	mov	fp, r7
 8009fb4:	e04a      	b.n	800a04c <_dtoa_r+0x6c4>
 8009fb6:	4b06      	ldr	r3, [pc, #24]	; (8009fd0 <_dtoa_r+0x648>)
 8009fb8:	f7f6 fb46 	bl	8000648 <__aeabi_dmul>
 8009fbc:	4680      	mov	r8, r0
 8009fbe:	4689      	mov	r9, r1
 8009fc0:	e7bd      	b.n	8009f3e <_dtoa_r+0x5b6>
 8009fc2:	bf00      	nop
 8009fc4:	0800bb90 	.word	0x0800bb90
 8009fc8:	0800bb68 	.word	0x0800bb68
 8009fcc:	3ff00000 	.word	0x3ff00000
 8009fd0:	40240000 	.word	0x40240000
 8009fd4:	401c0000 	.word	0x401c0000
 8009fd8:	40140000 	.word	0x40140000
 8009fdc:	3fe00000 	.word	0x3fe00000
 8009fe0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009fe4:	9d00      	ldr	r5, [sp, #0]
 8009fe6:	4642      	mov	r2, r8
 8009fe8:	464b      	mov	r3, r9
 8009fea:	4630      	mov	r0, r6
 8009fec:	4639      	mov	r1, r7
 8009fee:	f7f6 fc55 	bl	800089c <__aeabi_ddiv>
 8009ff2:	f7f6 fdd9 	bl	8000ba8 <__aeabi_d2iz>
 8009ff6:	9001      	str	r0, [sp, #4]
 8009ff8:	f7f6 fabc 	bl	8000574 <__aeabi_i2d>
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	464b      	mov	r3, r9
 800a000:	f7f6 fb22 	bl	8000648 <__aeabi_dmul>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4630      	mov	r0, r6
 800a00a:	4639      	mov	r1, r7
 800a00c:	f7f6 f964 	bl	80002d8 <__aeabi_dsub>
 800a010:	9e01      	ldr	r6, [sp, #4]
 800a012:	9f04      	ldr	r7, [sp, #16]
 800a014:	3630      	adds	r6, #48	; 0x30
 800a016:	f805 6b01 	strb.w	r6, [r5], #1
 800a01a:	9e00      	ldr	r6, [sp, #0]
 800a01c:	1bae      	subs	r6, r5, r6
 800a01e:	42b7      	cmp	r7, r6
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	d134      	bne.n	800a090 <_dtoa_r+0x708>
 800a026:	f7f6 f959 	bl	80002dc <__adddf3>
 800a02a:	4642      	mov	r2, r8
 800a02c:	464b      	mov	r3, r9
 800a02e:	4606      	mov	r6, r0
 800a030:	460f      	mov	r7, r1
 800a032:	f7f6 fd99 	bl	8000b68 <__aeabi_dcmpgt>
 800a036:	b9c8      	cbnz	r0, 800a06c <_dtoa_r+0x6e4>
 800a038:	4642      	mov	r2, r8
 800a03a:	464b      	mov	r3, r9
 800a03c:	4630      	mov	r0, r6
 800a03e:	4639      	mov	r1, r7
 800a040:	f7f6 fd6a 	bl	8000b18 <__aeabi_dcmpeq>
 800a044:	b110      	cbz	r0, 800a04c <_dtoa_r+0x6c4>
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	07db      	lsls	r3, r3, #31
 800a04a:	d40f      	bmi.n	800a06c <_dtoa_r+0x6e4>
 800a04c:	4651      	mov	r1, sl
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 fbcc 	bl	800a7ec <_Bfree>
 800a054:	2300      	movs	r3, #0
 800a056:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a058:	702b      	strb	r3, [r5, #0]
 800a05a:	f10b 0301 	add.w	r3, fp, #1
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a062:	2b00      	cmp	r3, #0
 800a064:	f43f ace2 	beq.w	8009a2c <_dtoa_r+0xa4>
 800a068:	601d      	str	r5, [r3, #0]
 800a06a:	e4df      	b.n	8009a2c <_dtoa_r+0xa4>
 800a06c:	465f      	mov	r7, fp
 800a06e:	462b      	mov	r3, r5
 800a070:	461d      	mov	r5, r3
 800a072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a076:	2a39      	cmp	r2, #57	; 0x39
 800a078:	d106      	bne.n	800a088 <_dtoa_r+0x700>
 800a07a:	9a00      	ldr	r2, [sp, #0]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d1f7      	bne.n	800a070 <_dtoa_r+0x6e8>
 800a080:	9900      	ldr	r1, [sp, #0]
 800a082:	2230      	movs	r2, #48	; 0x30
 800a084:	3701      	adds	r7, #1
 800a086:	700a      	strb	r2, [r1, #0]
 800a088:	781a      	ldrb	r2, [r3, #0]
 800a08a:	3201      	adds	r2, #1
 800a08c:	701a      	strb	r2, [r3, #0]
 800a08e:	e790      	b.n	8009fb2 <_dtoa_r+0x62a>
 800a090:	4ba3      	ldr	r3, [pc, #652]	; (800a320 <_dtoa_r+0x998>)
 800a092:	2200      	movs	r2, #0
 800a094:	f7f6 fad8 	bl	8000648 <__aeabi_dmul>
 800a098:	2200      	movs	r2, #0
 800a09a:	2300      	movs	r3, #0
 800a09c:	4606      	mov	r6, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	f7f6 fd3a 	bl	8000b18 <__aeabi_dcmpeq>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d09e      	beq.n	8009fe6 <_dtoa_r+0x65e>
 800a0a8:	e7d0      	b.n	800a04c <_dtoa_r+0x6c4>
 800a0aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ac:	2a00      	cmp	r2, #0
 800a0ae:	f000 80ca 	beq.w	800a246 <_dtoa_r+0x8be>
 800a0b2:	9a07      	ldr	r2, [sp, #28]
 800a0b4:	2a01      	cmp	r2, #1
 800a0b6:	f300 80ad 	bgt.w	800a214 <_dtoa_r+0x88c>
 800a0ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0bc:	2a00      	cmp	r2, #0
 800a0be:	f000 80a5 	beq.w	800a20c <_dtoa_r+0x884>
 800a0c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0c6:	9e08      	ldr	r6, [sp, #32]
 800a0c8:	9d05      	ldr	r5, [sp, #20]
 800a0ca:	9a05      	ldr	r2, [sp, #20]
 800a0cc:	441a      	add	r2, r3
 800a0ce:	9205      	str	r2, [sp, #20]
 800a0d0:	9a06      	ldr	r2, [sp, #24]
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	441a      	add	r2, r3
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	9206      	str	r2, [sp, #24]
 800a0da:	f000 fc3d 	bl	800a958 <__i2b>
 800a0de:	4607      	mov	r7, r0
 800a0e0:	b165      	cbz	r5, 800a0fc <_dtoa_r+0x774>
 800a0e2:	9b06      	ldr	r3, [sp, #24]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dd09      	ble.n	800a0fc <_dtoa_r+0x774>
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	9a05      	ldr	r2, [sp, #20]
 800a0ec:	bfa8      	it	ge
 800a0ee:	462b      	movge	r3, r5
 800a0f0:	1ad2      	subs	r2, r2, r3
 800a0f2:	9205      	str	r2, [sp, #20]
 800a0f4:	9a06      	ldr	r2, [sp, #24]
 800a0f6:	1aed      	subs	r5, r5, r3
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	9306      	str	r3, [sp, #24]
 800a0fc:	9b08      	ldr	r3, [sp, #32]
 800a0fe:	b1f3      	cbz	r3, 800a13e <_dtoa_r+0x7b6>
 800a100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 80a3 	beq.w	800a24e <_dtoa_r+0x8c6>
 800a108:	2e00      	cmp	r6, #0
 800a10a:	dd10      	ble.n	800a12e <_dtoa_r+0x7a6>
 800a10c:	4639      	mov	r1, r7
 800a10e:	4632      	mov	r2, r6
 800a110:	4620      	mov	r0, r4
 800a112:	f000 fce1 	bl	800aad8 <__pow5mult>
 800a116:	4652      	mov	r2, sl
 800a118:	4601      	mov	r1, r0
 800a11a:	4607      	mov	r7, r0
 800a11c:	4620      	mov	r0, r4
 800a11e:	f000 fc31 	bl	800a984 <__multiply>
 800a122:	4651      	mov	r1, sl
 800a124:	4680      	mov	r8, r0
 800a126:	4620      	mov	r0, r4
 800a128:	f000 fb60 	bl	800a7ec <_Bfree>
 800a12c:	46c2      	mov	sl, r8
 800a12e:	9b08      	ldr	r3, [sp, #32]
 800a130:	1b9a      	subs	r2, r3, r6
 800a132:	d004      	beq.n	800a13e <_dtoa_r+0x7b6>
 800a134:	4651      	mov	r1, sl
 800a136:	4620      	mov	r0, r4
 800a138:	f000 fcce 	bl	800aad8 <__pow5mult>
 800a13c:	4682      	mov	sl, r0
 800a13e:	2101      	movs	r1, #1
 800a140:	4620      	mov	r0, r4
 800a142:	f000 fc09 	bl	800a958 <__i2b>
 800a146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	4606      	mov	r6, r0
 800a14c:	f340 8081 	ble.w	800a252 <_dtoa_r+0x8ca>
 800a150:	461a      	mov	r2, r3
 800a152:	4601      	mov	r1, r0
 800a154:	4620      	mov	r0, r4
 800a156:	f000 fcbf 	bl	800aad8 <__pow5mult>
 800a15a:	9b07      	ldr	r3, [sp, #28]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	4606      	mov	r6, r0
 800a160:	dd7a      	ble.n	800a258 <_dtoa_r+0x8d0>
 800a162:	f04f 0800 	mov.w	r8, #0
 800a166:	6933      	ldr	r3, [r6, #16]
 800a168:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a16c:	6918      	ldr	r0, [r3, #16]
 800a16e:	f000 fba5 	bl	800a8bc <__hi0bits>
 800a172:	f1c0 0020 	rsb	r0, r0, #32
 800a176:	9b06      	ldr	r3, [sp, #24]
 800a178:	4418      	add	r0, r3
 800a17a:	f010 001f 	ands.w	r0, r0, #31
 800a17e:	f000 8094 	beq.w	800a2aa <_dtoa_r+0x922>
 800a182:	f1c0 0320 	rsb	r3, r0, #32
 800a186:	2b04      	cmp	r3, #4
 800a188:	f340 8085 	ble.w	800a296 <_dtoa_r+0x90e>
 800a18c:	9b05      	ldr	r3, [sp, #20]
 800a18e:	f1c0 001c 	rsb	r0, r0, #28
 800a192:	4403      	add	r3, r0
 800a194:	9305      	str	r3, [sp, #20]
 800a196:	9b06      	ldr	r3, [sp, #24]
 800a198:	4403      	add	r3, r0
 800a19a:	4405      	add	r5, r0
 800a19c:	9306      	str	r3, [sp, #24]
 800a19e:	9b05      	ldr	r3, [sp, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	dd05      	ble.n	800a1b0 <_dtoa_r+0x828>
 800a1a4:	4651      	mov	r1, sl
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f000 fcef 	bl	800ab8c <__lshift>
 800a1ae:	4682      	mov	sl, r0
 800a1b0:	9b06      	ldr	r3, [sp, #24]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	dd05      	ble.n	800a1c2 <_dtoa_r+0x83a>
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fce6 	bl	800ab8c <__lshift>
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d072      	beq.n	800a2ae <_dtoa_r+0x926>
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4650      	mov	r0, sl
 800a1cc:	f000 fd4a 	bl	800ac64 <__mcmp>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	da6c      	bge.n	800a2ae <_dtoa_r+0x926>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4651      	mov	r1, sl
 800a1d8:	220a      	movs	r2, #10
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 fb28 	bl	800a830 <__multadd>
 800a1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1e6:	4682      	mov	sl, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 81b0 	beq.w	800a54e <_dtoa_r+0xbc6>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	220a      	movs	r2, #10
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f000 fb1b 	bl	800a830 <__multadd>
 800a1fa:	9b01      	ldr	r3, [sp, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	4607      	mov	r7, r0
 800a200:	f300 8096 	bgt.w	800a330 <_dtoa_r+0x9a8>
 800a204:	9b07      	ldr	r3, [sp, #28]
 800a206:	2b02      	cmp	r3, #2
 800a208:	dc59      	bgt.n	800a2be <_dtoa_r+0x936>
 800a20a:	e091      	b.n	800a330 <_dtoa_r+0x9a8>
 800a20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a20e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a212:	e758      	b.n	800a0c6 <_dtoa_r+0x73e>
 800a214:	9b04      	ldr	r3, [sp, #16]
 800a216:	1e5e      	subs	r6, r3, #1
 800a218:	9b08      	ldr	r3, [sp, #32]
 800a21a:	42b3      	cmp	r3, r6
 800a21c:	bfbf      	itttt	lt
 800a21e:	9b08      	ldrlt	r3, [sp, #32]
 800a220:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a222:	9608      	strlt	r6, [sp, #32]
 800a224:	1af3      	sublt	r3, r6, r3
 800a226:	bfb4      	ite	lt
 800a228:	18d2      	addlt	r2, r2, r3
 800a22a:	1b9e      	subge	r6, r3, r6
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	bfbc      	itt	lt
 800a230:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a232:	2600      	movlt	r6, #0
 800a234:	2b00      	cmp	r3, #0
 800a236:	bfb7      	itett	lt
 800a238:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a23c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a240:	1a9d      	sublt	r5, r3, r2
 800a242:	2300      	movlt	r3, #0
 800a244:	e741      	b.n	800a0ca <_dtoa_r+0x742>
 800a246:	9e08      	ldr	r6, [sp, #32]
 800a248:	9d05      	ldr	r5, [sp, #20]
 800a24a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a24c:	e748      	b.n	800a0e0 <_dtoa_r+0x758>
 800a24e:	9a08      	ldr	r2, [sp, #32]
 800a250:	e770      	b.n	800a134 <_dtoa_r+0x7ac>
 800a252:	9b07      	ldr	r3, [sp, #28]
 800a254:	2b01      	cmp	r3, #1
 800a256:	dc19      	bgt.n	800a28c <_dtoa_r+0x904>
 800a258:	9b02      	ldr	r3, [sp, #8]
 800a25a:	b9bb      	cbnz	r3, 800a28c <_dtoa_r+0x904>
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a262:	b99b      	cbnz	r3, 800a28c <_dtoa_r+0x904>
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a26a:	0d1b      	lsrs	r3, r3, #20
 800a26c:	051b      	lsls	r3, r3, #20
 800a26e:	b183      	cbz	r3, 800a292 <_dtoa_r+0x90a>
 800a270:	9b05      	ldr	r3, [sp, #20]
 800a272:	3301      	adds	r3, #1
 800a274:	9305      	str	r3, [sp, #20]
 800a276:	9b06      	ldr	r3, [sp, #24]
 800a278:	3301      	adds	r3, #1
 800a27a:	9306      	str	r3, [sp, #24]
 800a27c:	f04f 0801 	mov.w	r8, #1
 800a280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a282:	2b00      	cmp	r3, #0
 800a284:	f47f af6f 	bne.w	800a166 <_dtoa_r+0x7de>
 800a288:	2001      	movs	r0, #1
 800a28a:	e774      	b.n	800a176 <_dtoa_r+0x7ee>
 800a28c:	f04f 0800 	mov.w	r8, #0
 800a290:	e7f6      	b.n	800a280 <_dtoa_r+0x8f8>
 800a292:	4698      	mov	r8, r3
 800a294:	e7f4      	b.n	800a280 <_dtoa_r+0x8f8>
 800a296:	d082      	beq.n	800a19e <_dtoa_r+0x816>
 800a298:	9a05      	ldr	r2, [sp, #20]
 800a29a:	331c      	adds	r3, #28
 800a29c:	441a      	add	r2, r3
 800a29e:	9205      	str	r2, [sp, #20]
 800a2a0:	9a06      	ldr	r2, [sp, #24]
 800a2a2:	441a      	add	r2, r3
 800a2a4:	441d      	add	r5, r3
 800a2a6:	9206      	str	r2, [sp, #24]
 800a2a8:	e779      	b.n	800a19e <_dtoa_r+0x816>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	e7f4      	b.n	800a298 <_dtoa_r+0x910>
 800a2ae:	9b04      	ldr	r3, [sp, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	dc37      	bgt.n	800a324 <_dtoa_r+0x99c>
 800a2b4:	9b07      	ldr	r3, [sp, #28]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	dd34      	ble.n	800a324 <_dtoa_r+0x99c>
 800a2ba:	9b04      	ldr	r3, [sp, #16]
 800a2bc:	9301      	str	r3, [sp, #4]
 800a2be:	9b01      	ldr	r3, [sp, #4]
 800a2c0:	b963      	cbnz	r3, 800a2dc <_dtoa_r+0x954>
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	2205      	movs	r2, #5
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 fab2 	bl	800a830 <__multadd>
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	4650      	mov	r0, sl
 800a2d2:	f000 fcc7 	bl	800ac64 <__mcmp>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f73f adbb 	bgt.w	8009e52 <_dtoa_r+0x4ca>
 800a2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2de:	9d00      	ldr	r5, [sp, #0]
 800a2e0:	ea6f 0b03 	mvn.w	fp, r3
 800a2e4:	f04f 0800 	mov.w	r8, #0
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f000 fa7e 	bl	800a7ec <_Bfree>
 800a2f0:	2f00      	cmp	r7, #0
 800a2f2:	f43f aeab 	beq.w	800a04c <_dtoa_r+0x6c4>
 800a2f6:	f1b8 0f00 	cmp.w	r8, #0
 800a2fa:	d005      	beq.n	800a308 <_dtoa_r+0x980>
 800a2fc:	45b8      	cmp	r8, r7
 800a2fe:	d003      	beq.n	800a308 <_dtoa_r+0x980>
 800a300:	4641      	mov	r1, r8
 800a302:	4620      	mov	r0, r4
 800a304:	f000 fa72 	bl	800a7ec <_Bfree>
 800a308:	4639      	mov	r1, r7
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 fa6e 	bl	800a7ec <_Bfree>
 800a310:	e69c      	b.n	800a04c <_dtoa_r+0x6c4>
 800a312:	2600      	movs	r6, #0
 800a314:	4637      	mov	r7, r6
 800a316:	e7e1      	b.n	800a2dc <_dtoa_r+0x954>
 800a318:	46bb      	mov	fp, r7
 800a31a:	4637      	mov	r7, r6
 800a31c:	e599      	b.n	8009e52 <_dtoa_r+0x4ca>
 800a31e:	bf00      	nop
 800a320:	40240000 	.word	0x40240000
 800a324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 80c8 	beq.w	800a4bc <_dtoa_r+0xb34>
 800a32c:	9b04      	ldr	r3, [sp, #16]
 800a32e:	9301      	str	r3, [sp, #4]
 800a330:	2d00      	cmp	r5, #0
 800a332:	dd05      	ble.n	800a340 <_dtoa_r+0x9b8>
 800a334:	4639      	mov	r1, r7
 800a336:	462a      	mov	r2, r5
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fc27 	bl	800ab8c <__lshift>
 800a33e:	4607      	mov	r7, r0
 800a340:	f1b8 0f00 	cmp.w	r8, #0
 800a344:	d05b      	beq.n	800a3fe <_dtoa_r+0xa76>
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 fa0f 	bl	800a76c <_Balloc>
 800a34e:	4605      	mov	r5, r0
 800a350:	b928      	cbnz	r0, 800a35e <_dtoa_r+0x9d6>
 800a352:	4b83      	ldr	r3, [pc, #524]	; (800a560 <_dtoa_r+0xbd8>)
 800a354:	4602      	mov	r2, r0
 800a356:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a35a:	f7ff bb2e 	b.w	80099ba <_dtoa_r+0x32>
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	3202      	adds	r2, #2
 800a362:	0092      	lsls	r2, r2, #2
 800a364:	f107 010c 	add.w	r1, r7, #12
 800a368:	300c      	adds	r0, #12
 800a36a:	f7ff fa76 	bl	800985a <memcpy>
 800a36e:	2201      	movs	r2, #1
 800a370:	4629      	mov	r1, r5
 800a372:	4620      	mov	r0, r4
 800a374:	f000 fc0a 	bl	800ab8c <__lshift>
 800a378:	9b00      	ldr	r3, [sp, #0]
 800a37a:	3301      	adds	r3, #1
 800a37c:	9304      	str	r3, [sp, #16]
 800a37e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a382:	4413      	add	r3, r2
 800a384:	9308      	str	r3, [sp, #32]
 800a386:	9b02      	ldr	r3, [sp, #8]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	46b8      	mov	r8, r7
 800a38e:	9306      	str	r3, [sp, #24]
 800a390:	4607      	mov	r7, r0
 800a392:	9b04      	ldr	r3, [sp, #16]
 800a394:	4631      	mov	r1, r6
 800a396:	3b01      	subs	r3, #1
 800a398:	4650      	mov	r0, sl
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	f7ff fa6b 	bl	8009876 <quorem>
 800a3a0:	4641      	mov	r1, r8
 800a3a2:	9002      	str	r0, [sp, #8]
 800a3a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a3a8:	4650      	mov	r0, sl
 800a3aa:	f000 fc5b 	bl	800ac64 <__mcmp>
 800a3ae:	463a      	mov	r2, r7
 800a3b0:	9005      	str	r0, [sp, #20]
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f000 fc71 	bl	800ac9c <__mdiff>
 800a3ba:	68c2      	ldr	r2, [r0, #12]
 800a3bc:	4605      	mov	r5, r0
 800a3be:	bb02      	cbnz	r2, 800a402 <_dtoa_r+0xa7a>
 800a3c0:	4601      	mov	r1, r0
 800a3c2:	4650      	mov	r0, sl
 800a3c4:	f000 fc4e 	bl	800ac64 <__mcmp>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d0:	f000 fa0c 	bl	800a7ec <_Bfree>
 800a3d4:	9b07      	ldr	r3, [sp, #28]
 800a3d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d8:	9d04      	ldr	r5, [sp, #16]
 800a3da:	ea43 0102 	orr.w	r1, r3, r2
 800a3de:	9b06      	ldr	r3, [sp, #24]
 800a3e0:	4319      	orrs	r1, r3
 800a3e2:	d110      	bne.n	800a406 <_dtoa_r+0xa7e>
 800a3e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a3e8:	d029      	beq.n	800a43e <_dtoa_r+0xab6>
 800a3ea:	9b05      	ldr	r3, [sp, #20]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	dd02      	ble.n	800a3f6 <_dtoa_r+0xa6e>
 800a3f0:	9b02      	ldr	r3, [sp, #8]
 800a3f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	f883 9000 	strb.w	r9, [r3]
 800a3fc:	e774      	b.n	800a2e8 <_dtoa_r+0x960>
 800a3fe:	4638      	mov	r0, r7
 800a400:	e7ba      	b.n	800a378 <_dtoa_r+0x9f0>
 800a402:	2201      	movs	r2, #1
 800a404:	e7e1      	b.n	800a3ca <_dtoa_r+0xa42>
 800a406:	9b05      	ldr	r3, [sp, #20]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	db04      	blt.n	800a416 <_dtoa_r+0xa8e>
 800a40c:	9907      	ldr	r1, [sp, #28]
 800a40e:	430b      	orrs	r3, r1
 800a410:	9906      	ldr	r1, [sp, #24]
 800a412:	430b      	orrs	r3, r1
 800a414:	d120      	bne.n	800a458 <_dtoa_r+0xad0>
 800a416:	2a00      	cmp	r2, #0
 800a418:	dded      	ble.n	800a3f6 <_dtoa_r+0xa6e>
 800a41a:	4651      	mov	r1, sl
 800a41c:	2201      	movs	r2, #1
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 fbb4 	bl	800ab8c <__lshift>
 800a424:	4631      	mov	r1, r6
 800a426:	4682      	mov	sl, r0
 800a428:	f000 fc1c 	bl	800ac64 <__mcmp>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	dc03      	bgt.n	800a438 <_dtoa_r+0xab0>
 800a430:	d1e1      	bne.n	800a3f6 <_dtoa_r+0xa6e>
 800a432:	f019 0f01 	tst.w	r9, #1
 800a436:	d0de      	beq.n	800a3f6 <_dtoa_r+0xa6e>
 800a438:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a43c:	d1d8      	bne.n	800a3f0 <_dtoa_r+0xa68>
 800a43e:	9a01      	ldr	r2, [sp, #4]
 800a440:	2339      	movs	r3, #57	; 0x39
 800a442:	7013      	strb	r3, [r2, #0]
 800a444:	462b      	mov	r3, r5
 800a446:	461d      	mov	r5, r3
 800a448:	3b01      	subs	r3, #1
 800a44a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a44e:	2a39      	cmp	r2, #57	; 0x39
 800a450:	d06c      	beq.n	800a52c <_dtoa_r+0xba4>
 800a452:	3201      	adds	r2, #1
 800a454:	701a      	strb	r2, [r3, #0]
 800a456:	e747      	b.n	800a2e8 <_dtoa_r+0x960>
 800a458:	2a00      	cmp	r2, #0
 800a45a:	dd07      	ble.n	800a46c <_dtoa_r+0xae4>
 800a45c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a460:	d0ed      	beq.n	800a43e <_dtoa_r+0xab6>
 800a462:	9a01      	ldr	r2, [sp, #4]
 800a464:	f109 0301 	add.w	r3, r9, #1
 800a468:	7013      	strb	r3, [r2, #0]
 800a46a:	e73d      	b.n	800a2e8 <_dtoa_r+0x960>
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	9a08      	ldr	r2, [sp, #32]
 800a470:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a474:	4293      	cmp	r3, r2
 800a476:	d043      	beq.n	800a500 <_dtoa_r+0xb78>
 800a478:	4651      	mov	r1, sl
 800a47a:	2300      	movs	r3, #0
 800a47c:	220a      	movs	r2, #10
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 f9d6 	bl	800a830 <__multadd>
 800a484:	45b8      	cmp	r8, r7
 800a486:	4682      	mov	sl, r0
 800a488:	f04f 0300 	mov.w	r3, #0
 800a48c:	f04f 020a 	mov.w	r2, #10
 800a490:	4641      	mov	r1, r8
 800a492:	4620      	mov	r0, r4
 800a494:	d107      	bne.n	800a4a6 <_dtoa_r+0xb1e>
 800a496:	f000 f9cb 	bl	800a830 <__multadd>
 800a49a:	4680      	mov	r8, r0
 800a49c:	4607      	mov	r7, r0
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	e775      	b.n	800a392 <_dtoa_r+0xa0a>
 800a4a6:	f000 f9c3 	bl	800a830 <__multadd>
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	4680      	mov	r8, r0
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f000 f9bc 	bl	800a830 <__multadd>
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	e7f0      	b.n	800a49e <_dtoa_r+0xb16>
 800a4bc:	9b04      	ldr	r3, [sp, #16]
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	9d00      	ldr	r5, [sp, #0]
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	4650      	mov	r0, sl
 800a4c6:	f7ff f9d6 	bl	8009876 <quorem>
 800a4ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a4ce:	9b00      	ldr	r3, [sp, #0]
 800a4d0:	f805 9b01 	strb.w	r9, [r5], #1
 800a4d4:	1aea      	subs	r2, r5, r3
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	dd07      	ble.n	800a4ec <_dtoa_r+0xb64>
 800a4dc:	4651      	mov	r1, sl
 800a4de:	2300      	movs	r3, #0
 800a4e0:	220a      	movs	r2, #10
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 f9a4 	bl	800a830 <__multadd>
 800a4e8:	4682      	mov	sl, r0
 800a4ea:	e7ea      	b.n	800a4c2 <_dtoa_r+0xb3a>
 800a4ec:	9b01      	ldr	r3, [sp, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	bfc8      	it	gt
 800a4f2:	461d      	movgt	r5, r3
 800a4f4:	9b00      	ldr	r3, [sp, #0]
 800a4f6:	bfd8      	it	le
 800a4f8:	2501      	movle	r5, #1
 800a4fa:	441d      	add	r5, r3
 800a4fc:	f04f 0800 	mov.w	r8, #0
 800a500:	4651      	mov	r1, sl
 800a502:	2201      	movs	r2, #1
 800a504:	4620      	mov	r0, r4
 800a506:	f000 fb41 	bl	800ab8c <__lshift>
 800a50a:	4631      	mov	r1, r6
 800a50c:	4682      	mov	sl, r0
 800a50e:	f000 fba9 	bl	800ac64 <__mcmp>
 800a512:	2800      	cmp	r0, #0
 800a514:	dc96      	bgt.n	800a444 <_dtoa_r+0xabc>
 800a516:	d102      	bne.n	800a51e <_dtoa_r+0xb96>
 800a518:	f019 0f01 	tst.w	r9, #1
 800a51c:	d192      	bne.n	800a444 <_dtoa_r+0xabc>
 800a51e:	462b      	mov	r3, r5
 800a520:	461d      	mov	r5, r3
 800a522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a526:	2a30      	cmp	r2, #48	; 0x30
 800a528:	d0fa      	beq.n	800a520 <_dtoa_r+0xb98>
 800a52a:	e6dd      	b.n	800a2e8 <_dtoa_r+0x960>
 800a52c:	9a00      	ldr	r2, [sp, #0]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d189      	bne.n	800a446 <_dtoa_r+0xabe>
 800a532:	f10b 0b01 	add.w	fp, fp, #1
 800a536:	2331      	movs	r3, #49	; 0x31
 800a538:	e796      	b.n	800a468 <_dtoa_r+0xae0>
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <_dtoa_r+0xbdc>)
 800a53c:	f7ff ba99 	b.w	8009a72 <_dtoa_r+0xea>
 800a540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a542:	2b00      	cmp	r3, #0
 800a544:	f47f aa6d 	bne.w	8009a22 <_dtoa_r+0x9a>
 800a548:	4b07      	ldr	r3, [pc, #28]	; (800a568 <_dtoa_r+0xbe0>)
 800a54a:	f7ff ba92 	b.w	8009a72 <_dtoa_r+0xea>
 800a54e:	9b01      	ldr	r3, [sp, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	dcb5      	bgt.n	800a4c0 <_dtoa_r+0xb38>
 800a554:	9b07      	ldr	r3, [sp, #28]
 800a556:	2b02      	cmp	r3, #2
 800a558:	f73f aeb1 	bgt.w	800a2be <_dtoa_r+0x936>
 800a55c:	e7b0      	b.n	800a4c0 <_dtoa_r+0xb38>
 800a55e:	bf00      	nop
 800a560:	0800bafc 	.word	0x0800bafc
 800a564:	0800ba5c 	.word	0x0800ba5c
 800a568:	0800ba80 	.word	0x0800ba80

0800a56c <_free_r>:
 800a56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a56e:	2900      	cmp	r1, #0
 800a570:	d044      	beq.n	800a5fc <_free_r+0x90>
 800a572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a576:	9001      	str	r0, [sp, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f1a1 0404 	sub.w	r4, r1, #4
 800a57e:	bfb8      	it	lt
 800a580:	18e4      	addlt	r4, r4, r3
 800a582:	f000 f8e7 	bl	800a754 <__malloc_lock>
 800a586:	4a1e      	ldr	r2, [pc, #120]	; (800a600 <_free_r+0x94>)
 800a588:	9801      	ldr	r0, [sp, #4]
 800a58a:	6813      	ldr	r3, [r2, #0]
 800a58c:	b933      	cbnz	r3, 800a59c <_free_r+0x30>
 800a58e:	6063      	str	r3, [r4, #4]
 800a590:	6014      	str	r4, [r2, #0]
 800a592:	b003      	add	sp, #12
 800a594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a598:	f000 b8e2 	b.w	800a760 <__malloc_unlock>
 800a59c:	42a3      	cmp	r3, r4
 800a59e:	d908      	bls.n	800a5b2 <_free_r+0x46>
 800a5a0:	6825      	ldr	r5, [r4, #0]
 800a5a2:	1961      	adds	r1, r4, r5
 800a5a4:	428b      	cmp	r3, r1
 800a5a6:	bf01      	itttt	eq
 800a5a8:	6819      	ldreq	r1, [r3, #0]
 800a5aa:	685b      	ldreq	r3, [r3, #4]
 800a5ac:	1949      	addeq	r1, r1, r5
 800a5ae:	6021      	streq	r1, [r4, #0]
 800a5b0:	e7ed      	b.n	800a58e <_free_r+0x22>
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	b10b      	cbz	r3, 800a5bc <_free_r+0x50>
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	d9fa      	bls.n	800a5b2 <_free_r+0x46>
 800a5bc:	6811      	ldr	r1, [r2, #0]
 800a5be:	1855      	adds	r5, r2, r1
 800a5c0:	42a5      	cmp	r5, r4
 800a5c2:	d10b      	bne.n	800a5dc <_free_r+0x70>
 800a5c4:	6824      	ldr	r4, [r4, #0]
 800a5c6:	4421      	add	r1, r4
 800a5c8:	1854      	adds	r4, r2, r1
 800a5ca:	42a3      	cmp	r3, r4
 800a5cc:	6011      	str	r1, [r2, #0]
 800a5ce:	d1e0      	bne.n	800a592 <_free_r+0x26>
 800a5d0:	681c      	ldr	r4, [r3, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	6053      	str	r3, [r2, #4]
 800a5d6:	440c      	add	r4, r1
 800a5d8:	6014      	str	r4, [r2, #0]
 800a5da:	e7da      	b.n	800a592 <_free_r+0x26>
 800a5dc:	d902      	bls.n	800a5e4 <_free_r+0x78>
 800a5de:	230c      	movs	r3, #12
 800a5e0:	6003      	str	r3, [r0, #0]
 800a5e2:	e7d6      	b.n	800a592 <_free_r+0x26>
 800a5e4:	6825      	ldr	r5, [r4, #0]
 800a5e6:	1961      	adds	r1, r4, r5
 800a5e8:	428b      	cmp	r3, r1
 800a5ea:	bf04      	itt	eq
 800a5ec:	6819      	ldreq	r1, [r3, #0]
 800a5ee:	685b      	ldreq	r3, [r3, #4]
 800a5f0:	6063      	str	r3, [r4, #4]
 800a5f2:	bf04      	itt	eq
 800a5f4:	1949      	addeq	r1, r1, r5
 800a5f6:	6021      	streq	r1, [r4, #0]
 800a5f8:	6054      	str	r4, [r2, #4]
 800a5fa:	e7ca      	b.n	800a592 <_free_r+0x26>
 800a5fc:	b003      	add	sp, #12
 800a5fe:	bd30      	pop	{r4, r5, pc}
 800a600:	200005ec 	.word	0x200005ec

0800a604 <malloc>:
 800a604:	4b02      	ldr	r3, [pc, #8]	; (800a610 <malloc+0xc>)
 800a606:	4601      	mov	r1, r0
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f000 b823 	b.w	800a654 <_malloc_r>
 800a60e:	bf00      	nop
 800a610:	2000006c 	.word	0x2000006c

0800a614 <sbrk_aligned>:
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	4e0e      	ldr	r6, [pc, #56]	; (800a650 <sbrk_aligned+0x3c>)
 800a618:	460c      	mov	r4, r1
 800a61a:	6831      	ldr	r1, [r6, #0]
 800a61c:	4605      	mov	r5, r0
 800a61e:	b911      	cbnz	r1, 800a626 <sbrk_aligned+0x12>
 800a620:	f001 f81a 	bl	800b658 <_sbrk_r>
 800a624:	6030      	str	r0, [r6, #0]
 800a626:	4621      	mov	r1, r4
 800a628:	4628      	mov	r0, r5
 800a62a:	f001 f815 	bl	800b658 <_sbrk_r>
 800a62e:	1c43      	adds	r3, r0, #1
 800a630:	d00a      	beq.n	800a648 <sbrk_aligned+0x34>
 800a632:	1cc4      	adds	r4, r0, #3
 800a634:	f024 0403 	bic.w	r4, r4, #3
 800a638:	42a0      	cmp	r0, r4
 800a63a:	d007      	beq.n	800a64c <sbrk_aligned+0x38>
 800a63c:	1a21      	subs	r1, r4, r0
 800a63e:	4628      	mov	r0, r5
 800a640:	f001 f80a 	bl	800b658 <_sbrk_r>
 800a644:	3001      	adds	r0, #1
 800a646:	d101      	bne.n	800a64c <sbrk_aligned+0x38>
 800a648:	f04f 34ff 	mov.w	r4, #4294967295
 800a64c:	4620      	mov	r0, r4
 800a64e:	bd70      	pop	{r4, r5, r6, pc}
 800a650:	200005f0 	.word	0x200005f0

0800a654 <_malloc_r>:
 800a654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a658:	1ccd      	adds	r5, r1, #3
 800a65a:	f025 0503 	bic.w	r5, r5, #3
 800a65e:	3508      	adds	r5, #8
 800a660:	2d0c      	cmp	r5, #12
 800a662:	bf38      	it	cc
 800a664:	250c      	movcc	r5, #12
 800a666:	2d00      	cmp	r5, #0
 800a668:	4607      	mov	r7, r0
 800a66a:	db01      	blt.n	800a670 <_malloc_r+0x1c>
 800a66c:	42a9      	cmp	r1, r5
 800a66e:	d905      	bls.n	800a67c <_malloc_r+0x28>
 800a670:	230c      	movs	r3, #12
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	2600      	movs	r6, #0
 800a676:	4630      	mov	r0, r6
 800a678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a67c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a750 <_malloc_r+0xfc>
 800a680:	f000 f868 	bl	800a754 <__malloc_lock>
 800a684:	f8d8 3000 	ldr.w	r3, [r8]
 800a688:	461c      	mov	r4, r3
 800a68a:	bb5c      	cbnz	r4, 800a6e4 <_malloc_r+0x90>
 800a68c:	4629      	mov	r1, r5
 800a68e:	4638      	mov	r0, r7
 800a690:	f7ff ffc0 	bl	800a614 <sbrk_aligned>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	4604      	mov	r4, r0
 800a698:	d155      	bne.n	800a746 <_malloc_r+0xf2>
 800a69a:	f8d8 4000 	ldr.w	r4, [r8]
 800a69e:	4626      	mov	r6, r4
 800a6a0:	2e00      	cmp	r6, #0
 800a6a2:	d145      	bne.n	800a730 <_malloc_r+0xdc>
 800a6a4:	2c00      	cmp	r4, #0
 800a6a6:	d048      	beq.n	800a73a <_malloc_r+0xe6>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	eb04 0903 	add.w	r9, r4, r3
 800a6b2:	f000 ffd1 	bl	800b658 <_sbrk_r>
 800a6b6:	4581      	cmp	r9, r0
 800a6b8:	d13f      	bne.n	800a73a <_malloc_r+0xe6>
 800a6ba:	6821      	ldr	r1, [r4, #0]
 800a6bc:	1a6d      	subs	r5, r5, r1
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7ff ffa7 	bl	800a614 <sbrk_aligned>
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d037      	beq.n	800a73a <_malloc_r+0xe6>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	442b      	add	r3, r5
 800a6ce:	6023      	str	r3, [r4, #0]
 800a6d0:	f8d8 3000 	ldr.w	r3, [r8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d038      	beq.n	800a74a <_malloc_r+0xf6>
 800a6d8:	685a      	ldr	r2, [r3, #4]
 800a6da:	42a2      	cmp	r2, r4
 800a6dc:	d12b      	bne.n	800a736 <_malloc_r+0xe2>
 800a6de:	2200      	movs	r2, #0
 800a6e0:	605a      	str	r2, [r3, #4]
 800a6e2:	e00f      	b.n	800a704 <_malloc_r+0xb0>
 800a6e4:	6822      	ldr	r2, [r4, #0]
 800a6e6:	1b52      	subs	r2, r2, r5
 800a6e8:	d41f      	bmi.n	800a72a <_malloc_r+0xd6>
 800a6ea:	2a0b      	cmp	r2, #11
 800a6ec:	d917      	bls.n	800a71e <_malloc_r+0xca>
 800a6ee:	1961      	adds	r1, r4, r5
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	6025      	str	r5, [r4, #0]
 800a6f4:	bf18      	it	ne
 800a6f6:	6059      	strne	r1, [r3, #4]
 800a6f8:	6863      	ldr	r3, [r4, #4]
 800a6fa:	bf08      	it	eq
 800a6fc:	f8c8 1000 	streq.w	r1, [r8]
 800a700:	5162      	str	r2, [r4, r5]
 800a702:	604b      	str	r3, [r1, #4]
 800a704:	4638      	mov	r0, r7
 800a706:	f104 060b 	add.w	r6, r4, #11
 800a70a:	f000 f829 	bl	800a760 <__malloc_unlock>
 800a70e:	f026 0607 	bic.w	r6, r6, #7
 800a712:	1d23      	adds	r3, r4, #4
 800a714:	1af2      	subs	r2, r6, r3
 800a716:	d0ae      	beq.n	800a676 <_malloc_r+0x22>
 800a718:	1b9b      	subs	r3, r3, r6
 800a71a:	50a3      	str	r3, [r4, r2]
 800a71c:	e7ab      	b.n	800a676 <_malloc_r+0x22>
 800a71e:	42a3      	cmp	r3, r4
 800a720:	6862      	ldr	r2, [r4, #4]
 800a722:	d1dd      	bne.n	800a6e0 <_malloc_r+0x8c>
 800a724:	f8c8 2000 	str.w	r2, [r8]
 800a728:	e7ec      	b.n	800a704 <_malloc_r+0xb0>
 800a72a:	4623      	mov	r3, r4
 800a72c:	6864      	ldr	r4, [r4, #4]
 800a72e:	e7ac      	b.n	800a68a <_malloc_r+0x36>
 800a730:	4634      	mov	r4, r6
 800a732:	6876      	ldr	r6, [r6, #4]
 800a734:	e7b4      	b.n	800a6a0 <_malloc_r+0x4c>
 800a736:	4613      	mov	r3, r2
 800a738:	e7cc      	b.n	800a6d4 <_malloc_r+0x80>
 800a73a:	230c      	movs	r3, #12
 800a73c:	603b      	str	r3, [r7, #0]
 800a73e:	4638      	mov	r0, r7
 800a740:	f000 f80e 	bl	800a760 <__malloc_unlock>
 800a744:	e797      	b.n	800a676 <_malloc_r+0x22>
 800a746:	6025      	str	r5, [r4, #0]
 800a748:	e7dc      	b.n	800a704 <_malloc_r+0xb0>
 800a74a:	605b      	str	r3, [r3, #4]
 800a74c:	deff      	udf	#255	; 0xff
 800a74e:	bf00      	nop
 800a750:	200005ec 	.word	0x200005ec

0800a754 <__malloc_lock>:
 800a754:	4801      	ldr	r0, [pc, #4]	; (800a75c <__malloc_lock+0x8>)
 800a756:	f7ff b87e 	b.w	8009856 <__retarget_lock_acquire_recursive>
 800a75a:	bf00      	nop
 800a75c:	200005e8 	.word	0x200005e8

0800a760 <__malloc_unlock>:
 800a760:	4801      	ldr	r0, [pc, #4]	; (800a768 <__malloc_unlock+0x8>)
 800a762:	f7ff b879 	b.w	8009858 <__retarget_lock_release_recursive>
 800a766:	bf00      	nop
 800a768:	200005e8 	.word	0x200005e8

0800a76c <_Balloc>:
 800a76c:	b570      	push	{r4, r5, r6, lr}
 800a76e:	69c6      	ldr	r6, [r0, #28]
 800a770:	4604      	mov	r4, r0
 800a772:	460d      	mov	r5, r1
 800a774:	b976      	cbnz	r6, 800a794 <_Balloc+0x28>
 800a776:	2010      	movs	r0, #16
 800a778:	f7ff ff44 	bl	800a604 <malloc>
 800a77c:	4602      	mov	r2, r0
 800a77e:	61e0      	str	r0, [r4, #28]
 800a780:	b920      	cbnz	r0, 800a78c <_Balloc+0x20>
 800a782:	4b18      	ldr	r3, [pc, #96]	; (800a7e4 <_Balloc+0x78>)
 800a784:	4818      	ldr	r0, [pc, #96]	; (800a7e8 <_Balloc+0x7c>)
 800a786:	216b      	movs	r1, #107	; 0x6b
 800a788:	f000 ff76 	bl	800b678 <__assert_func>
 800a78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a790:	6006      	str	r6, [r0, #0]
 800a792:	60c6      	str	r6, [r0, #12]
 800a794:	69e6      	ldr	r6, [r4, #28]
 800a796:	68f3      	ldr	r3, [r6, #12]
 800a798:	b183      	cbz	r3, 800a7bc <_Balloc+0x50>
 800a79a:	69e3      	ldr	r3, [r4, #28]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7a2:	b9b8      	cbnz	r0, 800a7d4 <_Balloc+0x68>
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	fa01 f605 	lsl.w	r6, r1, r5
 800a7aa:	1d72      	adds	r2, r6, #5
 800a7ac:	0092      	lsls	r2, r2, #2
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 ff80 	bl	800b6b4 <_calloc_r>
 800a7b4:	b160      	cbz	r0, 800a7d0 <_Balloc+0x64>
 800a7b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7ba:	e00e      	b.n	800a7da <_Balloc+0x6e>
 800a7bc:	2221      	movs	r2, #33	; 0x21
 800a7be:	2104      	movs	r1, #4
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 ff77 	bl	800b6b4 <_calloc_r>
 800a7c6:	69e3      	ldr	r3, [r4, #28]
 800a7c8:	60f0      	str	r0, [r6, #12]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e4      	bne.n	800a79a <_Balloc+0x2e>
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	6802      	ldr	r2, [r0, #0]
 800a7d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7e0:	e7f7      	b.n	800a7d2 <_Balloc+0x66>
 800a7e2:	bf00      	nop
 800a7e4:	0800ba8d 	.word	0x0800ba8d
 800a7e8:	0800bb0d 	.word	0x0800bb0d

0800a7ec <_Bfree>:
 800a7ec:	b570      	push	{r4, r5, r6, lr}
 800a7ee:	69c6      	ldr	r6, [r0, #28]
 800a7f0:	4605      	mov	r5, r0
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	b976      	cbnz	r6, 800a814 <_Bfree+0x28>
 800a7f6:	2010      	movs	r0, #16
 800a7f8:	f7ff ff04 	bl	800a604 <malloc>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	61e8      	str	r0, [r5, #28]
 800a800:	b920      	cbnz	r0, 800a80c <_Bfree+0x20>
 800a802:	4b09      	ldr	r3, [pc, #36]	; (800a828 <_Bfree+0x3c>)
 800a804:	4809      	ldr	r0, [pc, #36]	; (800a82c <_Bfree+0x40>)
 800a806:	218f      	movs	r1, #143	; 0x8f
 800a808:	f000 ff36 	bl	800b678 <__assert_func>
 800a80c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a810:	6006      	str	r6, [r0, #0]
 800a812:	60c6      	str	r6, [r0, #12]
 800a814:	b13c      	cbz	r4, 800a826 <_Bfree+0x3a>
 800a816:	69eb      	ldr	r3, [r5, #28]
 800a818:	6862      	ldr	r2, [r4, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a820:	6021      	str	r1, [r4, #0]
 800a822:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a826:	bd70      	pop	{r4, r5, r6, pc}
 800a828:	0800ba8d 	.word	0x0800ba8d
 800a82c:	0800bb0d 	.word	0x0800bb0d

0800a830 <__multadd>:
 800a830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a834:	690d      	ldr	r5, [r1, #16]
 800a836:	4607      	mov	r7, r0
 800a838:	460c      	mov	r4, r1
 800a83a:	461e      	mov	r6, r3
 800a83c:	f101 0c14 	add.w	ip, r1, #20
 800a840:	2000      	movs	r0, #0
 800a842:	f8dc 3000 	ldr.w	r3, [ip]
 800a846:	b299      	uxth	r1, r3
 800a848:	fb02 6101 	mla	r1, r2, r1, r6
 800a84c:	0c1e      	lsrs	r6, r3, #16
 800a84e:	0c0b      	lsrs	r3, r1, #16
 800a850:	fb02 3306 	mla	r3, r2, r6, r3
 800a854:	b289      	uxth	r1, r1
 800a856:	3001      	adds	r0, #1
 800a858:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a85c:	4285      	cmp	r5, r0
 800a85e:	f84c 1b04 	str.w	r1, [ip], #4
 800a862:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a866:	dcec      	bgt.n	800a842 <__multadd+0x12>
 800a868:	b30e      	cbz	r6, 800a8ae <__multadd+0x7e>
 800a86a:	68a3      	ldr	r3, [r4, #8]
 800a86c:	42ab      	cmp	r3, r5
 800a86e:	dc19      	bgt.n	800a8a4 <__multadd+0x74>
 800a870:	6861      	ldr	r1, [r4, #4]
 800a872:	4638      	mov	r0, r7
 800a874:	3101      	adds	r1, #1
 800a876:	f7ff ff79 	bl	800a76c <_Balloc>
 800a87a:	4680      	mov	r8, r0
 800a87c:	b928      	cbnz	r0, 800a88a <__multadd+0x5a>
 800a87e:	4602      	mov	r2, r0
 800a880:	4b0c      	ldr	r3, [pc, #48]	; (800a8b4 <__multadd+0x84>)
 800a882:	480d      	ldr	r0, [pc, #52]	; (800a8b8 <__multadd+0x88>)
 800a884:	21ba      	movs	r1, #186	; 0xba
 800a886:	f000 fef7 	bl	800b678 <__assert_func>
 800a88a:	6922      	ldr	r2, [r4, #16]
 800a88c:	3202      	adds	r2, #2
 800a88e:	f104 010c 	add.w	r1, r4, #12
 800a892:	0092      	lsls	r2, r2, #2
 800a894:	300c      	adds	r0, #12
 800a896:	f7fe ffe0 	bl	800985a <memcpy>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4638      	mov	r0, r7
 800a89e:	f7ff ffa5 	bl	800a7ec <_Bfree>
 800a8a2:	4644      	mov	r4, r8
 800a8a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	615e      	str	r6, [r3, #20]
 800a8ac:	6125      	str	r5, [r4, #16]
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b4:	0800bafc 	.word	0x0800bafc
 800a8b8:	0800bb0d 	.word	0x0800bb0d

0800a8bc <__hi0bits>:
 800a8bc:	0c03      	lsrs	r3, r0, #16
 800a8be:	041b      	lsls	r3, r3, #16
 800a8c0:	b9d3      	cbnz	r3, 800a8f8 <__hi0bits+0x3c>
 800a8c2:	0400      	lsls	r0, r0, #16
 800a8c4:	2310      	movs	r3, #16
 800a8c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8ca:	bf04      	itt	eq
 800a8cc:	0200      	lsleq	r0, r0, #8
 800a8ce:	3308      	addeq	r3, #8
 800a8d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8d4:	bf04      	itt	eq
 800a8d6:	0100      	lsleq	r0, r0, #4
 800a8d8:	3304      	addeq	r3, #4
 800a8da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8de:	bf04      	itt	eq
 800a8e0:	0080      	lsleq	r0, r0, #2
 800a8e2:	3302      	addeq	r3, #2
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	db05      	blt.n	800a8f4 <__hi0bits+0x38>
 800a8e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8ec:	f103 0301 	add.w	r3, r3, #1
 800a8f0:	bf08      	it	eq
 800a8f2:	2320      	moveq	r3, #32
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	4770      	bx	lr
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e7e4      	b.n	800a8c6 <__hi0bits+0xa>

0800a8fc <__lo0bits>:
 800a8fc:	6803      	ldr	r3, [r0, #0]
 800a8fe:	f013 0207 	ands.w	r2, r3, #7
 800a902:	d00c      	beq.n	800a91e <__lo0bits+0x22>
 800a904:	07d9      	lsls	r1, r3, #31
 800a906:	d422      	bmi.n	800a94e <__lo0bits+0x52>
 800a908:	079a      	lsls	r2, r3, #30
 800a90a:	bf49      	itett	mi
 800a90c:	085b      	lsrmi	r3, r3, #1
 800a90e:	089b      	lsrpl	r3, r3, #2
 800a910:	6003      	strmi	r3, [r0, #0]
 800a912:	2201      	movmi	r2, #1
 800a914:	bf5c      	itt	pl
 800a916:	6003      	strpl	r3, [r0, #0]
 800a918:	2202      	movpl	r2, #2
 800a91a:	4610      	mov	r0, r2
 800a91c:	4770      	bx	lr
 800a91e:	b299      	uxth	r1, r3
 800a920:	b909      	cbnz	r1, 800a926 <__lo0bits+0x2a>
 800a922:	0c1b      	lsrs	r3, r3, #16
 800a924:	2210      	movs	r2, #16
 800a926:	b2d9      	uxtb	r1, r3
 800a928:	b909      	cbnz	r1, 800a92e <__lo0bits+0x32>
 800a92a:	3208      	adds	r2, #8
 800a92c:	0a1b      	lsrs	r3, r3, #8
 800a92e:	0719      	lsls	r1, r3, #28
 800a930:	bf04      	itt	eq
 800a932:	091b      	lsreq	r3, r3, #4
 800a934:	3204      	addeq	r2, #4
 800a936:	0799      	lsls	r1, r3, #30
 800a938:	bf04      	itt	eq
 800a93a:	089b      	lsreq	r3, r3, #2
 800a93c:	3202      	addeq	r2, #2
 800a93e:	07d9      	lsls	r1, r3, #31
 800a940:	d403      	bmi.n	800a94a <__lo0bits+0x4e>
 800a942:	085b      	lsrs	r3, r3, #1
 800a944:	f102 0201 	add.w	r2, r2, #1
 800a948:	d003      	beq.n	800a952 <__lo0bits+0x56>
 800a94a:	6003      	str	r3, [r0, #0]
 800a94c:	e7e5      	b.n	800a91a <__lo0bits+0x1e>
 800a94e:	2200      	movs	r2, #0
 800a950:	e7e3      	b.n	800a91a <__lo0bits+0x1e>
 800a952:	2220      	movs	r2, #32
 800a954:	e7e1      	b.n	800a91a <__lo0bits+0x1e>
	...

0800a958 <__i2b>:
 800a958:	b510      	push	{r4, lr}
 800a95a:	460c      	mov	r4, r1
 800a95c:	2101      	movs	r1, #1
 800a95e:	f7ff ff05 	bl	800a76c <_Balloc>
 800a962:	4602      	mov	r2, r0
 800a964:	b928      	cbnz	r0, 800a972 <__i2b+0x1a>
 800a966:	4b05      	ldr	r3, [pc, #20]	; (800a97c <__i2b+0x24>)
 800a968:	4805      	ldr	r0, [pc, #20]	; (800a980 <__i2b+0x28>)
 800a96a:	f240 1145 	movw	r1, #325	; 0x145
 800a96e:	f000 fe83 	bl	800b678 <__assert_func>
 800a972:	2301      	movs	r3, #1
 800a974:	6144      	str	r4, [r0, #20]
 800a976:	6103      	str	r3, [r0, #16]
 800a978:	bd10      	pop	{r4, pc}
 800a97a:	bf00      	nop
 800a97c:	0800bafc 	.word	0x0800bafc
 800a980:	0800bb0d 	.word	0x0800bb0d

0800a984 <__multiply>:
 800a984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a988:	4691      	mov	r9, r2
 800a98a:	690a      	ldr	r2, [r1, #16]
 800a98c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a990:	429a      	cmp	r2, r3
 800a992:	bfb8      	it	lt
 800a994:	460b      	movlt	r3, r1
 800a996:	460c      	mov	r4, r1
 800a998:	bfbc      	itt	lt
 800a99a:	464c      	movlt	r4, r9
 800a99c:	4699      	movlt	r9, r3
 800a99e:	6927      	ldr	r7, [r4, #16]
 800a9a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a9a4:	68a3      	ldr	r3, [r4, #8]
 800a9a6:	6861      	ldr	r1, [r4, #4]
 800a9a8:	eb07 060a 	add.w	r6, r7, sl
 800a9ac:	42b3      	cmp	r3, r6
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	bfb8      	it	lt
 800a9b2:	3101      	addlt	r1, #1
 800a9b4:	f7ff feda 	bl	800a76c <_Balloc>
 800a9b8:	b930      	cbnz	r0, 800a9c8 <__multiply+0x44>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	4b44      	ldr	r3, [pc, #272]	; (800aad0 <__multiply+0x14c>)
 800a9be:	4845      	ldr	r0, [pc, #276]	; (800aad4 <__multiply+0x150>)
 800a9c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a9c4:	f000 fe58 	bl	800b678 <__assert_func>
 800a9c8:	f100 0514 	add.w	r5, r0, #20
 800a9cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9d0:	462b      	mov	r3, r5
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4543      	cmp	r3, r8
 800a9d6:	d321      	bcc.n	800aa1c <__multiply+0x98>
 800a9d8:	f104 0314 	add.w	r3, r4, #20
 800a9dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a9e0:	f109 0314 	add.w	r3, r9, #20
 800a9e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a9e8:	9202      	str	r2, [sp, #8]
 800a9ea:	1b3a      	subs	r2, r7, r4
 800a9ec:	3a15      	subs	r2, #21
 800a9ee:	f022 0203 	bic.w	r2, r2, #3
 800a9f2:	3204      	adds	r2, #4
 800a9f4:	f104 0115 	add.w	r1, r4, #21
 800a9f8:	428f      	cmp	r7, r1
 800a9fa:	bf38      	it	cc
 800a9fc:	2204      	movcc	r2, #4
 800a9fe:	9201      	str	r2, [sp, #4]
 800aa00:	9a02      	ldr	r2, [sp, #8]
 800aa02:	9303      	str	r3, [sp, #12]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d80c      	bhi.n	800aa22 <__multiply+0x9e>
 800aa08:	2e00      	cmp	r6, #0
 800aa0a:	dd03      	ble.n	800aa14 <__multiply+0x90>
 800aa0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d05b      	beq.n	800aacc <__multiply+0x148>
 800aa14:	6106      	str	r6, [r0, #16]
 800aa16:	b005      	add	sp, #20
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	f843 2b04 	str.w	r2, [r3], #4
 800aa20:	e7d8      	b.n	800a9d4 <__multiply+0x50>
 800aa22:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa26:	f1ba 0f00 	cmp.w	sl, #0
 800aa2a:	d024      	beq.n	800aa76 <__multiply+0xf2>
 800aa2c:	f104 0e14 	add.w	lr, r4, #20
 800aa30:	46a9      	mov	r9, r5
 800aa32:	f04f 0c00 	mov.w	ip, #0
 800aa36:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aa3a:	f8d9 1000 	ldr.w	r1, [r9]
 800aa3e:	fa1f fb82 	uxth.w	fp, r2
 800aa42:	b289      	uxth	r1, r1
 800aa44:	fb0a 110b 	mla	r1, sl, fp, r1
 800aa48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aa4c:	f8d9 2000 	ldr.w	r2, [r9]
 800aa50:	4461      	add	r1, ip
 800aa52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa56:	fb0a c20b 	mla	r2, sl, fp, ip
 800aa5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aa5e:	b289      	uxth	r1, r1
 800aa60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aa64:	4577      	cmp	r7, lr
 800aa66:	f849 1b04 	str.w	r1, [r9], #4
 800aa6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aa6e:	d8e2      	bhi.n	800aa36 <__multiply+0xb2>
 800aa70:	9a01      	ldr	r2, [sp, #4]
 800aa72:	f845 c002 	str.w	ip, [r5, r2]
 800aa76:	9a03      	ldr	r2, [sp, #12]
 800aa78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa7c:	3304      	adds	r3, #4
 800aa7e:	f1b9 0f00 	cmp.w	r9, #0
 800aa82:	d021      	beq.n	800aac8 <__multiply+0x144>
 800aa84:	6829      	ldr	r1, [r5, #0]
 800aa86:	f104 0c14 	add.w	ip, r4, #20
 800aa8a:	46ae      	mov	lr, r5
 800aa8c:	f04f 0a00 	mov.w	sl, #0
 800aa90:	f8bc b000 	ldrh.w	fp, [ip]
 800aa94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aa98:	fb09 220b 	mla	r2, r9, fp, r2
 800aa9c:	4452      	add	r2, sl
 800aa9e:	b289      	uxth	r1, r1
 800aaa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aaa4:	f84e 1b04 	str.w	r1, [lr], #4
 800aaa8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aaac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aab0:	f8be 1000 	ldrh.w	r1, [lr]
 800aab4:	fb09 110a 	mla	r1, r9, sl, r1
 800aab8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aabc:	4567      	cmp	r7, ip
 800aabe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aac2:	d8e5      	bhi.n	800aa90 <__multiply+0x10c>
 800aac4:	9a01      	ldr	r2, [sp, #4]
 800aac6:	50a9      	str	r1, [r5, r2]
 800aac8:	3504      	adds	r5, #4
 800aaca:	e799      	b.n	800aa00 <__multiply+0x7c>
 800aacc:	3e01      	subs	r6, #1
 800aace:	e79b      	b.n	800aa08 <__multiply+0x84>
 800aad0:	0800bafc 	.word	0x0800bafc
 800aad4:	0800bb0d 	.word	0x0800bb0d

0800aad8 <__pow5mult>:
 800aad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aadc:	4615      	mov	r5, r2
 800aade:	f012 0203 	ands.w	r2, r2, #3
 800aae2:	4606      	mov	r6, r0
 800aae4:	460f      	mov	r7, r1
 800aae6:	d007      	beq.n	800aaf8 <__pow5mult+0x20>
 800aae8:	4c25      	ldr	r4, [pc, #148]	; (800ab80 <__pow5mult+0xa8>)
 800aaea:	3a01      	subs	r2, #1
 800aaec:	2300      	movs	r3, #0
 800aaee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaf2:	f7ff fe9d 	bl	800a830 <__multadd>
 800aaf6:	4607      	mov	r7, r0
 800aaf8:	10ad      	asrs	r5, r5, #2
 800aafa:	d03d      	beq.n	800ab78 <__pow5mult+0xa0>
 800aafc:	69f4      	ldr	r4, [r6, #28]
 800aafe:	b97c      	cbnz	r4, 800ab20 <__pow5mult+0x48>
 800ab00:	2010      	movs	r0, #16
 800ab02:	f7ff fd7f 	bl	800a604 <malloc>
 800ab06:	4602      	mov	r2, r0
 800ab08:	61f0      	str	r0, [r6, #28]
 800ab0a:	b928      	cbnz	r0, 800ab18 <__pow5mult+0x40>
 800ab0c:	4b1d      	ldr	r3, [pc, #116]	; (800ab84 <__pow5mult+0xac>)
 800ab0e:	481e      	ldr	r0, [pc, #120]	; (800ab88 <__pow5mult+0xb0>)
 800ab10:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ab14:	f000 fdb0 	bl	800b678 <__assert_func>
 800ab18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab1c:	6004      	str	r4, [r0, #0]
 800ab1e:	60c4      	str	r4, [r0, #12]
 800ab20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ab24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab28:	b94c      	cbnz	r4, 800ab3e <__pow5mult+0x66>
 800ab2a:	f240 2171 	movw	r1, #625	; 0x271
 800ab2e:	4630      	mov	r0, r6
 800ab30:	f7ff ff12 	bl	800a958 <__i2b>
 800ab34:	2300      	movs	r3, #0
 800ab36:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	6003      	str	r3, [r0, #0]
 800ab3e:	f04f 0900 	mov.w	r9, #0
 800ab42:	07eb      	lsls	r3, r5, #31
 800ab44:	d50a      	bpl.n	800ab5c <__pow5mult+0x84>
 800ab46:	4639      	mov	r1, r7
 800ab48:	4622      	mov	r2, r4
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f7ff ff1a 	bl	800a984 <__multiply>
 800ab50:	4639      	mov	r1, r7
 800ab52:	4680      	mov	r8, r0
 800ab54:	4630      	mov	r0, r6
 800ab56:	f7ff fe49 	bl	800a7ec <_Bfree>
 800ab5a:	4647      	mov	r7, r8
 800ab5c:	106d      	asrs	r5, r5, #1
 800ab5e:	d00b      	beq.n	800ab78 <__pow5mult+0xa0>
 800ab60:	6820      	ldr	r0, [r4, #0]
 800ab62:	b938      	cbnz	r0, 800ab74 <__pow5mult+0x9c>
 800ab64:	4622      	mov	r2, r4
 800ab66:	4621      	mov	r1, r4
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7ff ff0b 	bl	800a984 <__multiply>
 800ab6e:	6020      	str	r0, [r4, #0]
 800ab70:	f8c0 9000 	str.w	r9, [r0]
 800ab74:	4604      	mov	r4, r0
 800ab76:	e7e4      	b.n	800ab42 <__pow5mult+0x6a>
 800ab78:	4638      	mov	r0, r7
 800ab7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab7e:	bf00      	nop
 800ab80:	0800bc58 	.word	0x0800bc58
 800ab84:	0800ba8d 	.word	0x0800ba8d
 800ab88:	0800bb0d 	.word	0x0800bb0d

0800ab8c <__lshift>:
 800ab8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab90:	460c      	mov	r4, r1
 800ab92:	6849      	ldr	r1, [r1, #4]
 800ab94:	6923      	ldr	r3, [r4, #16]
 800ab96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	4691      	mov	r9, r2
 800aba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aba4:	f108 0601 	add.w	r6, r8, #1
 800aba8:	42b3      	cmp	r3, r6
 800abaa:	db0b      	blt.n	800abc4 <__lshift+0x38>
 800abac:	4638      	mov	r0, r7
 800abae:	f7ff fddd 	bl	800a76c <_Balloc>
 800abb2:	4605      	mov	r5, r0
 800abb4:	b948      	cbnz	r0, 800abca <__lshift+0x3e>
 800abb6:	4602      	mov	r2, r0
 800abb8:	4b28      	ldr	r3, [pc, #160]	; (800ac5c <__lshift+0xd0>)
 800abba:	4829      	ldr	r0, [pc, #164]	; (800ac60 <__lshift+0xd4>)
 800abbc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800abc0:	f000 fd5a 	bl	800b678 <__assert_func>
 800abc4:	3101      	adds	r1, #1
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	e7ee      	b.n	800aba8 <__lshift+0x1c>
 800abca:	2300      	movs	r3, #0
 800abcc:	f100 0114 	add.w	r1, r0, #20
 800abd0:	f100 0210 	add.w	r2, r0, #16
 800abd4:	4618      	mov	r0, r3
 800abd6:	4553      	cmp	r3, sl
 800abd8:	db33      	blt.n	800ac42 <__lshift+0xb6>
 800abda:	6920      	ldr	r0, [r4, #16]
 800abdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abe0:	f104 0314 	add.w	r3, r4, #20
 800abe4:	f019 091f 	ands.w	r9, r9, #31
 800abe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abf0:	d02b      	beq.n	800ac4a <__lshift+0xbe>
 800abf2:	f1c9 0e20 	rsb	lr, r9, #32
 800abf6:	468a      	mov	sl, r1
 800abf8:	2200      	movs	r2, #0
 800abfa:	6818      	ldr	r0, [r3, #0]
 800abfc:	fa00 f009 	lsl.w	r0, r0, r9
 800ac00:	4310      	orrs	r0, r2
 800ac02:	f84a 0b04 	str.w	r0, [sl], #4
 800ac06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac0a:	459c      	cmp	ip, r3
 800ac0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac10:	d8f3      	bhi.n	800abfa <__lshift+0x6e>
 800ac12:	ebac 0304 	sub.w	r3, ip, r4
 800ac16:	3b15      	subs	r3, #21
 800ac18:	f023 0303 	bic.w	r3, r3, #3
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	f104 0015 	add.w	r0, r4, #21
 800ac22:	4584      	cmp	ip, r0
 800ac24:	bf38      	it	cc
 800ac26:	2304      	movcc	r3, #4
 800ac28:	50ca      	str	r2, [r1, r3]
 800ac2a:	b10a      	cbz	r2, 800ac30 <__lshift+0xa4>
 800ac2c:	f108 0602 	add.w	r6, r8, #2
 800ac30:	3e01      	subs	r6, #1
 800ac32:	4638      	mov	r0, r7
 800ac34:	612e      	str	r6, [r5, #16]
 800ac36:	4621      	mov	r1, r4
 800ac38:	f7ff fdd8 	bl	800a7ec <_Bfree>
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac42:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac46:	3301      	adds	r3, #1
 800ac48:	e7c5      	b.n	800abd6 <__lshift+0x4a>
 800ac4a:	3904      	subs	r1, #4
 800ac4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac50:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac54:	459c      	cmp	ip, r3
 800ac56:	d8f9      	bhi.n	800ac4c <__lshift+0xc0>
 800ac58:	e7ea      	b.n	800ac30 <__lshift+0xa4>
 800ac5a:	bf00      	nop
 800ac5c:	0800bafc 	.word	0x0800bafc
 800ac60:	0800bb0d 	.word	0x0800bb0d

0800ac64 <__mcmp>:
 800ac64:	b530      	push	{r4, r5, lr}
 800ac66:	6902      	ldr	r2, [r0, #16]
 800ac68:	690c      	ldr	r4, [r1, #16]
 800ac6a:	1b12      	subs	r2, r2, r4
 800ac6c:	d10e      	bne.n	800ac8c <__mcmp+0x28>
 800ac6e:	f100 0314 	add.w	r3, r0, #20
 800ac72:	3114      	adds	r1, #20
 800ac74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac84:	42a5      	cmp	r5, r4
 800ac86:	d003      	beq.n	800ac90 <__mcmp+0x2c>
 800ac88:	d305      	bcc.n	800ac96 <__mcmp+0x32>
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	bd30      	pop	{r4, r5, pc}
 800ac90:	4283      	cmp	r3, r0
 800ac92:	d3f3      	bcc.n	800ac7c <__mcmp+0x18>
 800ac94:	e7fa      	b.n	800ac8c <__mcmp+0x28>
 800ac96:	f04f 32ff 	mov.w	r2, #4294967295
 800ac9a:	e7f7      	b.n	800ac8c <__mcmp+0x28>

0800ac9c <__mdiff>:
 800ac9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	460c      	mov	r4, r1
 800aca2:	4606      	mov	r6, r0
 800aca4:	4611      	mov	r1, r2
 800aca6:	4620      	mov	r0, r4
 800aca8:	4690      	mov	r8, r2
 800acaa:	f7ff ffdb 	bl	800ac64 <__mcmp>
 800acae:	1e05      	subs	r5, r0, #0
 800acb0:	d110      	bne.n	800acd4 <__mdiff+0x38>
 800acb2:	4629      	mov	r1, r5
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7ff fd59 	bl	800a76c <_Balloc>
 800acba:	b930      	cbnz	r0, 800acca <__mdiff+0x2e>
 800acbc:	4b3a      	ldr	r3, [pc, #232]	; (800ada8 <__mdiff+0x10c>)
 800acbe:	4602      	mov	r2, r0
 800acc0:	f240 2137 	movw	r1, #567	; 0x237
 800acc4:	4839      	ldr	r0, [pc, #228]	; (800adac <__mdiff+0x110>)
 800acc6:	f000 fcd7 	bl	800b678 <__assert_func>
 800acca:	2301      	movs	r3, #1
 800accc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd4:	bfa4      	itt	ge
 800acd6:	4643      	movge	r3, r8
 800acd8:	46a0      	movge	r8, r4
 800acda:	4630      	mov	r0, r6
 800acdc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ace0:	bfa6      	itte	ge
 800ace2:	461c      	movge	r4, r3
 800ace4:	2500      	movge	r5, #0
 800ace6:	2501      	movlt	r5, #1
 800ace8:	f7ff fd40 	bl	800a76c <_Balloc>
 800acec:	b920      	cbnz	r0, 800acf8 <__mdiff+0x5c>
 800acee:	4b2e      	ldr	r3, [pc, #184]	; (800ada8 <__mdiff+0x10c>)
 800acf0:	4602      	mov	r2, r0
 800acf2:	f240 2145 	movw	r1, #581	; 0x245
 800acf6:	e7e5      	b.n	800acc4 <__mdiff+0x28>
 800acf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800acfc:	6926      	ldr	r6, [r4, #16]
 800acfe:	60c5      	str	r5, [r0, #12]
 800ad00:	f104 0914 	add.w	r9, r4, #20
 800ad04:	f108 0514 	add.w	r5, r8, #20
 800ad08:	f100 0e14 	add.w	lr, r0, #20
 800ad0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad14:	f108 0210 	add.w	r2, r8, #16
 800ad18:	46f2      	mov	sl, lr
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad24:	fa11 f88b 	uxtah	r8, r1, fp
 800ad28:	b299      	uxth	r1, r3
 800ad2a:	0c1b      	lsrs	r3, r3, #16
 800ad2c:	eba8 0801 	sub.w	r8, r8, r1
 800ad30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad38:	fa1f f888 	uxth.w	r8, r8
 800ad3c:	1419      	asrs	r1, r3, #16
 800ad3e:	454e      	cmp	r6, r9
 800ad40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad44:	f84a 3b04 	str.w	r3, [sl], #4
 800ad48:	d8e8      	bhi.n	800ad1c <__mdiff+0x80>
 800ad4a:	1b33      	subs	r3, r6, r4
 800ad4c:	3b15      	subs	r3, #21
 800ad4e:	f023 0303 	bic.w	r3, r3, #3
 800ad52:	3304      	adds	r3, #4
 800ad54:	3415      	adds	r4, #21
 800ad56:	42a6      	cmp	r6, r4
 800ad58:	bf38      	it	cc
 800ad5a:	2304      	movcc	r3, #4
 800ad5c:	441d      	add	r5, r3
 800ad5e:	4473      	add	r3, lr
 800ad60:	469e      	mov	lr, r3
 800ad62:	462e      	mov	r6, r5
 800ad64:	4566      	cmp	r6, ip
 800ad66:	d30e      	bcc.n	800ad86 <__mdiff+0xea>
 800ad68:	f10c 0203 	add.w	r2, ip, #3
 800ad6c:	1b52      	subs	r2, r2, r5
 800ad6e:	f022 0203 	bic.w	r2, r2, #3
 800ad72:	3d03      	subs	r5, #3
 800ad74:	45ac      	cmp	ip, r5
 800ad76:	bf38      	it	cc
 800ad78:	2200      	movcc	r2, #0
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ad80:	b17a      	cbz	r2, 800ada2 <__mdiff+0x106>
 800ad82:	6107      	str	r7, [r0, #16]
 800ad84:	e7a4      	b.n	800acd0 <__mdiff+0x34>
 800ad86:	f856 8b04 	ldr.w	r8, [r6], #4
 800ad8a:	fa11 f288 	uxtah	r2, r1, r8
 800ad8e:	1414      	asrs	r4, r2, #16
 800ad90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ad94:	b292      	uxth	r2, r2
 800ad96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ad9a:	f84e 2b04 	str.w	r2, [lr], #4
 800ad9e:	1421      	asrs	r1, r4, #16
 800ada0:	e7e0      	b.n	800ad64 <__mdiff+0xc8>
 800ada2:	3f01      	subs	r7, #1
 800ada4:	e7ea      	b.n	800ad7c <__mdiff+0xe0>
 800ada6:	bf00      	nop
 800ada8:	0800bafc 	.word	0x0800bafc
 800adac:	0800bb0d 	.word	0x0800bb0d

0800adb0 <__d2b>:
 800adb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adb4:	460f      	mov	r7, r1
 800adb6:	2101      	movs	r1, #1
 800adb8:	ec59 8b10 	vmov	r8, r9, d0
 800adbc:	4616      	mov	r6, r2
 800adbe:	f7ff fcd5 	bl	800a76c <_Balloc>
 800adc2:	4604      	mov	r4, r0
 800adc4:	b930      	cbnz	r0, 800add4 <__d2b+0x24>
 800adc6:	4602      	mov	r2, r0
 800adc8:	4b24      	ldr	r3, [pc, #144]	; (800ae5c <__d2b+0xac>)
 800adca:	4825      	ldr	r0, [pc, #148]	; (800ae60 <__d2b+0xb0>)
 800adcc:	f240 310f 	movw	r1, #783	; 0x30f
 800add0:	f000 fc52 	bl	800b678 <__assert_func>
 800add4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800add8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800addc:	bb2d      	cbnz	r5, 800ae2a <__d2b+0x7a>
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	f1b8 0300 	subs.w	r3, r8, #0
 800ade4:	d026      	beq.n	800ae34 <__d2b+0x84>
 800ade6:	4668      	mov	r0, sp
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	f7ff fd87 	bl	800a8fc <__lo0bits>
 800adee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800adf2:	b1e8      	cbz	r0, 800ae30 <__d2b+0x80>
 800adf4:	f1c0 0320 	rsb	r3, r0, #32
 800adf8:	fa02 f303 	lsl.w	r3, r2, r3
 800adfc:	430b      	orrs	r3, r1
 800adfe:	40c2      	lsrs	r2, r0
 800ae00:	6163      	str	r3, [r4, #20]
 800ae02:	9201      	str	r2, [sp, #4]
 800ae04:	9b01      	ldr	r3, [sp, #4]
 800ae06:	61a3      	str	r3, [r4, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bf14      	ite	ne
 800ae0c:	2202      	movne	r2, #2
 800ae0e:	2201      	moveq	r2, #1
 800ae10:	6122      	str	r2, [r4, #16]
 800ae12:	b1bd      	cbz	r5, 800ae44 <__d2b+0x94>
 800ae14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae18:	4405      	add	r5, r0
 800ae1a:	603d      	str	r5, [r7, #0]
 800ae1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae20:	6030      	str	r0, [r6, #0]
 800ae22:	4620      	mov	r0, r4
 800ae24:	b003      	add	sp, #12
 800ae26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae2e:	e7d6      	b.n	800adde <__d2b+0x2e>
 800ae30:	6161      	str	r1, [r4, #20]
 800ae32:	e7e7      	b.n	800ae04 <__d2b+0x54>
 800ae34:	a801      	add	r0, sp, #4
 800ae36:	f7ff fd61 	bl	800a8fc <__lo0bits>
 800ae3a:	9b01      	ldr	r3, [sp, #4]
 800ae3c:	6163      	str	r3, [r4, #20]
 800ae3e:	3020      	adds	r0, #32
 800ae40:	2201      	movs	r2, #1
 800ae42:	e7e5      	b.n	800ae10 <__d2b+0x60>
 800ae44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae4c:	6038      	str	r0, [r7, #0]
 800ae4e:	6918      	ldr	r0, [r3, #16]
 800ae50:	f7ff fd34 	bl	800a8bc <__hi0bits>
 800ae54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae58:	e7e2      	b.n	800ae20 <__d2b+0x70>
 800ae5a:	bf00      	nop
 800ae5c:	0800bafc 	.word	0x0800bafc
 800ae60:	0800bb0d 	.word	0x0800bb0d

0800ae64 <__ssputs_r>:
 800ae64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae68:	688e      	ldr	r6, [r1, #8]
 800ae6a:	461f      	mov	r7, r3
 800ae6c:	42be      	cmp	r6, r7
 800ae6e:	680b      	ldr	r3, [r1, #0]
 800ae70:	4682      	mov	sl, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	4690      	mov	r8, r2
 800ae76:	d82c      	bhi.n	800aed2 <__ssputs_r+0x6e>
 800ae78:	898a      	ldrh	r2, [r1, #12]
 800ae7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae7e:	d026      	beq.n	800aece <__ssputs_r+0x6a>
 800ae80:	6965      	ldr	r5, [r4, #20]
 800ae82:	6909      	ldr	r1, [r1, #16]
 800ae84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae88:	eba3 0901 	sub.w	r9, r3, r1
 800ae8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae90:	1c7b      	adds	r3, r7, #1
 800ae92:	444b      	add	r3, r9
 800ae94:	106d      	asrs	r5, r5, #1
 800ae96:	429d      	cmp	r5, r3
 800ae98:	bf38      	it	cc
 800ae9a:	461d      	movcc	r5, r3
 800ae9c:	0553      	lsls	r3, r2, #21
 800ae9e:	d527      	bpl.n	800aef0 <__ssputs_r+0x8c>
 800aea0:	4629      	mov	r1, r5
 800aea2:	f7ff fbd7 	bl	800a654 <_malloc_r>
 800aea6:	4606      	mov	r6, r0
 800aea8:	b360      	cbz	r0, 800af04 <__ssputs_r+0xa0>
 800aeaa:	6921      	ldr	r1, [r4, #16]
 800aeac:	464a      	mov	r2, r9
 800aeae:	f7fe fcd4 	bl	800985a <memcpy>
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aeb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aebc:	81a3      	strh	r3, [r4, #12]
 800aebe:	6126      	str	r6, [r4, #16]
 800aec0:	6165      	str	r5, [r4, #20]
 800aec2:	444e      	add	r6, r9
 800aec4:	eba5 0509 	sub.w	r5, r5, r9
 800aec8:	6026      	str	r6, [r4, #0]
 800aeca:	60a5      	str	r5, [r4, #8]
 800aecc:	463e      	mov	r6, r7
 800aece:	42be      	cmp	r6, r7
 800aed0:	d900      	bls.n	800aed4 <__ssputs_r+0x70>
 800aed2:	463e      	mov	r6, r7
 800aed4:	6820      	ldr	r0, [r4, #0]
 800aed6:	4632      	mov	r2, r6
 800aed8:	4641      	mov	r1, r8
 800aeda:	f000 fba3 	bl	800b624 <memmove>
 800aede:	68a3      	ldr	r3, [r4, #8]
 800aee0:	1b9b      	subs	r3, r3, r6
 800aee2:	60a3      	str	r3, [r4, #8]
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	4433      	add	r3, r6
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	2000      	movs	r0, #0
 800aeec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef0:	462a      	mov	r2, r5
 800aef2:	f000 fc07 	bl	800b704 <_realloc_r>
 800aef6:	4606      	mov	r6, r0
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d1e0      	bne.n	800aebe <__ssputs_r+0x5a>
 800aefc:	6921      	ldr	r1, [r4, #16]
 800aefe:	4650      	mov	r0, sl
 800af00:	f7ff fb34 	bl	800a56c <_free_r>
 800af04:	230c      	movs	r3, #12
 800af06:	f8ca 3000 	str.w	r3, [sl]
 800af0a:	89a3      	ldrh	r3, [r4, #12]
 800af0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af10:	81a3      	strh	r3, [r4, #12]
 800af12:	f04f 30ff 	mov.w	r0, #4294967295
 800af16:	e7e9      	b.n	800aeec <__ssputs_r+0x88>

0800af18 <_svfiprintf_r>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	4698      	mov	r8, r3
 800af1e:	898b      	ldrh	r3, [r1, #12]
 800af20:	061b      	lsls	r3, r3, #24
 800af22:	b09d      	sub	sp, #116	; 0x74
 800af24:	4607      	mov	r7, r0
 800af26:	460d      	mov	r5, r1
 800af28:	4614      	mov	r4, r2
 800af2a:	d50e      	bpl.n	800af4a <_svfiprintf_r+0x32>
 800af2c:	690b      	ldr	r3, [r1, #16]
 800af2e:	b963      	cbnz	r3, 800af4a <_svfiprintf_r+0x32>
 800af30:	2140      	movs	r1, #64	; 0x40
 800af32:	f7ff fb8f 	bl	800a654 <_malloc_r>
 800af36:	6028      	str	r0, [r5, #0]
 800af38:	6128      	str	r0, [r5, #16]
 800af3a:	b920      	cbnz	r0, 800af46 <_svfiprintf_r+0x2e>
 800af3c:	230c      	movs	r3, #12
 800af3e:	603b      	str	r3, [r7, #0]
 800af40:	f04f 30ff 	mov.w	r0, #4294967295
 800af44:	e0d0      	b.n	800b0e8 <_svfiprintf_r+0x1d0>
 800af46:	2340      	movs	r3, #64	; 0x40
 800af48:	616b      	str	r3, [r5, #20]
 800af4a:	2300      	movs	r3, #0
 800af4c:	9309      	str	r3, [sp, #36]	; 0x24
 800af4e:	2320      	movs	r3, #32
 800af50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af54:	f8cd 800c 	str.w	r8, [sp, #12]
 800af58:	2330      	movs	r3, #48	; 0x30
 800af5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b100 <_svfiprintf_r+0x1e8>
 800af5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af62:	f04f 0901 	mov.w	r9, #1
 800af66:	4623      	mov	r3, r4
 800af68:	469a      	mov	sl, r3
 800af6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af6e:	b10a      	cbz	r2, 800af74 <_svfiprintf_r+0x5c>
 800af70:	2a25      	cmp	r2, #37	; 0x25
 800af72:	d1f9      	bne.n	800af68 <_svfiprintf_r+0x50>
 800af74:	ebba 0b04 	subs.w	fp, sl, r4
 800af78:	d00b      	beq.n	800af92 <_svfiprintf_r+0x7a>
 800af7a:	465b      	mov	r3, fp
 800af7c:	4622      	mov	r2, r4
 800af7e:	4629      	mov	r1, r5
 800af80:	4638      	mov	r0, r7
 800af82:	f7ff ff6f 	bl	800ae64 <__ssputs_r>
 800af86:	3001      	adds	r0, #1
 800af88:	f000 80a9 	beq.w	800b0de <_svfiprintf_r+0x1c6>
 800af8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af8e:	445a      	add	r2, fp
 800af90:	9209      	str	r2, [sp, #36]	; 0x24
 800af92:	f89a 3000 	ldrb.w	r3, [sl]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 80a1 	beq.w	800b0de <_svfiprintf_r+0x1c6>
 800af9c:	2300      	movs	r3, #0
 800af9e:	f04f 32ff 	mov.w	r2, #4294967295
 800afa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afa6:	f10a 0a01 	add.w	sl, sl, #1
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	9307      	str	r3, [sp, #28]
 800afae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afb2:	931a      	str	r3, [sp, #104]	; 0x68
 800afb4:	4654      	mov	r4, sl
 800afb6:	2205      	movs	r2, #5
 800afb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afbc:	4850      	ldr	r0, [pc, #320]	; (800b100 <_svfiprintf_r+0x1e8>)
 800afbe:	f7f5 f92f 	bl	8000220 <memchr>
 800afc2:	9a04      	ldr	r2, [sp, #16]
 800afc4:	b9d8      	cbnz	r0, 800affe <_svfiprintf_r+0xe6>
 800afc6:	06d0      	lsls	r0, r2, #27
 800afc8:	bf44      	itt	mi
 800afca:	2320      	movmi	r3, #32
 800afcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afd0:	0711      	lsls	r1, r2, #28
 800afd2:	bf44      	itt	mi
 800afd4:	232b      	movmi	r3, #43	; 0x2b
 800afd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afda:	f89a 3000 	ldrb.w	r3, [sl]
 800afde:	2b2a      	cmp	r3, #42	; 0x2a
 800afe0:	d015      	beq.n	800b00e <_svfiprintf_r+0xf6>
 800afe2:	9a07      	ldr	r2, [sp, #28]
 800afe4:	4654      	mov	r4, sl
 800afe6:	2000      	movs	r0, #0
 800afe8:	f04f 0c0a 	mov.w	ip, #10
 800afec:	4621      	mov	r1, r4
 800afee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aff2:	3b30      	subs	r3, #48	; 0x30
 800aff4:	2b09      	cmp	r3, #9
 800aff6:	d94d      	bls.n	800b094 <_svfiprintf_r+0x17c>
 800aff8:	b1b0      	cbz	r0, 800b028 <_svfiprintf_r+0x110>
 800affa:	9207      	str	r2, [sp, #28]
 800affc:	e014      	b.n	800b028 <_svfiprintf_r+0x110>
 800affe:	eba0 0308 	sub.w	r3, r0, r8
 800b002:	fa09 f303 	lsl.w	r3, r9, r3
 800b006:	4313      	orrs	r3, r2
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	46a2      	mov	sl, r4
 800b00c:	e7d2      	b.n	800afb4 <_svfiprintf_r+0x9c>
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	1d19      	adds	r1, r3, #4
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	9103      	str	r1, [sp, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	bfbb      	ittet	lt
 800b01a:	425b      	neglt	r3, r3
 800b01c:	f042 0202 	orrlt.w	r2, r2, #2
 800b020:	9307      	strge	r3, [sp, #28]
 800b022:	9307      	strlt	r3, [sp, #28]
 800b024:	bfb8      	it	lt
 800b026:	9204      	strlt	r2, [sp, #16]
 800b028:	7823      	ldrb	r3, [r4, #0]
 800b02a:	2b2e      	cmp	r3, #46	; 0x2e
 800b02c:	d10c      	bne.n	800b048 <_svfiprintf_r+0x130>
 800b02e:	7863      	ldrb	r3, [r4, #1]
 800b030:	2b2a      	cmp	r3, #42	; 0x2a
 800b032:	d134      	bne.n	800b09e <_svfiprintf_r+0x186>
 800b034:	9b03      	ldr	r3, [sp, #12]
 800b036:	1d1a      	adds	r2, r3, #4
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	9203      	str	r2, [sp, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	bfb8      	it	lt
 800b040:	f04f 33ff 	movlt.w	r3, #4294967295
 800b044:	3402      	adds	r4, #2
 800b046:	9305      	str	r3, [sp, #20]
 800b048:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b110 <_svfiprintf_r+0x1f8>
 800b04c:	7821      	ldrb	r1, [r4, #0]
 800b04e:	2203      	movs	r2, #3
 800b050:	4650      	mov	r0, sl
 800b052:	f7f5 f8e5 	bl	8000220 <memchr>
 800b056:	b138      	cbz	r0, 800b068 <_svfiprintf_r+0x150>
 800b058:	9b04      	ldr	r3, [sp, #16]
 800b05a:	eba0 000a 	sub.w	r0, r0, sl
 800b05e:	2240      	movs	r2, #64	; 0x40
 800b060:	4082      	lsls	r2, r0
 800b062:	4313      	orrs	r3, r2
 800b064:	3401      	adds	r4, #1
 800b066:	9304      	str	r3, [sp, #16]
 800b068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b06c:	4825      	ldr	r0, [pc, #148]	; (800b104 <_svfiprintf_r+0x1ec>)
 800b06e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b072:	2206      	movs	r2, #6
 800b074:	f7f5 f8d4 	bl	8000220 <memchr>
 800b078:	2800      	cmp	r0, #0
 800b07a:	d038      	beq.n	800b0ee <_svfiprintf_r+0x1d6>
 800b07c:	4b22      	ldr	r3, [pc, #136]	; (800b108 <_svfiprintf_r+0x1f0>)
 800b07e:	bb1b      	cbnz	r3, 800b0c8 <_svfiprintf_r+0x1b0>
 800b080:	9b03      	ldr	r3, [sp, #12]
 800b082:	3307      	adds	r3, #7
 800b084:	f023 0307 	bic.w	r3, r3, #7
 800b088:	3308      	adds	r3, #8
 800b08a:	9303      	str	r3, [sp, #12]
 800b08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08e:	4433      	add	r3, r6
 800b090:	9309      	str	r3, [sp, #36]	; 0x24
 800b092:	e768      	b.n	800af66 <_svfiprintf_r+0x4e>
 800b094:	fb0c 3202 	mla	r2, ip, r2, r3
 800b098:	460c      	mov	r4, r1
 800b09a:	2001      	movs	r0, #1
 800b09c:	e7a6      	b.n	800afec <_svfiprintf_r+0xd4>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	3401      	adds	r4, #1
 800b0a2:	9305      	str	r3, [sp, #20]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	f04f 0c0a 	mov.w	ip, #10
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0b0:	3a30      	subs	r2, #48	; 0x30
 800b0b2:	2a09      	cmp	r2, #9
 800b0b4:	d903      	bls.n	800b0be <_svfiprintf_r+0x1a6>
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d0c6      	beq.n	800b048 <_svfiprintf_r+0x130>
 800b0ba:	9105      	str	r1, [sp, #20]
 800b0bc:	e7c4      	b.n	800b048 <_svfiprintf_r+0x130>
 800b0be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e7f0      	b.n	800b0aa <_svfiprintf_r+0x192>
 800b0c8:	ab03      	add	r3, sp, #12
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	462a      	mov	r2, r5
 800b0ce:	4b0f      	ldr	r3, [pc, #60]	; (800b10c <_svfiprintf_r+0x1f4>)
 800b0d0:	a904      	add	r1, sp, #16
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	f7fd fe56 	bl	8008d84 <_printf_float>
 800b0d8:	1c42      	adds	r2, r0, #1
 800b0da:	4606      	mov	r6, r0
 800b0dc:	d1d6      	bne.n	800b08c <_svfiprintf_r+0x174>
 800b0de:	89ab      	ldrh	r3, [r5, #12]
 800b0e0:	065b      	lsls	r3, r3, #25
 800b0e2:	f53f af2d 	bmi.w	800af40 <_svfiprintf_r+0x28>
 800b0e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0e8:	b01d      	add	sp, #116	; 0x74
 800b0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ee:	ab03      	add	r3, sp, #12
 800b0f0:	9300      	str	r3, [sp, #0]
 800b0f2:	462a      	mov	r2, r5
 800b0f4:	4b05      	ldr	r3, [pc, #20]	; (800b10c <_svfiprintf_r+0x1f4>)
 800b0f6:	a904      	add	r1, sp, #16
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	f7fe f8e7 	bl	80092cc <_printf_i>
 800b0fe:	e7eb      	b.n	800b0d8 <_svfiprintf_r+0x1c0>
 800b100:	0800bc64 	.word	0x0800bc64
 800b104:	0800bc6e 	.word	0x0800bc6e
 800b108:	08008d85 	.word	0x08008d85
 800b10c:	0800ae65 	.word	0x0800ae65
 800b110:	0800bc6a 	.word	0x0800bc6a

0800b114 <__sfputc_r>:
 800b114:	6893      	ldr	r3, [r2, #8]
 800b116:	3b01      	subs	r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	b410      	push	{r4}
 800b11c:	6093      	str	r3, [r2, #8]
 800b11e:	da08      	bge.n	800b132 <__sfputc_r+0x1e>
 800b120:	6994      	ldr	r4, [r2, #24]
 800b122:	42a3      	cmp	r3, r4
 800b124:	db01      	blt.n	800b12a <__sfputc_r+0x16>
 800b126:	290a      	cmp	r1, #10
 800b128:	d103      	bne.n	800b132 <__sfputc_r+0x1e>
 800b12a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b12e:	f000 b9e3 	b.w	800b4f8 <__swbuf_r>
 800b132:	6813      	ldr	r3, [r2, #0]
 800b134:	1c58      	adds	r0, r3, #1
 800b136:	6010      	str	r0, [r2, #0]
 800b138:	7019      	strb	r1, [r3, #0]
 800b13a:	4608      	mov	r0, r1
 800b13c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <__sfputs_r>:
 800b142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b144:	4606      	mov	r6, r0
 800b146:	460f      	mov	r7, r1
 800b148:	4614      	mov	r4, r2
 800b14a:	18d5      	adds	r5, r2, r3
 800b14c:	42ac      	cmp	r4, r5
 800b14e:	d101      	bne.n	800b154 <__sfputs_r+0x12>
 800b150:	2000      	movs	r0, #0
 800b152:	e007      	b.n	800b164 <__sfputs_r+0x22>
 800b154:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b158:	463a      	mov	r2, r7
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7ff ffda 	bl	800b114 <__sfputc_r>
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d1f3      	bne.n	800b14c <__sfputs_r+0xa>
 800b164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b168 <_vfiprintf_r>:
 800b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	460d      	mov	r5, r1
 800b16e:	b09d      	sub	sp, #116	; 0x74
 800b170:	4614      	mov	r4, r2
 800b172:	4698      	mov	r8, r3
 800b174:	4606      	mov	r6, r0
 800b176:	b118      	cbz	r0, 800b180 <_vfiprintf_r+0x18>
 800b178:	6a03      	ldr	r3, [r0, #32]
 800b17a:	b90b      	cbnz	r3, 800b180 <_vfiprintf_r+0x18>
 800b17c:	f7fe fa54 	bl	8009628 <__sinit>
 800b180:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b182:	07d9      	lsls	r1, r3, #31
 800b184:	d405      	bmi.n	800b192 <_vfiprintf_r+0x2a>
 800b186:	89ab      	ldrh	r3, [r5, #12]
 800b188:	059a      	lsls	r2, r3, #22
 800b18a:	d402      	bmi.n	800b192 <_vfiprintf_r+0x2a>
 800b18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b18e:	f7fe fb62 	bl	8009856 <__retarget_lock_acquire_recursive>
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	071b      	lsls	r3, r3, #28
 800b196:	d501      	bpl.n	800b19c <_vfiprintf_r+0x34>
 800b198:	692b      	ldr	r3, [r5, #16]
 800b19a:	b99b      	cbnz	r3, 800b1c4 <_vfiprintf_r+0x5c>
 800b19c:	4629      	mov	r1, r5
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f000 f9e8 	bl	800b574 <__swsetup_r>
 800b1a4:	b170      	cbz	r0, 800b1c4 <_vfiprintf_r+0x5c>
 800b1a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1a8:	07dc      	lsls	r4, r3, #31
 800b1aa:	d504      	bpl.n	800b1b6 <_vfiprintf_r+0x4e>
 800b1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b0:	b01d      	add	sp, #116	; 0x74
 800b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b6:	89ab      	ldrh	r3, [r5, #12]
 800b1b8:	0598      	lsls	r0, r3, #22
 800b1ba:	d4f7      	bmi.n	800b1ac <_vfiprintf_r+0x44>
 800b1bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1be:	f7fe fb4b 	bl	8009858 <__retarget_lock_release_recursive>
 800b1c2:	e7f3      	b.n	800b1ac <_vfiprintf_r+0x44>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c8:	2320      	movs	r3, #32
 800b1ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1d2:	2330      	movs	r3, #48	; 0x30
 800b1d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b388 <_vfiprintf_r+0x220>
 800b1d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1dc:	f04f 0901 	mov.w	r9, #1
 800b1e0:	4623      	mov	r3, r4
 800b1e2:	469a      	mov	sl, r3
 800b1e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1e8:	b10a      	cbz	r2, 800b1ee <_vfiprintf_r+0x86>
 800b1ea:	2a25      	cmp	r2, #37	; 0x25
 800b1ec:	d1f9      	bne.n	800b1e2 <_vfiprintf_r+0x7a>
 800b1ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b1f2:	d00b      	beq.n	800b20c <_vfiprintf_r+0xa4>
 800b1f4:	465b      	mov	r3, fp
 800b1f6:	4622      	mov	r2, r4
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7ff ffa1 	bl	800b142 <__sfputs_r>
 800b200:	3001      	adds	r0, #1
 800b202:	f000 80a9 	beq.w	800b358 <_vfiprintf_r+0x1f0>
 800b206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b208:	445a      	add	r2, fp
 800b20a:	9209      	str	r2, [sp, #36]	; 0x24
 800b20c:	f89a 3000 	ldrb.w	r3, [sl]
 800b210:	2b00      	cmp	r3, #0
 800b212:	f000 80a1 	beq.w	800b358 <_vfiprintf_r+0x1f0>
 800b216:	2300      	movs	r3, #0
 800b218:	f04f 32ff 	mov.w	r2, #4294967295
 800b21c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b220:	f10a 0a01 	add.w	sl, sl, #1
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	9307      	str	r3, [sp, #28]
 800b228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b22c:	931a      	str	r3, [sp, #104]	; 0x68
 800b22e:	4654      	mov	r4, sl
 800b230:	2205      	movs	r2, #5
 800b232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b236:	4854      	ldr	r0, [pc, #336]	; (800b388 <_vfiprintf_r+0x220>)
 800b238:	f7f4 fff2 	bl	8000220 <memchr>
 800b23c:	9a04      	ldr	r2, [sp, #16]
 800b23e:	b9d8      	cbnz	r0, 800b278 <_vfiprintf_r+0x110>
 800b240:	06d1      	lsls	r1, r2, #27
 800b242:	bf44      	itt	mi
 800b244:	2320      	movmi	r3, #32
 800b246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b24a:	0713      	lsls	r3, r2, #28
 800b24c:	bf44      	itt	mi
 800b24e:	232b      	movmi	r3, #43	; 0x2b
 800b250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b254:	f89a 3000 	ldrb.w	r3, [sl]
 800b258:	2b2a      	cmp	r3, #42	; 0x2a
 800b25a:	d015      	beq.n	800b288 <_vfiprintf_r+0x120>
 800b25c:	9a07      	ldr	r2, [sp, #28]
 800b25e:	4654      	mov	r4, sl
 800b260:	2000      	movs	r0, #0
 800b262:	f04f 0c0a 	mov.w	ip, #10
 800b266:	4621      	mov	r1, r4
 800b268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b26c:	3b30      	subs	r3, #48	; 0x30
 800b26e:	2b09      	cmp	r3, #9
 800b270:	d94d      	bls.n	800b30e <_vfiprintf_r+0x1a6>
 800b272:	b1b0      	cbz	r0, 800b2a2 <_vfiprintf_r+0x13a>
 800b274:	9207      	str	r2, [sp, #28]
 800b276:	e014      	b.n	800b2a2 <_vfiprintf_r+0x13a>
 800b278:	eba0 0308 	sub.w	r3, r0, r8
 800b27c:	fa09 f303 	lsl.w	r3, r9, r3
 800b280:	4313      	orrs	r3, r2
 800b282:	9304      	str	r3, [sp, #16]
 800b284:	46a2      	mov	sl, r4
 800b286:	e7d2      	b.n	800b22e <_vfiprintf_r+0xc6>
 800b288:	9b03      	ldr	r3, [sp, #12]
 800b28a:	1d19      	adds	r1, r3, #4
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	9103      	str	r1, [sp, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	bfbb      	ittet	lt
 800b294:	425b      	neglt	r3, r3
 800b296:	f042 0202 	orrlt.w	r2, r2, #2
 800b29a:	9307      	strge	r3, [sp, #28]
 800b29c:	9307      	strlt	r3, [sp, #28]
 800b29e:	bfb8      	it	lt
 800b2a0:	9204      	strlt	r2, [sp, #16]
 800b2a2:	7823      	ldrb	r3, [r4, #0]
 800b2a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b2a6:	d10c      	bne.n	800b2c2 <_vfiprintf_r+0x15a>
 800b2a8:	7863      	ldrb	r3, [r4, #1]
 800b2aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ac:	d134      	bne.n	800b318 <_vfiprintf_r+0x1b0>
 800b2ae:	9b03      	ldr	r3, [sp, #12]
 800b2b0:	1d1a      	adds	r2, r3, #4
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	9203      	str	r2, [sp, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	bfb8      	it	lt
 800b2ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2be:	3402      	adds	r4, #2
 800b2c0:	9305      	str	r3, [sp, #20]
 800b2c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b398 <_vfiprintf_r+0x230>
 800b2c6:	7821      	ldrb	r1, [r4, #0]
 800b2c8:	2203      	movs	r2, #3
 800b2ca:	4650      	mov	r0, sl
 800b2cc:	f7f4 ffa8 	bl	8000220 <memchr>
 800b2d0:	b138      	cbz	r0, 800b2e2 <_vfiprintf_r+0x17a>
 800b2d2:	9b04      	ldr	r3, [sp, #16]
 800b2d4:	eba0 000a 	sub.w	r0, r0, sl
 800b2d8:	2240      	movs	r2, #64	; 0x40
 800b2da:	4082      	lsls	r2, r0
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	3401      	adds	r4, #1
 800b2e0:	9304      	str	r3, [sp, #16]
 800b2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e6:	4829      	ldr	r0, [pc, #164]	; (800b38c <_vfiprintf_r+0x224>)
 800b2e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2ec:	2206      	movs	r2, #6
 800b2ee:	f7f4 ff97 	bl	8000220 <memchr>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d03f      	beq.n	800b376 <_vfiprintf_r+0x20e>
 800b2f6:	4b26      	ldr	r3, [pc, #152]	; (800b390 <_vfiprintf_r+0x228>)
 800b2f8:	bb1b      	cbnz	r3, 800b342 <_vfiprintf_r+0x1da>
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	3307      	adds	r3, #7
 800b2fe:	f023 0307 	bic.w	r3, r3, #7
 800b302:	3308      	adds	r3, #8
 800b304:	9303      	str	r3, [sp, #12]
 800b306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b308:	443b      	add	r3, r7
 800b30a:	9309      	str	r3, [sp, #36]	; 0x24
 800b30c:	e768      	b.n	800b1e0 <_vfiprintf_r+0x78>
 800b30e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b312:	460c      	mov	r4, r1
 800b314:	2001      	movs	r0, #1
 800b316:	e7a6      	b.n	800b266 <_vfiprintf_r+0xfe>
 800b318:	2300      	movs	r3, #0
 800b31a:	3401      	adds	r4, #1
 800b31c:	9305      	str	r3, [sp, #20]
 800b31e:	4619      	mov	r1, r3
 800b320:	f04f 0c0a 	mov.w	ip, #10
 800b324:	4620      	mov	r0, r4
 800b326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b32a:	3a30      	subs	r2, #48	; 0x30
 800b32c:	2a09      	cmp	r2, #9
 800b32e:	d903      	bls.n	800b338 <_vfiprintf_r+0x1d0>
 800b330:	2b00      	cmp	r3, #0
 800b332:	d0c6      	beq.n	800b2c2 <_vfiprintf_r+0x15a>
 800b334:	9105      	str	r1, [sp, #20]
 800b336:	e7c4      	b.n	800b2c2 <_vfiprintf_r+0x15a>
 800b338:	fb0c 2101 	mla	r1, ip, r1, r2
 800b33c:	4604      	mov	r4, r0
 800b33e:	2301      	movs	r3, #1
 800b340:	e7f0      	b.n	800b324 <_vfiprintf_r+0x1bc>
 800b342:	ab03      	add	r3, sp, #12
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	462a      	mov	r2, r5
 800b348:	4b12      	ldr	r3, [pc, #72]	; (800b394 <_vfiprintf_r+0x22c>)
 800b34a:	a904      	add	r1, sp, #16
 800b34c:	4630      	mov	r0, r6
 800b34e:	f7fd fd19 	bl	8008d84 <_printf_float>
 800b352:	4607      	mov	r7, r0
 800b354:	1c78      	adds	r0, r7, #1
 800b356:	d1d6      	bne.n	800b306 <_vfiprintf_r+0x19e>
 800b358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b35a:	07d9      	lsls	r1, r3, #31
 800b35c:	d405      	bmi.n	800b36a <_vfiprintf_r+0x202>
 800b35e:	89ab      	ldrh	r3, [r5, #12]
 800b360:	059a      	lsls	r2, r3, #22
 800b362:	d402      	bmi.n	800b36a <_vfiprintf_r+0x202>
 800b364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b366:	f7fe fa77 	bl	8009858 <__retarget_lock_release_recursive>
 800b36a:	89ab      	ldrh	r3, [r5, #12]
 800b36c:	065b      	lsls	r3, r3, #25
 800b36e:	f53f af1d 	bmi.w	800b1ac <_vfiprintf_r+0x44>
 800b372:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b374:	e71c      	b.n	800b1b0 <_vfiprintf_r+0x48>
 800b376:	ab03      	add	r3, sp, #12
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	462a      	mov	r2, r5
 800b37c:	4b05      	ldr	r3, [pc, #20]	; (800b394 <_vfiprintf_r+0x22c>)
 800b37e:	a904      	add	r1, sp, #16
 800b380:	4630      	mov	r0, r6
 800b382:	f7fd ffa3 	bl	80092cc <_printf_i>
 800b386:	e7e4      	b.n	800b352 <_vfiprintf_r+0x1ea>
 800b388:	0800bc64 	.word	0x0800bc64
 800b38c:	0800bc6e 	.word	0x0800bc6e
 800b390:	08008d85 	.word	0x08008d85
 800b394:	0800b143 	.word	0x0800b143
 800b398:	0800bc6a 	.word	0x0800bc6a

0800b39c <__sflush_r>:
 800b39c:	898a      	ldrh	r2, [r1, #12]
 800b39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	0710      	lsls	r0, r2, #28
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	d458      	bmi.n	800b45c <__sflush_r+0xc0>
 800b3aa:	684b      	ldr	r3, [r1, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	dc05      	bgt.n	800b3bc <__sflush_r+0x20>
 800b3b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	dc02      	bgt.n	800b3bc <__sflush_r+0x20>
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3be:	2e00      	cmp	r6, #0
 800b3c0:	d0f9      	beq.n	800b3b6 <__sflush_r+0x1a>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3c8:	682f      	ldr	r7, [r5, #0]
 800b3ca:	6a21      	ldr	r1, [r4, #32]
 800b3cc:	602b      	str	r3, [r5, #0]
 800b3ce:	d032      	beq.n	800b436 <__sflush_r+0x9a>
 800b3d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	075a      	lsls	r2, r3, #29
 800b3d6:	d505      	bpl.n	800b3e4 <__sflush_r+0x48>
 800b3d8:	6863      	ldr	r3, [r4, #4]
 800b3da:	1ac0      	subs	r0, r0, r3
 800b3dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3de:	b10b      	cbz	r3, 800b3e4 <__sflush_r+0x48>
 800b3e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3e2:	1ac0      	subs	r0, r0, r3
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3ea:	6a21      	ldr	r1, [r4, #32]
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	47b0      	blx	r6
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	d106      	bne.n	800b404 <__sflush_r+0x68>
 800b3f6:	6829      	ldr	r1, [r5, #0]
 800b3f8:	291d      	cmp	r1, #29
 800b3fa:	d82b      	bhi.n	800b454 <__sflush_r+0xb8>
 800b3fc:	4a29      	ldr	r2, [pc, #164]	; (800b4a4 <__sflush_r+0x108>)
 800b3fe:	410a      	asrs	r2, r1
 800b400:	07d6      	lsls	r6, r2, #31
 800b402:	d427      	bmi.n	800b454 <__sflush_r+0xb8>
 800b404:	2200      	movs	r2, #0
 800b406:	6062      	str	r2, [r4, #4]
 800b408:	04d9      	lsls	r1, r3, #19
 800b40a:	6922      	ldr	r2, [r4, #16]
 800b40c:	6022      	str	r2, [r4, #0]
 800b40e:	d504      	bpl.n	800b41a <__sflush_r+0x7e>
 800b410:	1c42      	adds	r2, r0, #1
 800b412:	d101      	bne.n	800b418 <__sflush_r+0x7c>
 800b414:	682b      	ldr	r3, [r5, #0]
 800b416:	b903      	cbnz	r3, 800b41a <__sflush_r+0x7e>
 800b418:	6560      	str	r0, [r4, #84]	; 0x54
 800b41a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b41c:	602f      	str	r7, [r5, #0]
 800b41e:	2900      	cmp	r1, #0
 800b420:	d0c9      	beq.n	800b3b6 <__sflush_r+0x1a>
 800b422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b426:	4299      	cmp	r1, r3
 800b428:	d002      	beq.n	800b430 <__sflush_r+0x94>
 800b42a:	4628      	mov	r0, r5
 800b42c:	f7ff f89e 	bl	800a56c <_free_r>
 800b430:	2000      	movs	r0, #0
 800b432:	6360      	str	r0, [r4, #52]	; 0x34
 800b434:	e7c0      	b.n	800b3b8 <__sflush_r+0x1c>
 800b436:	2301      	movs	r3, #1
 800b438:	4628      	mov	r0, r5
 800b43a:	47b0      	blx	r6
 800b43c:	1c41      	adds	r1, r0, #1
 800b43e:	d1c8      	bne.n	800b3d2 <__sflush_r+0x36>
 800b440:	682b      	ldr	r3, [r5, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d0c5      	beq.n	800b3d2 <__sflush_r+0x36>
 800b446:	2b1d      	cmp	r3, #29
 800b448:	d001      	beq.n	800b44e <__sflush_r+0xb2>
 800b44a:	2b16      	cmp	r3, #22
 800b44c:	d101      	bne.n	800b452 <__sflush_r+0xb6>
 800b44e:	602f      	str	r7, [r5, #0]
 800b450:	e7b1      	b.n	800b3b6 <__sflush_r+0x1a>
 800b452:	89a3      	ldrh	r3, [r4, #12]
 800b454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b458:	81a3      	strh	r3, [r4, #12]
 800b45a:	e7ad      	b.n	800b3b8 <__sflush_r+0x1c>
 800b45c:	690f      	ldr	r7, [r1, #16]
 800b45e:	2f00      	cmp	r7, #0
 800b460:	d0a9      	beq.n	800b3b6 <__sflush_r+0x1a>
 800b462:	0793      	lsls	r3, r2, #30
 800b464:	680e      	ldr	r6, [r1, #0]
 800b466:	bf08      	it	eq
 800b468:	694b      	ldreq	r3, [r1, #20]
 800b46a:	600f      	str	r7, [r1, #0]
 800b46c:	bf18      	it	ne
 800b46e:	2300      	movne	r3, #0
 800b470:	eba6 0807 	sub.w	r8, r6, r7
 800b474:	608b      	str	r3, [r1, #8]
 800b476:	f1b8 0f00 	cmp.w	r8, #0
 800b47a:	dd9c      	ble.n	800b3b6 <__sflush_r+0x1a>
 800b47c:	6a21      	ldr	r1, [r4, #32]
 800b47e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b480:	4643      	mov	r3, r8
 800b482:	463a      	mov	r2, r7
 800b484:	4628      	mov	r0, r5
 800b486:	47b0      	blx	r6
 800b488:	2800      	cmp	r0, #0
 800b48a:	dc06      	bgt.n	800b49a <__sflush_r+0xfe>
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b492:	81a3      	strh	r3, [r4, #12]
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	e78e      	b.n	800b3b8 <__sflush_r+0x1c>
 800b49a:	4407      	add	r7, r0
 800b49c:	eba8 0800 	sub.w	r8, r8, r0
 800b4a0:	e7e9      	b.n	800b476 <__sflush_r+0xda>
 800b4a2:	bf00      	nop
 800b4a4:	dfbffffe 	.word	0xdfbffffe

0800b4a8 <_fflush_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	690b      	ldr	r3, [r1, #16]
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	b913      	cbnz	r3, 800b4b8 <_fflush_r+0x10>
 800b4b2:	2500      	movs	r5, #0
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	b118      	cbz	r0, 800b4c2 <_fflush_r+0x1a>
 800b4ba:	6a03      	ldr	r3, [r0, #32]
 800b4bc:	b90b      	cbnz	r3, 800b4c2 <_fflush_r+0x1a>
 800b4be:	f7fe f8b3 	bl	8009628 <__sinit>
 800b4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d0f3      	beq.n	800b4b2 <_fflush_r+0xa>
 800b4ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4cc:	07d0      	lsls	r0, r2, #31
 800b4ce:	d404      	bmi.n	800b4da <_fflush_r+0x32>
 800b4d0:	0599      	lsls	r1, r3, #22
 800b4d2:	d402      	bmi.n	800b4da <_fflush_r+0x32>
 800b4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4d6:	f7fe f9be 	bl	8009856 <__retarget_lock_acquire_recursive>
 800b4da:	4628      	mov	r0, r5
 800b4dc:	4621      	mov	r1, r4
 800b4de:	f7ff ff5d 	bl	800b39c <__sflush_r>
 800b4e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4e4:	07da      	lsls	r2, r3, #31
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	d4e4      	bmi.n	800b4b4 <_fflush_r+0xc>
 800b4ea:	89a3      	ldrh	r3, [r4, #12]
 800b4ec:	059b      	lsls	r3, r3, #22
 800b4ee:	d4e1      	bmi.n	800b4b4 <_fflush_r+0xc>
 800b4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4f2:	f7fe f9b1 	bl	8009858 <__retarget_lock_release_recursive>
 800b4f6:	e7dd      	b.n	800b4b4 <_fflush_r+0xc>

0800b4f8 <__swbuf_r>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	460e      	mov	r6, r1
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	4605      	mov	r5, r0
 800b500:	b118      	cbz	r0, 800b50a <__swbuf_r+0x12>
 800b502:	6a03      	ldr	r3, [r0, #32]
 800b504:	b90b      	cbnz	r3, 800b50a <__swbuf_r+0x12>
 800b506:	f7fe f88f 	bl	8009628 <__sinit>
 800b50a:	69a3      	ldr	r3, [r4, #24]
 800b50c:	60a3      	str	r3, [r4, #8]
 800b50e:	89a3      	ldrh	r3, [r4, #12]
 800b510:	071a      	lsls	r2, r3, #28
 800b512:	d525      	bpl.n	800b560 <__swbuf_r+0x68>
 800b514:	6923      	ldr	r3, [r4, #16]
 800b516:	b31b      	cbz	r3, 800b560 <__swbuf_r+0x68>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	6922      	ldr	r2, [r4, #16]
 800b51c:	1a98      	subs	r0, r3, r2
 800b51e:	6963      	ldr	r3, [r4, #20]
 800b520:	b2f6      	uxtb	r6, r6
 800b522:	4283      	cmp	r3, r0
 800b524:	4637      	mov	r7, r6
 800b526:	dc04      	bgt.n	800b532 <__swbuf_r+0x3a>
 800b528:	4621      	mov	r1, r4
 800b52a:	4628      	mov	r0, r5
 800b52c:	f7ff ffbc 	bl	800b4a8 <_fflush_r>
 800b530:	b9e0      	cbnz	r0, 800b56c <__swbuf_r+0x74>
 800b532:	68a3      	ldr	r3, [r4, #8]
 800b534:	3b01      	subs	r3, #1
 800b536:	60a3      	str	r3, [r4, #8]
 800b538:	6823      	ldr	r3, [r4, #0]
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	6022      	str	r2, [r4, #0]
 800b53e:	701e      	strb	r6, [r3, #0]
 800b540:	6962      	ldr	r2, [r4, #20]
 800b542:	1c43      	adds	r3, r0, #1
 800b544:	429a      	cmp	r2, r3
 800b546:	d004      	beq.n	800b552 <__swbuf_r+0x5a>
 800b548:	89a3      	ldrh	r3, [r4, #12]
 800b54a:	07db      	lsls	r3, r3, #31
 800b54c:	d506      	bpl.n	800b55c <__swbuf_r+0x64>
 800b54e:	2e0a      	cmp	r6, #10
 800b550:	d104      	bne.n	800b55c <__swbuf_r+0x64>
 800b552:	4621      	mov	r1, r4
 800b554:	4628      	mov	r0, r5
 800b556:	f7ff ffa7 	bl	800b4a8 <_fflush_r>
 800b55a:	b938      	cbnz	r0, 800b56c <__swbuf_r+0x74>
 800b55c:	4638      	mov	r0, r7
 800b55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b560:	4621      	mov	r1, r4
 800b562:	4628      	mov	r0, r5
 800b564:	f000 f806 	bl	800b574 <__swsetup_r>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d0d5      	beq.n	800b518 <__swbuf_r+0x20>
 800b56c:	f04f 37ff 	mov.w	r7, #4294967295
 800b570:	e7f4      	b.n	800b55c <__swbuf_r+0x64>
	...

0800b574 <__swsetup_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4b2a      	ldr	r3, [pc, #168]	; (800b620 <__swsetup_r+0xac>)
 800b578:	4605      	mov	r5, r0
 800b57a:	6818      	ldr	r0, [r3, #0]
 800b57c:	460c      	mov	r4, r1
 800b57e:	b118      	cbz	r0, 800b588 <__swsetup_r+0x14>
 800b580:	6a03      	ldr	r3, [r0, #32]
 800b582:	b90b      	cbnz	r3, 800b588 <__swsetup_r+0x14>
 800b584:	f7fe f850 	bl	8009628 <__sinit>
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b58e:	0718      	lsls	r0, r3, #28
 800b590:	d422      	bmi.n	800b5d8 <__swsetup_r+0x64>
 800b592:	06d9      	lsls	r1, r3, #27
 800b594:	d407      	bmi.n	800b5a6 <__swsetup_r+0x32>
 800b596:	2309      	movs	r3, #9
 800b598:	602b      	str	r3, [r5, #0]
 800b59a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b59e:	81a3      	strh	r3, [r4, #12]
 800b5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a4:	e034      	b.n	800b610 <__swsetup_r+0x9c>
 800b5a6:	0758      	lsls	r0, r3, #29
 800b5a8:	d512      	bpl.n	800b5d0 <__swsetup_r+0x5c>
 800b5aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ac:	b141      	cbz	r1, 800b5c0 <__swsetup_r+0x4c>
 800b5ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	d002      	beq.n	800b5bc <__swsetup_r+0x48>
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f7fe ffd8 	bl	800a56c <_free_r>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	6363      	str	r3, [r4, #52]	; 0x34
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5c6:	81a3      	strh	r3, [r4, #12]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	6063      	str	r3, [r4, #4]
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	6023      	str	r3, [r4, #0]
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	f043 0308 	orr.w	r3, r3, #8
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	b94b      	cbnz	r3, 800b5f0 <__swsetup_r+0x7c>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e6:	d003      	beq.n	800b5f0 <__swsetup_r+0x7c>
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	f000 f8fe 	bl	800b7ec <__smakebuf_r>
 800b5f0:	89a0      	ldrh	r0, [r4, #12]
 800b5f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5f6:	f010 0301 	ands.w	r3, r0, #1
 800b5fa:	d00a      	beq.n	800b612 <__swsetup_r+0x9e>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	60a3      	str	r3, [r4, #8]
 800b600:	6963      	ldr	r3, [r4, #20]
 800b602:	425b      	negs	r3, r3
 800b604:	61a3      	str	r3, [r4, #24]
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	b943      	cbnz	r3, 800b61c <__swsetup_r+0xa8>
 800b60a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b60e:	d1c4      	bne.n	800b59a <__swsetup_r+0x26>
 800b610:	bd38      	pop	{r3, r4, r5, pc}
 800b612:	0781      	lsls	r1, r0, #30
 800b614:	bf58      	it	pl
 800b616:	6963      	ldrpl	r3, [r4, #20]
 800b618:	60a3      	str	r3, [r4, #8]
 800b61a:	e7f4      	b.n	800b606 <__swsetup_r+0x92>
 800b61c:	2000      	movs	r0, #0
 800b61e:	e7f7      	b.n	800b610 <__swsetup_r+0x9c>
 800b620:	2000006c 	.word	0x2000006c

0800b624 <memmove>:
 800b624:	4288      	cmp	r0, r1
 800b626:	b510      	push	{r4, lr}
 800b628:	eb01 0402 	add.w	r4, r1, r2
 800b62c:	d902      	bls.n	800b634 <memmove+0x10>
 800b62e:	4284      	cmp	r4, r0
 800b630:	4623      	mov	r3, r4
 800b632:	d807      	bhi.n	800b644 <memmove+0x20>
 800b634:	1e43      	subs	r3, r0, #1
 800b636:	42a1      	cmp	r1, r4
 800b638:	d008      	beq.n	800b64c <memmove+0x28>
 800b63a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b63e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b642:	e7f8      	b.n	800b636 <memmove+0x12>
 800b644:	4402      	add	r2, r0
 800b646:	4601      	mov	r1, r0
 800b648:	428a      	cmp	r2, r1
 800b64a:	d100      	bne.n	800b64e <memmove+0x2a>
 800b64c:	bd10      	pop	{r4, pc}
 800b64e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b656:	e7f7      	b.n	800b648 <memmove+0x24>

0800b658 <_sbrk_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d06      	ldr	r5, [pc, #24]	; (800b674 <_sbrk_r+0x1c>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	f7f6 ffa2 	bl	80025ac <_sbrk>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d102      	bne.n	800b672 <_sbrk_r+0x1a>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b103      	cbz	r3, 800b672 <_sbrk_r+0x1a>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	200005e4 	.word	0x200005e4

0800b678 <__assert_func>:
 800b678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b67a:	4614      	mov	r4, r2
 800b67c:	461a      	mov	r2, r3
 800b67e:	4b09      	ldr	r3, [pc, #36]	; (800b6a4 <__assert_func+0x2c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4605      	mov	r5, r0
 800b684:	68d8      	ldr	r0, [r3, #12]
 800b686:	b14c      	cbz	r4, 800b69c <__assert_func+0x24>
 800b688:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <__assert_func+0x30>)
 800b68a:	9100      	str	r1, [sp, #0]
 800b68c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b690:	4906      	ldr	r1, [pc, #24]	; (800b6ac <__assert_func+0x34>)
 800b692:	462b      	mov	r3, r5
 800b694:	f000 f872 	bl	800b77c <fiprintf>
 800b698:	f000 f906 	bl	800b8a8 <abort>
 800b69c:	4b04      	ldr	r3, [pc, #16]	; (800b6b0 <__assert_func+0x38>)
 800b69e:	461c      	mov	r4, r3
 800b6a0:	e7f3      	b.n	800b68a <__assert_func+0x12>
 800b6a2:	bf00      	nop
 800b6a4:	2000006c 	.word	0x2000006c
 800b6a8:	0800bc7f 	.word	0x0800bc7f
 800b6ac:	0800bc8c 	.word	0x0800bc8c
 800b6b0:	0800bcba 	.word	0x0800bcba

0800b6b4 <_calloc_r>:
 800b6b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6b6:	fba1 2402 	umull	r2, r4, r1, r2
 800b6ba:	b94c      	cbnz	r4, 800b6d0 <_calloc_r+0x1c>
 800b6bc:	4611      	mov	r1, r2
 800b6be:	9201      	str	r2, [sp, #4]
 800b6c0:	f7fe ffc8 	bl	800a654 <_malloc_r>
 800b6c4:	9a01      	ldr	r2, [sp, #4]
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	b930      	cbnz	r0, 800b6d8 <_calloc_r+0x24>
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	b003      	add	sp, #12
 800b6ce:	bd30      	pop	{r4, r5, pc}
 800b6d0:	220c      	movs	r2, #12
 800b6d2:	6002      	str	r2, [r0, #0]
 800b6d4:	2500      	movs	r5, #0
 800b6d6:	e7f8      	b.n	800b6ca <_calloc_r+0x16>
 800b6d8:	4621      	mov	r1, r4
 800b6da:	f7fe f83e 	bl	800975a <memset>
 800b6de:	e7f4      	b.n	800b6ca <_calloc_r+0x16>

0800b6e0 <__ascii_mbtowc>:
 800b6e0:	b082      	sub	sp, #8
 800b6e2:	b901      	cbnz	r1, 800b6e6 <__ascii_mbtowc+0x6>
 800b6e4:	a901      	add	r1, sp, #4
 800b6e6:	b142      	cbz	r2, 800b6fa <__ascii_mbtowc+0x1a>
 800b6e8:	b14b      	cbz	r3, 800b6fe <__ascii_mbtowc+0x1e>
 800b6ea:	7813      	ldrb	r3, [r2, #0]
 800b6ec:	600b      	str	r3, [r1, #0]
 800b6ee:	7812      	ldrb	r2, [r2, #0]
 800b6f0:	1e10      	subs	r0, r2, #0
 800b6f2:	bf18      	it	ne
 800b6f4:	2001      	movne	r0, #1
 800b6f6:	b002      	add	sp, #8
 800b6f8:	4770      	bx	lr
 800b6fa:	4610      	mov	r0, r2
 800b6fc:	e7fb      	b.n	800b6f6 <__ascii_mbtowc+0x16>
 800b6fe:	f06f 0001 	mvn.w	r0, #1
 800b702:	e7f8      	b.n	800b6f6 <__ascii_mbtowc+0x16>

0800b704 <_realloc_r>:
 800b704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b708:	4680      	mov	r8, r0
 800b70a:	4614      	mov	r4, r2
 800b70c:	460e      	mov	r6, r1
 800b70e:	b921      	cbnz	r1, 800b71a <_realloc_r+0x16>
 800b710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b714:	4611      	mov	r1, r2
 800b716:	f7fe bf9d 	b.w	800a654 <_malloc_r>
 800b71a:	b92a      	cbnz	r2, 800b728 <_realloc_r+0x24>
 800b71c:	f7fe ff26 	bl	800a56c <_free_r>
 800b720:	4625      	mov	r5, r4
 800b722:	4628      	mov	r0, r5
 800b724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b728:	f000 f8c5 	bl	800b8b6 <_malloc_usable_size_r>
 800b72c:	4284      	cmp	r4, r0
 800b72e:	4607      	mov	r7, r0
 800b730:	d802      	bhi.n	800b738 <_realloc_r+0x34>
 800b732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b736:	d812      	bhi.n	800b75e <_realloc_r+0x5a>
 800b738:	4621      	mov	r1, r4
 800b73a:	4640      	mov	r0, r8
 800b73c:	f7fe ff8a 	bl	800a654 <_malloc_r>
 800b740:	4605      	mov	r5, r0
 800b742:	2800      	cmp	r0, #0
 800b744:	d0ed      	beq.n	800b722 <_realloc_r+0x1e>
 800b746:	42bc      	cmp	r4, r7
 800b748:	4622      	mov	r2, r4
 800b74a:	4631      	mov	r1, r6
 800b74c:	bf28      	it	cs
 800b74e:	463a      	movcs	r2, r7
 800b750:	f7fe f883 	bl	800985a <memcpy>
 800b754:	4631      	mov	r1, r6
 800b756:	4640      	mov	r0, r8
 800b758:	f7fe ff08 	bl	800a56c <_free_r>
 800b75c:	e7e1      	b.n	800b722 <_realloc_r+0x1e>
 800b75e:	4635      	mov	r5, r6
 800b760:	e7df      	b.n	800b722 <_realloc_r+0x1e>

0800b762 <__ascii_wctomb>:
 800b762:	b149      	cbz	r1, 800b778 <__ascii_wctomb+0x16>
 800b764:	2aff      	cmp	r2, #255	; 0xff
 800b766:	bf85      	ittet	hi
 800b768:	238a      	movhi	r3, #138	; 0x8a
 800b76a:	6003      	strhi	r3, [r0, #0]
 800b76c:	700a      	strbls	r2, [r1, #0]
 800b76e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b772:	bf98      	it	ls
 800b774:	2001      	movls	r0, #1
 800b776:	4770      	bx	lr
 800b778:	4608      	mov	r0, r1
 800b77a:	4770      	bx	lr

0800b77c <fiprintf>:
 800b77c:	b40e      	push	{r1, r2, r3}
 800b77e:	b503      	push	{r0, r1, lr}
 800b780:	4601      	mov	r1, r0
 800b782:	ab03      	add	r3, sp, #12
 800b784:	4805      	ldr	r0, [pc, #20]	; (800b79c <fiprintf+0x20>)
 800b786:	f853 2b04 	ldr.w	r2, [r3], #4
 800b78a:	6800      	ldr	r0, [r0, #0]
 800b78c:	9301      	str	r3, [sp, #4]
 800b78e:	f7ff fceb 	bl	800b168 <_vfiprintf_r>
 800b792:	b002      	add	sp, #8
 800b794:	f85d eb04 	ldr.w	lr, [sp], #4
 800b798:	b003      	add	sp, #12
 800b79a:	4770      	bx	lr
 800b79c:	2000006c 	.word	0x2000006c

0800b7a0 <__swhatbuf_r>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a8:	2900      	cmp	r1, #0
 800b7aa:	b096      	sub	sp, #88	; 0x58
 800b7ac:	4615      	mov	r5, r2
 800b7ae:	461e      	mov	r6, r3
 800b7b0:	da0d      	bge.n	800b7ce <__swhatbuf_r+0x2e>
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b7b8:	f04f 0100 	mov.w	r1, #0
 800b7bc:	bf0c      	ite	eq
 800b7be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b7c2:	2340      	movne	r3, #64	; 0x40
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	6031      	str	r1, [r6, #0]
 800b7c8:	602b      	str	r3, [r5, #0]
 800b7ca:	b016      	add	sp, #88	; 0x58
 800b7cc:	bd70      	pop	{r4, r5, r6, pc}
 800b7ce:	466a      	mov	r2, sp
 800b7d0:	f000 f848 	bl	800b864 <_fstat_r>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	dbec      	blt.n	800b7b2 <__swhatbuf_r+0x12>
 800b7d8:	9901      	ldr	r1, [sp, #4]
 800b7da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b7de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b7e2:	4259      	negs	r1, r3
 800b7e4:	4159      	adcs	r1, r3
 800b7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ea:	e7eb      	b.n	800b7c4 <__swhatbuf_r+0x24>

0800b7ec <__smakebuf_r>:
 800b7ec:	898b      	ldrh	r3, [r1, #12]
 800b7ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7f0:	079d      	lsls	r5, r3, #30
 800b7f2:	4606      	mov	r6, r0
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	d507      	bpl.n	800b808 <__smakebuf_r+0x1c>
 800b7f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	6123      	str	r3, [r4, #16]
 800b800:	2301      	movs	r3, #1
 800b802:	6163      	str	r3, [r4, #20]
 800b804:	b002      	add	sp, #8
 800b806:	bd70      	pop	{r4, r5, r6, pc}
 800b808:	ab01      	add	r3, sp, #4
 800b80a:	466a      	mov	r2, sp
 800b80c:	f7ff ffc8 	bl	800b7a0 <__swhatbuf_r>
 800b810:	9900      	ldr	r1, [sp, #0]
 800b812:	4605      	mov	r5, r0
 800b814:	4630      	mov	r0, r6
 800b816:	f7fe ff1d 	bl	800a654 <_malloc_r>
 800b81a:	b948      	cbnz	r0, 800b830 <__smakebuf_r+0x44>
 800b81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b820:	059a      	lsls	r2, r3, #22
 800b822:	d4ef      	bmi.n	800b804 <__smakebuf_r+0x18>
 800b824:	f023 0303 	bic.w	r3, r3, #3
 800b828:	f043 0302 	orr.w	r3, r3, #2
 800b82c:	81a3      	strh	r3, [r4, #12]
 800b82e:	e7e3      	b.n	800b7f8 <__smakebuf_r+0xc>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	6020      	str	r0, [r4, #0]
 800b834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b838:	81a3      	strh	r3, [r4, #12]
 800b83a:	9b00      	ldr	r3, [sp, #0]
 800b83c:	6163      	str	r3, [r4, #20]
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	6120      	str	r0, [r4, #16]
 800b842:	b15b      	cbz	r3, 800b85c <__smakebuf_r+0x70>
 800b844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b848:	4630      	mov	r0, r6
 800b84a:	f000 f81d 	bl	800b888 <_isatty_r>
 800b84e:	b128      	cbz	r0, 800b85c <__smakebuf_r+0x70>
 800b850:	89a3      	ldrh	r3, [r4, #12]
 800b852:	f023 0303 	bic.w	r3, r3, #3
 800b856:	f043 0301 	orr.w	r3, r3, #1
 800b85a:	81a3      	strh	r3, [r4, #12]
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	431d      	orrs	r5, r3
 800b860:	81a5      	strh	r5, [r4, #12]
 800b862:	e7cf      	b.n	800b804 <__smakebuf_r+0x18>

0800b864 <_fstat_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	4d07      	ldr	r5, [pc, #28]	; (800b884 <_fstat_r+0x20>)
 800b868:	2300      	movs	r3, #0
 800b86a:	4604      	mov	r4, r0
 800b86c:	4608      	mov	r0, r1
 800b86e:	4611      	mov	r1, r2
 800b870:	602b      	str	r3, [r5, #0]
 800b872:	f7f6 fe72 	bl	800255a <_fstat>
 800b876:	1c43      	adds	r3, r0, #1
 800b878:	d102      	bne.n	800b880 <_fstat_r+0x1c>
 800b87a:	682b      	ldr	r3, [r5, #0]
 800b87c:	b103      	cbz	r3, 800b880 <_fstat_r+0x1c>
 800b87e:	6023      	str	r3, [r4, #0]
 800b880:	bd38      	pop	{r3, r4, r5, pc}
 800b882:	bf00      	nop
 800b884:	200005e4 	.word	0x200005e4

0800b888 <_isatty_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4d06      	ldr	r5, [pc, #24]	; (800b8a4 <_isatty_r+0x1c>)
 800b88c:	2300      	movs	r3, #0
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	602b      	str	r3, [r5, #0]
 800b894:	f7f6 fe71 	bl	800257a <_isatty>
 800b898:	1c43      	adds	r3, r0, #1
 800b89a:	d102      	bne.n	800b8a2 <_isatty_r+0x1a>
 800b89c:	682b      	ldr	r3, [r5, #0]
 800b89e:	b103      	cbz	r3, 800b8a2 <_isatty_r+0x1a>
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	bd38      	pop	{r3, r4, r5, pc}
 800b8a4:	200005e4 	.word	0x200005e4

0800b8a8 <abort>:
 800b8a8:	b508      	push	{r3, lr}
 800b8aa:	2006      	movs	r0, #6
 800b8ac:	f000 f834 	bl	800b918 <raise>
 800b8b0:	2001      	movs	r0, #1
 800b8b2:	f7f6 fe03 	bl	80024bc <_exit>

0800b8b6 <_malloc_usable_size_r>:
 800b8b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ba:	1f18      	subs	r0, r3, #4
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	bfbc      	itt	lt
 800b8c0:	580b      	ldrlt	r3, [r1, r0]
 800b8c2:	18c0      	addlt	r0, r0, r3
 800b8c4:	4770      	bx	lr

0800b8c6 <_raise_r>:
 800b8c6:	291f      	cmp	r1, #31
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	460d      	mov	r5, r1
 800b8ce:	d904      	bls.n	800b8da <_raise_r+0x14>
 800b8d0:	2316      	movs	r3, #22
 800b8d2:	6003      	str	r3, [r0, #0]
 800b8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d8:	bd38      	pop	{r3, r4, r5, pc}
 800b8da:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b8dc:	b112      	cbz	r2, 800b8e4 <_raise_r+0x1e>
 800b8de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8e2:	b94b      	cbnz	r3, 800b8f8 <_raise_r+0x32>
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f000 f831 	bl	800b94c <_getpid_r>
 800b8ea:	462a      	mov	r2, r5
 800b8ec:	4601      	mov	r1, r0
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8f4:	f000 b818 	b.w	800b928 <_kill_r>
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d00a      	beq.n	800b912 <_raise_r+0x4c>
 800b8fc:	1c59      	adds	r1, r3, #1
 800b8fe:	d103      	bne.n	800b908 <_raise_r+0x42>
 800b900:	2316      	movs	r3, #22
 800b902:	6003      	str	r3, [r0, #0]
 800b904:	2001      	movs	r0, #1
 800b906:	e7e7      	b.n	800b8d8 <_raise_r+0x12>
 800b908:	2400      	movs	r4, #0
 800b90a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b90e:	4628      	mov	r0, r5
 800b910:	4798      	blx	r3
 800b912:	2000      	movs	r0, #0
 800b914:	e7e0      	b.n	800b8d8 <_raise_r+0x12>
	...

0800b918 <raise>:
 800b918:	4b02      	ldr	r3, [pc, #8]	; (800b924 <raise+0xc>)
 800b91a:	4601      	mov	r1, r0
 800b91c:	6818      	ldr	r0, [r3, #0]
 800b91e:	f7ff bfd2 	b.w	800b8c6 <_raise_r>
 800b922:	bf00      	nop
 800b924:	2000006c 	.word	0x2000006c

0800b928 <_kill_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d07      	ldr	r5, [pc, #28]	; (800b948 <_kill_r+0x20>)
 800b92c:	2300      	movs	r3, #0
 800b92e:	4604      	mov	r4, r0
 800b930:	4608      	mov	r0, r1
 800b932:	4611      	mov	r1, r2
 800b934:	602b      	str	r3, [r5, #0]
 800b936:	f7f6 fdb1 	bl	800249c <_kill>
 800b93a:	1c43      	adds	r3, r0, #1
 800b93c:	d102      	bne.n	800b944 <_kill_r+0x1c>
 800b93e:	682b      	ldr	r3, [r5, #0]
 800b940:	b103      	cbz	r3, 800b944 <_kill_r+0x1c>
 800b942:	6023      	str	r3, [r4, #0]
 800b944:	bd38      	pop	{r3, r4, r5, pc}
 800b946:	bf00      	nop
 800b948:	200005e4 	.word	0x200005e4

0800b94c <_getpid_r>:
 800b94c:	f7f6 bd9e 	b.w	800248c <_getpid>

0800b950 <_init>:
 800b950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b952:	bf00      	nop
 800b954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b956:	bc08      	pop	{r3}
 800b958:	469e      	mov	lr, r3
 800b95a:	4770      	bx	lr

0800b95c <_fini>:
 800b95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95e:	bf00      	nop
 800b960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b962:	bc08      	pop	{r3}
 800b964:	469e      	mov	lr, r3
 800b966:	4770      	bx	lr
