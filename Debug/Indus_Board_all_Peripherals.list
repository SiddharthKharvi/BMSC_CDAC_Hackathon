
Indus_Board_all_Peripherals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b18  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08009cf8  08009cf8  00019cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0ac  0800a0ac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b4  0800a0b4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b4  0800a0b4  0001a0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0b8  0800a0b8  0001a0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001d4  0800a290  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800a290  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dddb  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036be  00000000  00000000  0003e022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  000416e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000152a  00000000  00000000  000431f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000045a5  00000000  00000000  00044722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9ee  00000000  00000000  00048cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4a03  00000000  00000000  000686b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000085a8  00000000  00000000  0014d0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00155660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009ce0 	.word	0x08009ce0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08009ce0 	.word	0x08009ce0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <__io_putchar>:
 * @brief //Modified Function Prototype for Printf
 * @param none
 * @return None
 **************************************************************************/
PUTCHAR_PROTOTYPE
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f02:	2201      	movs	r2, #1
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <__io_putchar+0x20>)
 8000f06:	f005 f827 	bl	8005f58 <HAL_UART_Transmit>
  return ch;
 8000f0a:	687b      	ldr	r3, [r7, #4]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200003b8 	.word	0x200003b8

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1c:	f000 ff35 	bl	8001d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f20:	f000 f811 	bl	8000f46 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f24:	f000 faf4 	bl	8001510 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f28:	f000 f84e 	bl	8000fc8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f2c:	f000 f8c4 	bl	80010b8 <MX_DAC1_Init>
  MX_I2C2_Init();
 8000f30:	f000 f8fc 	bl	800112c <MX_I2C2_Init>
  MX_SPI2_Init();
 8000f34:	f000 f93a 	bl	80011ac <MX_SPI2_Init>
  MX_TIM1_Init();
 8000f38:	f000 f976 	bl	8001228 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000f3c:	f000 fa24 	bl	8001388 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000f40:	f000 fa9a 	bl	8001478 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <main+0x2c>

08000f46 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b094      	sub	sp, #80	; 0x50
 8000f4a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	2238      	movs	r2, #56	; 0x38
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 ff70 	bl	8007e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6c:	f002 fe3c 	bl	8003be8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f70:	2302      	movs	r3, #2
 8000f72:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7a:	2340      	movs	r3, #64	; 0x40
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fee2 	bl	8003d50 <HAL_RCC_OscConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f92:	f000 fb8b 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 f9e6 	bl	8004380 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000fba:	f000 fb77 	bl	80016ac <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3750      	adds	r7, #80	; 0x50
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2220      	movs	r2, #32
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f006 ff2a 	bl	8007e3a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fe6:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8000fe8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8000ff0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ff4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <MX_ADC1_Init+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001010:	2204      	movs	r2, #4
 8001012:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001014:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001016:	2200      	movs	r2, #0
 8001018:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <MX_ADC1_Init+0xe8>)
 800101c:	2200      	movs	r2, #0
 800101e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001022:	2201      	movs	r2, #1
 8001024:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_ADC1_Init+0xe8>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001044:	2200      	movs	r2, #0
 8001046:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_ADC1_Init+0xe8>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001050:	4817      	ldr	r0, [pc, #92]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001052:	f001 f907 	bl	8002264 <HAL_ADC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800105c:	f000 fb26 	bl	80016ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <MX_ADC1_Init+0xe8>)
 800106c:	f001 fe9a 	bl	8002da4 <HAL_ADCEx_MultiModeConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001076:	f000 fb19 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_ADC1_Init+0xec>)
 800107c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	2306      	movs	r3, #6
 8001080:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001086:	237f      	movs	r3, #127	; 0x7f
 8001088:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108a:	2304      	movs	r3, #4
 800108c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <MX_ADC1_Init+0xe8>)
 8001098:	f001 fa6e 	bl	8002578 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80010a2:	f000 fb03 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	3730      	adds	r7, #48	; 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001f0 	.word	0x200001f0
 80010b4:	04300002 	.word	0x04300002

080010b8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2230      	movs	r2, #48	; 0x30
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f006 feb8 	bl	8007e3a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_DAC1_Init+0x6c>)
 80010cc:	4a16      	ldr	r2, [pc, #88]	; (8001128 <MX_DAC1_Init+0x70>)
 80010ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010d0:	4814      	ldr	r0, [pc, #80]	; (8001124 <MX_DAC1_Init+0x6c>)
 80010d2:	f002 f81a 	bl	800310a <HAL_DAC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80010dc:	f000 fae6 	bl	80016ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80010e0:	2302      	movs	r3, #2
 80010e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_DAC1_Init+0x6c>)
 800110c:	f002 f820 	bl	8003150 <HAL_DAC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001116:	f000 fac9 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000025c 	.word	0x2000025c
 8001128:	50000800 	.word	0x50000800

0800112c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <MX_I2C2_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <MX_I2C2_Init+0x7c>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_I2C2_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001144:	2201      	movs	r2, #1
 8001146:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_I2C2_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C2_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001166:	480e      	ldr	r0, [pc, #56]	; (80011a0 <MX_I2C2_Init+0x74>)
 8001168:	f002 fc17 	bl	800399a <HAL_I2C_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001172:	f000 fa9b 	bl	80016ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_I2C2_Init+0x74>)
 800117a:	f002 fc9d 	bl	8003ab8 <HAL_I2CEx_ConfigAnalogFilter>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001184:	f000 fa92 	bl	80016ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001188:	2100      	movs	r1, #0
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_I2C2_Init+0x74>)
 800118c:	f002 fcdf 	bl	8003b4e <HAL_I2CEx_ConfigDigitalFilter>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 fa89 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000270 	.word	0x20000270
 80011a4:	40005800 	.word	0x40005800
 80011a8:	00303d5b 	.word	0x00303d5b

080011ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_SPI2_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_SPI2_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_SPI2_Init+0x74>)
 80011b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_SPI2_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_SPI2_Init+0x74>)
 80011c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_SPI2_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_SPI2_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_SPI2_Init+0x74>)
 80011da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_SPI2_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_SPI2_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI2_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_SPI2_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI2_Init+0x74>)
 80011fa:	2207      	movs	r2, #7
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_SPI2_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI2_Init+0x74>)
 8001206:	2208      	movs	r2, #8
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_SPI2_Init+0x74>)
 800120c:	f003 fcc4 	bl	8004b98 <HAL_SPI_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 fa49 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200002bc 	.word	0x200002bc
 8001224:	40003800 	.word	0x40003800

08001228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b09c      	sub	sp, #112	; 0x70
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001248:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2234      	movs	r2, #52	; 0x34
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f006 fde9 	bl	8007e3a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001268:	4b45      	ldr	r3, [pc, #276]	; (8001380 <MX_TIM1_Init+0x158>)
 800126a:	4a46      	ldr	r2, [pc, #280]	; (8001384 <MX_TIM1_Init+0x15c>)
 800126c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800126e:	4b44      	ldr	r3, [pc, #272]	; (8001380 <MX_TIM1_Init+0x158>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b42      	ldr	r3, [pc, #264]	; (8001380 <MX_TIM1_Init+0x158>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <MX_TIM1_Init+0x158>)
 800127c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001280:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <MX_TIM1_Init+0x158>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <MX_TIM1_Init+0x158>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <MX_TIM1_Init+0x158>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001294:	483a      	ldr	r0, [pc, #232]	; (8001380 <MX_TIM1_Init+0x158>)
 8001296:	f003 fd2a 	bl	8004cee <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012a0:	f000 fa04 	bl	80016ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012ae:	4619      	mov	r1, r3
 80012b0:	4833      	ldr	r0, [pc, #204]	; (8001380 <MX_TIM1_Init+0x158>)
 80012b2:	f003 ffc3 	bl	800523c <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012bc:	f000 f9f6 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c0:	482f      	ldr	r0, [pc, #188]	; (8001380 <MX_TIM1_Init+0x158>)
 80012c2:	f003 fdcc 	bl	8004e5e <HAL_TIM_PWM_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012cc:	f000 f9ee 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e0:	4619      	mov	r1, r3
 80012e2:	4827      	ldr	r0, [pc, #156]	; (8001380 <MX_TIM1_Init+0x158>)
 80012e4:	f004 fcc6 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012ee:	f000 f9dd 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f2:	2360      	movs	r3, #96	; 0x60
 80012f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800130e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001312:	2204      	movs	r2, #4
 8001314:	4619      	mov	r1, r3
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <MX_TIM1_Init+0x158>)
 8001318:	f003 fe7c 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001322:	f000 f9c3 	bl	80016ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800133a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800134c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_TIM1_Init+0x158>)
 8001364:	f004 fd08 	bl	8005d78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800136e:	f000 f99d 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001372:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_TIM1_Init+0x158>)
 8001374:	f000 fb26 	bl	80019c4 <HAL_TIM_MspPostInit>

}
 8001378:	bf00      	nop
 800137a:	3770      	adds	r7, #112	; 0x70
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000320 	.word	0x20000320
 8001384:	40012c00 	.word	0x40012c00

08001388 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b094      	sub	sp, #80	; 0x50
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800138e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a2:	463b      	mov	r3, r7
 80013a4:	2234      	movs	r2, #52	; 0x34
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f006 fd46 	bl	8007e3a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <MX_TIM16_Init+0xe8>)
 80013b0:	4a30      	ldr	r2, [pc, #192]	; (8001474 <MX_TIM16_Init+0xec>)
 80013b2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 37000;
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <MX_TIM16_Init+0xe8>)
 80013b6:	f249 0288 	movw	r2, #37000	; 0x9088
 80013ba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <MX_TIM16_Init+0xe8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80013c2:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <MX_TIM16_Init+0xe8>)
 80013c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <MX_TIM16_Init+0xe8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013d0:	4b27      	ldr	r3, [pc, #156]	; (8001470 <MX_TIM16_Init+0xe8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <MX_TIM16_Init+0xe8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013dc:	4824      	ldr	r0, [pc, #144]	; (8001470 <MX_TIM16_Init+0xe8>)
 80013de:	f003 fc86 	bl	8004cee <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 80013e8:	f000 f960 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80013ec:	4820      	ldr	r0, [pc, #128]	; (8001470 <MX_TIM16_Init+0xe8>)
 80013ee:	f003 fcd5 	bl	8004d9c <HAL_TIM_OC_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 80013f8:	f000 f958 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80013fc:	2330      	movs	r3, #48	; 0x30
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001404:	2300      	movs	r3, #0
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001408:	2300      	movs	r3, #0
 800140a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001418:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800141c:	2200      	movs	r2, #0
 800141e:	4619      	mov	r1, r3
 8001420:	4813      	ldr	r0, [pc, #76]	; (8001470 <MX_TIM16_Init+0xe8>)
 8001422:	f003 fd7d 	bl	8004f20 <HAL_TIM_OC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 800142c:	f000 f93e 	bl	80016ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001448:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_TIM16_Init+0xe8>)
 8001458:	f004 fc8e 	bl	8005d78 <HAL_TIMEx_ConfigBreakDeadTime>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8001462:	f000 f923 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3750      	adds	r7, #80	; 0x50
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000036c 	.word	0x2000036c
 8001474:	40014400 	.word	0x40014400

08001478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <MX_USART1_UART_Init+0x90>)
 800147e:	4a23      	ldr	r2, [pc, #140]	; (800150c <MX_USART1_UART_Init+0x94>)
 8001480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_USART1_UART_Init+0x90>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_USART1_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <MX_USART1_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_USART1_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_USART1_UART_Init+0x90>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_USART1_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_USART1_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <MX_USART1_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_USART1_UART_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_USART1_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c0:	4811      	ldr	r0, [pc, #68]	; (8001508 <MX_USART1_UART_Init+0x90>)
 80014c2:	f004 fcf9 	bl	8005eb8 <HAL_UART_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014cc:	f000 f8ee 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_USART1_UART_Init+0x90>)
 80014d4:	f005 fe8d 	bl	80071f2 <HAL_UARTEx_SetTxFifoThreshold>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014de:	f000 f8e5 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4808      	ldr	r0, [pc, #32]	; (8001508 <MX_USART1_UART_Init+0x90>)
 80014e6:	f005 fec2 	bl	800726e <HAL_UARTEx_SetRxFifoThreshold>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014f0:	f000 f8dc 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_USART1_UART_Init+0x90>)
 80014f6:	f005 fe43 	bl	8007180 <HAL_UARTEx_DisableFifoMode>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001500:	f000 f8d4 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200003b8 	.word	0x200003b8
 800150c:	40013800 	.word	0x40013800

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b5d      	ldr	r3, [pc, #372]	; (800169c <MX_GPIO_Init+0x18c>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a5c      	ldr	r2, [pc, #368]	; (800169c <MX_GPIO_Init+0x18c>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b5a      	ldr	r3, [pc, #360]	; (800169c <MX_GPIO_Init+0x18c>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b57      	ldr	r3, [pc, #348]	; (800169c <MX_GPIO_Init+0x18c>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a56      	ldr	r2, [pc, #344]	; (800169c <MX_GPIO_Init+0x18c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b54      	ldr	r3, [pc, #336]	; (800169c <MX_GPIO_Init+0x18c>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b51      	ldr	r3, [pc, #324]	; (800169c <MX_GPIO_Init+0x18c>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a50      	ldr	r2, [pc, #320]	; (800169c <MX_GPIO_Init+0x18c>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b4e      	ldr	r3, [pc, #312]	; (800169c <MX_GPIO_Init+0x18c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156e:	4b4b      	ldr	r3, [pc, #300]	; (800169c <MX_GPIO_Init+0x18c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a4a      	ldr	r2, [pc, #296]	; (800169c <MX_GPIO_Init+0x18c>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b48      	ldr	r3, [pc, #288]	; (800169c <MX_GPIO_Init+0x18c>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001586:	4b45      	ldr	r3, [pc, #276]	; (800169c <MX_GPIO_Init+0x18c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a44      	ldr	r2, [pc, #272]	; (800169c <MX_GPIO_Init+0x18c>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b42      	ldr	r3, [pc, #264]	; (800169c <MX_GPIO_Init+0x18c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 80015a4:	483e      	ldr	r0, [pc, #248]	; (80016a0 <MX_GPIO_Init+0x190>)
 80015a6:	f002 f9bd 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2106      	movs	r1, #6
 80015ae:	483d      	ldr	r0, [pc, #244]	; (80016a4 <MX_GPIO_Init+0x194>)
 80015b0:	f002 f9b8 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80015ba:	483b      	ldr	r0, [pc, #236]	; (80016a8 <MX_GPIO_Init+0x198>)
 80015bc:	f002 f9b2 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 80015c0:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4831      	ldr	r0, [pc, #196]	; (80016a0 <MX_GPIO_Init+0x190>)
 80015da:	f002 f821 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015de:	230c      	movs	r3, #12
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	482b      	ldr	r0, [pc, #172]	; (80016a0 <MX_GPIO_Init+0x190>)
 80015f4:	f002 f814 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80015f8:	2306      	movs	r3, #6
 80015fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4825      	ldr	r0, [pc, #148]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001610:	f002 f806 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001614:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	481e      	ldr	r0, [pc, #120]	; (80016a8 <MX_GPIO_Init+0x198>)
 800162e:	f001 fff7 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001632:	2340      	movs	r3, #64	; 0x40
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	4817      	ldr	r0, [pc, #92]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001646:	f001 ffeb 	bl	8003620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800164e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4811      	ldr	r0, [pc, #68]	; (80016a4 <MX_GPIO_Init+0x194>)
 8001660:	f001 ffde 	bl	8003620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2008      	movs	r0, #8
 800166a:	f001 fd1a 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800166e:	2008      	movs	r0, #8
 8001670:	f001 fd31 	bl	80030d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2009      	movs	r0, #9
 800167a:	f001 fd12 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800167e:	2009      	movs	r0, #9
 8001680:	f001 fd29 	bl	80030d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2017      	movs	r0, #23
 800168a:	f001 fd0a 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800168e:	2017      	movs	r0, #23
 8001690:	f001 fd21 	bl	80030d6 <HAL_NVIC_EnableIRQ>

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	48000800 	.word	0x48000800
 80016a4:	48000400 	.word	0x48000400
 80016a8:	48000c00 	.word	0x48000c00

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_MspInit+0x44>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_MspInit+0x44>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_MspInit+0x44>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_MspInit+0x44>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_MspInit+0x44>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_MspInit+0x44>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016ee:	f002 fb1f 	bl	8003d30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b09a      	sub	sp, #104	; 0x68
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	2244      	movs	r2, #68	; 0x44
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f006 fb8a 	bl	8007e3a <memset>
  if(hadc->Instance==ADC1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800172e:	d134      	bne.n	800179a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001730:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001734:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001736:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800173a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	4618      	mov	r0, r3
 8001742:	f003 f839 	bl	80047b8 <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800174c:	f7ff ffae 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_ADC_MspInit+0xa4>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <HAL_ADC_MspInit+0xa4>)
 8001756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800175a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_ADC_MspInit+0xa4>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_ADC_MspInit+0xa4>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_ADC_MspInit+0xa4>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_ADC_MspInit+0xa4>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001780:	2303      	movs	r3, #3
 8001782:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	2303      	movs	r3, #3
 8001786:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f001 ff43 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3768      	adds	r7, #104	; 0x68
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a15      	ldr	r2, [pc, #84]	; (800181c <HAL_DAC_MspInit+0x74>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d124      	bne.n	8001814 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_DAC_MspInit+0x78>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_DAC_MspInit+0x78>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_DAC_MspInit+0x78>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_DAC_MspInit+0x78>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_DAC_MspInit+0x78>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_DAC_MspInit+0x78>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017fa:	2310      	movs	r3, #16
 80017fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fe:	2303      	movs	r3, #3
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f001 ff06 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	50000800 	.word	0x50000800
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b09a      	sub	sp, #104	; 0x68
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	2244      	movs	r2, #68	; 0x44
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f006 faf8 	bl	8007e3a <memset>
  if(hi2c->Instance==I2C2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_I2C_MspInit+0xa8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d137      	bne.n	80018c4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	4618      	mov	r0, r3
 8001862:	f002 ffa9 	bl	80047b8 <HAL_RCCEx_PeriphCLKConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800186c:	f7ff ff1e 	bl	80016ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_I2C_MspInit+0xac>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_I2C_MspInit+0xac>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_I2C_MspInit+0xac>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001888:	f44f 7340 	mov.w	r3, #768	; 0x300
 800188c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188e:	2312      	movs	r3, #18
 8001890:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800189a:	2304      	movs	r3, #4
 800189c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a8:	f001 feba 	bl	8003620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_I2C_MspInit+0xac>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_I2C_MspInit+0xac>)
 80018b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b6:	6593      	str	r3, [r2, #88]	; 0x58
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_I2C_MspInit+0xac>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	3768      	adds	r7, #104	; 0x68
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40005800 	.word	0x40005800
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_SPI_MspInit+0x7c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d128      	bne.n	8001948 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_SPI_MspInit+0x80>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	4a16      	ldr	r2, [pc, #88]	; (8001954 <HAL_SPI_MspInit+0x80>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6593      	str	r3, [r2, #88]	; 0x58
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_SPI_MspInit+0x80>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_SPI_MspInit+0x80>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_SPI_MspInit+0x80>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_SPI_MspInit+0x80>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001926:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001938:	2305      	movs	r3, #5
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_SPI_MspInit+0x84>)
 8001944:	f001 fe6c 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40003800 	.word	0x40003800
 8001954:	40021000 	.word	0x40021000
 8001958:	48000400 	.word	0x48000400

0800195c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <HAL_TIM_Base_MspInit+0x5c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10c      	bne.n	8001988 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_TIM_Base_MspInit+0x60>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <HAL_TIM_Base_MspInit+0x60>)
 8001974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001978:	6613      	str	r3, [r2, #96]	; 0x60
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_TIM_Base_MspInit+0x60>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001986:	e010      	b.n	80019aa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <HAL_TIM_Base_MspInit+0x64>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10b      	bne.n	80019aa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_TIM_Base_MspInit+0x60>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	4a09      	ldr	r2, [pc, #36]	; (80019bc <HAL_TIM_Base_MspInit+0x60>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	6613      	str	r3, [r2, #96]	; 0x60
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <HAL_TIM_Base_MspInit+0x60>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40014400 	.word	0x40014400

080019c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_TIM_MspPostInit+0x64>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d11c      	bne.n	8001a20 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_TIM_MspPostInit+0x68>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <HAL_TIM_MspPostInit+0x68>)
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_TIM_MspPostInit+0x68>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_TIM_MspPostInit+0x6c>)
 8001a1c:	f001 fe00 	bl	8003620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	48001000 	.word	0x48001000

08001a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b09a      	sub	sp, #104	; 0x68
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	2244      	movs	r2, #68	; 0x44
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f006 f9f0 	bl	8007e3a <memset>
  if(huart->Instance==USART1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <HAL_UART_MspInit+0xb4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d13d      	bne.n	8001ae0 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fea1 	bl	80047b8 <HAL_RCCEx_PeriphCLKConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a7c:	f7ff fe16 	bl	80016ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_UART_MspInit+0xb8>)
 8001a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a84:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_UART_MspInit+0xb8>)
 8001a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_UART_MspInit+0xb8>)
 8001a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a98:	4b14      	ldr	r3, [pc, #80]	; (8001aec <HAL_UART_MspInit+0xb8>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <HAL_UART_MspInit+0xb8>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_UART_MspInit+0xb8>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ab0:	2330      	movs	r3, #48	; 0x30
 8001ab2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4809      	ldr	r0, [pc, #36]	; (8001af0 <HAL_UART_MspInit+0xbc>)
 8001acc:	f001 fda8 	bl	8003620 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2025      	movs	r0, #37	; 0x25
 8001ad6:	f001 fae4 	bl	80030a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ada:	2025      	movs	r0, #37	; 0x25
 8001adc:	f001 fafb 	bl	80030d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3768      	adds	r7, #104	; 0x68
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40021000 	.word	0x40021000
 8001af0:	48000800 	.word	0x48000800

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f976 	bl	8001e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b4c:	2004      	movs	r0, #4
 8001b4e:	f001 ff01 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b5a:	2008      	movs	r0, #8
 8001b5c:	f001 fefa 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b68:	2080      	movs	r0, #128	; 0x80
 8001b6a:	f001 fef3 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <USART1_IRQHandler+0x10>)
 8001b7a:	f004 fa83 	bl	8006084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200003b8 	.word	0x200003b8

08001b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_kill>:

int _kill(int pid, int sig)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba2:	f006 f99d 	bl	8007ee0 <__errno>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2216      	movs	r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_exit>:

void _exit (int status)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffe7 	bl	8001b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bca:	e7fe      	b.n	8001bca <_exit+0x12>

08001bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e00a      	b.n	8001bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bde:	f3af 8000 	nop.w
 8001be2:	4601      	mov	r1, r0
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	b2ca      	uxtb	r2, r1
 8001bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf0      	blt.n	8001bde <_read+0x12>
  }

  return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e009      	b.n	8001c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f967 	bl	8000ef4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf1      	blt.n	8001c18 <_write+0x12>
  }
  return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_close>:

int _close(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c66:	605a      	str	r2, [r3, #4]
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_isatty>:

int _isatty(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f006 f902 	bl	8007ee0 <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20008000 	.word	0x20008000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	20000448 	.word	0x20000448
 8001d10:	200005a0 	.word	0x200005a0

08001d14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <SystemInit+0x20>)
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <SystemInit+0x20>)
 8001d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3e:	490e      	ldr	r1, [pc, #56]	; (8001d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d40:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <LoopForever+0xe>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d44:	e002      	b.n	8001d4c <LoopCopyDataInit>

08001d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4a:	3304      	adds	r3, #4

08001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d50:	d3f9      	bcc.n	8001d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d54:	4c0b      	ldr	r4, [pc, #44]	; (8001d84 <LoopForever+0x16>)
  movs r3, #0
 8001d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d58:	e001      	b.n	8001d5e <LoopFillZerobss>

08001d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d5c:	3204      	adds	r2, #4

08001d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d60:	d3fb      	bcc.n	8001d5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d62:	f7ff ffd7 	bl	8001d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d66:	f006 f8c1 	bl	8007eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6a:	f7ff f8d5 	bl	8000f18 <main>

08001d6e <LoopForever>:

LoopForever:
    b LoopForever
 8001d6e:	e7fe      	b.n	8001d6e <LoopForever>
  ldr   r0, =_estack
 8001d70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d78:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d7c:	0800a0bc 	.word	0x0800a0bc
  ldr r2, =_sbss
 8001d80:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d84:	2000059c 	.word	0x2000059c

08001d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC1_2_IRQHandler>

08001d8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f001 f979 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f000 f80e 	bl	8001dbc <HAL_InitTick>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	e001      	b.n	8001db0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dac:	f7ff fc84 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db0:	79fb      	ldrb	r3, [r7, #7]

}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_InitTick+0x68>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d022      	beq.n	8001e16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_InitTick+0x6c>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_InitTick+0x68>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 f984 	bl	80030f2 <HAL_SYSTICK_Config>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10f      	bne.n	8001e10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	d809      	bhi.n	8001e0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df6:	2200      	movs	r2, #0
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfe:	f001 f950 	bl	80030a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_InitTick+0x70>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e007      	b.n	8001e1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	e004      	b.n	8001e1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e001      	b.n	8001e1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000008 	.word	0x20000008
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000004 	.word	0x20000004

08001e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_IncTick+0x1c>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_IncTick+0x20>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	4a03      	ldr	r2, [pc, #12]	; (8001e4c <HAL_IncTick+0x1c>)
 8001e40:	6013      	str	r3, [r2, #0]
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	2000044c 	.word	0x2000044c
 8001e50:	20000008 	.word	0x20000008

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	2000044c 	.word	0x2000044c

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff ffee 	bl	8001e54 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d004      	beq.n	8001e90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_Delay+0x40>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e90:	bf00      	nop
 8001e92:	f7ff ffdf 	bl	8001e54 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d8f7      	bhi.n	8001e92 <HAL_Delay+0x26>
  {
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000008 	.word	0x20000008

08001eb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	609a      	str	r2, [r3, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3360      	adds	r3, #96	; 0x60
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <LL_ADC_SetOffset+0x44>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	03fff000 	.word	0x03fff000

08001f60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3360      	adds	r3, #96	; 0x60
 8001f6e:	461a      	mov	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3360      	adds	r3, #96	; 0x60
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3360      	adds	r3, #96	; 0x60
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3360      	adds	r3, #96	; 0x60
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	431a      	orrs	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	615a      	str	r2, [r3, #20]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3330      	adds	r3, #48	; 0x30
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	4413      	add	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	211f      	movs	r1, #31
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0e9b      	lsrs	r3, r3, #26
 800208c:	f003 011f 	and.w	r1, r3, #31
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	431a      	orrs	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3314      	adds	r3, #20
 80020bc:	461a      	mov	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	0e5b      	lsrs	r3, r3, #25
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	4413      	add	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	0d1b      	lsrs	r3, r3, #20
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	2107      	movs	r1, #7
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	401a      	ands	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	0d1b      	lsrs	r3, r3, #20
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	431a      	orrs	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d10a      	bne.n	800212e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002124:	431a      	orrs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800212c:	e00a      	b.n	8002144 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213a:	43db      	mvns	r3, r3
 800213c:	401a      	ands	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	407f0000 	.word	0x407f0000

08002154 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6093      	str	r3, [r2, #8]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800218c:	d101      	bne.n	8002192 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021dc:	d101      	bne.n	80021e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <LL_ADC_IsEnabled+0x18>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <LL_ADC_IsEnabled+0x1a>
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b04      	cmp	r3, #4
 8002228:	d101      	bne.n	800222e <LL_ADC_REG_IsConversionOngoing+0x18>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b08      	cmp	r3, #8
 800224e:	d101      	bne.n	8002254 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e177      	b.n	800256e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fa37 	bl	8001700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff67 	bl	8002178 <LL_ADC_IsDeepPowerDownEnabled>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d004      	beq.n	80022ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff4d 	bl	8002154 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff82 	bl	80021c8 <LL_ADC_IsInternalRegulatorEnabled>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d115      	bne.n	80022f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff66 	bl	80021a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022d4:	4b9c      	ldr	r3, [pc, #624]	; (8002548 <HAL_ADC_Init+0x2e4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	4a9c      	ldr	r2, [pc, #624]	; (800254c <HAL_ADC_Init+0x2e8>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	3301      	adds	r3, #1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e8:	e002      	b.n	80022f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f9      	bne.n	80022ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff64 	bl	80021c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10d      	bne.n	8002322 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	f043 0210 	orr.w	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	f043 0201 	orr.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff75 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 800232c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 8110 	bne.w	800255c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 810c 	bne.w	800255c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800234c:	f043 0202 	orr.w	r2, r3, #2
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff49 	bl	80021f0 <LL_ADC_IsEnabled>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d111      	bne.n	8002388 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002364:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002368:	f7ff ff42 	bl	80021f0 <LL_ADC_IsEnabled>
 800236c:	4604      	mov	r4, r0
 800236e:	4878      	ldr	r0, [pc, #480]	; (8002550 <HAL_ADC_Init+0x2ec>)
 8002370:	f7ff ff3e 	bl	80021f0 <LL_ADC_IsEnabled>
 8002374:	4603      	mov	r3, r0
 8002376:	4323      	orrs	r3, r4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4619      	mov	r1, r3
 8002382:	4874      	ldr	r0, [pc, #464]	; (8002554 <HAL_ADC_Init+0x2f0>)
 8002384:	f7ff fd94 	bl	8001eb0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7f5b      	ldrb	r3, [r3, #29]
 800238c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002392:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002398:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800239e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d106      	bne.n	80023c4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	3b01      	subs	r3, #1
 80023bc:	045b      	lsls	r3, r3, #17
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <HAL_ADC_Init+0x2f4>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff01 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 8002414:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff0e 	bl	800223c <LL_ADC_INJ_IsConversionOngoing>
 8002420:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d16d      	bne.n	8002504 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d16a      	bne.n	8002504 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002432:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800243a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800244a:	f023 0302 	bic.w	r3, r3, #2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	430b      	orrs	r3, r1
 8002456:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d017      	beq.n	8002490 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800246e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002478:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800247c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6911      	ldr	r1, [r2, #16]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800248e:	e013      	b.n	80024b8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800249e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d118      	bne.n	80024f4 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024cc:	f023 0304 	bic.w	r3, r3, #4
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024de:	4311      	orrs	r1, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024e4:	430a      	orrs	r2, r1
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	611a      	str	r2, [r3, #16]
 80024f2:	e007      	b.n	8002504 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10c      	bne.n	8002526 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f023 010f 	bic.w	r1, r3, #15
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	1e5a      	subs	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
 8002524:	e007      	b.n	8002536 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 020f 	bic.w	r2, r2, #15
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	65da      	str	r2, [r3, #92]	; 0x5c
 8002546:	e011      	b.n	800256c <HAL_ADC_Init+0x308>
 8002548:	20000000 	.word	0x20000000
 800254c:	053e2d63 	.word	0x053e2d63
 8002550:	50000100 	.word	0x50000100
 8002554:	50000300 	.word	0x50000300
 8002558:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	f043 0210 	orr.w	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800256c:	7ffb      	ldrb	r3, [r7, #31]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}
 8002576:	bf00      	nop

08002578 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b0b6      	sub	sp, #216	; 0xd8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x22>
 8002596:	2302      	movs	r3, #2
 8002598:	e3c8      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x7b4>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fe35 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 83ad 	bne.w	8002d0e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	f7ff fd47 	bl	8002054 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fe23 	bl	8002216 <LL_ADC_REG_IsConversionOngoing>
 80025d0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fe2f 	bl	800223c <LL_ADC_INJ_IsConversionOngoing>
 80025de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 81d9 	bne.w	800299e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f040 81d4 	bne.w	800299e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025fe:	d10f      	bne.n	8002620 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2200      	movs	r2, #0
 800260a:	4619      	mov	r1, r3
 800260c:	f7ff fd4e 	bl	80020ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fd08 	bl	800202e <LL_ADC_SetSamplingTimeCommonConfig>
 800261e:	e00e      	b.n	800263e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	461a      	mov	r2, r3
 800262e:	f7ff fd3d 	bl	80020ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fcf8 	bl	800202e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	08db      	lsrs	r3, r3, #3
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b04      	cmp	r3, #4
 800265e:	d022      	beq.n	80026a6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6919      	ldr	r1, [r3, #16]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002670:	f7ff fc52 	bl	8001f18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6919      	ldr	r1, [r3, #16]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	461a      	mov	r2, r3
 8002682:	f7ff fc9e 	bl	8001fc2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6919      	ldr	r1, [r3, #16]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	7f1b      	ldrb	r3, [r3, #28]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_ADC_ConfigChannel+0x124>
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	e000      	b.n	800269e <HAL_ADC_ConfigChannel+0x126>
 800269c:	2300      	movs	r3, #0
 800269e:	461a      	mov	r2, r3
 80026a0:	f7ff fcaa 	bl	8001ff8 <LL_ADC_SetOffsetSaturation>
 80026a4:	e17b      	b.n	800299e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fc57 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x15a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fc4c 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	0e9b      	lsrs	r3, r3, #26
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	e01e      	b.n	8002710 <HAL_ADC_ConfigChannel+0x198>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fc41 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	e004      	b.n	800270e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002708:	fab3 f383 	clz	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x1b0>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0e9b      	lsrs	r3, r3, #26
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	e018      	b.n	800275a <HAL_ADC_ConfigChannel+0x1e2>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800273c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e004      	b.n	800275a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002750:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800275a:	429a      	cmp	r2, r3
 800275c:	d106      	bne.n	800276c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fc10 	bl	8001f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fbf4 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x220>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2101      	movs	r1, #1
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fbe9 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	f003 021f 	and.w	r2, r3, #31
 8002796:	e01e      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x25e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fbde 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e004      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80027ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x276>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	e018      	b.n	8002820 <HAL_ADC_ConfigChannel+0x2a8>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002802:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800280a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e004      	b.n	8002820 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002816:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fbad 	bl	8001f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2102      	movs	r1, #2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fb91 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <HAL_ADC_ConfigChannel+0x2e6>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2102      	movs	r1, #2
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fb86 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	e01e      	b.n	800289c <HAL_ADC_ConfigChannel+0x324>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2102      	movs	r1, #2
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fb7b 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800287c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002880:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800288c:	2320      	movs	r3, #32
 800288e:	e004      	b.n	800289a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002890:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x33c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	e016      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x36a>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80028d4:	2320      	movs	r3, #32
 80028d6:	e004      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80028d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028dc:	fab3 f383 	clz	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d106      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2200      	movs	r2, #0
 80028ec:	2102      	movs	r1, #2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fb4c 	bl	8001f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2103      	movs	r1, #3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fb30 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002900:	4603      	mov	r3, r0
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x3a8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2103      	movs	r1, #3
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fb25 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	f003 021f 	and.w	r2, r3, #31
 800291e:	e017      	b.n	8002950 <HAL_ADC_ConfigChannel+0x3d8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2103      	movs	r1, #3
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fb1a 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800293a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800293c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e003      	b.n	800294e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x3f0>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	e011      	b.n	800298c <HAL_ADC_ConfigChannel+0x414>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002978:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800297a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002980:	2320      	movs	r3, #32
 8002982:	e003      	b.n	800298c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800298c:	429a      	cmp	r2, r3
 800298e:	d106      	bne.n	800299e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2200      	movs	r2, #0
 8002996:	2103      	movs	r1, #3
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff faf7 	bl	8001f8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fc24 	bl	80021f0 <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 8140 	bne.w	8002c30 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	461a      	mov	r2, r3
 80029be:	f7ff fba1 	bl	8002104 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a8f      	ldr	r2, [pc, #572]	; (8002c04 <HAL_ADC_ConfigChannel+0x68c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	f040 8131 	bne.w	8002c30 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10b      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x47e>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	3301      	adds	r3, #1
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2b09      	cmp	r3, #9
 80029ec:	bf94      	ite	ls
 80029ee:	2301      	movls	r3, #1
 80029f0:	2300      	movhi	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	e019      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x4b2>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a06:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e003      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a14:	fab3 f383 	clz	r3, r3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2b09      	cmp	r3, #9
 8002a22:	bf94      	ite	ls
 8002a24:	2301      	movls	r3, #1
 8002a26:	2300      	movhi	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d079      	beq.n	8002b22 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x4d2>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0e9b      	lsrs	r3, r3, #26
 8002a40:	3301      	adds	r3, #1
 8002a42:	069b      	lsls	r3, r3, #26
 8002a44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a48:	e015      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x4fe>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002a62:	2320      	movs	r3, #32
 8002a64:	e003      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	069b      	lsls	r3, r3, #26
 8002a72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x51e>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0e9b      	lsrs	r3, r3, #26
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	e017      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x54e>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	e003      	b.n	8002aba <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	ea42 0103 	orr.w	r1, r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x574>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0e9b      	lsrs	r3, r3, #26
 8002adc:	3301      	adds	r3, #1
 8002ade:	f003 021f 	and.w	r2, r3, #31
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	051b      	lsls	r3, r3, #20
 8002aea:	e018      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x5a6>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002b04:	2320      	movs	r3, #32
 8002b06:	e003      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f003 021f 	and.w	r2, r3, #31
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	e081      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d107      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x5c6>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0e9b      	lsrs	r3, r3, #26
 8002b34:	3301      	adds	r3, #1
 8002b36:	069b      	lsls	r3, r3, #26
 8002b38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b3c:	e015      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x5f2>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002b56:	2320      	movs	r3, #32
 8002b58:	e003      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	069b      	lsls	r3, r3, #26
 8002b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x612>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	e017      	b.n	8002bba <HAL_ADC_ConfigChannel+0x642>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	61fb      	str	r3, [r7, #28]
  return result;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e003      	b.n	8002bae <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	ea42 0103 	orr.w	r1, r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10d      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x66e>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f003 021f 	and.w	r2, r3, #31
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b1e      	subs	r3, #30
 8002bde:	051b      	lsls	r3, r3, #20
 8002be0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002be4:	e01e      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x6ac>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	613b      	str	r3, [r7, #16]
  return result;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d104      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e006      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x698>
 8002c02:	bf00      	nop
 8002c04:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	3301      	adds	r3, #1
 8002c12:	f003 021f 	and.w	r2, r3, #31
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b1e      	subs	r3, #30
 8002c1e:	051b      	lsls	r3, r3, #20
 8002c20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c24:	430b      	orrs	r3, r1
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	6892      	ldr	r2, [r2, #8]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f7ff fa3e 	bl	80020ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b3f      	ldr	r3, [pc, #252]	; (8002d34 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d071      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c3c:	483e      	ldr	r0, [pc, #248]	; (8002d38 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c3e:	f7ff f95d 	bl	8001efc <LL_ADC_GetCommonPathInternalCh>
 8002c42:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a3c      	ldr	r2, [pc, #240]	; (8002d3c <HAL_ADC_ConfigChannel+0x7c4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_ADC_ConfigChannel+0x6e2>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a3a      	ldr	r2, [pc, #232]	; (8002d40 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d127      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d121      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c6e:	d157      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c78:	4619      	mov	r1, r3
 8002c7a:	482f      	ldr	r0, [pc, #188]	; (8002d38 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c7c:	f7ff f92b 	bl	8001ed6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c80:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	4a30      	ldr	r2, [pc, #192]	; (8002d48 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c9a:	e002      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ca8:	e03a      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a27      	ldr	r2, [pc, #156]	; (8002d4c <HAL_ADC_ConfigChannel+0x7d4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d113      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x764>
 8002cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10d      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d02a      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4818      	ldr	r0, [pc, #96]	; (8002d38 <HAL_ADC_ConfigChannel+0x7c0>)
 8002cd6:	f7ff f8fe 	bl	8001ed6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cda:	e021      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d11c      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d116      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a16      	ldr	r2, [pc, #88]	; (8002d50 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d011      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d04:	4619      	mov	r1, r3
 8002d06:	480c      	ldr	r0, [pc, #48]	; (8002d38 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d08:	f7ff f8e5 	bl	8001ed6 <LL_ADC_SetCommonPathInternalCh>
 8002d0c:	e008      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d12:	f043 0220 	orr.w	r2, r3, #32
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d28:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	37d8      	adds	r7, #216	; 0xd8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	80080000 	.word	0x80080000
 8002d38:	50000300 	.word	0x50000300
 8002d3c:	c3210000 	.word	0xc3210000
 8002d40:	90c00010 	.word	0x90c00010
 8002d44:	20000000 	.word	0x20000000
 8002d48:	053e2d63 	.word	0x053e2d63
 8002d4c:	c7520000 	.word	0xc7520000
 8002d50:	50000100 	.word	0x50000100
 8002d54:	cb840000 	.word	0xcb840000

08002d58 <LL_ADC_IsEnabled>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_IsEnabled+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_IsEnabled+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d101      	bne.n	8002d96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b0a1      	sub	sp, #132	; 0x84
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e08b      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dda:	d102      	bne.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ddc:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	e001      	b.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e06a      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ffb9 	bl	8002d7e <LL_ADC_REG_IsConversionOngoing>
 8002e0c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ffb3 	bl	8002d7e <LL_ADC_REG_IsConversionOngoing>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d14c      	bne.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d149      	bne.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002e26:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d028      	beq.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e42:	035b      	lsls	r3, r3, #13
 8002e44:	430b      	orrs	r3, r1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e50:	f7ff ff82 	bl	8002d58 <LL_ADC_IsEnabled>
 8002e54:	4604      	mov	r4, r0
 8002e56:	4823      	ldr	r0, [pc, #140]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e58:	f7ff ff7e 	bl	8002d58 <LL_ADC_IsEnabled>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d133      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e6c:	f023 030f 	bic.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	6811      	ldr	r1, [r2, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	6892      	ldr	r2, [r2, #8]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e80:	e024      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e8e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e92:	f7ff ff61 	bl	8002d58 <LL_ADC_IsEnabled>
 8002e96:	4604      	mov	r4, r0
 8002e98:	4812      	ldr	r0, [pc, #72]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e9a:	f7ff ff5d 	bl	8002d58 <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4323      	orrs	r3, r4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d112      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eae:	f023 030f 	bic.w	r3, r3, #15
 8002eb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002eb4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb6:	e009      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002eca:	e000      	b.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ecc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ed6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3784      	adds	r7, #132	; 0x84
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	50000100 	.word	0x50000100
 8002ee8:	50000300 	.word	0x50000300

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60d3      	str	r3, [r2, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <__NVIC_EnableIRQ+0x38>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff8e 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff29 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030b0:	f7ff ff40 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 80030b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7ff ff90 	bl	8002fe0 <NVIC_EncodePriority>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff5f 	bl	8002f8c <__NVIC_SetPriority>
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff33 	bl	8002f50 <__NVIC_EnableIRQ>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff ffa4 	bl	8003048 <SysTick_Config>
 8003100:	4603      	mov	r3, r0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e014      	b.n	8003146 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	791b      	ldrb	r3, [r3, #4]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fe fb3b 	bl	80017a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	795b      	ldrb	r3, [r3, #5]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_DAC_ConfigChannel+0x18>
 8003164:	2302      	movs	r3, #2
 8003166:	e192      	b.n	800348e <HAL_DAC_ConfigChannel+0x33e>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2202      	movs	r2, #2
 8003172:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d174      	bne.n	8003266 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800317c:	f7fe fe6a 	bl	8001e54 <HAL_GetTick>
 8003180:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d134      	bne.n	80031f2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003188:	e011      	b.n	80031ae <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800318a:	f7fe fe63 	bl	8001e54 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d90a      	bls.n	80031ae <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f043 0208 	orr.w	r2, r3, #8
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2203      	movs	r2, #3
 80031a8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e16f      	b.n	800348e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e6      	bne.n	800318a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80031bc:	2001      	movs	r0, #1
 80031be:	f7fe fe55 	bl	8001e6c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
 80031cc:	e01e      	b.n	800320c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031ce:	f7fe fe41 	bl	8001e54 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d90a      	bls.n	80031f2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f043 0208 	orr.w	r2, r3, #8
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2203      	movs	r2, #3
 80031ec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e14d      	b.n	800348e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	dbe8      	blt.n	80031ce <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80031fc:	2001      	movs	r0, #1
 80031fe:	f7fe fe35 	bl	8001e6c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800320a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	ea02 0103 	and.w	r1, r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	409a      	lsls	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	21ff      	movs	r1, #255	; 0xff
 8003248:	fa01 f303 	lsl.w	r3, r1, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	ea02 0103 	and.w	r1, r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d11d      	bne.n	80032aa <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	221f      	movs	r2, #31
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003286:	4013      	ands	r3, r2
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329e:	4313      	orrs	r3, r2
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2207      	movs	r2, #7
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c2:	4013      	ands	r3, r2
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	e00f      	b.n	80032f4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d102      	bne.n	80032e2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80032dc:	2301      	movs	r3, #1
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	e008      	b.n	80032f4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d102      	bne.n	80032f0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80032ea:	2301      	movs	r3, #1
 80032ec:	623b      	str	r3, [r7, #32]
 80032ee:	e001      	b.n	80032f4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	6a3a      	ldr	r2, [r7, #32]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003316:	4013      	ands	r3, r2
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	791b      	ldrb	r3, [r3, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d102      	bne.n	8003328 <HAL_DAC_ConfigChannel+0x1d8>
 8003322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003326:	e000      	b.n	800332a <HAL_DAC_ConfigChannel+0x1da>
 8003328:	2300      	movs	r3, #0
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003342:	4013      	ands	r3, r2
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	795b      	ldrb	r3, [r3, #5]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d102      	bne.n	8003354 <HAL_DAC_ConfigChannel+0x204>
 800334e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003352:	e000      	b.n	8003356 <HAL_DAC_ConfigChannel+0x206>
 8003354:	2300      	movs	r3, #0
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d114      	bne.n	8003396 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800336c:	f001 f9a6 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8003370:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	4a48      	ldr	r2, [pc, #288]	; (8003498 <HAL_DAC_ConfigChannel+0x348>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d904      	bls.n	8003384 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 8003382:	e00f      	b.n	80033a4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	4a45      	ldr	r2, [pc, #276]	; (800349c <HAL_DAC_ConfigChannel+0x34c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d90a      	bls.n	80033a2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
 8003394:	e006      	b.n	80033a4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	4313      	orrs	r3, r2
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	e000      	b.n	80033a4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80033a2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b2:	4313      	orrs	r3, r2
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	400a      	ands	r2, r1
 80033da:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f6:	4013      	ands	r3, r2
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340e:	4313      	orrs	r3, r2
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	22c0      	movs	r2, #192	; 0xc0
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43da      	mvns	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	400a      	ands	r2, r1
 8003434:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	ea02 0103 	and.w	r1, r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	409a      	lsls	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3728      	adds	r7, #40	; 0x28
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	09896800 	.word	0x09896800
 800349c:	04c4b400 	.word	0x04c4b400

080034a0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d005      	beq.n	80034c4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2204      	movs	r2, #4
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e037      	b.n	8003534 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020e 	bic.w	r2, r2, #14
 80034d2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034e2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f202 	lsl.w	r2, r1, r2
 8003506:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003510:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00c      	beq.n	8003534 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003528:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003532:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003544:	7bfb      	ldrb	r3, [r7, #15]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d00d      	beq.n	8003586 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2204      	movs	r2, #4
 800356e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
 8003584:	e047      	b.n	8003616 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 020e 	bic.w	r2, r2, #14
 8003594:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f003 021f 	and.w	r2, r3, #31
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2101      	movs	r1, #1
 80035c4:	fa01 f202 	lsl.w	r2, r1, r2
 80035c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00c      	beq.n	80035f6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
    }
  }
  return status;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800362e:	e15a      	b.n	80038e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 814c 	beq.w	80038e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d005      	beq.n	8003660 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800365c:	2b02      	cmp	r3, #2
 800365e:	d130      	bne.n	80036c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2203      	movs	r2, #3
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003696:	2201      	movs	r2, #1
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f003 0201 	and.w	r2, r3, #1
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d017      	beq.n	80036fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	2203      	movs	r2, #3
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d123      	bne.n	8003752 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	08da      	lsrs	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3208      	adds	r2, #8
 8003712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003716:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	220f      	movs	r2, #15
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	6939      	ldr	r1, [r7, #16]
 800374e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0203 	and.w	r2, r3, #3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80a6 	beq.w	80038e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003794:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <HAL_GPIO_Init+0x2e4>)
 8003796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003798:	4a5a      	ldr	r2, [pc, #360]	; (8003904 <HAL_GPIO_Init+0x2e4>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6613      	str	r3, [r2, #96]	; 0x60
 80037a0:	4b58      	ldr	r3, [pc, #352]	; (8003904 <HAL_GPIO_Init+0x2e4>)
 80037a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ac:	4a56      	ldr	r2, [pc, #344]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	3302      	adds	r3, #2
 80037b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4013      	ands	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037d6:	d01f      	beq.n	8003818 <HAL_GPIO_Init+0x1f8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a4c      	ldr	r2, [pc, #304]	; (800390c <HAL_GPIO_Init+0x2ec>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d019      	beq.n	8003814 <HAL_GPIO_Init+0x1f4>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a4b      	ldr	r2, [pc, #300]	; (8003910 <HAL_GPIO_Init+0x2f0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d013      	beq.n	8003810 <HAL_GPIO_Init+0x1f0>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a4a      	ldr	r2, [pc, #296]	; (8003914 <HAL_GPIO_Init+0x2f4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00d      	beq.n	800380c <HAL_GPIO_Init+0x1ec>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a49      	ldr	r2, [pc, #292]	; (8003918 <HAL_GPIO_Init+0x2f8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <HAL_GPIO_Init+0x1e8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a48      	ldr	r2, [pc, #288]	; (800391c <HAL_GPIO_Init+0x2fc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_GPIO_Init+0x1e4>
 8003800:	2305      	movs	r3, #5
 8003802:	e00a      	b.n	800381a <HAL_GPIO_Init+0x1fa>
 8003804:	2306      	movs	r3, #6
 8003806:	e008      	b.n	800381a <HAL_GPIO_Init+0x1fa>
 8003808:	2304      	movs	r3, #4
 800380a:	e006      	b.n	800381a <HAL_GPIO_Init+0x1fa>
 800380c:	2303      	movs	r3, #3
 800380e:	e004      	b.n	800381a <HAL_GPIO_Init+0x1fa>
 8003810:	2302      	movs	r3, #2
 8003812:	e002      	b.n	800381a <HAL_GPIO_Init+0x1fa>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <HAL_GPIO_Init+0x1fa>
 8003818:	2300      	movs	r3, #0
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	f002 0203 	and.w	r2, r2, #3
 8003820:	0092      	lsls	r2, r2, #2
 8003822:	4093      	lsls	r3, r2
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800382a:	4937      	ldr	r1, [pc, #220]	; (8003908 <HAL_GPIO_Init+0x2e8>)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	3302      	adds	r3, #2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003838:	4b39      	ldr	r3, [pc, #228]	; (8003920 <HAL_GPIO_Init+0x300>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	43db      	mvns	r3, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4013      	ands	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800385c:	4a30      	ldr	r2, [pc, #192]	; (8003920 <HAL_GPIO_Init+0x300>)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003862:	4b2f      	ldr	r3, [pc, #188]	; (8003920 <HAL_GPIO_Init+0x300>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	43db      	mvns	r3, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003886:	4a26      	ldr	r2, [pc, #152]	; (8003920 <HAL_GPIO_Init+0x300>)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_GPIO_Init+0x300>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	43db      	mvns	r3, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <HAL_GPIO_Init+0x300>)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038b6:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_GPIO_Init+0x300>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	43db      	mvns	r3, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4013      	ands	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038da:	4a11      	ldr	r2, [pc, #68]	; (8003920 <HAL_GPIO_Init+0x300>)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	3301      	adds	r3, #1
 80038e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f47f ae9d 	bne.w	8003630 <HAL_GPIO_Init+0x10>
  }
}
 80038f6:	bf00      	nop
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40021000 	.word	0x40021000
 8003908:	40010000 	.word	0x40010000
 800390c:	48000400 	.word	0x48000400
 8003910:	48000800 	.word	0x48000800
 8003914:	48000c00 	.word	0x48000c00
 8003918:	48001000 	.word	0x48001000
 800391c:	48001400 	.word	0x48001400
 8003920:	40010400 	.word	0x40010400

08003924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]
 8003930:	4613      	mov	r3, r2
 8003932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003934:	787b      	ldrb	r3, [r7, #1]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003940:	e002      	b.n	8003948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800396a:	4a05      	ldr	r2, [pc, #20]	; (8003980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f806 	bl	8003984 <HAL_GPIO_EXTI_Callback>
  }
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40010400 	.word	0x40010400

08003984 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e081      	b.n	8003ab0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fd ff2f 	bl	8001824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2224      	movs	r2, #36	; 0x24
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	e006      	b.n	8003a22 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d104      	bne.n	8003a34 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a46:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69d9      	ldr	r1, [r3, #28]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1a      	ldr	r2, [r3, #32]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d138      	bne.n	8003b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e032      	b.n	8003b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	; 0x24
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0201 	bic.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d139      	bne.n	8003bd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e033      	b.n	8003bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2224      	movs	r2, #36	; 0x24
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d141      	bne.n	8003c7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bf6:	4b4b      	ldr	r3, [pc, #300]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c02:	d131      	bne.n	8003c68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c04:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0a:	4a46      	ldr	r2, [pc, #280]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c14:	4b43      	ldr	r3, [pc, #268]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c1c:	4a41      	ldr	r2, [pc, #260]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c24:	4b40      	ldr	r3, [pc, #256]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2232      	movs	r2, #50	; 0x32
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	4a3f      	ldr	r2, [pc, #252]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	0c9b      	lsrs	r3, r3, #18
 8003c36:	3301      	adds	r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c3a:	e002      	b.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c42:	4b38      	ldr	r3, [pc, #224]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d102      	bne.n	8003c56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f2      	bne.n	8003c3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c56:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c62:	d158      	bne.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e057      	b.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c68:	4b2e      	ldr	r3, [pc, #184]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c6e:	4a2d      	ldr	r2, [pc, #180]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c78:	e04d      	b.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c80:	d141      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c82:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d131      	bne.n	8003cf4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c90:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c96:	4a23      	ldr	r2, [pc, #140]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ca0:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ca8:	4a1e      	ldr	r2, [pc, #120]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2232      	movs	r2, #50	; 0x32
 8003cb6:	fb02 f303 	mul.w	r3, r2, r3
 8003cba:	4a1c      	ldr	r2, [pc, #112]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc0:	0c9b      	lsrs	r3, r3, #18
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc6:	e002      	b.n	8003cce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cda:	d102      	bne.n	8003ce2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f2      	bne.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cee:	d112      	bne.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e011      	b.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d04:	e007      	b.n	8003d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d0e:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40007000 	.word	0x40007000
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	431bde83 	.word	0x431bde83

08003d30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d3e:	6093      	str	r3, [r2, #8]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40007000 	.word	0x40007000

08003d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e306      	b.n	8004370 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d075      	beq.n	8003e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6e:	4b97      	ldr	r3, [pc, #604]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d78:	4b94      	ldr	r3, [pc, #592]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b0c      	cmp	r3, #12
 8003d86:	d102      	bne.n	8003d8e <HAL_RCC_OscConfig+0x3e>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_OscConfig+0x44>
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d10b      	bne.n	8003dac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d94:	4b8d      	ldr	r3, [pc, #564]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d05b      	beq.n	8003e58 <HAL_RCC_OscConfig+0x108>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d157      	bne.n	8003e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e2e1      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x74>
 8003db6:	4b85      	ldr	r3, [pc, #532]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a84      	ldr	r2, [pc, #528]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e01d      	b.n	8003e00 <HAL_RCC_OscConfig+0xb0>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x98>
 8003dce:	4b7f      	ldr	r3, [pc, #508]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a7e      	ldr	r2, [pc, #504]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4b7c      	ldr	r3, [pc, #496]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a7b      	ldr	r2, [pc, #492]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0xb0>
 8003de8:	4b78      	ldr	r3, [pc, #480]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a77      	ldr	r2, [pc, #476]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	4b75      	ldr	r3, [pc, #468]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a74      	ldr	r2, [pc, #464]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d013      	beq.n	8003e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fe f824 	bl	8001e54 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fe f820 	bl	8001e54 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e2a6      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e22:	4b6a      	ldr	r3, [pc, #424]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0xc0>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fe f810 	bl	8001e54 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fe f80c 	bl	8001e54 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b64      	cmp	r3, #100	; 0x64
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e292      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e4a:	4b60      	ldr	r3, [pc, #384]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0xe8>
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d075      	beq.n	8003f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e66:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e70:	4b56      	ldr	r3, [pc, #344]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	d102      	bne.n	8003e86 <HAL_RCC_OscConfig+0x136>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d002      	beq.n	8003e8c <HAL_RCC_OscConfig+0x13c>
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d11f      	bne.n	8003ecc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e8c:	4b4f      	ldr	r3, [pc, #316]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x154>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e265      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	061b      	lsls	r3, r3, #24
 8003eb2:	4946      	ldr	r1, [pc, #280]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003eb8:	4b45      	ldr	r3, [pc, #276]	; (8003fd0 <HAL_RCC_OscConfig+0x280>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd ff7d 	bl	8001dbc <HAL_InitTick>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d043      	beq.n	8003f50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e251      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d023      	beq.n	8003f1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed4:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a3c      	ldr	r2, [pc, #240]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd ffb8 	bl	8001e54 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee8:	f7fd ffb4 	bl	8001e54 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e23a      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003efa:	4b34      	ldr	r3, [pc, #208]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f06:	4b31      	ldr	r3, [pc, #196]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	061b      	lsls	r3, r3, #24
 8003f14:	492d      	ldr	r1, [pc, #180]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
 8003f1a:	e01a      	b.n	8003f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1c:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd ff94 	bl	8001e54 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f30:	f7fd ff90 	bl	8001e54 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e216      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1e0>
 8003f4e:	e000      	b.n	8003f52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d041      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01c      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f66:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f6c:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fd ff6d 	bl	8001e54 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7e:	f7fd ff69 	bl	8001e54 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e1ef      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f90:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0ef      	beq.n	8003f7e <HAL_RCC_OscConfig+0x22e>
 8003f9e:	e020      	b.n	8003fe2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa6:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd ff50 	bl	8001e54 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fb6:	e00d      	b.n	8003fd4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb8:	f7fd ff4c 	bl	8001e54 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d906      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e1d2      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd4:	4b8c      	ldr	r3, [pc, #560]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8003fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1ea      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 80a6 	beq.w	800413c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ff4:	4b84      	ldr	r3, [pc, #528]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_OscConfig+0x2b4>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x2b6>
 8004004:	2300      	movs	r3, #0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	4b7f      	ldr	r3, [pc, #508]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	4a7e      	ldr	r2, [pc, #504]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	6593      	str	r3, [r2, #88]	; 0x58
 8004016:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004022:	2301      	movs	r3, #1
 8004024:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004026:	4b79      	ldr	r3, [pc, #484]	; (800420c <HAL_RCC_OscConfig+0x4bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d118      	bne.n	8004064 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004032:	4b76      	ldr	r3, [pc, #472]	; (800420c <HAL_RCC_OscConfig+0x4bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a75      	ldr	r2, [pc, #468]	; (800420c <HAL_RCC_OscConfig+0x4bc>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403e:	f7fd ff09 	bl	8001e54 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004046:	f7fd ff05 	bl	8001e54 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e18b      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004058:	4b6c      	ldr	r3, [pc, #432]	; (800420c <HAL_RCC_OscConfig+0x4bc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d108      	bne.n	800407e <HAL_RCC_OscConfig+0x32e>
 800406c:	4b66      	ldr	r3, [pc, #408]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004072:	4a65      	ldr	r2, [pc, #404]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800407c:	e024      	b.n	80040c8 <HAL_RCC_OscConfig+0x378>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b05      	cmp	r3, #5
 8004084:	d110      	bne.n	80040a8 <HAL_RCC_OscConfig+0x358>
 8004086:	4b60      	ldr	r3, [pc, #384]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408c:	4a5e      	ldr	r2, [pc, #376]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 800408e:	f043 0304 	orr.w	r3, r3, #4
 8004092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004096:	4b5c      	ldr	r3, [pc, #368]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	4a5a      	ldr	r2, [pc, #360]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040a6:	e00f      	b.n	80040c8 <HAL_RCC_OscConfig+0x378>
 80040a8:	4b57      	ldr	r3, [pc, #348]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	4a56      	ldr	r2, [pc, #344]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040b8:	4b53      	ldr	r3, [pc, #332]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	4a52      	ldr	r2, [pc, #328]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d016      	beq.n	80040fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fd fec0 	bl	8001e54 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040d6:	e00a      	b.n	80040ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d8:	f7fd febc 	bl	8001e54 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e140      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ee:	4b46      	ldr	r3, [pc, #280]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0ed      	beq.n	80040d8 <HAL_RCC_OscConfig+0x388>
 80040fc:	e015      	b.n	800412a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fe:	f7fd fea9 	bl	8001e54 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004104:	e00a      	b.n	800411c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004106:	f7fd fea5 	bl	8001e54 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f241 3288 	movw	r2, #5000	; 0x1388
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e129      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800411c:	4b3a      	ldr	r3, [pc, #232]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1ed      	bne.n	8004106 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800412a:	7ffb      	ldrb	r3, [r7, #31]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004130:	4b35      	ldr	r3, [pc, #212]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	4a34      	ldr	r2, [pc, #208]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8004136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0320 	and.w	r3, r3, #32
 8004144:	2b00      	cmp	r3, #0
 8004146:	d03c      	beq.n	80041c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01c      	beq.n	800418a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004150:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8004152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004156:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fd fe78 	bl	8001e54 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004168:	f7fd fe74 	bl	8001e54 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e0fa      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800417a:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 800417c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0ef      	beq.n	8004168 <HAL_RCC_OscConfig+0x418>
 8004188:	e01b      	b.n	80041c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800418a:	4b1f      	ldr	r3, [pc, #124]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 800418c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004190:	4a1d      	ldr	r2, [pc, #116]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419a:	f7fd fe5b 	bl	8001e54 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041a2:	f7fd fe57 	bl	8001e54 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e0dd      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 80041b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1ef      	bne.n	80041a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80d1 	beq.w	800436e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b0c      	cmp	r3, #12
 80041d6:	f000 808b 	beq.w	80042f0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d15e      	bne.n	80042a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <HAL_RCC_OscConfig+0x4b8>)
 80041e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fd fe31 	bl	8001e54 <HAL_GetTick>
 80041f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f4:	e00c      	b.n	8004210 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f6:	f7fd fe2d 	bl	8001e54 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d905      	bls.n	8004210 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e0b3      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
 8004208:	40021000 	.word	0x40021000
 800420c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004210:	4b59      	ldr	r3, [pc, #356]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1ec      	bne.n	80041f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800421c:	4b56      	ldr	r3, [pc, #344]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	4b56      	ldr	r3, [pc, #344]	; (800437c <HAL_RCC_OscConfig+0x62c>)
 8004222:	4013      	ands	r3, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6a11      	ldr	r1, [r2, #32]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800422c:	3a01      	subs	r2, #1
 800422e:	0112      	lsls	r2, r2, #4
 8004230:	4311      	orrs	r1, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004236:	0212      	lsls	r2, r2, #8
 8004238:	4311      	orrs	r1, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800423e:	0852      	lsrs	r2, r2, #1
 8004240:	3a01      	subs	r2, #1
 8004242:	0552      	lsls	r2, r2, #21
 8004244:	4311      	orrs	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800424a:	0852      	lsrs	r2, r2, #1
 800424c:	3a01      	subs	r2, #1
 800424e:	0652      	lsls	r2, r2, #25
 8004250:	4311      	orrs	r1, r2
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004256:	06d2      	lsls	r2, r2, #27
 8004258:	430a      	orrs	r2, r1
 800425a:	4947      	ldr	r1, [pc, #284]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 800425c:	4313      	orrs	r3, r2
 800425e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004260:	4b45      	ldr	r3, [pc, #276]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a44      	ldr	r2, [pc, #272]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 8004266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800426a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800426c:	4b42      	ldr	r3, [pc, #264]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4a41      	ldr	r2, [pc, #260]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 8004272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004276:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fd fdec 	bl	8001e54 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004280:	f7fd fde8 	bl	8001e54 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e06e      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004292:	4b39      	ldr	r3, [pc, #228]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x530>
 800429e:	e066      	b.n	800436e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a0:	4b35      	ldr	r3, [pc, #212]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a34      	ldr	r2, [pc, #208]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 80042a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042aa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80042ac:	4b32      	ldr	r3, [pc, #200]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a31      	ldr	r2, [pc, #196]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80042b8:	4b2f      	ldr	r3, [pc, #188]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a2e      	ldr	r2, [pc, #184]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 80042be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fd fdc4 	bl	8001e54 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd fdc0 	bl	8001e54 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e046      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e2:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x580>
 80042ee:	e03e      	b.n	800436e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e039      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80042fc:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <HAL_RCC_OscConfig+0x628>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0203 	and.w	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	429a      	cmp	r2, r3
 800430e:	d12c      	bne.n	800436a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	3b01      	subs	r3, #1
 800431c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d123      	bne.n	800436a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d11b      	bne.n	800436a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d113      	bne.n	800436a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	3b01      	subs	r3, #1
 8004350:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d109      	bne.n	800436a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40021000 	.word	0x40021000
 800437c:	019f800c 	.word	0x019f800c

08004380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800438a:	2300      	movs	r3, #0
 800438c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e11e      	b.n	80045d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004398:	4b91      	ldr	r3, [pc, #580]	; (80045e0 <HAL_RCC_ClockConfig+0x260>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d910      	bls.n	80043c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b8e      	ldr	r3, [pc, #568]	; (80045e0 <HAL_RCC_ClockConfig+0x260>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 020f 	bic.w	r2, r3, #15
 80043ae:	498c      	ldr	r1, [pc, #560]	; (80045e0 <HAL_RCC_ClockConfig+0x260>)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b8a      	ldr	r3, [pc, #552]	; (80045e0 <HAL_RCC_ClockConfig+0x260>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e106      	b.n	80045d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d073      	beq.n	80044bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d129      	bne.n	8004430 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043dc:	4b81      	ldr	r3, [pc, #516]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0f4      	b.n	80045d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80043ec:	f000 f99e 	bl	800472c <RCC_GetSysClockFreqFromPLLSource>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	4a7c      	ldr	r2, [pc, #496]	; (80045e8 <HAL_RCC_ClockConfig+0x268>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d93f      	bls.n	800447a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80043fa:	4b7a      	ldr	r3, [pc, #488]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800440e:	2b00      	cmp	r3, #0
 8004410:	d033      	beq.n	800447a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004416:	2b00      	cmp	r3, #0
 8004418:	d12f      	bne.n	800447a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800441a:	4b72      	ldr	r3, [pc, #456]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004422:	4a70      	ldr	r2, [pc, #448]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 8004424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004428:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e024      	b.n	800447a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d107      	bne.n	8004448 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004438:	4b6a      	ldr	r3, [pc, #424]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0c6      	b.n	80045d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004448:	4b66      	ldr	r3, [pc, #408]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0be      	b.n	80045d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004458:	f000 f8ce 	bl	80045f8 <HAL_RCC_GetSysClockFreq>
 800445c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4a61      	ldr	r2, [pc, #388]	; (80045e8 <HAL_RCC_ClockConfig+0x268>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d909      	bls.n	800447a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004466:	4b5f      	ldr	r3, [pc, #380]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800446e:	4a5d      	ldr	r2, [pc, #372]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 8004470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004474:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800447a:	4b5a      	ldr	r3, [pc, #360]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f023 0203 	bic.w	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4957      	ldr	r1, [pc, #348]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 8004488:	4313      	orrs	r3, r2
 800448a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800448c:	f7fd fce2 	bl	8001e54 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004492:	e00a      	b.n	80044aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004494:	f7fd fcde 	bl	8001e54 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e095      	b.n	80045d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044aa:	4b4e      	ldr	r3, [pc, #312]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 020c 	and.w	r2, r3, #12
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1eb      	bne.n	8004494 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d023      	beq.n	8004510 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d4:	4b43      	ldr	r3, [pc, #268]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4a42      	ldr	r2, [pc, #264]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 80044da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0308 	and.w	r3, r3, #8
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80044ec:	4b3d      	ldr	r3, [pc, #244]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044f4:	4a3b      	ldr	r2, [pc, #236]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 80044f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044fc:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4936      	ldr	r1, [pc, #216]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
 800450e:	e008      	b.n	8004522 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b80      	cmp	r3, #128	; 0x80
 8004514:	d105      	bne.n	8004522 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004516:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	4a32      	ldr	r2, [pc, #200]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 800451c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004520:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004522:	4b2f      	ldr	r3, [pc, #188]	; (80045e0 <HAL_RCC_ClockConfig+0x260>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d21d      	bcs.n	800456c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004530:	4b2b      	ldr	r3, [pc, #172]	; (80045e0 <HAL_RCC_ClockConfig+0x260>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 020f 	bic.w	r2, r3, #15
 8004538:	4929      	ldr	r1, [pc, #164]	; (80045e0 <HAL_RCC_ClockConfig+0x260>)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004540:	f7fd fc88 	bl	8001e54 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004546:	e00a      	b.n	800455e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004548:	f7fd fc84 	bl	8001e54 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	; 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e03b      	b.n	80045d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <HAL_RCC_ClockConfig+0x260>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d1ed      	bne.n	8004548 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004578:	4b1a      	ldr	r3, [pc, #104]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4917      	ldr	r1, [pc, #92]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004596:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	490f      	ldr	r1, [pc, #60]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045aa:	f000 f825 	bl	80045f8 <HAL_RCC_GetSysClockFreq>
 80045ae:	4602      	mov	r2, r0
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <HAL_RCC_ClockConfig+0x264>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	490c      	ldr	r1, [pc, #48]	; (80045ec <HAL_RCC_ClockConfig+0x26c>)
 80045bc:	5ccb      	ldrb	r3, [r1, r3]
 80045be:	f003 031f 	and.w	r3, r3, #31
 80045c2:	fa22 f303 	lsr.w	r3, r2, r3
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <HAL_RCC_ClockConfig+0x270>)
 80045c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <HAL_RCC_ClockConfig+0x274>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fd fbf4 	bl	8001dbc <HAL_InitTick>
 80045d4:	4603      	mov	r3, r0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40022000 	.word	0x40022000
 80045e4:	40021000 	.word	0x40021000
 80045e8:	04c4b400 	.word	0x04c4b400
 80045ec:	08009cf8 	.word	0x08009cf8
 80045f0:	20000000 	.word	0x20000000
 80045f4:	20000004 	.word	0x20000004

080045f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045fe:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b04      	cmp	r3, #4
 8004608:	d102      	bne.n	8004610 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800460a:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e047      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004610:	4b27      	ldr	r3, [pc, #156]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 030c 	and.w	r3, r3, #12
 8004618:	2b08      	cmp	r3, #8
 800461a:	d102      	bne.n	8004622 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800461c:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	e03e      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004622:	4b23      	ldr	r3, [pc, #140]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b0c      	cmp	r3, #12
 800462c:	d136      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800462e:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	3301      	adds	r3, #1
 8004644:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d10c      	bne.n	8004666 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800464c:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004656:	68d2      	ldr	r2, [r2, #12]
 8004658:	0a12      	lsrs	r2, r2, #8
 800465a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	617b      	str	r3, [r7, #20]
      break;
 8004664:	e00c      	b.n	8004680 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	fbb2 f3f3 	udiv	r3, r2, r3
 800466e:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004670:	68d2      	ldr	r2, [r2, #12]
 8004672:	0a12      	lsrs	r2, r2, #8
 8004674:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004678:	fb02 f303 	mul.w	r3, r2, r3
 800467c:	617b      	str	r3, [r7, #20]
      break;
 800467e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	0e5b      	lsrs	r3, r3, #25
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	3301      	adds	r3, #1
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e001      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046a0:	693b      	ldr	r3, [r7, #16]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	00f42400 	.word	0x00f42400
 80046b8:	007a1200 	.word	0x007a1200

080046bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046c2:	681b      	ldr	r3, [r3, #0]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000000 	.word	0x20000000

080046d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046d8:	f7ff fff0 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 80046dc:	4602      	mov	r2, r0
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	4904      	ldr	r1, [pc, #16]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046ea:	5ccb      	ldrb	r3, [r1, r3]
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000
 80046fc:	08009d08 	.word	0x08009d08

08004700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004704:	f7ff ffda 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8004708:	4602      	mov	r2, r0
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	0adb      	lsrs	r3, r3, #11
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	4904      	ldr	r1, [pc, #16]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004716:	5ccb      	ldrb	r3, [r1, r3]
 8004718:	f003 031f 	and.w	r3, r3, #31
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40021000 	.word	0x40021000
 8004728:	08009d08 	.word	0x08009d08

0800472c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004732:	4b1e      	ldr	r3, [pc, #120]	; (80047ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	3301      	adds	r3, #1
 8004748:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d10c      	bne.n	800476a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004750:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	4a14      	ldr	r2, [pc, #80]	; (80047ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800475a:	68d2      	ldr	r2, [r2, #12]
 800475c:	0a12      	lsrs	r2, r2, #8
 800475e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	617b      	str	r3, [r7, #20]
    break;
 8004768:	e00c      	b.n	8004784 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800476a:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004772:	4a0e      	ldr	r2, [pc, #56]	; (80047ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004774:	68d2      	ldr	r2, [r2, #12]
 8004776:	0a12      	lsrs	r2, r2, #8
 8004778:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800477c:	fb02 f303 	mul.w	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]
    break;
 8004782:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004784:	4b09      	ldr	r3, [pc, #36]	; (80047ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	0e5b      	lsrs	r3, r3, #25
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	3301      	adds	r3, #1
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800479e:	687b      	ldr	r3, [r7, #4]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40021000 	.word	0x40021000
 80047b0:	007a1200 	.word	0x007a1200
 80047b4:	00f42400 	.word	0x00f42400

080047b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047c0:	2300      	movs	r3, #0
 80047c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047c4:	2300      	movs	r3, #0
 80047c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8098 	beq.w	8004906 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d6:	2300      	movs	r3, #0
 80047d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047da:	4b43      	ldr	r3, [pc, #268]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10d      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e6:	4b40      	ldr	r3, [pc, #256]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	4a3f      	ldr	r2, [pc, #252]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f0:	6593      	str	r3, [r2, #88]	; 0x58
 80047f2:	4b3d      	ldr	r3, [pc, #244]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047fe:	2301      	movs	r3, #1
 8004800:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004802:	4b3a      	ldr	r3, [pc, #232]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a39      	ldr	r2, [pc, #228]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800480e:	f7fd fb21 	bl	8001e54 <HAL_GetTick>
 8004812:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004814:	e009      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004816:	f7fd fb1d 	bl	8001e54 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d902      	bls.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	74fb      	strb	r3, [r7, #19]
        break;
 8004828:	e005      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800482a:	4b30      	ldr	r3, [pc, #192]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0ef      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004836:	7cfb      	ldrb	r3, [r7, #19]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d159      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800483c:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004846:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01e      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	429a      	cmp	r2, r3
 8004856:	d019      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004858:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004862:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004864:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004874:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800487c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004884:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d016      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fd fadd 	bl	8001e54 <HAL_GetTick>
 800489a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489c:	e00b      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489e:	f7fd fad9 	bl	8001e54 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d902      	bls.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	74fb      	strb	r3, [r7, #19]
            break;
 80048b4:	e006      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b6:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0ec      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80048c4:	7cfb      	ldrb	r3, [r7, #19]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10b      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048e0:	e008      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	74bb      	strb	r3, [r7, #18]
 80048e6:	e005      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f4:	7c7b      	ldrb	r3, [r7, #17]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fa:	4ba6      	ldr	r3, [pc, #664]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	4aa5      	ldr	r2, [pc, #660]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004904:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004912:	4ba0      	ldr	r3, [pc, #640]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f023 0203 	bic.w	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	499c      	ldr	r1, [pc, #624]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004934:	4b97      	ldr	r3, [pc, #604]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f023 020c 	bic.w	r2, r3, #12
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	4994      	ldr	r1, [pc, #592]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004956:	4b8f      	ldr	r3, [pc, #572]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	498b      	ldr	r1, [pc, #556]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004978:	4b86      	ldr	r3, [pc, #536]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	4983      	ldr	r1, [pc, #524]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800499a:	4b7e      	ldr	r3, [pc, #504]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	497a      	ldr	r1, [pc, #488]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049bc:	4b75      	ldr	r3, [pc, #468]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	4972      	ldr	r1, [pc, #456]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049de:	4b6d      	ldr	r3, [pc, #436]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	4969      	ldr	r1, [pc, #420]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a00:	4b64      	ldr	r3, [pc, #400]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4961      	ldr	r1, [pc, #388]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a22:	4b5c      	ldr	r3, [pc, #368]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	4958      	ldr	r1, [pc, #352]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d015      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a44:	4b53      	ldr	r3, [pc, #332]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	4950      	ldr	r1, [pc, #320]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a62:	d105      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a64:	4b4b      	ldr	r3, [pc, #300]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4a4a      	ldr	r2, [pc, #296]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a7c:	4b45      	ldr	r3, [pc, #276]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	4942      	ldr	r1, [pc, #264]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9c:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aa6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d015      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ab4:	4b37      	ldr	r3, [pc, #220]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	4934      	ldr	r1, [pc, #208]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad4:	4b2f      	ldr	r3, [pc, #188]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4a2e      	ldr	r2, [pc, #184]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ade:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d015      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aec:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afa:	4926      	ldr	r1, [pc, #152]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b0a:	d105      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a20      	ldr	r2, [pc, #128]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d015      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b24:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	4918      	ldr	r1, [pc, #96]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b42:	d105      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b44:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d015      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b5c:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6a:	490a      	ldr	r1, [pc, #40]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b88:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000

08004b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e09d      	b.n	8004ce6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d108      	bne.n	8004bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bba:	d009      	beq.n	8004bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	61da      	str	r2, [r3, #28]
 8004bc2:	e005      	b.n	8004bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fc fe72 	bl	80018d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c10:	d902      	bls.n	8004c18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e002      	b.n	8004c1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c26:	d007      	beq.n	8004c38 <HAL_SPI_Init+0xa0>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c30:	d002      	beq.n	8004c38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	ea42 0103 	orr.w	r1, r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	0c1b      	lsrs	r3, r3, #16
 8004c94:	f003 0204 	and.w	r2, r3, #4
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004cb4:	ea42 0103 	orr.w	r1, r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e049      	b.n	8004d94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fc fe21 	bl	800195c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	f000 fb7f 	bl	8005430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e049      	b.n	8004e42 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f841 	bl	8004e4a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f000 fb28 	bl	8005430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b082      	sub	sp, #8
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e049      	b.n	8004f04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f841 	bl	8004f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f000 fac7 	bl	8005430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e066      	b.n	800500c <HAL_TIM_OC_ConfigChannel+0xec>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b14      	cmp	r3, #20
 8004f4a:	d857      	bhi.n	8004ffc <HAL_TIM_OC_ConfigChannel+0xdc>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004ffd 	.word	0x08004ffd
 8004f5c:	08004ffd 	.word	0x08004ffd
 8004f60:	08004ffd 	.word	0x08004ffd
 8004f64:	08004fb7 	.word	0x08004fb7
 8004f68:	08004ffd 	.word	0x08004ffd
 8004f6c:	08004ffd 	.word	0x08004ffd
 8004f70:	08004ffd 	.word	0x08004ffd
 8004f74:	08004fc5 	.word	0x08004fc5
 8004f78:	08004ffd 	.word	0x08004ffd
 8004f7c:	08004ffd 	.word	0x08004ffd
 8004f80:	08004ffd 	.word	0x08004ffd
 8004f84:	08004fd3 	.word	0x08004fd3
 8004f88:	08004ffd 	.word	0x08004ffd
 8004f8c:	08004ffd 	.word	0x08004ffd
 8004f90:	08004ffd 	.word	0x08004ffd
 8004f94:	08004fe1 	.word	0x08004fe1
 8004f98:	08004ffd 	.word	0x08004ffd
 8004f9c:	08004ffd 	.word	0x08004ffd
 8004fa0:	08004ffd 	.word	0x08004ffd
 8004fa4:	08004fef 	.word	0x08004fef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 face 	bl	8005550 <TIM_OC1_SetConfig>
      break;
 8004fb4:	e025      	b.n	8005002 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fb57 	bl	8005670 <TIM_OC2_SetConfig>
      break;
 8004fc2:	e01e      	b.n	8005002 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fbda 	bl	8005784 <TIM_OC3_SetConfig>
      break;
 8004fd0:	e017      	b.n	8005002 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fc5b 	bl	8005894 <TIM_OC4_SetConfig>
      break;
 8004fde:	e010      	b.n	8005002 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fcde 	bl	80059a8 <TIM_OC5_SetConfig>
      break;
 8004fec:	e009      	b.n	8005002 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fd3b 	bl	8005a70 <TIM_OC6_SetConfig>
      break;
 8004ffa:	e002      	b.n	8005002 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8005000:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800500a:	7dfb      	ldrb	r3, [r7, #23]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800502e:	2302      	movs	r3, #2
 8005030:	e0ff      	b.n	8005232 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b14      	cmp	r3, #20
 800503e:	f200 80f0 	bhi.w	8005222 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005042:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005223 	.word	0x08005223
 8005050:	08005223 	.word	0x08005223
 8005054:	08005223 	.word	0x08005223
 8005058:	080050dd 	.word	0x080050dd
 800505c:	08005223 	.word	0x08005223
 8005060:	08005223 	.word	0x08005223
 8005064:	08005223 	.word	0x08005223
 8005068:	0800511f 	.word	0x0800511f
 800506c:	08005223 	.word	0x08005223
 8005070:	08005223 	.word	0x08005223
 8005074:	08005223 	.word	0x08005223
 8005078:	0800515f 	.word	0x0800515f
 800507c:	08005223 	.word	0x08005223
 8005080:	08005223 	.word	0x08005223
 8005084:	08005223 	.word	0x08005223
 8005088:	080051a1 	.word	0x080051a1
 800508c:	08005223 	.word	0x08005223
 8005090:	08005223 	.word	0x08005223
 8005094:	08005223 	.word	0x08005223
 8005098:	080051e1 	.word	0x080051e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fa54 	bl	8005550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	619a      	str	r2, [r3, #24]
      break;
 80050da:	e0a5      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fac4 	bl	8005670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6999      	ldr	r1, [r3, #24]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	619a      	str	r2, [r3, #24]
      break;
 800511c:	e084      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fb2d 	bl	8005784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0208 	orr.w	r2, r2, #8
 8005138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0204 	bic.w	r2, r2, #4
 8005148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69d9      	ldr	r1, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	61da      	str	r2, [r3, #28]
      break;
 800515c:	e064      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fb95 	bl	8005894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	021a      	lsls	r2, r3, #8
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	61da      	str	r2, [r3, #28]
      break;
 800519e:	e043      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fbfe 	bl	80059a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0208 	orr.w	r2, r2, #8
 80051ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0204 	bic.w	r2, r2, #4
 80051ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80051de:	e023      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fc42 	bl	8005a70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005220:	e002      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
      break;
 8005226:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop

0800523c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIM_ConfigClockSource+0x1c>
 8005254:	2302      	movs	r3, #2
 8005256:	e0de      	b.n	8005416 <HAL_TIM_ConfigClockSource+0x1da>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005276:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800527a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a63      	ldr	r2, [pc, #396]	; (8005420 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	f000 80a9 	beq.w	80053ea <HAL_TIM_ConfigClockSource+0x1ae>
 8005298:	4a61      	ldr	r2, [pc, #388]	; (8005420 <HAL_TIM_ConfigClockSource+0x1e4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	f200 80ae 	bhi.w	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 80052a0:	4a60      	ldr	r2, [pc, #384]	; (8005424 <HAL_TIM_ConfigClockSource+0x1e8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	f000 80a1 	beq.w	80053ea <HAL_TIM_ConfigClockSource+0x1ae>
 80052a8:	4a5e      	ldr	r2, [pc, #376]	; (8005424 <HAL_TIM_ConfigClockSource+0x1e8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f200 80a6 	bhi.w	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 80052b0:	4a5d      	ldr	r2, [pc, #372]	; (8005428 <HAL_TIM_ConfigClockSource+0x1ec>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	f000 8099 	beq.w	80053ea <HAL_TIM_ConfigClockSource+0x1ae>
 80052b8:	4a5b      	ldr	r2, [pc, #364]	; (8005428 <HAL_TIM_ConfigClockSource+0x1ec>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	f200 809e 	bhi.w	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 80052c0:	4a5a      	ldr	r2, [pc, #360]	; (800542c <HAL_TIM_ConfigClockSource+0x1f0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	f000 8091 	beq.w	80053ea <HAL_TIM_ConfigClockSource+0x1ae>
 80052c8:	4a58      	ldr	r2, [pc, #352]	; (800542c <HAL_TIM_ConfigClockSource+0x1f0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	f200 8096 	bhi.w	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 80052d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80052d4:	f000 8089 	beq.w	80053ea <HAL_TIM_ConfigClockSource+0x1ae>
 80052d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80052dc:	f200 808e 	bhi.w	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e4:	d03e      	beq.n	8005364 <HAL_TIM_ConfigClockSource+0x128>
 80052e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ea:	f200 8087 	bhi.w	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f2:	f000 8086 	beq.w	8005402 <HAL_TIM_ConfigClockSource+0x1c6>
 80052f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fa:	d87f      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 80052fc:	2b70      	cmp	r3, #112	; 0x70
 80052fe:	d01a      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0xfa>
 8005300:	2b70      	cmp	r3, #112	; 0x70
 8005302:	d87b      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 8005304:	2b60      	cmp	r3, #96	; 0x60
 8005306:	d050      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x16e>
 8005308:	2b60      	cmp	r3, #96	; 0x60
 800530a:	d877      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 800530c:	2b50      	cmp	r3, #80	; 0x50
 800530e:	d03c      	beq.n	800538a <HAL_TIM_ConfigClockSource+0x14e>
 8005310:	2b50      	cmp	r3, #80	; 0x50
 8005312:	d873      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d058      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x18e>
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d86f      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 800531c:	2b30      	cmp	r3, #48	; 0x30
 800531e:	d064      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x1ae>
 8005320:	2b30      	cmp	r3, #48	; 0x30
 8005322:	d86b      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 8005324:	2b20      	cmp	r3, #32
 8005326:	d060      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x1ae>
 8005328:	2b20      	cmp	r3, #32
 800532a:	d867      	bhi.n	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
 800532c:	2b00      	cmp	r3, #0
 800532e:	d05c      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x1ae>
 8005330:	2b10      	cmp	r3, #16
 8005332:	d05a      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x1ae>
 8005334:	e062      	b.n	80053fc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6899      	ldr	r1, [r3, #8]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f000 fc75 	bl	8005c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	609a      	str	r2, [r3, #8]
      break;
 8005362:	e04f      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f000 fc5e 	bl	8005c34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005386:	609a      	str	r2, [r3, #8]
      break;
 8005388:	e03c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6859      	ldr	r1, [r3, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	461a      	mov	r2, r3
 8005398:	f000 fbd0 	bl	8005b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2150      	movs	r1, #80	; 0x50
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fc29 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80053a8:	e02c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f000 fbef 	bl	8005b9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2160      	movs	r1, #96	; 0x60
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fc19 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80053c8:	e01c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	461a      	mov	r2, r3
 80053d8:	f000 fbb0 	bl	8005b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2140      	movs	r1, #64	; 0x40
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fc09 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80053e8:	e00c      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f000 fc00 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80053fa:	e003      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e000      	b.n	8005404 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005414:	7bfb      	ldrb	r3, [r7, #15]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	00100070 	.word	0x00100070
 8005424:	00100040 	.word	0x00100040
 8005428:	00100030 	.word	0x00100030
 800542c:	00100020 	.word	0x00100020

08005430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a3c      	ldr	r2, [pc, #240]	; (8005534 <TIM_Base_SetConfig+0x104>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00f      	beq.n	8005468 <TIM_Base_SetConfig+0x38>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544e:	d00b      	beq.n	8005468 <TIM_Base_SetConfig+0x38>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a39      	ldr	r2, [pc, #228]	; (8005538 <TIM_Base_SetConfig+0x108>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_Base_SetConfig+0x38>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a38      	ldr	r2, [pc, #224]	; (800553c <TIM_Base_SetConfig+0x10c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_Base_SetConfig+0x38>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a37      	ldr	r2, [pc, #220]	; (8005540 <TIM_Base_SetConfig+0x110>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d108      	bne.n	800547a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2d      	ldr	r2, [pc, #180]	; (8005534 <TIM_Base_SetConfig+0x104>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d01b      	beq.n	80054ba <TIM_Base_SetConfig+0x8a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005488:	d017      	beq.n	80054ba <TIM_Base_SetConfig+0x8a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2a      	ldr	r2, [pc, #168]	; (8005538 <TIM_Base_SetConfig+0x108>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <TIM_Base_SetConfig+0x8a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a29      	ldr	r2, [pc, #164]	; (800553c <TIM_Base_SetConfig+0x10c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00f      	beq.n	80054ba <TIM_Base_SetConfig+0x8a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a28      	ldr	r2, [pc, #160]	; (8005540 <TIM_Base_SetConfig+0x110>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00b      	beq.n	80054ba <TIM_Base_SetConfig+0x8a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a27      	ldr	r2, [pc, #156]	; (8005544 <TIM_Base_SetConfig+0x114>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d007      	beq.n	80054ba <TIM_Base_SetConfig+0x8a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a26      	ldr	r2, [pc, #152]	; (8005548 <TIM_Base_SetConfig+0x118>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d003      	beq.n	80054ba <TIM_Base_SetConfig+0x8a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a25      	ldr	r2, [pc, #148]	; (800554c <TIM_Base_SetConfig+0x11c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d108      	bne.n	80054cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a10      	ldr	r2, [pc, #64]	; (8005534 <TIM_Base_SetConfig+0x104>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00f      	beq.n	8005518 <TIM_Base_SetConfig+0xe8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a11      	ldr	r2, [pc, #68]	; (8005540 <TIM_Base_SetConfig+0x110>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00b      	beq.n	8005518 <TIM_Base_SetConfig+0xe8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a10      	ldr	r2, [pc, #64]	; (8005544 <TIM_Base_SetConfig+0x114>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d007      	beq.n	8005518 <TIM_Base_SetConfig+0xe8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a0f      	ldr	r2, [pc, #60]	; (8005548 <TIM_Base_SetConfig+0x118>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d003      	beq.n	8005518 <TIM_Base_SetConfig+0xe8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a0e      	ldr	r2, [pc, #56]	; (800554c <TIM_Base_SetConfig+0x11c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d103      	bne.n	8005520 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	615a      	str	r2, [r3, #20]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40012c00 	.word	0x40012c00
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40013400 	.word	0x40013400
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800

08005550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f023 0302 	bic.w	r3, r3, #2
 800559c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a2c      	ldr	r2, [pc, #176]	; (800565c <TIM_OC1_SetConfig+0x10c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00f      	beq.n	80055d0 <TIM_OC1_SetConfig+0x80>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a2b      	ldr	r2, [pc, #172]	; (8005660 <TIM_OC1_SetConfig+0x110>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00b      	beq.n	80055d0 <TIM_OC1_SetConfig+0x80>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a2a      	ldr	r2, [pc, #168]	; (8005664 <TIM_OC1_SetConfig+0x114>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <TIM_OC1_SetConfig+0x80>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a29      	ldr	r2, [pc, #164]	; (8005668 <TIM_OC1_SetConfig+0x118>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_OC1_SetConfig+0x80>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a28      	ldr	r2, [pc, #160]	; (800566c <TIM_OC1_SetConfig+0x11c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d10c      	bne.n	80055ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f023 0308 	bic.w	r3, r3, #8
 80055d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f023 0304 	bic.w	r3, r3, #4
 80055e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a1b      	ldr	r2, [pc, #108]	; (800565c <TIM_OC1_SetConfig+0x10c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00f      	beq.n	8005612 <TIM_OC1_SetConfig+0xc2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a1a      	ldr	r2, [pc, #104]	; (8005660 <TIM_OC1_SetConfig+0x110>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00b      	beq.n	8005612 <TIM_OC1_SetConfig+0xc2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a19      	ldr	r2, [pc, #100]	; (8005664 <TIM_OC1_SetConfig+0x114>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d007      	beq.n	8005612 <TIM_OC1_SetConfig+0xc2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a18      	ldr	r2, [pc, #96]	; (8005668 <TIM_OC1_SetConfig+0x118>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d003      	beq.n	8005612 <TIM_OC1_SetConfig+0xc2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a17      	ldr	r2, [pc, #92]	; (800566c <TIM_OC1_SetConfig+0x11c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d111      	bne.n	8005636 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40012c00 	.word	0x40012c00
 8005660:	40013400 	.word	0x40013400
 8005664:	40014000 	.word	0x40014000
 8005668:	40014400 	.word	0x40014400
 800566c:	40014800 	.word	0x40014800

08005670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f023 0210 	bic.w	r2, r3, #16
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800569e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0320 	bic.w	r3, r3, #32
 80056be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a28      	ldr	r2, [pc, #160]	; (8005770 <TIM_OC2_SetConfig+0x100>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_OC2_SetConfig+0x6c>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a27      	ldr	r2, [pc, #156]	; (8005774 <TIM_OC2_SetConfig+0x104>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d10d      	bne.n	80056f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <TIM_OC2_SetConfig+0x100>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_OC2_SetConfig+0xb0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a1c      	ldr	r2, [pc, #112]	; (8005774 <TIM_OC2_SetConfig+0x104>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00b      	beq.n	8005720 <TIM_OC2_SetConfig+0xb0>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a1b      	ldr	r2, [pc, #108]	; (8005778 <TIM_OC2_SetConfig+0x108>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_OC2_SetConfig+0xb0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a1a      	ldr	r2, [pc, #104]	; (800577c <TIM_OC2_SetConfig+0x10c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_OC2_SetConfig+0xb0>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a19      	ldr	r2, [pc, #100]	; (8005780 <TIM_OC2_SetConfig+0x110>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d113      	bne.n	8005748 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800572e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40013400 	.word	0x40013400
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a27      	ldr	r2, [pc, #156]	; (8005880 <TIM_OC3_SetConfig+0xfc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_OC3_SetConfig+0x6a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a26      	ldr	r2, [pc, #152]	; (8005884 <TIM_OC3_SetConfig+0x100>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d10d      	bne.n	800580a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1c      	ldr	r2, [pc, #112]	; (8005880 <TIM_OC3_SetConfig+0xfc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00f      	beq.n	8005832 <TIM_OC3_SetConfig+0xae>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <TIM_OC3_SetConfig+0x100>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00b      	beq.n	8005832 <TIM_OC3_SetConfig+0xae>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a1a      	ldr	r2, [pc, #104]	; (8005888 <TIM_OC3_SetConfig+0x104>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <TIM_OC3_SetConfig+0xae>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a19      	ldr	r2, [pc, #100]	; (800588c <TIM_OC3_SetConfig+0x108>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <TIM_OC3_SetConfig+0xae>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a18      	ldr	r2, [pc, #96]	; (8005890 <TIM_OC3_SetConfig+0x10c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d113      	bne.n	800585a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	40012c00 	.word	0x40012c00
 8005884:	40013400 	.word	0x40013400
 8005888:	40014000 	.word	0x40014000
 800588c:	40014400 	.word	0x40014400
 8005890:	40014800 	.word	0x40014800

08005894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	031b      	lsls	r3, r3, #12
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a28      	ldr	r2, [pc, #160]	; (8005994 <TIM_OC4_SetConfig+0x100>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_OC4_SetConfig+0x6c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a27      	ldr	r2, [pc, #156]	; (8005998 <TIM_OC4_SetConfig+0x104>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10d      	bne.n	800591c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	031b      	lsls	r3, r3, #12
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800591a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <TIM_OC4_SetConfig+0x100>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00f      	beq.n	8005944 <TIM_OC4_SetConfig+0xb0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <TIM_OC4_SetConfig+0x104>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00b      	beq.n	8005944 <TIM_OC4_SetConfig+0xb0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1b      	ldr	r2, [pc, #108]	; (800599c <TIM_OC4_SetConfig+0x108>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <TIM_OC4_SetConfig+0xb0>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a1a      	ldr	r2, [pc, #104]	; (80059a0 <TIM_OC4_SetConfig+0x10c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_OC4_SetConfig+0xb0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <TIM_OC4_SetConfig+0x110>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d113      	bne.n	800596c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800594a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005952:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	019b      	lsls	r3, r3, #6
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	019b      	lsls	r3, r3, #6
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800

080059a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	041b      	lsls	r3, r3, #16
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <TIM_OC5_SetConfig+0xb4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00f      	beq.n	8005a22 <TIM_OC5_SetConfig+0x7a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <TIM_OC5_SetConfig+0xb8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_OC5_SetConfig+0x7a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <TIM_OC5_SetConfig+0xbc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <TIM_OC5_SetConfig+0x7a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <TIM_OC5_SetConfig+0xc0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_OC5_SetConfig+0x7a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <TIM_OC5_SetConfig+0xc4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d109      	bne.n	8005a36 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40012c00 	.word	0x40012c00
 8005a60:	40013400 	.word	0x40013400
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40014400 	.word	0x40014400
 8005a6c:	40014800 	.word	0x40014800

08005a70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	051b      	lsls	r3, r3, #20
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a18      	ldr	r2, [pc, #96]	; (8005b28 <TIM_OC6_SetConfig+0xb8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00f      	beq.n	8005aec <TIM_OC6_SetConfig+0x7c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <TIM_OC6_SetConfig+0xbc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d00b      	beq.n	8005aec <TIM_OC6_SetConfig+0x7c>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a16      	ldr	r2, [pc, #88]	; (8005b30 <TIM_OC6_SetConfig+0xc0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d007      	beq.n	8005aec <TIM_OC6_SetConfig+0x7c>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a15      	ldr	r2, [pc, #84]	; (8005b34 <TIM_OC6_SetConfig+0xc4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_OC6_SetConfig+0x7c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a14      	ldr	r2, [pc, #80]	; (8005b38 <TIM_OC6_SetConfig+0xc8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d109      	bne.n	8005b00 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40013400 	.word	0x40013400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800

08005b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f023 0201 	bic.w	r2, r3, #1
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f023 030a 	bic.w	r3, r3, #10
 8005b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b087      	sub	sp, #28
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f023 0210 	bic.w	r2, r3, #16
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	031b      	lsls	r3, r3, #12
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f043 0307 	orr.w	r3, r3, #7
 8005c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e065      	b.n	8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a2c      	ldr	r2, [pc, #176]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2b      	ldr	r2, [pc, #172]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d108      	bne.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a1b      	ldr	r2, [pc, #108]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d018      	beq.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d02:	d013      	beq.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a18      	ldr	r2, [pc, #96]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00e      	beq.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d009      	beq.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a12      	ldr	r2, [pc, #72]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10c      	bne.n	8005d46 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40013400 	.word	0x40013400
 8005d6c:	40000400 	.word	0x40000400
 8005d70:	40000800 	.word	0x40000800
 8005d74:	40014000 	.word	0x40014000

08005d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e087      	b.n	8005ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a27      	ldr	r2, [pc, #156]	; (8005eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d004      	beq.n	8005e22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a25      	ldr	r2, [pc, #148]	; (8005eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d106      	bne.n	8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1e      	ldr	r2, [pc, #120]	; (8005eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1d      	ldr	r2, [pc, #116]	; (8005eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d126      	bne.n	8005e92 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4e:	051b      	lsls	r3, r3, #20
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a0e      	ldr	r2, [pc, #56]	; (8005eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a0d      	ldr	r2, [pc, #52]	; (8005eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d106      	bne.n	8005e92 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40013400 	.word	0x40013400

08005eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e042      	b.n	8005f50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fb fda9 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2224      	movs	r2, #36	; 0x24
 8005ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fbfa 	bl	80066f4 <UART_SetConfig>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e022      	b.n	8005f50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 feba 	bl	8006c8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 ff41 	bl	8006dd0 <UART_CheckIdleState>
 8005f4e:	4603      	mov	r3, r0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	f040 8083 	bne.w	800607a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_UART_Transmit+0x28>
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e07b      	b.n	800607c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_UART_Transmit+0x3a>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e074      	b.n	800607c <HAL_UART_Transmit+0x124>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2221      	movs	r2, #33	; 0x21
 8005fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005faa:	f7fb ff53 	bl	8001e54 <HAL_GetTick>
 8005fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	88fa      	ldrh	r2, [r7, #6]
 8005fbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc8:	d108      	bne.n	8005fdc <HAL_UART_Transmit+0x84>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	e003      	b.n	8005fe4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005fec:	e02c      	b.n	8006048 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2180      	movs	r1, #128	; 0x80
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 ff34 	bl	8006e66 <UART_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e039      	b.n	800607c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10b      	bne.n	8006026 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800601c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	3302      	adds	r3, #2
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	e007      	b.n	8006036 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	781a      	ldrb	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	3301      	adds	r3, #1
 8006034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1cc      	bne.n	8005fee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2200      	movs	r2, #0
 800605c:	2140      	movs	r1, #64	; 0x40
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 ff01 	bl	8006e66 <UART_WaitOnFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e006      	b.n	800607c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	e000      	b.n	800607c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800607a:	2302      	movs	r3, #2
  }
}
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b0ba      	sub	sp, #232	; 0xe8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80060ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80060b2:	4013      	ands	r3, r2
 80060b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80060b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11b      	bne.n	80060f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d015      	beq.n	80060f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d0:	f003 0320 	and.w	r3, r3, #32
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d105      	bne.n	80060e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 82d6 	beq.w	800669a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
      }
      return;
 80060f6:	e2d0      	b.n	800669a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 811f 	beq.w	8006340 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006102:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006106:	4b8b      	ldr	r3, [pc, #556]	; (8006334 <HAL_UART_IRQHandler+0x2b0>)
 8006108:	4013      	ands	r3, r2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800610e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006112:	4b89      	ldr	r3, [pc, #548]	; (8006338 <HAL_UART_IRQHandler+0x2b4>)
 8006114:	4013      	ands	r3, r2
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8112 	beq.w	8006340 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800611c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d011      	beq.n	800614c <HAL_UART_IRQHandler+0xc8>
 8006128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00b      	beq.n	800614c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2201      	movs	r2, #1
 800613a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006142:	f043 0201 	orr.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800614c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d011      	beq.n	800617c <HAL_UART_IRQHandler+0xf8>
 8006158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00b      	beq.n	800617c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2202      	movs	r2, #2
 800616a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006172:	f043 0204 	orr.w	r2, r3, #4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800617c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d011      	beq.n	80061ac <HAL_UART_IRQHandler+0x128>
 8006188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00b      	beq.n	80061ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2204      	movs	r2, #4
 800619a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a2:	f043 0202 	orr.w	r2, r3, #2
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d017      	beq.n	80061e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80061b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d105      	bne.n	80061d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80061c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80061c8:	4b5a      	ldr	r3, [pc, #360]	; (8006334 <HAL_UART_IRQHandler+0x2b0>)
 80061ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2208      	movs	r2, #8
 80061d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061de:	f043 0208 	orr.w	r2, r3, #8
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d012      	beq.n	800621a <HAL_UART_IRQHandler+0x196>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00c      	beq.n	800621a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006210:	f043 0220 	orr.w	r2, r3, #32
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 823c 	beq.w	800669e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d013      	beq.n	800625a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b00      	cmp	r3, #0
 800623c:	d105      	bne.n	800624a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800623e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006260:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d005      	beq.n	800627e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006276:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800627a:	2b00      	cmp	r3, #0
 800627c:	d04f      	beq.n	800631e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 feb9 	bl	8006ff6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d141      	bne.n	8006316 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3308      	adds	r3, #8
 8006298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80062a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3308      	adds	r3, #8
 80062ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1d9      	bne.n	8006292 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d013      	beq.n	800630e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ea:	4a14      	ldr	r2, [pc, #80]	; (800633c <HAL_UART_IRQHandler+0x2b8>)
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fd f92d 	bl	8003552 <HAL_DMA_Abort_IT>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d017      	beq.n	800632e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006308:	4610      	mov	r0, r2
 800630a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630c:	e00f      	b.n	800632e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f9da 	bl	80066c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006314:	e00b      	b.n	800632e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f9d6 	bl	80066c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	e007      	b.n	800632e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f9d2 	bl	80066c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800632c:	e1b7      	b.n	800669e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800632e:	bf00      	nop
    return;
 8006330:	e1b5      	b.n	800669e <HAL_UART_IRQHandler+0x61a>
 8006332:	bf00      	nop
 8006334:	10000001 	.word	0x10000001
 8006338:	04000120 	.word	0x04000120
 800633c:	080070c3 	.word	0x080070c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006344:	2b01      	cmp	r3, #1
 8006346:	f040 814a 	bne.w	80065de <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800634a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8143 	beq.w	80065de <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 813c 	beq.w	80065de <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2210      	movs	r2, #16
 800636c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	f040 80b5 	bne.w	80064e8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800638a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8187 	beq.w	80066a2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800639a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800639e:	429a      	cmp	r2, r3
 80063a0:	f080 817f 	bcs.w	80066a2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f040 8086 	bne.w	80064cc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006402:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1da      	bne.n	80063c0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3308      	adds	r3, #8
 8006410:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800641a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800641c:	f023 0301 	bic.w	r3, r3, #1
 8006420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3308      	adds	r3, #8
 800642a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800642e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006432:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006436:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e1      	bne.n	800640a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3308      	adds	r3, #8
 800644c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800645c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3308      	adds	r3, #8
 8006466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800646a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800646c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006470:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e3      	bne.n	8006446 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800649a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649c:	f023 0310 	bic.w	r3, r3, #16
 80064a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80064b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e4      	bne.n	800648c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fc ffea 	bl	80034a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	b29b      	uxth	r3, r3
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f8fb 	bl	80066dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064e6:	e0dc      	b.n	80066a2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006502:	b29b      	uxth	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 80ce 	beq.w	80066a6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800650a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80c9 	beq.w	80066a6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006528:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006536:	647b      	str	r3, [r7, #68]	; 0x44
 8006538:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800653c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e4      	bne.n	8006514 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	623b      	str	r3, [r7, #32]
   return(result);
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3308      	adds	r3, #8
 800656e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006572:	633a      	str	r2, [r7, #48]	; 0x30
 8006574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e1      	bne.n	800654a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0310 	bic.w	r3, r3, #16
 80065ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e4      	bne.n	800659a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f880 	bl	80066dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065dc:	e063      	b.n	80066a6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <HAL_UART_IRQHandler+0x584>
 80065ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d008      	beq.n	8006608 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fd9f 	bl	8007144 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006606:	e051      	b.n	80066ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006610:	2b00      	cmp	r3, #0
 8006612:	d014      	beq.n	800663e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b00      	cmp	r3, #0
 800661e:	d105      	bne.n	800662c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006630:	2b00      	cmp	r3, #0
 8006632:	d03a      	beq.n	80066aa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
    }
    return;
 800663c:	e035      	b.n	80066aa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_UART_IRQHandler+0x5da>
 800664a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fd49 	bl	80070ee <UART_EndTransmit_IT>
    return;
 800665c:	e026      	b.n	80066ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800665e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006662:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d009      	beq.n	800667e <HAL_UART_IRQHandler+0x5fa>
 800666a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fd78 	bl	800716c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800667c:	e016      	b.n	80066ac <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d010      	beq.n	80066ac <HAL_UART_IRQHandler+0x628>
 800668a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668e:	2b00      	cmp	r3, #0
 8006690:	da0c      	bge.n	80066ac <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fd60 	bl	8007158 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006698:	e008      	b.n	80066ac <HAL_UART_IRQHandler+0x628>
      return;
 800669a:	bf00      	nop
 800669c:	e006      	b.n	80066ac <HAL_UART_IRQHandler+0x628>
    return;
 800669e:	bf00      	nop
 80066a0:	e004      	b.n	80066ac <HAL_UART_IRQHandler+0x628>
      return;
 80066a2:	bf00      	nop
 80066a4:	e002      	b.n	80066ac <HAL_UART_IRQHandler+0x628>
      return;
 80066a6:	bf00      	nop
 80066a8:	e000      	b.n	80066ac <HAL_UART_IRQHandler+0x628>
    return;
 80066aa:	bf00      	nop
  }
}
 80066ac:	37e8      	adds	r7, #232	; 0xe8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop

080066b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	460b      	mov	r3, r1
 80066e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066f8:	b08c      	sub	sp, #48	; 0x30
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	431a      	orrs	r2, r3
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	431a      	orrs	r2, r3
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	4313      	orrs	r3, r2
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4bab      	ldr	r3, [pc, #684]	; (80069d0 <UART_SetConfig+0x2dc>)
 8006724:	4013      	ands	r3, r2
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	6812      	ldr	r2, [r2, #0]
 800672a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800672c:	430b      	orrs	r3, r1
 800672e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4aa0      	ldr	r2, [pc, #640]	; (80069d4 <UART_SetConfig+0x2e0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d004      	beq.n	8006760 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800675c:	4313      	orrs	r3, r2
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800676a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006774:	430b      	orrs	r3, r1
 8006776:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	f023 010f 	bic.w	r1, r3, #15
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a91      	ldr	r2, [pc, #580]	; (80069d8 <UART_SetConfig+0x2e4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d125      	bne.n	80067e4 <UART_SetConfig+0xf0>
 8006798:	4b90      	ldr	r3, [pc, #576]	; (80069dc <UART_SetConfig+0x2e8>)
 800679a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d81a      	bhi.n	80067dc <UART_SetConfig+0xe8>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0xb8>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067bd 	.word	0x080067bd
 80067b0:	080067cd 	.word	0x080067cd
 80067b4:	080067c5 	.word	0x080067c5
 80067b8:	080067d5 	.word	0x080067d5
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c2:	e0d6      	b.n	8006972 <UART_SetConfig+0x27e>
 80067c4:	2302      	movs	r3, #2
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ca:	e0d2      	b.n	8006972 <UART_SetConfig+0x27e>
 80067cc:	2304      	movs	r3, #4
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d2:	e0ce      	b.n	8006972 <UART_SetConfig+0x27e>
 80067d4:	2308      	movs	r3, #8
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067da:	e0ca      	b.n	8006972 <UART_SetConfig+0x27e>
 80067dc:	2310      	movs	r3, #16
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e2:	e0c6      	b.n	8006972 <UART_SetConfig+0x27e>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a7d      	ldr	r2, [pc, #500]	; (80069e0 <UART_SetConfig+0x2ec>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d138      	bne.n	8006860 <UART_SetConfig+0x16c>
 80067ee:	4b7b      	ldr	r3, [pc, #492]	; (80069dc <UART_SetConfig+0x2e8>)
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f4:	f003 030c 	and.w	r3, r3, #12
 80067f8:	2b0c      	cmp	r3, #12
 80067fa:	d82d      	bhi.n	8006858 <UART_SetConfig+0x164>
 80067fc:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <UART_SetConfig+0x110>)
 80067fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006802:	bf00      	nop
 8006804:	08006839 	.word	0x08006839
 8006808:	08006859 	.word	0x08006859
 800680c:	08006859 	.word	0x08006859
 8006810:	08006859 	.word	0x08006859
 8006814:	08006849 	.word	0x08006849
 8006818:	08006859 	.word	0x08006859
 800681c:	08006859 	.word	0x08006859
 8006820:	08006859 	.word	0x08006859
 8006824:	08006841 	.word	0x08006841
 8006828:	08006859 	.word	0x08006859
 800682c:	08006859 	.word	0x08006859
 8006830:	08006859 	.word	0x08006859
 8006834:	08006851 	.word	0x08006851
 8006838:	2300      	movs	r3, #0
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683e:	e098      	b.n	8006972 <UART_SetConfig+0x27e>
 8006840:	2302      	movs	r3, #2
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006846:	e094      	b.n	8006972 <UART_SetConfig+0x27e>
 8006848:	2304      	movs	r3, #4
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800684e:	e090      	b.n	8006972 <UART_SetConfig+0x27e>
 8006850:	2308      	movs	r3, #8
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006856:	e08c      	b.n	8006972 <UART_SetConfig+0x27e>
 8006858:	2310      	movs	r3, #16
 800685a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685e:	e088      	b.n	8006972 <UART_SetConfig+0x27e>
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a5f      	ldr	r2, [pc, #380]	; (80069e4 <UART_SetConfig+0x2f0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d125      	bne.n	80068b6 <UART_SetConfig+0x1c2>
 800686a:	4b5c      	ldr	r3, [pc, #368]	; (80069dc <UART_SetConfig+0x2e8>)
 800686c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006870:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006874:	2b30      	cmp	r3, #48	; 0x30
 8006876:	d016      	beq.n	80068a6 <UART_SetConfig+0x1b2>
 8006878:	2b30      	cmp	r3, #48	; 0x30
 800687a:	d818      	bhi.n	80068ae <UART_SetConfig+0x1ba>
 800687c:	2b20      	cmp	r3, #32
 800687e:	d00a      	beq.n	8006896 <UART_SetConfig+0x1a2>
 8006880:	2b20      	cmp	r3, #32
 8006882:	d814      	bhi.n	80068ae <UART_SetConfig+0x1ba>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <UART_SetConfig+0x19a>
 8006888:	2b10      	cmp	r3, #16
 800688a:	d008      	beq.n	800689e <UART_SetConfig+0x1aa>
 800688c:	e00f      	b.n	80068ae <UART_SetConfig+0x1ba>
 800688e:	2300      	movs	r3, #0
 8006890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006894:	e06d      	b.n	8006972 <UART_SetConfig+0x27e>
 8006896:	2302      	movs	r3, #2
 8006898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689c:	e069      	b.n	8006972 <UART_SetConfig+0x27e>
 800689e:	2304      	movs	r3, #4
 80068a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a4:	e065      	b.n	8006972 <UART_SetConfig+0x27e>
 80068a6:	2308      	movs	r3, #8
 80068a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ac:	e061      	b.n	8006972 <UART_SetConfig+0x27e>
 80068ae:	2310      	movs	r3, #16
 80068b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b4:	e05d      	b.n	8006972 <UART_SetConfig+0x27e>
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a4b      	ldr	r2, [pc, #300]	; (80069e8 <UART_SetConfig+0x2f4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d125      	bne.n	800690c <UART_SetConfig+0x218>
 80068c0:	4b46      	ldr	r3, [pc, #280]	; (80069dc <UART_SetConfig+0x2e8>)
 80068c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068ca:	2bc0      	cmp	r3, #192	; 0xc0
 80068cc:	d016      	beq.n	80068fc <UART_SetConfig+0x208>
 80068ce:	2bc0      	cmp	r3, #192	; 0xc0
 80068d0:	d818      	bhi.n	8006904 <UART_SetConfig+0x210>
 80068d2:	2b80      	cmp	r3, #128	; 0x80
 80068d4:	d00a      	beq.n	80068ec <UART_SetConfig+0x1f8>
 80068d6:	2b80      	cmp	r3, #128	; 0x80
 80068d8:	d814      	bhi.n	8006904 <UART_SetConfig+0x210>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <UART_SetConfig+0x1f0>
 80068de:	2b40      	cmp	r3, #64	; 0x40
 80068e0:	d008      	beq.n	80068f4 <UART_SetConfig+0x200>
 80068e2:	e00f      	b.n	8006904 <UART_SetConfig+0x210>
 80068e4:	2300      	movs	r3, #0
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ea:	e042      	b.n	8006972 <UART_SetConfig+0x27e>
 80068ec:	2302      	movs	r3, #2
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f2:	e03e      	b.n	8006972 <UART_SetConfig+0x27e>
 80068f4:	2304      	movs	r3, #4
 80068f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fa:	e03a      	b.n	8006972 <UART_SetConfig+0x27e>
 80068fc:	2308      	movs	r3, #8
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006902:	e036      	b.n	8006972 <UART_SetConfig+0x27e>
 8006904:	2310      	movs	r3, #16
 8006906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690a:	e032      	b.n	8006972 <UART_SetConfig+0x27e>
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a30      	ldr	r2, [pc, #192]	; (80069d4 <UART_SetConfig+0x2e0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d12a      	bne.n	800696c <UART_SetConfig+0x278>
 8006916:	4b31      	ldr	r3, [pc, #196]	; (80069dc <UART_SetConfig+0x2e8>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006924:	d01a      	beq.n	800695c <UART_SetConfig+0x268>
 8006926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800692a:	d81b      	bhi.n	8006964 <UART_SetConfig+0x270>
 800692c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006930:	d00c      	beq.n	800694c <UART_SetConfig+0x258>
 8006932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006936:	d815      	bhi.n	8006964 <UART_SetConfig+0x270>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <UART_SetConfig+0x250>
 800693c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006940:	d008      	beq.n	8006954 <UART_SetConfig+0x260>
 8006942:	e00f      	b.n	8006964 <UART_SetConfig+0x270>
 8006944:	2300      	movs	r3, #0
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694a:	e012      	b.n	8006972 <UART_SetConfig+0x27e>
 800694c:	2302      	movs	r3, #2
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006952:	e00e      	b.n	8006972 <UART_SetConfig+0x27e>
 8006954:	2304      	movs	r3, #4
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800695a:	e00a      	b.n	8006972 <UART_SetConfig+0x27e>
 800695c:	2308      	movs	r3, #8
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006962:	e006      	b.n	8006972 <UART_SetConfig+0x27e>
 8006964:	2310      	movs	r3, #16
 8006966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800696a:	e002      	b.n	8006972 <UART_SetConfig+0x27e>
 800696c:	2310      	movs	r3, #16
 800696e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a17      	ldr	r2, [pc, #92]	; (80069d4 <UART_SetConfig+0x2e0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	f040 80a8 	bne.w	8006ace <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800697e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006982:	2b08      	cmp	r3, #8
 8006984:	d834      	bhi.n	80069f0 <UART_SetConfig+0x2fc>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x298>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069f1 	.word	0x080069f1
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069f1 	.word	0x080069f1
 800699c:	080069bf 	.word	0x080069bf
 80069a0:	080069f1 	.word	0x080069f1
 80069a4:	080069f1 	.word	0x080069f1
 80069a8:	080069f1 	.word	0x080069f1
 80069ac:	080069c7 	.word	0x080069c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b0:	f7fd fe90 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 80069b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069b6:	e021      	b.n	80069fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <UART_SetConfig+0x2f8>)
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069bc:	e01e      	b.n	80069fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069be:	f7fd fe1b 	bl	80045f8 <HAL_RCC_GetSysClockFreq>
 80069c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069c4:	e01a      	b.n	80069fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069cc:	e016      	b.n	80069fc <UART_SetConfig+0x308>
 80069ce:	bf00      	nop
 80069d0:	cfff69f3 	.word	0xcfff69f3
 80069d4:	40008000 	.word	0x40008000
 80069d8:	40013800 	.word	0x40013800
 80069dc:	40021000 	.word	0x40021000
 80069e0:	40004400 	.word	0x40004400
 80069e4:	40004800 	.word	0x40004800
 80069e8:	40004c00 	.word	0x40004c00
 80069ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 812a 	beq.w	8006c58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	4a9e      	ldr	r2, [pc, #632]	; (8006c84 <UART_SetConfig+0x590>)
 8006a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d305      	bcc.n	8006a34 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d903      	bls.n	8006a3c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a3a:	e10d      	b.n	8006c58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	2200      	movs	r2, #0
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	60fa      	str	r2, [r7, #12]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	4a8e      	ldr	r2, [pc, #568]	; (8006c84 <UART_SetConfig+0x590>)
 8006a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2200      	movs	r2, #0
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a5e:	f7fa f8cb 	bl	8000bf8 <__aeabi_uldivmod>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4610      	mov	r0, r2
 8006a68:	4619      	mov	r1, r3
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	020b      	lsls	r3, r1, #8
 8006a74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a78:	0202      	lsls	r2, r0, #8
 8006a7a:	6979      	ldr	r1, [r7, #20]
 8006a7c:	6849      	ldr	r1, [r1, #4]
 8006a7e:	0849      	lsrs	r1, r1, #1
 8006a80:	2000      	movs	r0, #0
 8006a82:	460c      	mov	r4, r1
 8006a84:	4605      	mov	r5, r0
 8006a86:	eb12 0804 	adds.w	r8, r2, r4
 8006a8a:	eb43 0905 	adc.w	r9, r3, r5
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	469a      	mov	sl, r3
 8006a96:	4693      	mov	fp, r2
 8006a98:	4652      	mov	r2, sl
 8006a9a:	465b      	mov	r3, fp
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7fa f8aa 	bl	8000bf8 <__aeabi_uldivmod>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ab2:	d308      	bcc.n	8006ac6 <UART_SetConfig+0x3d2>
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aba:	d204      	bcs.n	8006ac6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6a3a      	ldr	r2, [r7, #32]
 8006ac2:	60da      	str	r2, [r3, #12]
 8006ac4:	e0c8      	b.n	8006c58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006acc:	e0c4      	b.n	8006c58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad6:	d167      	bne.n	8006ba8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d828      	bhi.n	8006b32 <UART_SetConfig+0x43e>
 8006ae0:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x3f4>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	08006b33 	.word	0x08006b33
 8006af8:	08006b23 	.word	0x08006b23
 8006afc:	08006b33 	.word	0x08006b33
 8006b00:	08006b33 	.word	0x08006b33
 8006b04:	08006b33 	.word	0x08006b33
 8006b08:	08006b2b 	.word	0x08006b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7fd fde2 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8006b10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b12:	e014      	b.n	8006b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b14:	f7fd fdf4 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8006b18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b1a:	e010      	b.n	8006b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b1c:	4b5a      	ldr	r3, [pc, #360]	; (8006c88 <UART_SetConfig+0x594>)
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b20:	e00d      	b.n	8006b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b22:	f7fd fd69 	bl	80045f8 <HAL_RCC_GetSysClockFreq>
 8006b26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b28:	e009      	b.n	8006b3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b30:	e005      	b.n	8006b3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8089 	beq.w	8006c58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	4a4e      	ldr	r2, [pc, #312]	; (8006c84 <UART_SetConfig+0x590>)
 8006b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b50:	461a      	mov	r2, r3
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b58:	005a      	lsls	r2, r3, #1
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	441a      	add	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2b0f      	cmp	r3, #15
 8006b70:	d916      	bls.n	8006ba0 <UART_SetConfig+0x4ac>
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b78:	d212      	bcs.n	8006ba0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f023 030f 	bic.w	r3, r3, #15
 8006b82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	085b      	lsrs	r3, r3, #1
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	8bfb      	ldrh	r3, [r7, #30]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	8bfa      	ldrh	r2, [r7, #30]
 8006b9c:	60da      	str	r2, [r3, #12]
 8006b9e:	e05b      	b.n	8006c58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ba6:	e057      	b.n	8006c58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ba8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d828      	bhi.n	8006c02 <UART_SetConfig+0x50e>
 8006bb0:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0x4c4>)
 8006bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb6:	bf00      	nop
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	08006c03 	.word	0x08006c03
 8006bc8:	08006bf3 	.word	0x08006bf3
 8006bcc:	08006c03 	.word	0x08006c03
 8006bd0:	08006c03 	.word	0x08006c03
 8006bd4:	08006c03 	.word	0x08006c03
 8006bd8:	08006bfb 	.word	0x08006bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bdc:	f7fd fd7a 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8006be0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006be2:	e014      	b.n	8006c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be4:	f7fd fd8c 	bl	8004700 <HAL_RCC_GetPCLK2Freq>
 8006be8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bea:	e010      	b.n	8006c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bec:	4b26      	ldr	r3, [pc, #152]	; (8006c88 <UART_SetConfig+0x594>)
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bf0:	e00d      	b.n	8006c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fd fd01 	bl	80045f8 <HAL_RCC_GetSysClockFreq>
 8006bf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bf8:	e009      	b.n	8006c0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c00:	e005      	b.n	8006c0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d021      	beq.n	8006c58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	4a1a      	ldr	r2, [pc, #104]	; (8006c84 <UART_SetConfig+0x590>)
 8006c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	085b      	lsrs	r3, r3, #1
 8006c2c:	441a      	add	r2, r3
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	2b0f      	cmp	r3, #15
 8006c3c:	d909      	bls.n	8006c52 <UART_SetConfig+0x55e>
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c44:	d205      	bcs.n	8006c52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60da      	str	r2, [r3, #12]
 8006c50:	e002      	b.n	8006c58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2200      	movs	r2, #0
 8006c72:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006c74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3730      	adds	r7, #48	; 0x30
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c82:	bf00      	nop
 8006c84:	08009d10 	.word	0x08009d10
 8006c88:	00f42400 	.word	0x00f42400

08006c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01a      	beq.n	8006da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d8a:	d10a      	bne.n	8006da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	605a      	str	r2, [r3, #4]
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af02      	add	r7, sp, #8
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006de0:	f7fb f838 	bl	8001e54 <HAL_GetTick>
 8006de4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0308 	and.w	r3, r3, #8
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d10e      	bne.n	8006e12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f82f 	bl	8006e66 <UART_WaitOnFlagUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e025      	b.n	8006e5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d10e      	bne.n	8006e3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f819 	bl	8006e66 <UART_WaitOnFlagUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e00f      	b.n	8006e5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b09c      	sub	sp, #112	; 0x70
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	603b      	str	r3, [r7, #0]
 8006e72:	4613      	mov	r3, r2
 8006e74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e76:	e0a9      	b.n	8006fcc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	f000 80a5 	beq.w	8006fcc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e82:	f7fa ffe7 	bl	8001e54 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d302      	bcc.n	8006e98 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d140      	bne.n	8006f1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eac:	667b      	str	r3, [r7, #100]	; 0x64
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e6      	bne.n	8006e98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3308      	adds	r3, #8
 8006ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006eea:	64ba      	str	r2, [r7, #72]	; 0x48
 8006eec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e5      	bne.n	8006eca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e069      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d051      	beq.n	8006fcc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f36:	d149      	bne.n	8006fcc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
 8006f62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e6      	bne.n	8006f42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	613b      	str	r3, [r7, #16]
   return(result);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f023 0301 	bic.w	r3, r3, #1
 8006f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3308      	adds	r3, #8
 8006f92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f94:	623a      	str	r2, [r7, #32]
 8006f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	69f9      	ldr	r1, [r7, #28]
 8006f9a:	6a3a      	ldr	r2, [r7, #32]
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e010      	b.n	8006fee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69da      	ldr	r2, [r3, #28]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	bf0c      	ite	eq
 8006fdc:	2301      	moveq	r3, #1
 8006fde:	2300      	movne	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	f43f af46 	beq.w	8006e78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3770      	adds	r7, #112	; 0x70
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b095      	sub	sp, #84	; 0x54
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800701c:	643b      	str	r3, [r7, #64]	; 0x40
 800701e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e6      	bne.n	8006ffe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3308      	adds	r3, #8
 8007036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007046:	f023 0301 	bic.w	r3, r3, #1
 800704a:	64bb      	str	r3, [r7, #72]	; 0x48
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3308      	adds	r3, #8
 8007052:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007054:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800705a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e3      	bne.n	8007030 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800706c:	2b01      	cmp	r3, #1
 800706e:	d118      	bne.n	80070a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	60bb      	str	r3, [r7, #8]
   return(result);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f023 0310 	bic.w	r3, r3, #16
 8007084:	647b      	str	r3, [r7, #68]	; 0x44
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708e:	61bb      	str	r3, [r7, #24]
 8007090:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6979      	ldr	r1, [r7, #20]
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	613b      	str	r3, [r7, #16]
   return(result);
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e6      	bne.n	8007070 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80070b6:	bf00      	nop
 80070b8:	3754      	adds	r7, #84	; 0x54
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff faf1 	bl	80066c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e6:	bf00      	nop
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b088      	sub	sp, #32
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	60bb      	str	r3, [r7, #8]
   return(result);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	6979      	ldr	r1, [r7, #20]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	613b      	str	r3, [r7, #16]
   return(result);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e6      	bne.n	80070f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff fabc 	bl	80066b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800713c:	bf00      	nop
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800718e:	2b01      	cmp	r3, #1
 8007190:	d101      	bne.n	8007196 <HAL_UARTEx_DisableFifoMode+0x16>
 8007192:	2302      	movs	r3, #2
 8007194:	e027      	b.n	80071e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2224      	movs	r2, #36	; 0x24
 80071a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f022 0201 	bic.w	r2, r2, #1
 80071bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80071c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007206:	2302      	movs	r3, #2
 8007208:	e02d      	b.n	8007266 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2224      	movs	r2, #36	; 0x24
 8007216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0201 	bic.w	r2, r2, #1
 8007230:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f850 	bl	80072ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800727e:	2b01      	cmp	r3, #1
 8007280:	d101      	bne.n	8007286 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007282:	2302      	movs	r3, #2
 8007284:	e02d      	b.n	80072e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2224      	movs	r2, #36	; 0x24
 8007292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f812 	bl	80072ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d108      	bne.n	800730e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800730c:	e031      	b.n	8007372 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800730e:	2308      	movs	r3, #8
 8007310:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007312:	2308      	movs	r3, #8
 8007314:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	0e5b      	lsrs	r3, r3, #25
 800731e:	b2db      	uxtb	r3, r3
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	0f5b      	lsrs	r3, r3, #29
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	7b3a      	ldrb	r2, [r7, #12]
 800733a:	4911      	ldr	r1, [pc, #68]	; (8007380 <UARTEx_SetNbDataToProcess+0x94>)
 800733c:	5c8a      	ldrb	r2, [r1, r2]
 800733e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007342:	7b3a      	ldrb	r2, [r7, #12]
 8007344:	490f      	ldr	r1, [pc, #60]	; (8007384 <UARTEx_SetNbDataToProcess+0x98>)
 8007346:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007348:	fb93 f3f2 	sdiv	r3, r3, r2
 800734c:	b29a      	uxth	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	7b7a      	ldrb	r2, [r7, #13]
 8007358:	4909      	ldr	r1, [pc, #36]	; (8007380 <UARTEx_SetNbDataToProcess+0x94>)
 800735a:	5c8a      	ldrb	r2, [r1, r2]
 800735c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007360:	7b7a      	ldrb	r2, [r7, #13]
 8007362:	4908      	ldr	r1, [pc, #32]	; (8007384 <UARTEx_SetNbDataToProcess+0x98>)
 8007364:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007366:	fb93 f3f2 	sdiv	r3, r3, r2
 800736a:	b29a      	uxth	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007372:	bf00      	nop
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	08009d28 	.word	0x08009d28
 8007384:	08009d30 	.word	0x08009d30

08007388 <__cvt>:
 8007388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800738c:	ec55 4b10 	vmov	r4, r5, d0
 8007390:	2d00      	cmp	r5, #0
 8007392:	460e      	mov	r6, r1
 8007394:	4619      	mov	r1, r3
 8007396:	462b      	mov	r3, r5
 8007398:	bfbb      	ittet	lt
 800739a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800739e:	461d      	movlt	r5, r3
 80073a0:	2300      	movge	r3, #0
 80073a2:	232d      	movlt	r3, #45	; 0x2d
 80073a4:	700b      	strb	r3, [r1, #0]
 80073a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073ac:	4691      	mov	r9, r2
 80073ae:	f023 0820 	bic.w	r8, r3, #32
 80073b2:	bfbc      	itt	lt
 80073b4:	4622      	movlt	r2, r4
 80073b6:	4614      	movlt	r4, r2
 80073b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073bc:	d005      	beq.n	80073ca <__cvt+0x42>
 80073be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80073c2:	d100      	bne.n	80073c6 <__cvt+0x3e>
 80073c4:	3601      	adds	r6, #1
 80073c6:	2102      	movs	r1, #2
 80073c8:	e000      	b.n	80073cc <__cvt+0x44>
 80073ca:	2103      	movs	r1, #3
 80073cc:	ab03      	add	r3, sp, #12
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	ab02      	add	r3, sp, #8
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	ec45 4b10 	vmov	d0, r4, r5
 80073d8:	4653      	mov	r3, sl
 80073da:	4632      	mov	r2, r6
 80073dc:	f000 fe44 	bl	8008068 <_dtoa_r>
 80073e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073e4:	4607      	mov	r7, r0
 80073e6:	d102      	bne.n	80073ee <__cvt+0x66>
 80073e8:	f019 0f01 	tst.w	r9, #1
 80073ec:	d022      	beq.n	8007434 <__cvt+0xac>
 80073ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073f2:	eb07 0906 	add.w	r9, r7, r6
 80073f6:	d110      	bne.n	800741a <__cvt+0x92>
 80073f8:	783b      	ldrb	r3, [r7, #0]
 80073fa:	2b30      	cmp	r3, #48	; 0x30
 80073fc:	d10a      	bne.n	8007414 <__cvt+0x8c>
 80073fe:	2200      	movs	r2, #0
 8007400:	2300      	movs	r3, #0
 8007402:	4620      	mov	r0, r4
 8007404:	4629      	mov	r1, r5
 8007406:	f7f9 fb87 	bl	8000b18 <__aeabi_dcmpeq>
 800740a:	b918      	cbnz	r0, 8007414 <__cvt+0x8c>
 800740c:	f1c6 0601 	rsb	r6, r6, #1
 8007410:	f8ca 6000 	str.w	r6, [sl]
 8007414:	f8da 3000 	ldr.w	r3, [sl]
 8007418:	4499      	add	r9, r3
 800741a:	2200      	movs	r2, #0
 800741c:	2300      	movs	r3, #0
 800741e:	4620      	mov	r0, r4
 8007420:	4629      	mov	r1, r5
 8007422:	f7f9 fb79 	bl	8000b18 <__aeabi_dcmpeq>
 8007426:	b108      	cbz	r0, 800742c <__cvt+0xa4>
 8007428:	f8cd 900c 	str.w	r9, [sp, #12]
 800742c:	2230      	movs	r2, #48	; 0x30
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	454b      	cmp	r3, r9
 8007432:	d307      	bcc.n	8007444 <__cvt+0xbc>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007438:	1bdb      	subs	r3, r3, r7
 800743a:	4638      	mov	r0, r7
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	b004      	add	sp, #16
 8007440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007444:	1c59      	adds	r1, r3, #1
 8007446:	9103      	str	r1, [sp, #12]
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	e7f0      	b.n	800742e <__cvt+0xa6>

0800744c <__exponent>:
 800744c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800744e:	4603      	mov	r3, r0
 8007450:	2900      	cmp	r1, #0
 8007452:	bfb8      	it	lt
 8007454:	4249      	neglt	r1, r1
 8007456:	f803 2b02 	strb.w	r2, [r3], #2
 800745a:	bfb4      	ite	lt
 800745c:	222d      	movlt	r2, #45	; 0x2d
 800745e:	222b      	movge	r2, #43	; 0x2b
 8007460:	2909      	cmp	r1, #9
 8007462:	7042      	strb	r2, [r0, #1]
 8007464:	dd2a      	ble.n	80074bc <__exponent+0x70>
 8007466:	f10d 0207 	add.w	r2, sp, #7
 800746a:	4617      	mov	r7, r2
 800746c:	260a      	movs	r6, #10
 800746e:	4694      	mov	ip, r2
 8007470:	fb91 f5f6 	sdiv	r5, r1, r6
 8007474:	fb06 1415 	mls	r4, r6, r5, r1
 8007478:	3430      	adds	r4, #48	; 0x30
 800747a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800747e:	460c      	mov	r4, r1
 8007480:	2c63      	cmp	r4, #99	; 0x63
 8007482:	f102 32ff 	add.w	r2, r2, #4294967295
 8007486:	4629      	mov	r1, r5
 8007488:	dcf1      	bgt.n	800746e <__exponent+0x22>
 800748a:	3130      	adds	r1, #48	; 0x30
 800748c:	f1ac 0402 	sub.w	r4, ip, #2
 8007490:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007494:	1c41      	adds	r1, r0, #1
 8007496:	4622      	mov	r2, r4
 8007498:	42ba      	cmp	r2, r7
 800749a:	d30a      	bcc.n	80074b2 <__exponent+0x66>
 800749c:	f10d 0209 	add.w	r2, sp, #9
 80074a0:	eba2 020c 	sub.w	r2, r2, ip
 80074a4:	42bc      	cmp	r4, r7
 80074a6:	bf88      	it	hi
 80074a8:	2200      	movhi	r2, #0
 80074aa:	4413      	add	r3, r2
 80074ac:	1a18      	subs	r0, r3, r0
 80074ae:	b003      	add	sp, #12
 80074b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80074b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80074ba:	e7ed      	b.n	8007498 <__exponent+0x4c>
 80074bc:	2330      	movs	r3, #48	; 0x30
 80074be:	3130      	adds	r1, #48	; 0x30
 80074c0:	7083      	strb	r3, [r0, #2]
 80074c2:	70c1      	strb	r1, [r0, #3]
 80074c4:	1d03      	adds	r3, r0, #4
 80074c6:	e7f1      	b.n	80074ac <__exponent+0x60>

080074c8 <_printf_float>:
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	ed2d 8b02 	vpush	{d8}
 80074d0:	b08d      	sub	sp, #52	; 0x34
 80074d2:	460c      	mov	r4, r1
 80074d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80074d8:	4616      	mov	r6, r2
 80074da:	461f      	mov	r7, r3
 80074dc:	4605      	mov	r5, r0
 80074de:	f000 fcb5 	bl	8007e4c <_localeconv_r>
 80074e2:	f8d0 a000 	ldr.w	sl, [r0]
 80074e6:	4650      	mov	r0, sl
 80074e8:	f7f8 feea 	bl	80002c0 <strlen>
 80074ec:	2300      	movs	r3, #0
 80074ee:	930a      	str	r3, [sp, #40]	; 0x28
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	9305      	str	r3, [sp, #20]
 80074f4:	f8d8 3000 	ldr.w	r3, [r8]
 80074f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80074fc:	3307      	adds	r3, #7
 80074fe:	f023 0307 	bic.w	r3, r3, #7
 8007502:	f103 0208 	add.w	r2, r3, #8
 8007506:	f8c8 2000 	str.w	r2, [r8]
 800750a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800750e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007512:	9307      	str	r3, [sp, #28]
 8007514:	f8cd 8018 	str.w	r8, [sp, #24]
 8007518:	ee08 0a10 	vmov	s16, r0
 800751c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007524:	4b9e      	ldr	r3, [pc, #632]	; (80077a0 <_printf_float+0x2d8>)
 8007526:	f04f 32ff 	mov.w	r2, #4294967295
 800752a:	f7f9 fb27 	bl	8000b7c <__aeabi_dcmpun>
 800752e:	bb88      	cbnz	r0, 8007594 <_printf_float+0xcc>
 8007530:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007534:	4b9a      	ldr	r3, [pc, #616]	; (80077a0 <_printf_float+0x2d8>)
 8007536:	f04f 32ff 	mov.w	r2, #4294967295
 800753a:	f7f9 fb01 	bl	8000b40 <__aeabi_dcmple>
 800753e:	bb48      	cbnz	r0, 8007594 <_printf_float+0xcc>
 8007540:	2200      	movs	r2, #0
 8007542:	2300      	movs	r3, #0
 8007544:	4640      	mov	r0, r8
 8007546:	4649      	mov	r1, r9
 8007548:	f7f9 faf0 	bl	8000b2c <__aeabi_dcmplt>
 800754c:	b110      	cbz	r0, 8007554 <_printf_float+0x8c>
 800754e:	232d      	movs	r3, #45	; 0x2d
 8007550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007554:	4a93      	ldr	r2, [pc, #588]	; (80077a4 <_printf_float+0x2dc>)
 8007556:	4b94      	ldr	r3, [pc, #592]	; (80077a8 <_printf_float+0x2e0>)
 8007558:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800755c:	bf94      	ite	ls
 800755e:	4690      	movls	r8, r2
 8007560:	4698      	movhi	r8, r3
 8007562:	2303      	movs	r3, #3
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	9b05      	ldr	r3, [sp, #20]
 8007568:	f023 0304 	bic.w	r3, r3, #4
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	f04f 0900 	mov.w	r9, #0
 8007572:	9700      	str	r7, [sp, #0]
 8007574:	4633      	mov	r3, r6
 8007576:	aa0b      	add	r2, sp, #44	; 0x2c
 8007578:	4621      	mov	r1, r4
 800757a:	4628      	mov	r0, r5
 800757c:	f000 f9da 	bl	8007934 <_printf_common>
 8007580:	3001      	adds	r0, #1
 8007582:	f040 8090 	bne.w	80076a6 <_printf_float+0x1de>
 8007586:	f04f 30ff 	mov.w	r0, #4294967295
 800758a:	b00d      	add	sp, #52	; 0x34
 800758c:	ecbd 8b02 	vpop	{d8}
 8007590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	4640      	mov	r0, r8
 800759a:	4649      	mov	r1, r9
 800759c:	f7f9 faee 	bl	8000b7c <__aeabi_dcmpun>
 80075a0:	b140      	cbz	r0, 80075b4 <_printf_float+0xec>
 80075a2:	464b      	mov	r3, r9
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bfbc      	itt	lt
 80075a8:	232d      	movlt	r3, #45	; 0x2d
 80075aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075ae:	4a7f      	ldr	r2, [pc, #508]	; (80077ac <_printf_float+0x2e4>)
 80075b0:	4b7f      	ldr	r3, [pc, #508]	; (80077b0 <_printf_float+0x2e8>)
 80075b2:	e7d1      	b.n	8007558 <_printf_float+0x90>
 80075b4:	6863      	ldr	r3, [r4, #4]
 80075b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80075ba:	9206      	str	r2, [sp, #24]
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	d13f      	bne.n	8007640 <_printf_float+0x178>
 80075c0:	2306      	movs	r3, #6
 80075c2:	6063      	str	r3, [r4, #4]
 80075c4:	9b05      	ldr	r3, [sp, #20]
 80075c6:	6861      	ldr	r1, [r4, #4]
 80075c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075cc:	2300      	movs	r3, #0
 80075ce:	9303      	str	r3, [sp, #12]
 80075d0:	ab0a      	add	r3, sp, #40	; 0x28
 80075d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80075d6:	ab09      	add	r3, sp, #36	; 0x24
 80075d8:	ec49 8b10 	vmov	d0, r8, r9
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	6022      	str	r2, [r4, #0]
 80075e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075e4:	4628      	mov	r0, r5
 80075e6:	f7ff fecf 	bl	8007388 <__cvt>
 80075ea:	9b06      	ldr	r3, [sp, #24]
 80075ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ee:	2b47      	cmp	r3, #71	; 0x47
 80075f0:	4680      	mov	r8, r0
 80075f2:	d108      	bne.n	8007606 <_printf_float+0x13e>
 80075f4:	1cc8      	adds	r0, r1, #3
 80075f6:	db02      	blt.n	80075fe <_printf_float+0x136>
 80075f8:	6863      	ldr	r3, [r4, #4]
 80075fa:	4299      	cmp	r1, r3
 80075fc:	dd41      	ble.n	8007682 <_printf_float+0x1ba>
 80075fe:	f1ab 0302 	sub.w	r3, fp, #2
 8007602:	fa5f fb83 	uxtb.w	fp, r3
 8007606:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800760a:	d820      	bhi.n	800764e <_printf_float+0x186>
 800760c:	3901      	subs	r1, #1
 800760e:	465a      	mov	r2, fp
 8007610:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007614:	9109      	str	r1, [sp, #36]	; 0x24
 8007616:	f7ff ff19 	bl	800744c <__exponent>
 800761a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800761c:	1813      	adds	r3, r2, r0
 800761e:	2a01      	cmp	r2, #1
 8007620:	4681      	mov	r9, r0
 8007622:	6123      	str	r3, [r4, #16]
 8007624:	dc02      	bgt.n	800762c <_printf_float+0x164>
 8007626:	6822      	ldr	r2, [r4, #0]
 8007628:	07d2      	lsls	r2, r2, #31
 800762a:	d501      	bpl.n	8007630 <_printf_float+0x168>
 800762c:	3301      	adds	r3, #1
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007634:	2b00      	cmp	r3, #0
 8007636:	d09c      	beq.n	8007572 <_printf_float+0xaa>
 8007638:	232d      	movs	r3, #45	; 0x2d
 800763a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800763e:	e798      	b.n	8007572 <_printf_float+0xaa>
 8007640:	9a06      	ldr	r2, [sp, #24]
 8007642:	2a47      	cmp	r2, #71	; 0x47
 8007644:	d1be      	bne.n	80075c4 <_printf_float+0xfc>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1bc      	bne.n	80075c4 <_printf_float+0xfc>
 800764a:	2301      	movs	r3, #1
 800764c:	e7b9      	b.n	80075c2 <_printf_float+0xfa>
 800764e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007652:	d118      	bne.n	8007686 <_printf_float+0x1be>
 8007654:	2900      	cmp	r1, #0
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	dd0b      	ble.n	8007672 <_printf_float+0x1aa>
 800765a:	6121      	str	r1, [r4, #16]
 800765c:	b913      	cbnz	r3, 8007664 <_printf_float+0x19c>
 800765e:	6822      	ldr	r2, [r4, #0]
 8007660:	07d0      	lsls	r0, r2, #31
 8007662:	d502      	bpl.n	800766a <_printf_float+0x1a2>
 8007664:	3301      	adds	r3, #1
 8007666:	440b      	add	r3, r1
 8007668:	6123      	str	r3, [r4, #16]
 800766a:	65a1      	str	r1, [r4, #88]	; 0x58
 800766c:	f04f 0900 	mov.w	r9, #0
 8007670:	e7de      	b.n	8007630 <_printf_float+0x168>
 8007672:	b913      	cbnz	r3, 800767a <_printf_float+0x1b2>
 8007674:	6822      	ldr	r2, [r4, #0]
 8007676:	07d2      	lsls	r2, r2, #31
 8007678:	d501      	bpl.n	800767e <_printf_float+0x1b6>
 800767a:	3302      	adds	r3, #2
 800767c:	e7f4      	b.n	8007668 <_printf_float+0x1a0>
 800767e:	2301      	movs	r3, #1
 8007680:	e7f2      	b.n	8007668 <_printf_float+0x1a0>
 8007682:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007688:	4299      	cmp	r1, r3
 800768a:	db05      	blt.n	8007698 <_printf_float+0x1d0>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	6121      	str	r1, [r4, #16]
 8007690:	07d8      	lsls	r0, r3, #31
 8007692:	d5ea      	bpl.n	800766a <_printf_float+0x1a2>
 8007694:	1c4b      	adds	r3, r1, #1
 8007696:	e7e7      	b.n	8007668 <_printf_float+0x1a0>
 8007698:	2900      	cmp	r1, #0
 800769a:	bfd4      	ite	le
 800769c:	f1c1 0202 	rsble	r2, r1, #2
 80076a0:	2201      	movgt	r2, #1
 80076a2:	4413      	add	r3, r2
 80076a4:	e7e0      	b.n	8007668 <_printf_float+0x1a0>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	055a      	lsls	r2, r3, #21
 80076aa:	d407      	bmi.n	80076bc <_printf_float+0x1f4>
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	4642      	mov	r2, r8
 80076b0:	4631      	mov	r1, r6
 80076b2:	4628      	mov	r0, r5
 80076b4:	47b8      	blx	r7
 80076b6:	3001      	adds	r0, #1
 80076b8:	d12c      	bne.n	8007714 <_printf_float+0x24c>
 80076ba:	e764      	b.n	8007586 <_printf_float+0xbe>
 80076bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076c0:	f240 80e0 	bls.w	8007884 <_printf_float+0x3bc>
 80076c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076c8:	2200      	movs	r2, #0
 80076ca:	2300      	movs	r3, #0
 80076cc:	f7f9 fa24 	bl	8000b18 <__aeabi_dcmpeq>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d034      	beq.n	800773e <_printf_float+0x276>
 80076d4:	4a37      	ldr	r2, [pc, #220]	; (80077b4 <_printf_float+0x2ec>)
 80076d6:	2301      	movs	r3, #1
 80076d8:	4631      	mov	r1, r6
 80076da:	4628      	mov	r0, r5
 80076dc:	47b8      	blx	r7
 80076de:	3001      	adds	r0, #1
 80076e0:	f43f af51 	beq.w	8007586 <_printf_float+0xbe>
 80076e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076e8:	429a      	cmp	r2, r3
 80076ea:	db02      	blt.n	80076f2 <_printf_float+0x22a>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	07d8      	lsls	r0, r3, #31
 80076f0:	d510      	bpl.n	8007714 <_printf_float+0x24c>
 80076f2:	ee18 3a10 	vmov	r3, s16
 80076f6:	4652      	mov	r2, sl
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	f43f af41 	beq.w	8007586 <_printf_float+0xbe>
 8007704:	f04f 0800 	mov.w	r8, #0
 8007708:	f104 091a 	add.w	r9, r4, #26
 800770c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800770e:	3b01      	subs	r3, #1
 8007710:	4543      	cmp	r3, r8
 8007712:	dc09      	bgt.n	8007728 <_printf_float+0x260>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	079b      	lsls	r3, r3, #30
 8007718:	f100 8107 	bmi.w	800792a <_printf_float+0x462>
 800771c:	68e0      	ldr	r0, [r4, #12]
 800771e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007720:	4298      	cmp	r0, r3
 8007722:	bfb8      	it	lt
 8007724:	4618      	movlt	r0, r3
 8007726:	e730      	b.n	800758a <_printf_float+0xc2>
 8007728:	2301      	movs	r3, #1
 800772a:	464a      	mov	r2, r9
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	47b8      	blx	r7
 8007732:	3001      	adds	r0, #1
 8007734:	f43f af27 	beq.w	8007586 <_printf_float+0xbe>
 8007738:	f108 0801 	add.w	r8, r8, #1
 800773c:	e7e6      	b.n	800770c <_printf_float+0x244>
 800773e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007740:	2b00      	cmp	r3, #0
 8007742:	dc39      	bgt.n	80077b8 <_printf_float+0x2f0>
 8007744:	4a1b      	ldr	r2, [pc, #108]	; (80077b4 <_printf_float+0x2ec>)
 8007746:	2301      	movs	r3, #1
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af19 	beq.w	8007586 <_printf_float+0xbe>
 8007754:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007758:	4313      	orrs	r3, r2
 800775a:	d102      	bne.n	8007762 <_printf_float+0x29a>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	07d9      	lsls	r1, r3, #31
 8007760:	d5d8      	bpl.n	8007714 <_printf_float+0x24c>
 8007762:	ee18 3a10 	vmov	r3, s16
 8007766:	4652      	mov	r2, sl
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	47b8      	blx	r7
 800776e:	3001      	adds	r0, #1
 8007770:	f43f af09 	beq.w	8007586 <_printf_float+0xbe>
 8007774:	f04f 0900 	mov.w	r9, #0
 8007778:	f104 0a1a 	add.w	sl, r4, #26
 800777c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777e:	425b      	negs	r3, r3
 8007780:	454b      	cmp	r3, r9
 8007782:	dc01      	bgt.n	8007788 <_printf_float+0x2c0>
 8007784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007786:	e792      	b.n	80076ae <_printf_float+0x1e6>
 8007788:	2301      	movs	r3, #1
 800778a:	4652      	mov	r2, sl
 800778c:	4631      	mov	r1, r6
 800778e:	4628      	mov	r0, r5
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	f43f aef7 	beq.w	8007586 <_printf_float+0xbe>
 8007798:	f109 0901 	add.w	r9, r9, #1
 800779c:	e7ee      	b.n	800777c <_printf_float+0x2b4>
 800779e:	bf00      	nop
 80077a0:	7fefffff 	.word	0x7fefffff
 80077a4:	08009d38 	.word	0x08009d38
 80077a8:	08009d3c 	.word	0x08009d3c
 80077ac:	08009d40 	.word	0x08009d40
 80077b0:	08009d44 	.word	0x08009d44
 80077b4:	08009d48 	.word	0x08009d48
 80077b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077bc:	429a      	cmp	r2, r3
 80077be:	bfa8      	it	ge
 80077c0:	461a      	movge	r2, r3
 80077c2:	2a00      	cmp	r2, #0
 80077c4:	4691      	mov	r9, r2
 80077c6:	dc37      	bgt.n	8007838 <_printf_float+0x370>
 80077c8:	f04f 0b00 	mov.w	fp, #0
 80077cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077d0:	f104 021a 	add.w	r2, r4, #26
 80077d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077d6:	9305      	str	r3, [sp, #20]
 80077d8:	eba3 0309 	sub.w	r3, r3, r9
 80077dc:	455b      	cmp	r3, fp
 80077de:	dc33      	bgt.n	8007848 <_printf_float+0x380>
 80077e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077e4:	429a      	cmp	r2, r3
 80077e6:	db3b      	blt.n	8007860 <_printf_float+0x398>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	07da      	lsls	r2, r3, #31
 80077ec:	d438      	bmi.n	8007860 <_printf_float+0x398>
 80077ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077f2:	eba2 0903 	sub.w	r9, r2, r3
 80077f6:	9b05      	ldr	r3, [sp, #20]
 80077f8:	1ad2      	subs	r2, r2, r3
 80077fa:	4591      	cmp	r9, r2
 80077fc:	bfa8      	it	ge
 80077fe:	4691      	movge	r9, r2
 8007800:	f1b9 0f00 	cmp.w	r9, #0
 8007804:	dc35      	bgt.n	8007872 <_printf_float+0x3aa>
 8007806:	f04f 0800 	mov.w	r8, #0
 800780a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800780e:	f104 0a1a 	add.w	sl, r4, #26
 8007812:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007816:	1a9b      	subs	r3, r3, r2
 8007818:	eba3 0309 	sub.w	r3, r3, r9
 800781c:	4543      	cmp	r3, r8
 800781e:	f77f af79 	ble.w	8007714 <_printf_float+0x24c>
 8007822:	2301      	movs	r3, #1
 8007824:	4652      	mov	r2, sl
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	f43f aeaa 	beq.w	8007586 <_printf_float+0xbe>
 8007832:	f108 0801 	add.w	r8, r8, #1
 8007836:	e7ec      	b.n	8007812 <_printf_float+0x34a>
 8007838:	4613      	mov	r3, r2
 800783a:	4631      	mov	r1, r6
 800783c:	4642      	mov	r2, r8
 800783e:	4628      	mov	r0, r5
 8007840:	47b8      	blx	r7
 8007842:	3001      	adds	r0, #1
 8007844:	d1c0      	bne.n	80077c8 <_printf_float+0x300>
 8007846:	e69e      	b.n	8007586 <_printf_float+0xbe>
 8007848:	2301      	movs	r3, #1
 800784a:	4631      	mov	r1, r6
 800784c:	4628      	mov	r0, r5
 800784e:	9205      	str	r2, [sp, #20]
 8007850:	47b8      	blx	r7
 8007852:	3001      	adds	r0, #1
 8007854:	f43f ae97 	beq.w	8007586 <_printf_float+0xbe>
 8007858:	9a05      	ldr	r2, [sp, #20]
 800785a:	f10b 0b01 	add.w	fp, fp, #1
 800785e:	e7b9      	b.n	80077d4 <_printf_float+0x30c>
 8007860:	ee18 3a10 	vmov	r3, s16
 8007864:	4652      	mov	r2, sl
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	d1be      	bne.n	80077ee <_printf_float+0x326>
 8007870:	e689      	b.n	8007586 <_printf_float+0xbe>
 8007872:	9a05      	ldr	r2, [sp, #20]
 8007874:	464b      	mov	r3, r9
 8007876:	4442      	add	r2, r8
 8007878:	4631      	mov	r1, r6
 800787a:	4628      	mov	r0, r5
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	d1c1      	bne.n	8007806 <_printf_float+0x33e>
 8007882:	e680      	b.n	8007586 <_printf_float+0xbe>
 8007884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007886:	2a01      	cmp	r2, #1
 8007888:	dc01      	bgt.n	800788e <_printf_float+0x3c6>
 800788a:	07db      	lsls	r3, r3, #31
 800788c:	d53a      	bpl.n	8007904 <_printf_float+0x43c>
 800788e:	2301      	movs	r3, #1
 8007890:	4642      	mov	r2, r8
 8007892:	4631      	mov	r1, r6
 8007894:	4628      	mov	r0, r5
 8007896:	47b8      	blx	r7
 8007898:	3001      	adds	r0, #1
 800789a:	f43f ae74 	beq.w	8007586 <_printf_float+0xbe>
 800789e:	ee18 3a10 	vmov	r3, s16
 80078a2:	4652      	mov	r2, sl
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	f43f ae6b 	beq.w	8007586 <_printf_float+0xbe>
 80078b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078b4:	2200      	movs	r2, #0
 80078b6:	2300      	movs	r3, #0
 80078b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80078bc:	f7f9 f92c 	bl	8000b18 <__aeabi_dcmpeq>
 80078c0:	b9d8      	cbnz	r0, 80078fa <_printf_float+0x432>
 80078c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80078c6:	f108 0201 	add.w	r2, r8, #1
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b8      	blx	r7
 80078d0:	3001      	adds	r0, #1
 80078d2:	d10e      	bne.n	80078f2 <_printf_float+0x42a>
 80078d4:	e657      	b.n	8007586 <_printf_float+0xbe>
 80078d6:	2301      	movs	r3, #1
 80078d8:	4652      	mov	r2, sl
 80078da:	4631      	mov	r1, r6
 80078dc:	4628      	mov	r0, r5
 80078de:	47b8      	blx	r7
 80078e0:	3001      	adds	r0, #1
 80078e2:	f43f ae50 	beq.w	8007586 <_printf_float+0xbe>
 80078e6:	f108 0801 	add.w	r8, r8, #1
 80078ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ec:	3b01      	subs	r3, #1
 80078ee:	4543      	cmp	r3, r8
 80078f0:	dcf1      	bgt.n	80078d6 <_printf_float+0x40e>
 80078f2:	464b      	mov	r3, r9
 80078f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078f8:	e6da      	b.n	80076b0 <_printf_float+0x1e8>
 80078fa:	f04f 0800 	mov.w	r8, #0
 80078fe:	f104 0a1a 	add.w	sl, r4, #26
 8007902:	e7f2      	b.n	80078ea <_printf_float+0x422>
 8007904:	2301      	movs	r3, #1
 8007906:	4642      	mov	r2, r8
 8007908:	e7df      	b.n	80078ca <_printf_float+0x402>
 800790a:	2301      	movs	r3, #1
 800790c:	464a      	mov	r2, r9
 800790e:	4631      	mov	r1, r6
 8007910:	4628      	mov	r0, r5
 8007912:	47b8      	blx	r7
 8007914:	3001      	adds	r0, #1
 8007916:	f43f ae36 	beq.w	8007586 <_printf_float+0xbe>
 800791a:	f108 0801 	add.w	r8, r8, #1
 800791e:	68e3      	ldr	r3, [r4, #12]
 8007920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007922:	1a5b      	subs	r3, r3, r1
 8007924:	4543      	cmp	r3, r8
 8007926:	dcf0      	bgt.n	800790a <_printf_float+0x442>
 8007928:	e6f8      	b.n	800771c <_printf_float+0x254>
 800792a:	f04f 0800 	mov.w	r8, #0
 800792e:	f104 0919 	add.w	r9, r4, #25
 8007932:	e7f4      	b.n	800791e <_printf_float+0x456>

08007934 <_printf_common>:
 8007934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007938:	4616      	mov	r6, r2
 800793a:	4699      	mov	r9, r3
 800793c:	688a      	ldr	r2, [r1, #8]
 800793e:	690b      	ldr	r3, [r1, #16]
 8007940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007944:	4293      	cmp	r3, r2
 8007946:	bfb8      	it	lt
 8007948:	4613      	movlt	r3, r2
 800794a:	6033      	str	r3, [r6, #0]
 800794c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007950:	4607      	mov	r7, r0
 8007952:	460c      	mov	r4, r1
 8007954:	b10a      	cbz	r2, 800795a <_printf_common+0x26>
 8007956:	3301      	adds	r3, #1
 8007958:	6033      	str	r3, [r6, #0]
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	0699      	lsls	r1, r3, #26
 800795e:	bf42      	ittt	mi
 8007960:	6833      	ldrmi	r3, [r6, #0]
 8007962:	3302      	addmi	r3, #2
 8007964:	6033      	strmi	r3, [r6, #0]
 8007966:	6825      	ldr	r5, [r4, #0]
 8007968:	f015 0506 	ands.w	r5, r5, #6
 800796c:	d106      	bne.n	800797c <_printf_common+0x48>
 800796e:	f104 0a19 	add.w	sl, r4, #25
 8007972:	68e3      	ldr	r3, [r4, #12]
 8007974:	6832      	ldr	r2, [r6, #0]
 8007976:	1a9b      	subs	r3, r3, r2
 8007978:	42ab      	cmp	r3, r5
 800797a:	dc26      	bgt.n	80079ca <_printf_common+0x96>
 800797c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007980:	1e13      	subs	r3, r2, #0
 8007982:	6822      	ldr	r2, [r4, #0]
 8007984:	bf18      	it	ne
 8007986:	2301      	movne	r3, #1
 8007988:	0692      	lsls	r2, r2, #26
 800798a:	d42b      	bmi.n	80079e4 <_printf_common+0xb0>
 800798c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007990:	4649      	mov	r1, r9
 8007992:	4638      	mov	r0, r7
 8007994:	47c0      	blx	r8
 8007996:	3001      	adds	r0, #1
 8007998:	d01e      	beq.n	80079d8 <_printf_common+0xa4>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	6922      	ldr	r2, [r4, #16]
 800799e:	f003 0306 	and.w	r3, r3, #6
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	bf02      	ittt	eq
 80079a6:	68e5      	ldreq	r5, [r4, #12]
 80079a8:	6833      	ldreq	r3, [r6, #0]
 80079aa:	1aed      	subeq	r5, r5, r3
 80079ac:	68a3      	ldr	r3, [r4, #8]
 80079ae:	bf0c      	ite	eq
 80079b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079b4:	2500      	movne	r5, #0
 80079b6:	4293      	cmp	r3, r2
 80079b8:	bfc4      	itt	gt
 80079ba:	1a9b      	subgt	r3, r3, r2
 80079bc:	18ed      	addgt	r5, r5, r3
 80079be:	2600      	movs	r6, #0
 80079c0:	341a      	adds	r4, #26
 80079c2:	42b5      	cmp	r5, r6
 80079c4:	d11a      	bne.n	80079fc <_printf_common+0xc8>
 80079c6:	2000      	movs	r0, #0
 80079c8:	e008      	b.n	80079dc <_printf_common+0xa8>
 80079ca:	2301      	movs	r3, #1
 80079cc:	4652      	mov	r2, sl
 80079ce:	4649      	mov	r1, r9
 80079d0:	4638      	mov	r0, r7
 80079d2:	47c0      	blx	r8
 80079d4:	3001      	adds	r0, #1
 80079d6:	d103      	bne.n	80079e0 <_printf_common+0xac>
 80079d8:	f04f 30ff 	mov.w	r0, #4294967295
 80079dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e0:	3501      	adds	r5, #1
 80079e2:	e7c6      	b.n	8007972 <_printf_common+0x3e>
 80079e4:	18e1      	adds	r1, r4, r3
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	2030      	movs	r0, #48	; 0x30
 80079ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079ee:	4422      	add	r2, r4
 80079f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079f8:	3302      	adds	r3, #2
 80079fa:	e7c7      	b.n	800798c <_printf_common+0x58>
 80079fc:	2301      	movs	r3, #1
 80079fe:	4622      	mov	r2, r4
 8007a00:	4649      	mov	r1, r9
 8007a02:	4638      	mov	r0, r7
 8007a04:	47c0      	blx	r8
 8007a06:	3001      	adds	r0, #1
 8007a08:	d0e6      	beq.n	80079d8 <_printf_common+0xa4>
 8007a0a:	3601      	adds	r6, #1
 8007a0c:	e7d9      	b.n	80079c2 <_printf_common+0x8e>
	...

08007a10 <_printf_i>:
 8007a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a14:	7e0f      	ldrb	r7, [r1, #24]
 8007a16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a18:	2f78      	cmp	r7, #120	; 0x78
 8007a1a:	4691      	mov	r9, r2
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	469a      	mov	sl, r3
 8007a22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a26:	d807      	bhi.n	8007a38 <_printf_i+0x28>
 8007a28:	2f62      	cmp	r7, #98	; 0x62
 8007a2a:	d80a      	bhi.n	8007a42 <_printf_i+0x32>
 8007a2c:	2f00      	cmp	r7, #0
 8007a2e:	f000 80d4 	beq.w	8007bda <_printf_i+0x1ca>
 8007a32:	2f58      	cmp	r7, #88	; 0x58
 8007a34:	f000 80c0 	beq.w	8007bb8 <_printf_i+0x1a8>
 8007a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a40:	e03a      	b.n	8007ab8 <_printf_i+0xa8>
 8007a42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a46:	2b15      	cmp	r3, #21
 8007a48:	d8f6      	bhi.n	8007a38 <_printf_i+0x28>
 8007a4a:	a101      	add	r1, pc, #4	; (adr r1, 8007a50 <_printf_i+0x40>)
 8007a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a50:	08007aa9 	.word	0x08007aa9
 8007a54:	08007abd 	.word	0x08007abd
 8007a58:	08007a39 	.word	0x08007a39
 8007a5c:	08007a39 	.word	0x08007a39
 8007a60:	08007a39 	.word	0x08007a39
 8007a64:	08007a39 	.word	0x08007a39
 8007a68:	08007abd 	.word	0x08007abd
 8007a6c:	08007a39 	.word	0x08007a39
 8007a70:	08007a39 	.word	0x08007a39
 8007a74:	08007a39 	.word	0x08007a39
 8007a78:	08007a39 	.word	0x08007a39
 8007a7c:	08007bc1 	.word	0x08007bc1
 8007a80:	08007ae9 	.word	0x08007ae9
 8007a84:	08007b7b 	.word	0x08007b7b
 8007a88:	08007a39 	.word	0x08007a39
 8007a8c:	08007a39 	.word	0x08007a39
 8007a90:	08007be3 	.word	0x08007be3
 8007a94:	08007a39 	.word	0x08007a39
 8007a98:	08007ae9 	.word	0x08007ae9
 8007a9c:	08007a39 	.word	0x08007a39
 8007aa0:	08007a39 	.word	0x08007a39
 8007aa4:	08007b83 	.word	0x08007b83
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	1d1a      	adds	r2, r3, #4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	602a      	str	r2, [r5, #0]
 8007ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e09f      	b.n	8007bfc <_printf_i+0x1ec>
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	682b      	ldr	r3, [r5, #0]
 8007ac0:	0607      	lsls	r7, r0, #24
 8007ac2:	f103 0104 	add.w	r1, r3, #4
 8007ac6:	6029      	str	r1, [r5, #0]
 8007ac8:	d501      	bpl.n	8007ace <_printf_i+0xbe>
 8007aca:	681e      	ldr	r6, [r3, #0]
 8007acc:	e003      	b.n	8007ad6 <_printf_i+0xc6>
 8007ace:	0646      	lsls	r6, r0, #25
 8007ad0:	d5fb      	bpl.n	8007aca <_printf_i+0xba>
 8007ad2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ad6:	2e00      	cmp	r6, #0
 8007ad8:	da03      	bge.n	8007ae2 <_printf_i+0xd2>
 8007ada:	232d      	movs	r3, #45	; 0x2d
 8007adc:	4276      	negs	r6, r6
 8007ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ae2:	485a      	ldr	r0, [pc, #360]	; (8007c4c <_printf_i+0x23c>)
 8007ae4:	230a      	movs	r3, #10
 8007ae6:	e012      	b.n	8007b0e <_printf_i+0xfe>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	1d19      	adds	r1, r3, #4
 8007aee:	6029      	str	r1, [r5, #0]
 8007af0:	0605      	lsls	r5, r0, #24
 8007af2:	d501      	bpl.n	8007af8 <_printf_i+0xe8>
 8007af4:	681e      	ldr	r6, [r3, #0]
 8007af6:	e002      	b.n	8007afe <_printf_i+0xee>
 8007af8:	0641      	lsls	r1, r0, #25
 8007afa:	d5fb      	bpl.n	8007af4 <_printf_i+0xe4>
 8007afc:	881e      	ldrh	r6, [r3, #0]
 8007afe:	4853      	ldr	r0, [pc, #332]	; (8007c4c <_printf_i+0x23c>)
 8007b00:	2f6f      	cmp	r7, #111	; 0x6f
 8007b02:	bf0c      	ite	eq
 8007b04:	2308      	moveq	r3, #8
 8007b06:	230a      	movne	r3, #10
 8007b08:	2100      	movs	r1, #0
 8007b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b0e:	6865      	ldr	r5, [r4, #4]
 8007b10:	60a5      	str	r5, [r4, #8]
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	bfa2      	ittt	ge
 8007b16:	6821      	ldrge	r1, [r4, #0]
 8007b18:	f021 0104 	bicge.w	r1, r1, #4
 8007b1c:	6021      	strge	r1, [r4, #0]
 8007b1e:	b90e      	cbnz	r6, 8007b24 <_printf_i+0x114>
 8007b20:	2d00      	cmp	r5, #0
 8007b22:	d04b      	beq.n	8007bbc <_printf_i+0x1ac>
 8007b24:	4615      	mov	r5, r2
 8007b26:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b2a:	fb03 6711 	mls	r7, r3, r1, r6
 8007b2e:	5dc7      	ldrb	r7, [r0, r7]
 8007b30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b34:	4637      	mov	r7, r6
 8007b36:	42bb      	cmp	r3, r7
 8007b38:	460e      	mov	r6, r1
 8007b3a:	d9f4      	bls.n	8007b26 <_printf_i+0x116>
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d10b      	bne.n	8007b58 <_printf_i+0x148>
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	07de      	lsls	r6, r3, #31
 8007b44:	d508      	bpl.n	8007b58 <_printf_i+0x148>
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	6861      	ldr	r1, [r4, #4]
 8007b4a:	4299      	cmp	r1, r3
 8007b4c:	bfde      	ittt	le
 8007b4e:	2330      	movle	r3, #48	; 0x30
 8007b50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b58:	1b52      	subs	r2, r2, r5
 8007b5a:	6122      	str	r2, [r4, #16]
 8007b5c:	f8cd a000 	str.w	sl, [sp]
 8007b60:	464b      	mov	r3, r9
 8007b62:	aa03      	add	r2, sp, #12
 8007b64:	4621      	mov	r1, r4
 8007b66:	4640      	mov	r0, r8
 8007b68:	f7ff fee4 	bl	8007934 <_printf_common>
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d14a      	bne.n	8007c06 <_printf_i+0x1f6>
 8007b70:	f04f 30ff 	mov.w	r0, #4294967295
 8007b74:	b004      	add	sp, #16
 8007b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	f043 0320 	orr.w	r3, r3, #32
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	4833      	ldr	r0, [pc, #204]	; (8007c50 <_printf_i+0x240>)
 8007b84:	2778      	movs	r7, #120	; 0x78
 8007b86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	6829      	ldr	r1, [r5, #0]
 8007b8e:	061f      	lsls	r7, r3, #24
 8007b90:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b94:	d402      	bmi.n	8007b9c <_printf_i+0x18c>
 8007b96:	065f      	lsls	r7, r3, #25
 8007b98:	bf48      	it	mi
 8007b9a:	b2b6      	uxthmi	r6, r6
 8007b9c:	07df      	lsls	r7, r3, #31
 8007b9e:	bf48      	it	mi
 8007ba0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ba4:	6029      	str	r1, [r5, #0]
 8007ba6:	bf48      	it	mi
 8007ba8:	6023      	strmi	r3, [r4, #0]
 8007baa:	b91e      	cbnz	r6, 8007bb4 <_printf_i+0x1a4>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	f023 0320 	bic.w	r3, r3, #32
 8007bb2:	6023      	str	r3, [r4, #0]
 8007bb4:	2310      	movs	r3, #16
 8007bb6:	e7a7      	b.n	8007b08 <_printf_i+0xf8>
 8007bb8:	4824      	ldr	r0, [pc, #144]	; (8007c4c <_printf_i+0x23c>)
 8007bba:	e7e4      	b.n	8007b86 <_printf_i+0x176>
 8007bbc:	4615      	mov	r5, r2
 8007bbe:	e7bd      	b.n	8007b3c <_printf_i+0x12c>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	6826      	ldr	r6, [r4, #0]
 8007bc4:	6961      	ldr	r1, [r4, #20]
 8007bc6:	1d18      	adds	r0, r3, #4
 8007bc8:	6028      	str	r0, [r5, #0]
 8007bca:	0635      	lsls	r5, r6, #24
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	d501      	bpl.n	8007bd4 <_printf_i+0x1c4>
 8007bd0:	6019      	str	r1, [r3, #0]
 8007bd2:	e002      	b.n	8007bda <_printf_i+0x1ca>
 8007bd4:	0670      	lsls	r0, r6, #25
 8007bd6:	d5fb      	bpl.n	8007bd0 <_printf_i+0x1c0>
 8007bd8:	8019      	strh	r1, [r3, #0]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	4615      	mov	r5, r2
 8007be0:	e7bc      	b.n	8007b5c <_printf_i+0x14c>
 8007be2:	682b      	ldr	r3, [r5, #0]
 8007be4:	1d1a      	adds	r2, r3, #4
 8007be6:	602a      	str	r2, [r5, #0]
 8007be8:	681d      	ldr	r5, [r3, #0]
 8007bea:	6862      	ldr	r2, [r4, #4]
 8007bec:	2100      	movs	r1, #0
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f7f8 fb16 	bl	8000220 <memchr>
 8007bf4:	b108      	cbz	r0, 8007bfa <_printf_i+0x1ea>
 8007bf6:	1b40      	subs	r0, r0, r5
 8007bf8:	6060      	str	r0, [r4, #4]
 8007bfa:	6863      	ldr	r3, [r4, #4]
 8007bfc:	6123      	str	r3, [r4, #16]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c04:	e7aa      	b.n	8007b5c <_printf_i+0x14c>
 8007c06:	6923      	ldr	r3, [r4, #16]
 8007c08:	462a      	mov	r2, r5
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	47d0      	blx	sl
 8007c10:	3001      	adds	r0, #1
 8007c12:	d0ad      	beq.n	8007b70 <_printf_i+0x160>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	079b      	lsls	r3, r3, #30
 8007c18:	d413      	bmi.n	8007c42 <_printf_i+0x232>
 8007c1a:	68e0      	ldr	r0, [r4, #12]
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	4298      	cmp	r0, r3
 8007c20:	bfb8      	it	lt
 8007c22:	4618      	movlt	r0, r3
 8007c24:	e7a6      	b.n	8007b74 <_printf_i+0x164>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4632      	mov	r2, r6
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	47d0      	blx	sl
 8007c30:	3001      	adds	r0, #1
 8007c32:	d09d      	beq.n	8007b70 <_printf_i+0x160>
 8007c34:	3501      	adds	r5, #1
 8007c36:	68e3      	ldr	r3, [r4, #12]
 8007c38:	9903      	ldr	r1, [sp, #12]
 8007c3a:	1a5b      	subs	r3, r3, r1
 8007c3c:	42ab      	cmp	r3, r5
 8007c3e:	dcf2      	bgt.n	8007c26 <_printf_i+0x216>
 8007c40:	e7eb      	b.n	8007c1a <_printf_i+0x20a>
 8007c42:	2500      	movs	r5, #0
 8007c44:	f104 0619 	add.w	r6, r4, #25
 8007c48:	e7f5      	b.n	8007c36 <_printf_i+0x226>
 8007c4a:	bf00      	nop
 8007c4c:	08009d4a 	.word	0x08009d4a
 8007c50:	08009d5b 	.word	0x08009d5b

08007c54 <std>:
 8007c54:	2300      	movs	r3, #0
 8007c56:	b510      	push	{r4, lr}
 8007c58:	4604      	mov	r4, r0
 8007c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c62:	6083      	str	r3, [r0, #8]
 8007c64:	8181      	strh	r1, [r0, #12]
 8007c66:	6643      	str	r3, [r0, #100]	; 0x64
 8007c68:	81c2      	strh	r2, [r0, #14]
 8007c6a:	6183      	str	r3, [r0, #24]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	2208      	movs	r2, #8
 8007c70:	305c      	adds	r0, #92	; 0x5c
 8007c72:	f000 f8e2 	bl	8007e3a <memset>
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <std+0x38>)
 8007c78:	6263      	str	r3, [r4, #36]	; 0x24
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <std+0x3c>)
 8007c7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c7e:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <std+0x40>)
 8007c80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c82:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <std+0x44>)
 8007c84:	6224      	str	r4, [r4, #32]
 8007c86:	6323      	str	r3, [r4, #48]	; 0x30
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop
 8007c8c:	08007db5 	.word	0x08007db5
 8007c90:	08007dd7 	.word	0x08007dd7
 8007c94:	08007e0f 	.word	0x08007e0f
 8007c98:	08007e33 	.word	0x08007e33

08007c9c <stdio_exit_handler>:
 8007c9c:	4a02      	ldr	r2, [pc, #8]	; (8007ca8 <stdio_exit_handler+0xc>)
 8007c9e:	4903      	ldr	r1, [pc, #12]	; (8007cac <stdio_exit_handler+0x10>)
 8007ca0:	4803      	ldr	r0, [pc, #12]	; (8007cb0 <stdio_exit_handler+0x14>)
 8007ca2:	f000 b869 	b.w	8007d78 <_fwalk_sglue>
 8007ca6:	bf00      	nop
 8007ca8:	2000000c 	.word	0x2000000c
 8007cac:	080098d9 	.word	0x080098d9
 8007cb0:	20000018 	.word	0x20000018

08007cb4 <cleanup_stdio>:
 8007cb4:	6841      	ldr	r1, [r0, #4]
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ce8 <cleanup_stdio+0x34>)
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	b510      	push	{r4, lr}
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	d001      	beq.n	8007cc4 <cleanup_stdio+0x10>
 8007cc0:	f001 fe0a 	bl	80098d8 <_fflush_r>
 8007cc4:	68a1      	ldr	r1, [r4, #8]
 8007cc6:	4b09      	ldr	r3, [pc, #36]	; (8007cec <cleanup_stdio+0x38>)
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d002      	beq.n	8007cd2 <cleanup_stdio+0x1e>
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f001 fe03 	bl	80098d8 <_fflush_r>
 8007cd2:	68e1      	ldr	r1, [r4, #12]
 8007cd4:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <cleanup_stdio+0x3c>)
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	d004      	beq.n	8007ce4 <cleanup_stdio+0x30>
 8007cda:	4620      	mov	r0, r4
 8007cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce0:	f001 bdfa 	b.w	80098d8 <_fflush_r>
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000450 	.word	0x20000450
 8007cec:	200004b8 	.word	0x200004b8
 8007cf0:	20000520 	.word	0x20000520

08007cf4 <global_stdio_init.part.0>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <global_stdio_init.part.0+0x30>)
 8007cf8:	4c0b      	ldr	r4, [pc, #44]	; (8007d28 <global_stdio_init.part.0+0x34>)
 8007cfa:	4a0c      	ldr	r2, [pc, #48]	; (8007d2c <global_stdio_init.part.0+0x38>)
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	4620      	mov	r0, r4
 8007d00:	2200      	movs	r2, #0
 8007d02:	2104      	movs	r1, #4
 8007d04:	f7ff ffa6 	bl	8007c54 <std>
 8007d08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	2109      	movs	r1, #9
 8007d10:	f7ff ffa0 	bl	8007c54 <std>
 8007d14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d18:	2202      	movs	r2, #2
 8007d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d1e:	2112      	movs	r1, #18
 8007d20:	f7ff bf98 	b.w	8007c54 <std>
 8007d24:	20000588 	.word	0x20000588
 8007d28:	20000450 	.word	0x20000450
 8007d2c:	08007c9d 	.word	0x08007c9d

08007d30 <__sfp_lock_acquire>:
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <__sfp_lock_acquire+0x8>)
 8007d32:	f000 b8ff 	b.w	8007f34 <__retarget_lock_acquire_recursive>
 8007d36:	bf00      	nop
 8007d38:	20000591 	.word	0x20000591

08007d3c <__sfp_lock_release>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__sfp_lock_release+0x8>)
 8007d3e:	f000 b8fa 	b.w	8007f36 <__retarget_lock_release_recursive>
 8007d42:	bf00      	nop
 8007d44:	20000591 	.word	0x20000591

08007d48 <__sinit>:
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	f7ff fff0 	bl	8007d30 <__sfp_lock_acquire>
 8007d50:	6a23      	ldr	r3, [r4, #32]
 8007d52:	b11b      	cbz	r3, 8007d5c <__sinit+0x14>
 8007d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d58:	f7ff bff0 	b.w	8007d3c <__sfp_lock_release>
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <__sinit+0x28>)
 8007d5e:	6223      	str	r3, [r4, #32]
 8007d60:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <__sinit+0x2c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1f5      	bne.n	8007d54 <__sinit+0xc>
 8007d68:	f7ff ffc4 	bl	8007cf4 <global_stdio_init.part.0>
 8007d6c:	e7f2      	b.n	8007d54 <__sinit+0xc>
 8007d6e:	bf00      	nop
 8007d70:	08007cb5 	.word	0x08007cb5
 8007d74:	20000588 	.word	0x20000588

08007d78 <_fwalk_sglue>:
 8007d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	4688      	mov	r8, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	2600      	movs	r6, #0
 8007d84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d88:	f1b9 0901 	subs.w	r9, r9, #1
 8007d8c:	d505      	bpl.n	8007d9a <_fwalk_sglue+0x22>
 8007d8e:	6824      	ldr	r4, [r4, #0]
 8007d90:	2c00      	cmp	r4, #0
 8007d92:	d1f7      	bne.n	8007d84 <_fwalk_sglue+0xc>
 8007d94:	4630      	mov	r0, r6
 8007d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9a:	89ab      	ldrh	r3, [r5, #12]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d907      	bls.n	8007db0 <_fwalk_sglue+0x38>
 8007da0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007da4:	3301      	adds	r3, #1
 8007da6:	d003      	beq.n	8007db0 <_fwalk_sglue+0x38>
 8007da8:	4629      	mov	r1, r5
 8007daa:	4638      	mov	r0, r7
 8007dac:	47c0      	blx	r8
 8007dae:	4306      	orrs	r6, r0
 8007db0:	3568      	adds	r5, #104	; 0x68
 8007db2:	e7e9      	b.n	8007d88 <_fwalk_sglue+0x10>

08007db4 <__sread>:
 8007db4:	b510      	push	{r4, lr}
 8007db6:	460c      	mov	r4, r1
 8007db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dbc:	f000 f86c 	bl	8007e98 <_read_r>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	bfab      	itete	ge
 8007dc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8007dc8:	181b      	addge	r3, r3, r0
 8007dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dce:	bfac      	ite	ge
 8007dd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dd2:	81a3      	strhlt	r3, [r4, #12]
 8007dd4:	bd10      	pop	{r4, pc}

08007dd6 <__swrite>:
 8007dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dda:	461f      	mov	r7, r3
 8007ddc:	898b      	ldrh	r3, [r1, #12]
 8007dde:	05db      	lsls	r3, r3, #23
 8007de0:	4605      	mov	r5, r0
 8007de2:	460c      	mov	r4, r1
 8007de4:	4616      	mov	r6, r2
 8007de6:	d505      	bpl.n	8007df4 <__swrite+0x1e>
 8007de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dec:	2302      	movs	r3, #2
 8007dee:	2200      	movs	r2, #0
 8007df0:	f000 f840 	bl	8007e74 <_lseek_r>
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	4632      	mov	r2, r6
 8007e02:	463b      	mov	r3, r7
 8007e04:	4628      	mov	r0, r5
 8007e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e0a:	f000 b857 	b.w	8007ebc <_write_r>

08007e0e <__sseek>:
 8007e0e:	b510      	push	{r4, lr}
 8007e10:	460c      	mov	r4, r1
 8007e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e16:	f000 f82d 	bl	8007e74 <_lseek_r>
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	bf15      	itete	ne
 8007e20:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e2a:	81a3      	strheq	r3, [r4, #12]
 8007e2c:	bf18      	it	ne
 8007e2e:	81a3      	strhne	r3, [r4, #12]
 8007e30:	bd10      	pop	{r4, pc}

08007e32 <__sclose>:
 8007e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e36:	f000 b80d 	b.w	8007e54 <_close_r>

08007e3a <memset>:
 8007e3a:	4402      	add	r2, r0
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d100      	bne.n	8007e44 <memset+0xa>
 8007e42:	4770      	bx	lr
 8007e44:	f803 1b01 	strb.w	r1, [r3], #1
 8007e48:	e7f9      	b.n	8007e3e <memset+0x4>
	...

08007e4c <_localeconv_r>:
 8007e4c:	4800      	ldr	r0, [pc, #0]	; (8007e50 <_localeconv_r+0x4>)
 8007e4e:	4770      	bx	lr
 8007e50:	20000158 	.word	0x20000158

08007e54 <_close_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4d06      	ldr	r5, [pc, #24]	; (8007e70 <_close_r+0x1c>)
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	602b      	str	r3, [r5, #0]
 8007e60:	f7f9 feed 	bl	8001c3e <_close>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_close_r+0x1a>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_close_r+0x1a>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	2000058c 	.word	0x2000058c

08007e74 <_lseek_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4d07      	ldr	r5, [pc, #28]	; (8007e94 <_lseek_r+0x20>)
 8007e78:	4604      	mov	r4, r0
 8007e7a:	4608      	mov	r0, r1
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	602a      	str	r2, [r5, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f7f9 ff02 	bl	8001c8c <_lseek>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_lseek_r+0x1e>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_lseek_r+0x1e>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	2000058c 	.word	0x2000058c

08007e98 <_read_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4d07      	ldr	r5, [pc, #28]	; (8007eb8 <_read_r+0x20>)
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	4608      	mov	r0, r1
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	602a      	str	r2, [r5, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f7f9 fe90 	bl	8001bcc <_read>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_read_r+0x1e>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_read_r+0x1e>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	2000058c 	.word	0x2000058c

08007ebc <_write_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d07      	ldr	r5, [pc, #28]	; (8007edc <_write_r+0x20>)
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	4611      	mov	r1, r2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	602a      	str	r2, [r5, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f7f9 fe9b 	bl	8001c06 <_write>
 8007ed0:	1c43      	adds	r3, r0, #1
 8007ed2:	d102      	bne.n	8007eda <_write_r+0x1e>
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	b103      	cbz	r3, 8007eda <_write_r+0x1e>
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	bd38      	pop	{r3, r4, r5, pc}
 8007edc:	2000058c 	.word	0x2000058c

08007ee0 <__errno>:
 8007ee0:	4b01      	ldr	r3, [pc, #4]	; (8007ee8 <__errno+0x8>)
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000064 	.word	0x20000064

08007eec <__libc_init_array>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4d0d      	ldr	r5, [pc, #52]	; (8007f24 <__libc_init_array+0x38>)
 8007ef0:	4c0d      	ldr	r4, [pc, #52]	; (8007f28 <__libc_init_array+0x3c>)
 8007ef2:	1b64      	subs	r4, r4, r5
 8007ef4:	10a4      	asrs	r4, r4, #2
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	42a6      	cmp	r6, r4
 8007efa:	d109      	bne.n	8007f10 <__libc_init_array+0x24>
 8007efc:	4d0b      	ldr	r5, [pc, #44]	; (8007f2c <__libc_init_array+0x40>)
 8007efe:	4c0c      	ldr	r4, [pc, #48]	; (8007f30 <__libc_init_array+0x44>)
 8007f00:	f001 feee 	bl	8009ce0 <_init>
 8007f04:	1b64      	subs	r4, r4, r5
 8007f06:	10a4      	asrs	r4, r4, #2
 8007f08:	2600      	movs	r6, #0
 8007f0a:	42a6      	cmp	r6, r4
 8007f0c:	d105      	bne.n	8007f1a <__libc_init_array+0x2e>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f14:	4798      	blx	r3
 8007f16:	3601      	adds	r6, #1
 8007f18:	e7ee      	b.n	8007ef8 <__libc_init_array+0xc>
 8007f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f1e:	4798      	blx	r3
 8007f20:	3601      	adds	r6, #1
 8007f22:	e7f2      	b.n	8007f0a <__libc_init_array+0x1e>
 8007f24:	0800a0b4 	.word	0x0800a0b4
 8007f28:	0800a0b4 	.word	0x0800a0b4
 8007f2c:	0800a0b4 	.word	0x0800a0b4
 8007f30:	0800a0b8 	.word	0x0800a0b8

08007f34 <__retarget_lock_acquire_recursive>:
 8007f34:	4770      	bx	lr

08007f36 <__retarget_lock_release_recursive>:
 8007f36:	4770      	bx	lr

08007f38 <memcpy>:
 8007f38:	440a      	add	r2, r1
 8007f3a:	4291      	cmp	r1, r2
 8007f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f40:	d100      	bne.n	8007f44 <memcpy+0xc>
 8007f42:	4770      	bx	lr
 8007f44:	b510      	push	{r4, lr}
 8007f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f4e:	4291      	cmp	r1, r2
 8007f50:	d1f9      	bne.n	8007f46 <memcpy+0xe>
 8007f52:	bd10      	pop	{r4, pc}

08007f54 <quorem>:
 8007f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f58:	6903      	ldr	r3, [r0, #16]
 8007f5a:	690c      	ldr	r4, [r1, #16]
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	4607      	mov	r7, r0
 8007f60:	db7e      	blt.n	8008060 <quorem+0x10c>
 8007f62:	3c01      	subs	r4, #1
 8007f64:	f101 0814 	add.w	r8, r1, #20
 8007f68:	f100 0514 	add.w	r5, r0, #20
 8007f6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f70:	9301      	str	r3, [sp, #4]
 8007f72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f86:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f8a:	d331      	bcc.n	8007ff0 <quorem+0x9c>
 8007f8c:	f04f 0e00 	mov.w	lr, #0
 8007f90:	4640      	mov	r0, r8
 8007f92:	46ac      	mov	ip, r5
 8007f94:	46f2      	mov	sl, lr
 8007f96:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f9a:	b293      	uxth	r3, r2
 8007f9c:	fb06 e303 	mla	r3, r6, r3, lr
 8007fa0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fa4:	0c1a      	lsrs	r2, r3, #16
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	ebaa 0303 	sub.w	r3, sl, r3
 8007fac:	f8dc a000 	ldr.w	sl, [ip]
 8007fb0:	fa13 f38a 	uxtah	r3, r3, sl
 8007fb4:	fb06 220e 	mla	r2, r6, lr, r2
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	9b00      	ldr	r3, [sp, #0]
 8007fbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fc0:	b292      	uxth	r2, r2
 8007fc2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fca:	f8bd 3000 	ldrh.w	r3, [sp]
 8007fce:	4581      	cmp	r9, r0
 8007fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fd4:	f84c 3b04 	str.w	r3, [ip], #4
 8007fd8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fdc:	d2db      	bcs.n	8007f96 <quorem+0x42>
 8007fde:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fe2:	b92b      	cbnz	r3, 8007ff0 <quorem+0x9c>
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	3b04      	subs	r3, #4
 8007fe8:	429d      	cmp	r5, r3
 8007fea:	461a      	mov	r2, r3
 8007fec:	d32c      	bcc.n	8008048 <quorem+0xf4>
 8007fee:	613c      	str	r4, [r7, #16]
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	f001 f9a7 	bl	8009344 <__mcmp>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	db22      	blt.n	8008040 <quorem+0xec>
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	2000      	movs	r0, #0
 8008000:	f858 2b04 	ldr.w	r2, [r8], #4
 8008004:	f8d1 c000 	ldr.w	ip, [r1]
 8008008:	b293      	uxth	r3, r2
 800800a:	1ac3      	subs	r3, r0, r3
 800800c:	0c12      	lsrs	r2, r2, #16
 800800e:	fa13 f38c 	uxtah	r3, r3, ip
 8008012:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008016:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800801a:	b29b      	uxth	r3, r3
 800801c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008020:	45c1      	cmp	r9, r8
 8008022:	f841 3b04 	str.w	r3, [r1], #4
 8008026:	ea4f 4022 	mov.w	r0, r2, asr #16
 800802a:	d2e9      	bcs.n	8008000 <quorem+0xac>
 800802c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008030:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008034:	b922      	cbnz	r2, 8008040 <quorem+0xec>
 8008036:	3b04      	subs	r3, #4
 8008038:	429d      	cmp	r5, r3
 800803a:	461a      	mov	r2, r3
 800803c:	d30a      	bcc.n	8008054 <quorem+0x100>
 800803e:	613c      	str	r4, [r7, #16]
 8008040:	4630      	mov	r0, r6
 8008042:	b003      	add	sp, #12
 8008044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008048:	6812      	ldr	r2, [r2, #0]
 800804a:	3b04      	subs	r3, #4
 800804c:	2a00      	cmp	r2, #0
 800804e:	d1ce      	bne.n	8007fee <quorem+0x9a>
 8008050:	3c01      	subs	r4, #1
 8008052:	e7c9      	b.n	8007fe8 <quorem+0x94>
 8008054:	6812      	ldr	r2, [r2, #0]
 8008056:	3b04      	subs	r3, #4
 8008058:	2a00      	cmp	r2, #0
 800805a:	d1f0      	bne.n	800803e <quorem+0xea>
 800805c:	3c01      	subs	r4, #1
 800805e:	e7eb      	b.n	8008038 <quorem+0xe4>
 8008060:	2000      	movs	r0, #0
 8008062:	e7ee      	b.n	8008042 <quorem+0xee>
 8008064:	0000      	movs	r0, r0
	...

08008068 <_dtoa_r>:
 8008068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806c:	ed2d 8b04 	vpush	{d8-d9}
 8008070:	69c5      	ldr	r5, [r0, #28]
 8008072:	b093      	sub	sp, #76	; 0x4c
 8008074:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008078:	ec57 6b10 	vmov	r6, r7, d0
 800807c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008080:	9107      	str	r1, [sp, #28]
 8008082:	4604      	mov	r4, r0
 8008084:	920a      	str	r2, [sp, #40]	; 0x28
 8008086:	930d      	str	r3, [sp, #52]	; 0x34
 8008088:	b975      	cbnz	r5, 80080a8 <_dtoa_r+0x40>
 800808a:	2010      	movs	r0, #16
 800808c:	f000 fe2a 	bl	8008ce4 <malloc>
 8008090:	4602      	mov	r2, r0
 8008092:	61e0      	str	r0, [r4, #28]
 8008094:	b920      	cbnz	r0, 80080a0 <_dtoa_r+0x38>
 8008096:	4bae      	ldr	r3, [pc, #696]	; (8008350 <_dtoa_r+0x2e8>)
 8008098:	21ef      	movs	r1, #239	; 0xef
 800809a:	48ae      	ldr	r0, [pc, #696]	; (8008354 <_dtoa_r+0x2ec>)
 800809c:	f001 fcea 	bl	8009a74 <__assert_func>
 80080a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080a4:	6005      	str	r5, [r0, #0]
 80080a6:	60c5      	str	r5, [r0, #12]
 80080a8:	69e3      	ldr	r3, [r4, #28]
 80080aa:	6819      	ldr	r1, [r3, #0]
 80080ac:	b151      	cbz	r1, 80080c4 <_dtoa_r+0x5c>
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	604a      	str	r2, [r1, #4]
 80080b2:	2301      	movs	r3, #1
 80080b4:	4093      	lsls	r3, r2
 80080b6:	608b      	str	r3, [r1, #8]
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 ff07 	bl	8008ecc <_Bfree>
 80080be:	69e3      	ldr	r3, [r4, #28]
 80080c0:	2200      	movs	r2, #0
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	1e3b      	subs	r3, r7, #0
 80080c6:	bfbb      	ittet	lt
 80080c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80080cc:	9303      	strlt	r3, [sp, #12]
 80080ce:	2300      	movge	r3, #0
 80080d0:	2201      	movlt	r2, #1
 80080d2:	bfac      	ite	ge
 80080d4:	f8c8 3000 	strge.w	r3, [r8]
 80080d8:	f8c8 2000 	strlt.w	r2, [r8]
 80080dc:	4b9e      	ldr	r3, [pc, #632]	; (8008358 <_dtoa_r+0x2f0>)
 80080de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80080e2:	ea33 0308 	bics.w	r3, r3, r8
 80080e6:	d11b      	bne.n	8008120 <_dtoa_r+0xb8>
 80080e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80080f4:	4333      	orrs	r3, r6
 80080f6:	f000 8593 	beq.w	8008c20 <_dtoa_r+0xbb8>
 80080fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080fc:	b963      	cbnz	r3, 8008118 <_dtoa_r+0xb0>
 80080fe:	4b97      	ldr	r3, [pc, #604]	; (800835c <_dtoa_r+0x2f4>)
 8008100:	e027      	b.n	8008152 <_dtoa_r+0xea>
 8008102:	4b97      	ldr	r3, [pc, #604]	; (8008360 <_dtoa_r+0x2f8>)
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800810a:	6013      	str	r3, [r2, #0]
 800810c:	9800      	ldr	r0, [sp, #0]
 800810e:	b013      	add	sp, #76	; 0x4c
 8008110:	ecbd 8b04 	vpop	{d8-d9}
 8008114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008118:	4b90      	ldr	r3, [pc, #576]	; (800835c <_dtoa_r+0x2f4>)
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	3303      	adds	r3, #3
 800811e:	e7f3      	b.n	8008108 <_dtoa_r+0xa0>
 8008120:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008124:	2200      	movs	r2, #0
 8008126:	ec51 0b17 	vmov	r0, r1, d7
 800812a:	eeb0 8a47 	vmov.f32	s16, s14
 800812e:	eef0 8a67 	vmov.f32	s17, s15
 8008132:	2300      	movs	r3, #0
 8008134:	f7f8 fcf0 	bl	8000b18 <__aeabi_dcmpeq>
 8008138:	4681      	mov	r9, r0
 800813a:	b160      	cbz	r0, 8008156 <_dtoa_r+0xee>
 800813c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800813e:	2301      	movs	r3, #1
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8568 	beq.w	8008c1a <_dtoa_r+0xbb2>
 800814a:	4b86      	ldr	r3, [pc, #536]	; (8008364 <_dtoa_r+0x2fc>)
 800814c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	3b01      	subs	r3, #1
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	e7da      	b.n	800810c <_dtoa_r+0xa4>
 8008156:	aa10      	add	r2, sp, #64	; 0x40
 8008158:	a911      	add	r1, sp, #68	; 0x44
 800815a:	4620      	mov	r0, r4
 800815c:	eeb0 0a48 	vmov.f32	s0, s16
 8008160:	eef0 0a68 	vmov.f32	s1, s17
 8008164:	f001 f994 	bl	8009490 <__d2b>
 8008168:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800816c:	4682      	mov	sl, r0
 800816e:	2d00      	cmp	r5, #0
 8008170:	d07f      	beq.n	8008272 <_dtoa_r+0x20a>
 8008172:	ee18 3a90 	vmov	r3, s17
 8008176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800817a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800817e:	ec51 0b18 	vmov	r0, r1, d8
 8008182:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008186:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800818a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800818e:	4619      	mov	r1, r3
 8008190:	2200      	movs	r2, #0
 8008192:	4b75      	ldr	r3, [pc, #468]	; (8008368 <_dtoa_r+0x300>)
 8008194:	f7f8 f8a0 	bl	80002d8 <__aeabi_dsub>
 8008198:	a367      	add	r3, pc, #412	; (adr r3, 8008338 <_dtoa_r+0x2d0>)
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	f7f8 fa53 	bl	8000648 <__aeabi_dmul>
 80081a2:	a367      	add	r3, pc, #412	; (adr r3, 8008340 <_dtoa_r+0x2d8>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	f7f8 f898 	bl	80002dc <__adddf3>
 80081ac:	4606      	mov	r6, r0
 80081ae:	4628      	mov	r0, r5
 80081b0:	460f      	mov	r7, r1
 80081b2:	f7f8 f9df 	bl	8000574 <__aeabi_i2d>
 80081b6:	a364      	add	r3, pc, #400	; (adr r3, 8008348 <_dtoa_r+0x2e0>)
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f7f8 fa44 	bl	8000648 <__aeabi_dmul>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 f888 	bl	80002dc <__adddf3>
 80081cc:	4606      	mov	r6, r0
 80081ce:	460f      	mov	r7, r1
 80081d0:	f7f8 fcea 	bl	8000ba8 <__aeabi_d2iz>
 80081d4:	2200      	movs	r2, #0
 80081d6:	4683      	mov	fp, r0
 80081d8:	2300      	movs	r3, #0
 80081da:	4630      	mov	r0, r6
 80081dc:	4639      	mov	r1, r7
 80081de:	f7f8 fca5 	bl	8000b2c <__aeabi_dcmplt>
 80081e2:	b148      	cbz	r0, 80081f8 <_dtoa_r+0x190>
 80081e4:	4658      	mov	r0, fp
 80081e6:	f7f8 f9c5 	bl	8000574 <__aeabi_i2d>
 80081ea:	4632      	mov	r2, r6
 80081ec:	463b      	mov	r3, r7
 80081ee:	f7f8 fc93 	bl	8000b18 <__aeabi_dcmpeq>
 80081f2:	b908      	cbnz	r0, 80081f8 <_dtoa_r+0x190>
 80081f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081f8:	f1bb 0f16 	cmp.w	fp, #22
 80081fc:	d857      	bhi.n	80082ae <_dtoa_r+0x246>
 80081fe:	4b5b      	ldr	r3, [pc, #364]	; (800836c <_dtoa_r+0x304>)
 8008200:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	ec51 0b18 	vmov	r0, r1, d8
 800820c:	f7f8 fc8e 	bl	8000b2c <__aeabi_dcmplt>
 8008210:	2800      	cmp	r0, #0
 8008212:	d04e      	beq.n	80082b2 <_dtoa_r+0x24a>
 8008214:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008218:	2300      	movs	r3, #0
 800821a:	930c      	str	r3, [sp, #48]	; 0x30
 800821c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800821e:	1b5b      	subs	r3, r3, r5
 8008220:	1e5a      	subs	r2, r3, #1
 8008222:	bf45      	ittet	mi
 8008224:	f1c3 0301 	rsbmi	r3, r3, #1
 8008228:	9305      	strmi	r3, [sp, #20]
 800822a:	2300      	movpl	r3, #0
 800822c:	2300      	movmi	r3, #0
 800822e:	9206      	str	r2, [sp, #24]
 8008230:	bf54      	ite	pl
 8008232:	9305      	strpl	r3, [sp, #20]
 8008234:	9306      	strmi	r3, [sp, #24]
 8008236:	f1bb 0f00 	cmp.w	fp, #0
 800823a:	db3c      	blt.n	80082b6 <_dtoa_r+0x24e>
 800823c:	9b06      	ldr	r3, [sp, #24]
 800823e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008242:	445b      	add	r3, fp
 8008244:	9306      	str	r3, [sp, #24]
 8008246:	2300      	movs	r3, #0
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	9b07      	ldr	r3, [sp, #28]
 800824c:	2b09      	cmp	r3, #9
 800824e:	d868      	bhi.n	8008322 <_dtoa_r+0x2ba>
 8008250:	2b05      	cmp	r3, #5
 8008252:	bfc4      	itt	gt
 8008254:	3b04      	subgt	r3, #4
 8008256:	9307      	strgt	r3, [sp, #28]
 8008258:	9b07      	ldr	r3, [sp, #28]
 800825a:	f1a3 0302 	sub.w	r3, r3, #2
 800825e:	bfcc      	ite	gt
 8008260:	2500      	movgt	r5, #0
 8008262:	2501      	movle	r5, #1
 8008264:	2b03      	cmp	r3, #3
 8008266:	f200 8085 	bhi.w	8008374 <_dtoa_r+0x30c>
 800826a:	e8df f003 	tbb	[pc, r3]
 800826e:	3b2e      	.short	0x3b2e
 8008270:	5839      	.short	0x5839
 8008272:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008276:	441d      	add	r5, r3
 8008278:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800827c:	2b20      	cmp	r3, #32
 800827e:	bfc1      	itttt	gt
 8008280:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008284:	fa08 f803 	lslgt.w	r8, r8, r3
 8008288:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800828c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008290:	bfd6      	itet	le
 8008292:	f1c3 0320 	rsble	r3, r3, #32
 8008296:	ea48 0003 	orrgt.w	r0, r8, r3
 800829a:	fa06 f003 	lslle.w	r0, r6, r3
 800829e:	f7f8 f959 	bl	8000554 <__aeabi_ui2d>
 80082a2:	2201      	movs	r2, #1
 80082a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80082a8:	3d01      	subs	r5, #1
 80082aa:	920e      	str	r2, [sp, #56]	; 0x38
 80082ac:	e76f      	b.n	800818e <_dtoa_r+0x126>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e7b3      	b.n	800821a <_dtoa_r+0x1b2>
 80082b2:	900c      	str	r0, [sp, #48]	; 0x30
 80082b4:	e7b2      	b.n	800821c <_dtoa_r+0x1b4>
 80082b6:	9b05      	ldr	r3, [sp, #20]
 80082b8:	eba3 030b 	sub.w	r3, r3, fp
 80082bc:	9305      	str	r3, [sp, #20]
 80082be:	f1cb 0300 	rsb	r3, fp, #0
 80082c2:	9308      	str	r3, [sp, #32]
 80082c4:	2300      	movs	r3, #0
 80082c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80082c8:	e7bf      	b.n	800824a <_dtoa_r+0x1e2>
 80082ca:	2300      	movs	r3, #0
 80082cc:	9309      	str	r3, [sp, #36]	; 0x24
 80082ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	dc52      	bgt.n	800837a <_dtoa_r+0x312>
 80082d4:	2301      	movs	r3, #1
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	461a      	mov	r2, r3
 80082dc:	920a      	str	r2, [sp, #40]	; 0x28
 80082de:	e00b      	b.n	80082f8 <_dtoa_r+0x290>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e7f3      	b.n	80082cc <_dtoa_r+0x264>
 80082e4:	2300      	movs	r3, #0
 80082e6:	9309      	str	r3, [sp, #36]	; 0x24
 80082e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ea:	445b      	add	r3, fp
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	3301      	adds	r3, #1
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	bfb8      	it	lt
 80082f6:	2301      	movlt	r3, #1
 80082f8:	69e0      	ldr	r0, [r4, #28]
 80082fa:	2100      	movs	r1, #0
 80082fc:	2204      	movs	r2, #4
 80082fe:	f102 0614 	add.w	r6, r2, #20
 8008302:	429e      	cmp	r6, r3
 8008304:	d93d      	bls.n	8008382 <_dtoa_r+0x31a>
 8008306:	6041      	str	r1, [r0, #4]
 8008308:	4620      	mov	r0, r4
 800830a:	f000 fd9f 	bl	8008e4c <_Balloc>
 800830e:	9000      	str	r0, [sp, #0]
 8008310:	2800      	cmp	r0, #0
 8008312:	d139      	bne.n	8008388 <_dtoa_r+0x320>
 8008314:	4b16      	ldr	r3, [pc, #88]	; (8008370 <_dtoa_r+0x308>)
 8008316:	4602      	mov	r2, r0
 8008318:	f240 11af 	movw	r1, #431	; 0x1af
 800831c:	e6bd      	b.n	800809a <_dtoa_r+0x32>
 800831e:	2301      	movs	r3, #1
 8008320:	e7e1      	b.n	80082e6 <_dtoa_r+0x27e>
 8008322:	2501      	movs	r5, #1
 8008324:	2300      	movs	r3, #0
 8008326:	9307      	str	r3, [sp, #28]
 8008328:	9509      	str	r5, [sp, #36]	; 0x24
 800832a:	f04f 33ff 	mov.w	r3, #4294967295
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	2200      	movs	r2, #0
 8008334:	2312      	movs	r3, #18
 8008336:	e7d1      	b.n	80082dc <_dtoa_r+0x274>
 8008338:	636f4361 	.word	0x636f4361
 800833c:	3fd287a7 	.word	0x3fd287a7
 8008340:	8b60c8b3 	.word	0x8b60c8b3
 8008344:	3fc68a28 	.word	0x3fc68a28
 8008348:	509f79fb 	.word	0x509f79fb
 800834c:	3fd34413 	.word	0x3fd34413
 8008350:	08009d79 	.word	0x08009d79
 8008354:	08009d90 	.word	0x08009d90
 8008358:	7ff00000 	.word	0x7ff00000
 800835c:	08009d75 	.word	0x08009d75
 8008360:	08009d6c 	.word	0x08009d6c
 8008364:	08009d49 	.word	0x08009d49
 8008368:	3ff80000 	.word	0x3ff80000
 800836c:	08009e80 	.word	0x08009e80
 8008370:	08009de8 	.word	0x08009de8
 8008374:	2301      	movs	r3, #1
 8008376:	9309      	str	r3, [sp, #36]	; 0x24
 8008378:	e7d7      	b.n	800832a <_dtoa_r+0x2c2>
 800837a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	e7ba      	b.n	80082f8 <_dtoa_r+0x290>
 8008382:	3101      	adds	r1, #1
 8008384:	0052      	lsls	r2, r2, #1
 8008386:	e7ba      	b.n	80082fe <_dtoa_r+0x296>
 8008388:	69e3      	ldr	r3, [r4, #28]
 800838a:	9a00      	ldr	r2, [sp, #0]
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	9b04      	ldr	r3, [sp, #16]
 8008390:	2b0e      	cmp	r3, #14
 8008392:	f200 80a8 	bhi.w	80084e6 <_dtoa_r+0x47e>
 8008396:	2d00      	cmp	r5, #0
 8008398:	f000 80a5 	beq.w	80084e6 <_dtoa_r+0x47e>
 800839c:	f1bb 0f00 	cmp.w	fp, #0
 80083a0:	dd38      	ble.n	8008414 <_dtoa_r+0x3ac>
 80083a2:	4bc0      	ldr	r3, [pc, #768]	; (80086a4 <_dtoa_r+0x63c>)
 80083a4:	f00b 020f 	and.w	r2, fp, #15
 80083a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80083b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80083b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80083b8:	d019      	beq.n	80083ee <_dtoa_r+0x386>
 80083ba:	4bbb      	ldr	r3, [pc, #748]	; (80086a8 <_dtoa_r+0x640>)
 80083bc:	ec51 0b18 	vmov	r0, r1, d8
 80083c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083c4:	f7f8 fa6a 	bl	800089c <__aeabi_ddiv>
 80083c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083cc:	f008 080f 	and.w	r8, r8, #15
 80083d0:	2503      	movs	r5, #3
 80083d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80086a8 <_dtoa_r+0x640>
 80083d6:	f1b8 0f00 	cmp.w	r8, #0
 80083da:	d10a      	bne.n	80083f2 <_dtoa_r+0x38a>
 80083dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083e0:	4632      	mov	r2, r6
 80083e2:	463b      	mov	r3, r7
 80083e4:	f7f8 fa5a 	bl	800089c <__aeabi_ddiv>
 80083e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083ec:	e02b      	b.n	8008446 <_dtoa_r+0x3de>
 80083ee:	2502      	movs	r5, #2
 80083f0:	e7ef      	b.n	80083d2 <_dtoa_r+0x36a>
 80083f2:	f018 0f01 	tst.w	r8, #1
 80083f6:	d008      	beq.n	800840a <_dtoa_r+0x3a2>
 80083f8:	4630      	mov	r0, r6
 80083fa:	4639      	mov	r1, r7
 80083fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008400:	f7f8 f922 	bl	8000648 <__aeabi_dmul>
 8008404:	3501      	adds	r5, #1
 8008406:	4606      	mov	r6, r0
 8008408:	460f      	mov	r7, r1
 800840a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800840e:	f109 0908 	add.w	r9, r9, #8
 8008412:	e7e0      	b.n	80083d6 <_dtoa_r+0x36e>
 8008414:	f000 809f 	beq.w	8008556 <_dtoa_r+0x4ee>
 8008418:	f1cb 0600 	rsb	r6, fp, #0
 800841c:	4ba1      	ldr	r3, [pc, #644]	; (80086a4 <_dtoa_r+0x63c>)
 800841e:	4fa2      	ldr	r7, [pc, #648]	; (80086a8 <_dtoa_r+0x640>)
 8008420:	f006 020f 	and.w	r2, r6, #15
 8008424:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	ec51 0b18 	vmov	r0, r1, d8
 8008430:	f7f8 f90a 	bl	8000648 <__aeabi_dmul>
 8008434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008438:	1136      	asrs	r6, r6, #4
 800843a:	2300      	movs	r3, #0
 800843c:	2502      	movs	r5, #2
 800843e:	2e00      	cmp	r6, #0
 8008440:	d17e      	bne.n	8008540 <_dtoa_r+0x4d8>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1d0      	bne.n	80083e8 <_dtoa_r+0x380>
 8008446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008448:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 8084 	beq.w	800855a <_dtoa_r+0x4f2>
 8008452:	4b96      	ldr	r3, [pc, #600]	; (80086ac <_dtoa_r+0x644>)
 8008454:	2200      	movs	r2, #0
 8008456:	4640      	mov	r0, r8
 8008458:	4649      	mov	r1, r9
 800845a:	f7f8 fb67 	bl	8000b2c <__aeabi_dcmplt>
 800845e:	2800      	cmp	r0, #0
 8008460:	d07b      	beq.n	800855a <_dtoa_r+0x4f2>
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d078      	beq.n	800855a <_dtoa_r+0x4f2>
 8008468:	9b01      	ldr	r3, [sp, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	dd39      	ble.n	80084e2 <_dtoa_r+0x47a>
 800846e:	4b90      	ldr	r3, [pc, #576]	; (80086b0 <_dtoa_r+0x648>)
 8008470:	2200      	movs	r2, #0
 8008472:	4640      	mov	r0, r8
 8008474:	4649      	mov	r1, r9
 8008476:	f7f8 f8e7 	bl	8000648 <__aeabi_dmul>
 800847a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800847e:	9e01      	ldr	r6, [sp, #4]
 8008480:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008484:	3501      	adds	r5, #1
 8008486:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800848a:	4628      	mov	r0, r5
 800848c:	f7f8 f872 	bl	8000574 <__aeabi_i2d>
 8008490:	4642      	mov	r2, r8
 8008492:	464b      	mov	r3, r9
 8008494:	f7f8 f8d8 	bl	8000648 <__aeabi_dmul>
 8008498:	4b86      	ldr	r3, [pc, #536]	; (80086b4 <_dtoa_r+0x64c>)
 800849a:	2200      	movs	r2, #0
 800849c:	f7f7 ff1e 	bl	80002dc <__adddf3>
 80084a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80084a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a8:	9303      	str	r3, [sp, #12]
 80084aa:	2e00      	cmp	r6, #0
 80084ac:	d158      	bne.n	8008560 <_dtoa_r+0x4f8>
 80084ae:	4b82      	ldr	r3, [pc, #520]	; (80086b8 <_dtoa_r+0x650>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	4640      	mov	r0, r8
 80084b4:	4649      	mov	r1, r9
 80084b6:	f7f7 ff0f 	bl	80002d8 <__aeabi_dsub>
 80084ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084be:	4680      	mov	r8, r0
 80084c0:	4689      	mov	r9, r1
 80084c2:	f7f8 fb51 	bl	8000b68 <__aeabi_dcmpgt>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f040 8296 	bne.w	80089f8 <_dtoa_r+0x990>
 80084cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80084d0:	4640      	mov	r0, r8
 80084d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084d6:	4649      	mov	r1, r9
 80084d8:	f7f8 fb28 	bl	8000b2c <__aeabi_dcmplt>
 80084dc:	2800      	cmp	r0, #0
 80084de:	f040 8289 	bne.w	80089f4 <_dtoa_r+0x98c>
 80084e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80084e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f2c0 814e 	blt.w	800878a <_dtoa_r+0x722>
 80084ee:	f1bb 0f0e 	cmp.w	fp, #14
 80084f2:	f300 814a 	bgt.w	800878a <_dtoa_r+0x722>
 80084f6:	4b6b      	ldr	r3, [pc, #428]	; (80086a4 <_dtoa_r+0x63c>)
 80084f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80084fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008502:	2b00      	cmp	r3, #0
 8008504:	f280 80dc 	bge.w	80086c0 <_dtoa_r+0x658>
 8008508:	9b04      	ldr	r3, [sp, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	f300 80d8 	bgt.w	80086c0 <_dtoa_r+0x658>
 8008510:	f040 826f 	bne.w	80089f2 <_dtoa_r+0x98a>
 8008514:	4b68      	ldr	r3, [pc, #416]	; (80086b8 <_dtoa_r+0x650>)
 8008516:	2200      	movs	r2, #0
 8008518:	4640      	mov	r0, r8
 800851a:	4649      	mov	r1, r9
 800851c:	f7f8 f894 	bl	8000648 <__aeabi_dmul>
 8008520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008524:	f7f8 fb16 	bl	8000b54 <__aeabi_dcmpge>
 8008528:	9e04      	ldr	r6, [sp, #16]
 800852a:	4637      	mov	r7, r6
 800852c:	2800      	cmp	r0, #0
 800852e:	f040 8245 	bne.w	80089bc <_dtoa_r+0x954>
 8008532:	9d00      	ldr	r5, [sp, #0]
 8008534:	2331      	movs	r3, #49	; 0x31
 8008536:	f805 3b01 	strb.w	r3, [r5], #1
 800853a:	f10b 0b01 	add.w	fp, fp, #1
 800853e:	e241      	b.n	80089c4 <_dtoa_r+0x95c>
 8008540:	07f2      	lsls	r2, r6, #31
 8008542:	d505      	bpl.n	8008550 <_dtoa_r+0x4e8>
 8008544:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008548:	f7f8 f87e 	bl	8000648 <__aeabi_dmul>
 800854c:	3501      	adds	r5, #1
 800854e:	2301      	movs	r3, #1
 8008550:	1076      	asrs	r6, r6, #1
 8008552:	3708      	adds	r7, #8
 8008554:	e773      	b.n	800843e <_dtoa_r+0x3d6>
 8008556:	2502      	movs	r5, #2
 8008558:	e775      	b.n	8008446 <_dtoa_r+0x3de>
 800855a:	9e04      	ldr	r6, [sp, #16]
 800855c:	465f      	mov	r7, fp
 800855e:	e792      	b.n	8008486 <_dtoa_r+0x41e>
 8008560:	9900      	ldr	r1, [sp, #0]
 8008562:	4b50      	ldr	r3, [pc, #320]	; (80086a4 <_dtoa_r+0x63c>)
 8008564:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008568:	4431      	add	r1, r6
 800856a:	9102      	str	r1, [sp, #8]
 800856c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800856e:	eeb0 9a47 	vmov.f32	s18, s14
 8008572:	eef0 9a67 	vmov.f32	s19, s15
 8008576:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800857a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800857e:	2900      	cmp	r1, #0
 8008580:	d044      	beq.n	800860c <_dtoa_r+0x5a4>
 8008582:	494e      	ldr	r1, [pc, #312]	; (80086bc <_dtoa_r+0x654>)
 8008584:	2000      	movs	r0, #0
 8008586:	f7f8 f989 	bl	800089c <__aeabi_ddiv>
 800858a:	ec53 2b19 	vmov	r2, r3, d9
 800858e:	f7f7 fea3 	bl	80002d8 <__aeabi_dsub>
 8008592:	9d00      	ldr	r5, [sp, #0]
 8008594:	ec41 0b19 	vmov	d9, r0, r1
 8008598:	4649      	mov	r1, r9
 800859a:	4640      	mov	r0, r8
 800859c:	f7f8 fb04 	bl	8000ba8 <__aeabi_d2iz>
 80085a0:	4606      	mov	r6, r0
 80085a2:	f7f7 ffe7 	bl	8000574 <__aeabi_i2d>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4640      	mov	r0, r8
 80085ac:	4649      	mov	r1, r9
 80085ae:	f7f7 fe93 	bl	80002d8 <__aeabi_dsub>
 80085b2:	3630      	adds	r6, #48	; 0x30
 80085b4:	f805 6b01 	strb.w	r6, [r5], #1
 80085b8:	ec53 2b19 	vmov	r2, r3, d9
 80085bc:	4680      	mov	r8, r0
 80085be:	4689      	mov	r9, r1
 80085c0:	f7f8 fab4 	bl	8000b2c <__aeabi_dcmplt>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d164      	bne.n	8008692 <_dtoa_r+0x62a>
 80085c8:	4642      	mov	r2, r8
 80085ca:	464b      	mov	r3, r9
 80085cc:	4937      	ldr	r1, [pc, #220]	; (80086ac <_dtoa_r+0x644>)
 80085ce:	2000      	movs	r0, #0
 80085d0:	f7f7 fe82 	bl	80002d8 <__aeabi_dsub>
 80085d4:	ec53 2b19 	vmov	r2, r3, d9
 80085d8:	f7f8 faa8 	bl	8000b2c <__aeabi_dcmplt>
 80085dc:	2800      	cmp	r0, #0
 80085de:	f040 80b6 	bne.w	800874e <_dtoa_r+0x6e6>
 80085e2:	9b02      	ldr	r3, [sp, #8]
 80085e4:	429d      	cmp	r5, r3
 80085e6:	f43f af7c 	beq.w	80084e2 <_dtoa_r+0x47a>
 80085ea:	4b31      	ldr	r3, [pc, #196]	; (80086b0 <_dtoa_r+0x648>)
 80085ec:	ec51 0b19 	vmov	r0, r1, d9
 80085f0:	2200      	movs	r2, #0
 80085f2:	f7f8 f829 	bl	8000648 <__aeabi_dmul>
 80085f6:	4b2e      	ldr	r3, [pc, #184]	; (80086b0 <_dtoa_r+0x648>)
 80085f8:	ec41 0b19 	vmov	d9, r0, r1
 80085fc:	2200      	movs	r2, #0
 80085fe:	4640      	mov	r0, r8
 8008600:	4649      	mov	r1, r9
 8008602:	f7f8 f821 	bl	8000648 <__aeabi_dmul>
 8008606:	4680      	mov	r8, r0
 8008608:	4689      	mov	r9, r1
 800860a:	e7c5      	b.n	8008598 <_dtoa_r+0x530>
 800860c:	ec51 0b17 	vmov	r0, r1, d7
 8008610:	f7f8 f81a 	bl	8000648 <__aeabi_dmul>
 8008614:	9b02      	ldr	r3, [sp, #8]
 8008616:	9d00      	ldr	r5, [sp, #0]
 8008618:	930f      	str	r3, [sp, #60]	; 0x3c
 800861a:	ec41 0b19 	vmov	d9, r0, r1
 800861e:	4649      	mov	r1, r9
 8008620:	4640      	mov	r0, r8
 8008622:	f7f8 fac1 	bl	8000ba8 <__aeabi_d2iz>
 8008626:	4606      	mov	r6, r0
 8008628:	f7f7 ffa4 	bl	8000574 <__aeabi_i2d>
 800862c:	3630      	adds	r6, #48	; 0x30
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	4640      	mov	r0, r8
 8008634:	4649      	mov	r1, r9
 8008636:	f7f7 fe4f 	bl	80002d8 <__aeabi_dsub>
 800863a:	f805 6b01 	strb.w	r6, [r5], #1
 800863e:	9b02      	ldr	r3, [sp, #8]
 8008640:	429d      	cmp	r5, r3
 8008642:	4680      	mov	r8, r0
 8008644:	4689      	mov	r9, r1
 8008646:	f04f 0200 	mov.w	r2, #0
 800864a:	d124      	bne.n	8008696 <_dtoa_r+0x62e>
 800864c:	4b1b      	ldr	r3, [pc, #108]	; (80086bc <_dtoa_r+0x654>)
 800864e:	ec51 0b19 	vmov	r0, r1, d9
 8008652:	f7f7 fe43 	bl	80002dc <__adddf3>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4640      	mov	r0, r8
 800865c:	4649      	mov	r1, r9
 800865e:	f7f8 fa83 	bl	8000b68 <__aeabi_dcmpgt>
 8008662:	2800      	cmp	r0, #0
 8008664:	d173      	bne.n	800874e <_dtoa_r+0x6e6>
 8008666:	ec53 2b19 	vmov	r2, r3, d9
 800866a:	4914      	ldr	r1, [pc, #80]	; (80086bc <_dtoa_r+0x654>)
 800866c:	2000      	movs	r0, #0
 800866e:	f7f7 fe33 	bl	80002d8 <__aeabi_dsub>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4640      	mov	r0, r8
 8008678:	4649      	mov	r1, r9
 800867a:	f7f8 fa57 	bl	8000b2c <__aeabi_dcmplt>
 800867e:	2800      	cmp	r0, #0
 8008680:	f43f af2f 	beq.w	80084e2 <_dtoa_r+0x47a>
 8008684:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008686:	1e6b      	subs	r3, r5, #1
 8008688:	930f      	str	r3, [sp, #60]	; 0x3c
 800868a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800868e:	2b30      	cmp	r3, #48	; 0x30
 8008690:	d0f8      	beq.n	8008684 <_dtoa_r+0x61c>
 8008692:	46bb      	mov	fp, r7
 8008694:	e04a      	b.n	800872c <_dtoa_r+0x6c4>
 8008696:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <_dtoa_r+0x648>)
 8008698:	f7f7 ffd6 	bl	8000648 <__aeabi_dmul>
 800869c:	4680      	mov	r8, r0
 800869e:	4689      	mov	r9, r1
 80086a0:	e7bd      	b.n	800861e <_dtoa_r+0x5b6>
 80086a2:	bf00      	nop
 80086a4:	08009e80 	.word	0x08009e80
 80086a8:	08009e58 	.word	0x08009e58
 80086ac:	3ff00000 	.word	0x3ff00000
 80086b0:	40240000 	.word	0x40240000
 80086b4:	401c0000 	.word	0x401c0000
 80086b8:	40140000 	.word	0x40140000
 80086bc:	3fe00000 	.word	0x3fe00000
 80086c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80086c4:	9d00      	ldr	r5, [sp, #0]
 80086c6:	4642      	mov	r2, r8
 80086c8:	464b      	mov	r3, r9
 80086ca:	4630      	mov	r0, r6
 80086cc:	4639      	mov	r1, r7
 80086ce:	f7f8 f8e5 	bl	800089c <__aeabi_ddiv>
 80086d2:	f7f8 fa69 	bl	8000ba8 <__aeabi_d2iz>
 80086d6:	9001      	str	r0, [sp, #4]
 80086d8:	f7f7 ff4c 	bl	8000574 <__aeabi_i2d>
 80086dc:	4642      	mov	r2, r8
 80086de:	464b      	mov	r3, r9
 80086e0:	f7f7 ffb2 	bl	8000648 <__aeabi_dmul>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4630      	mov	r0, r6
 80086ea:	4639      	mov	r1, r7
 80086ec:	f7f7 fdf4 	bl	80002d8 <__aeabi_dsub>
 80086f0:	9e01      	ldr	r6, [sp, #4]
 80086f2:	9f04      	ldr	r7, [sp, #16]
 80086f4:	3630      	adds	r6, #48	; 0x30
 80086f6:	f805 6b01 	strb.w	r6, [r5], #1
 80086fa:	9e00      	ldr	r6, [sp, #0]
 80086fc:	1bae      	subs	r6, r5, r6
 80086fe:	42b7      	cmp	r7, r6
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	d134      	bne.n	8008770 <_dtoa_r+0x708>
 8008706:	f7f7 fde9 	bl	80002dc <__adddf3>
 800870a:	4642      	mov	r2, r8
 800870c:	464b      	mov	r3, r9
 800870e:	4606      	mov	r6, r0
 8008710:	460f      	mov	r7, r1
 8008712:	f7f8 fa29 	bl	8000b68 <__aeabi_dcmpgt>
 8008716:	b9c8      	cbnz	r0, 800874c <_dtoa_r+0x6e4>
 8008718:	4642      	mov	r2, r8
 800871a:	464b      	mov	r3, r9
 800871c:	4630      	mov	r0, r6
 800871e:	4639      	mov	r1, r7
 8008720:	f7f8 f9fa 	bl	8000b18 <__aeabi_dcmpeq>
 8008724:	b110      	cbz	r0, 800872c <_dtoa_r+0x6c4>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	07db      	lsls	r3, r3, #31
 800872a:	d40f      	bmi.n	800874c <_dtoa_r+0x6e4>
 800872c:	4651      	mov	r1, sl
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fbcc 	bl	8008ecc <_Bfree>
 8008734:	2300      	movs	r3, #0
 8008736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008738:	702b      	strb	r3, [r5, #0]
 800873a:	f10b 0301 	add.w	r3, fp, #1
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008742:	2b00      	cmp	r3, #0
 8008744:	f43f ace2 	beq.w	800810c <_dtoa_r+0xa4>
 8008748:	601d      	str	r5, [r3, #0]
 800874a:	e4df      	b.n	800810c <_dtoa_r+0xa4>
 800874c:	465f      	mov	r7, fp
 800874e:	462b      	mov	r3, r5
 8008750:	461d      	mov	r5, r3
 8008752:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008756:	2a39      	cmp	r2, #57	; 0x39
 8008758:	d106      	bne.n	8008768 <_dtoa_r+0x700>
 800875a:	9a00      	ldr	r2, [sp, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d1f7      	bne.n	8008750 <_dtoa_r+0x6e8>
 8008760:	9900      	ldr	r1, [sp, #0]
 8008762:	2230      	movs	r2, #48	; 0x30
 8008764:	3701      	adds	r7, #1
 8008766:	700a      	strb	r2, [r1, #0]
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	3201      	adds	r2, #1
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e790      	b.n	8008692 <_dtoa_r+0x62a>
 8008770:	4ba3      	ldr	r3, [pc, #652]	; (8008a00 <_dtoa_r+0x998>)
 8008772:	2200      	movs	r2, #0
 8008774:	f7f7 ff68 	bl	8000648 <__aeabi_dmul>
 8008778:	2200      	movs	r2, #0
 800877a:	2300      	movs	r3, #0
 800877c:	4606      	mov	r6, r0
 800877e:	460f      	mov	r7, r1
 8008780:	f7f8 f9ca 	bl	8000b18 <__aeabi_dcmpeq>
 8008784:	2800      	cmp	r0, #0
 8008786:	d09e      	beq.n	80086c6 <_dtoa_r+0x65e>
 8008788:	e7d0      	b.n	800872c <_dtoa_r+0x6c4>
 800878a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800878c:	2a00      	cmp	r2, #0
 800878e:	f000 80ca 	beq.w	8008926 <_dtoa_r+0x8be>
 8008792:	9a07      	ldr	r2, [sp, #28]
 8008794:	2a01      	cmp	r2, #1
 8008796:	f300 80ad 	bgt.w	80088f4 <_dtoa_r+0x88c>
 800879a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800879c:	2a00      	cmp	r2, #0
 800879e:	f000 80a5 	beq.w	80088ec <_dtoa_r+0x884>
 80087a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087a6:	9e08      	ldr	r6, [sp, #32]
 80087a8:	9d05      	ldr	r5, [sp, #20]
 80087aa:	9a05      	ldr	r2, [sp, #20]
 80087ac:	441a      	add	r2, r3
 80087ae:	9205      	str	r2, [sp, #20]
 80087b0:	9a06      	ldr	r2, [sp, #24]
 80087b2:	2101      	movs	r1, #1
 80087b4:	441a      	add	r2, r3
 80087b6:	4620      	mov	r0, r4
 80087b8:	9206      	str	r2, [sp, #24]
 80087ba:	f000 fc3d 	bl	8009038 <__i2b>
 80087be:	4607      	mov	r7, r0
 80087c0:	b165      	cbz	r5, 80087dc <_dtoa_r+0x774>
 80087c2:	9b06      	ldr	r3, [sp, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	dd09      	ble.n	80087dc <_dtoa_r+0x774>
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	9a05      	ldr	r2, [sp, #20]
 80087cc:	bfa8      	it	ge
 80087ce:	462b      	movge	r3, r5
 80087d0:	1ad2      	subs	r2, r2, r3
 80087d2:	9205      	str	r2, [sp, #20]
 80087d4:	9a06      	ldr	r2, [sp, #24]
 80087d6:	1aed      	subs	r5, r5, r3
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	9306      	str	r3, [sp, #24]
 80087dc:	9b08      	ldr	r3, [sp, #32]
 80087de:	b1f3      	cbz	r3, 800881e <_dtoa_r+0x7b6>
 80087e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 80a3 	beq.w	800892e <_dtoa_r+0x8c6>
 80087e8:	2e00      	cmp	r6, #0
 80087ea:	dd10      	ble.n	800880e <_dtoa_r+0x7a6>
 80087ec:	4639      	mov	r1, r7
 80087ee:	4632      	mov	r2, r6
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 fce1 	bl	80091b8 <__pow5mult>
 80087f6:	4652      	mov	r2, sl
 80087f8:	4601      	mov	r1, r0
 80087fa:	4607      	mov	r7, r0
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 fc31 	bl	8009064 <__multiply>
 8008802:	4651      	mov	r1, sl
 8008804:	4680      	mov	r8, r0
 8008806:	4620      	mov	r0, r4
 8008808:	f000 fb60 	bl	8008ecc <_Bfree>
 800880c:	46c2      	mov	sl, r8
 800880e:	9b08      	ldr	r3, [sp, #32]
 8008810:	1b9a      	subs	r2, r3, r6
 8008812:	d004      	beq.n	800881e <_dtoa_r+0x7b6>
 8008814:	4651      	mov	r1, sl
 8008816:	4620      	mov	r0, r4
 8008818:	f000 fcce 	bl	80091b8 <__pow5mult>
 800881c:	4682      	mov	sl, r0
 800881e:	2101      	movs	r1, #1
 8008820:	4620      	mov	r0, r4
 8008822:	f000 fc09 	bl	8009038 <__i2b>
 8008826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008828:	2b00      	cmp	r3, #0
 800882a:	4606      	mov	r6, r0
 800882c:	f340 8081 	ble.w	8008932 <_dtoa_r+0x8ca>
 8008830:	461a      	mov	r2, r3
 8008832:	4601      	mov	r1, r0
 8008834:	4620      	mov	r0, r4
 8008836:	f000 fcbf 	bl	80091b8 <__pow5mult>
 800883a:	9b07      	ldr	r3, [sp, #28]
 800883c:	2b01      	cmp	r3, #1
 800883e:	4606      	mov	r6, r0
 8008840:	dd7a      	ble.n	8008938 <_dtoa_r+0x8d0>
 8008842:	f04f 0800 	mov.w	r8, #0
 8008846:	6933      	ldr	r3, [r6, #16]
 8008848:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800884c:	6918      	ldr	r0, [r3, #16]
 800884e:	f000 fba5 	bl	8008f9c <__hi0bits>
 8008852:	f1c0 0020 	rsb	r0, r0, #32
 8008856:	9b06      	ldr	r3, [sp, #24]
 8008858:	4418      	add	r0, r3
 800885a:	f010 001f 	ands.w	r0, r0, #31
 800885e:	f000 8094 	beq.w	800898a <_dtoa_r+0x922>
 8008862:	f1c0 0320 	rsb	r3, r0, #32
 8008866:	2b04      	cmp	r3, #4
 8008868:	f340 8085 	ble.w	8008976 <_dtoa_r+0x90e>
 800886c:	9b05      	ldr	r3, [sp, #20]
 800886e:	f1c0 001c 	rsb	r0, r0, #28
 8008872:	4403      	add	r3, r0
 8008874:	9305      	str	r3, [sp, #20]
 8008876:	9b06      	ldr	r3, [sp, #24]
 8008878:	4403      	add	r3, r0
 800887a:	4405      	add	r5, r0
 800887c:	9306      	str	r3, [sp, #24]
 800887e:	9b05      	ldr	r3, [sp, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	dd05      	ble.n	8008890 <_dtoa_r+0x828>
 8008884:	4651      	mov	r1, sl
 8008886:	461a      	mov	r2, r3
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fcef 	bl	800926c <__lshift>
 800888e:	4682      	mov	sl, r0
 8008890:	9b06      	ldr	r3, [sp, #24]
 8008892:	2b00      	cmp	r3, #0
 8008894:	dd05      	ble.n	80088a2 <_dtoa_r+0x83a>
 8008896:	4631      	mov	r1, r6
 8008898:	461a      	mov	r2, r3
 800889a:	4620      	mov	r0, r4
 800889c:	f000 fce6 	bl	800926c <__lshift>
 80088a0:	4606      	mov	r6, r0
 80088a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d072      	beq.n	800898e <_dtoa_r+0x926>
 80088a8:	4631      	mov	r1, r6
 80088aa:	4650      	mov	r0, sl
 80088ac:	f000 fd4a 	bl	8009344 <__mcmp>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	da6c      	bge.n	800898e <_dtoa_r+0x926>
 80088b4:	2300      	movs	r3, #0
 80088b6:	4651      	mov	r1, sl
 80088b8:	220a      	movs	r2, #10
 80088ba:	4620      	mov	r0, r4
 80088bc:	f000 fb28 	bl	8008f10 <__multadd>
 80088c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088c6:	4682      	mov	sl, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 81b0 	beq.w	8008c2e <_dtoa_r+0xbc6>
 80088ce:	2300      	movs	r3, #0
 80088d0:	4639      	mov	r1, r7
 80088d2:	220a      	movs	r2, #10
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fb1b 	bl	8008f10 <__multadd>
 80088da:	9b01      	ldr	r3, [sp, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	4607      	mov	r7, r0
 80088e0:	f300 8096 	bgt.w	8008a10 <_dtoa_r+0x9a8>
 80088e4:	9b07      	ldr	r3, [sp, #28]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	dc59      	bgt.n	800899e <_dtoa_r+0x936>
 80088ea:	e091      	b.n	8008a10 <_dtoa_r+0x9a8>
 80088ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088f2:	e758      	b.n	80087a6 <_dtoa_r+0x73e>
 80088f4:	9b04      	ldr	r3, [sp, #16]
 80088f6:	1e5e      	subs	r6, r3, #1
 80088f8:	9b08      	ldr	r3, [sp, #32]
 80088fa:	42b3      	cmp	r3, r6
 80088fc:	bfbf      	itttt	lt
 80088fe:	9b08      	ldrlt	r3, [sp, #32]
 8008900:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008902:	9608      	strlt	r6, [sp, #32]
 8008904:	1af3      	sublt	r3, r6, r3
 8008906:	bfb4      	ite	lt
 8008908:	18d2      	addlt	r2, r2, r3
 800890a:	1b9e      	subge	r6, r3, r6
 800890c:	9b04      	ldr	r3, [sp, #16]
 800890e:	bfbc      	itt	lt
 8008910:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008912:	2600      	movlt	r6, #0
 8008914:	2b00      	cmp	r3, #0
 8008916:	bfb7      	itett	lt
 8008918:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800891c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008920:	1a9d      	sublt	r5, r3, r2
 8008922:	2300      	movlt	r3, #0
 8008924:	e741      	b.n	80087aa <_dtoa_r+0x742>
 8008926:	9e08      	ldr	r6, [sp, #32]
 8008928:	9d05      	ldr	r5, [sp, #20]
 800892a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800892c:	e748      	b.n	80087c0 <_dtoa_r+0x758>
 800892e:	9a08      	ldr	r2, [sp, #32]
 8008930:	e770      	b.n	8008814 <_dtoa_r+0x7ac>
 8008932:	9b07      	ldr	r3, [sp, #28]
 8008934:	2b01      	cmp	r3, #1
 8008936:	dc19      	bgt.n	800896c <_dtoa_r+0x904>
 8008938:	9b02      	ldr	r3, [sp, #8]
 800893a:	b9bb      	cbnz	r3, 800896c <_dtoa_r+0x904>
 800893c:	9b03      	ldr	r3, [sp, #12]
 800893e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008942:	b99b      	cbnz	r3, 800896c <_dtoa_r+0x904>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800894a:	0d1b      	lsrs	r3, r3, #20
 800894c:	051b      	lsls	r3, r3, #20
 800894e:	b183      	cbz	r3, 8008972 <_dtoa_r+0x90a>
 8008950:	9b05      	ldr	r3, [sp, #20]
 8008952:	3301      	adds	r3, #1
 8008954:	9305      	str	r3, [sp, #20]
 8008956:	9b06      	ldr	r3, [sp, #24]
 8008958:	3301      	adds	r3, #1
 800895a:	9306      	str	r3, [sp, #24]
 800895c:	f04f 0801 	mov.w	r8, #1
 8008960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008962:	2b00      	cmp	r3, #0
 8008964:	f47f af6f 	bne.w	8008846 <_dtoa_r+0x7de>
 8008968:	2001      	movs	r0, #1
 800896a:	e774      	b.n	8008856 <_dtoa_r+0x7ee>
 800896c:	f04f 0800 	mov.w	r8, #0
 8008970:	e7f6      	b.n	8008960 <_dtoa_r+0x8f8>
 8008972:	4698      	mov	r8, r3
 8008974:	e7f4      	b.n	8008960 <_dtoa_r+0x8f8>
 8008976:	d082      	beq.n	800887e <_dtoa_r+0x816>
 8008978:	9a05      	ldr	r2, [sp, #20]
 800897a:	331c      	adds	r3, #28
 800897c:	441a      	add	r2, r3
 800897e:	9205      	str	r2, [sp, #20]
 8008980:	9a06      	ldr	r2, [sp, #24]
 8008982:	441a      	add	r2, r3
 8008984:	441d      	add	r5, r3
 8008986:	9206      	str	r2, [sp, #24]
 8008988:	e779      	b.n	800887e <_dtoa_r+0x816>
 800898a:	4603      	mov	r3, r0
 800898c:	e7f4      	b.n	8008978 <_dtoa_r+0x910>
 800898e:	9b04      	ldr	r3, [sp, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	dc37      	bgt.n	8008a04 <_dtoa_r+0x99c>
 8008994:	9b07      	ldr	r3, [sp, #28]
 8008996:	2b02      	cmp	r3, #2
 8008998:	dd34      	ble.n	8008a04 <_dtoa_r+0x99c>
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	9301      	str	r3, [sp, #4]
 800899e:	9b01      	ldr	r3, [sp, #4]
 80089a0:	b963      	cbnz	r3, 80089bc <_dtoa_r+0x954>
 80089a2:	4631      	mov	r1, r6
 80089a4:	2205      	movs	r2, #5
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 fab2 	bl	8008f10 <__multadd>
 80089ac:	4601      	mov	r1, r0
 80089ae:	4606      	mov	r6, r0
 80089b0:	4650      	mov	r0, sl
 80089b2:	f000 fcc7 	bl	8009344 <__mcmp>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f73f adbb 	bgt.w	8008532 <_dtoa_r+0x4ca>
 80089bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089be:	9d00      	ldr	r5, [sp, #0]
 80089c0:	ea6f 0b03 	mvn.w	fp, r3
 80089c4:	f04f 0800 	mov.w	r8, #0
 80089c8:	4631      	mov	r1, r6
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 fa7e 	bl	8008ecc <_Bfree>
 80089d0:	2f00      	cmp	r7, #0
 80089d2:	f43f aeab 	beq.w	800872c <_dtoa_r+0x6c4>
 80089d6:	f1b8 0f00 	cmp.w	r8, #0
 80089da:	d005      	beq.n	80089e8 <_dtoa_r+0x980>
 80089dc:	45b8      	cmp	r8, r7
 80089de:	d003      	beq.n	80089e8 <_dtoa_r+0x980>
 80089e0:	4641      	mov	r1, r8
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 fa72 	bl	8008ecc <_Bfree>
 80089e8:	4639      	mov	r1, r7
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 fa6e 	bl	8008ecc <_Bfree>
 80089f0:	e69c      	b.n	800872c <_dtoa_r+0x6c4>
 80089f2:	2600      	movs	r6, #0
 80089f4:	4637      	mov	r7, r6
 80089f6:	e7e1      	b.n	80089bc <_dtoa_r+0x954>
 80089f8:	46bb      	mov	fp, r7
 80089fa:	4637      	mov	r7, r6
 80089fc:	e599      	b.n	8008532 <_dtoa_r+0x4ca>
 80089fe:	bf00      	nop
 8008a00:	40240000 	.word	0x40240000
 8008a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 80c8 	beq.w	8008b9c <_dtoa_r+0xb34>
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	2d00      	cmp	r5, #0
 8008a12:	dd05      	ble.n	8008a20 <_dtoa_r+0x9b8>
 8008a14:	4639      	mov	r1, r7
 8008a16:	462a      	mov	r2, r5
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 fc27 	bl	800926c <__lshift>
 8008a1e:	4607      	mov	r7, r0
 8008a20:	f1b8 0f00 	cmp.w	r8, #0
 8008a24:	d05b      	beq.n	8008ade <_dtoa_r+0xa76>
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 fa0f 	bl	8008e4c <_Balloc>
 8008a2e:	4605      	mov	r5, r0
 8008a30:	b928      	cbnz	r0, 8008a3e <_dtoa_r+0x9d6>
 8008a32:	4b83      	ldr	r3, [pc, #524]	; (8008c40 <_dtoa_r+0xbd8>)
 8008a34:	4602      	mov	r2, r0
 8008a36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008a3a:	f7ff bb2e 	b.w	800809a <_dtoa_r+0x32>
 8008a3e:	693a      	ldr	r2, [r7, #16]
 8008a40:	3202      	adds	r2, #2
 8008a42:	0092      	lsls	r2, r2, #2
 8008a44:	f107 010c 	add.w	r1, r7, #12
 8008a48:	300c      	adds	r0, #12
 8008a4a:	f7ff fa75 	bl	8007f38 <memcpy>
 8008a4e:	2201      	movs	r2, #1
 8008a50:	4629      	mov	r1, r5
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fc0a 	bl	800926c <__lshift>
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	9304      	str	r3, [sp, #16]
 8008a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a62:	4413      	add	r3, r2
 8008a64:	9308      	str	r3, [sp, #32]
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	46b8      	mov	r8, r7
 8008a6e:	9306      	str	r3, [sp, #24]
 8008a70:	4607      	mov	r7, r0
 8008a72:	9b04      	ldr	r3, [sp, #16]
 8008a74:	4631      	mov	r1, r6
 8008a76:	3b01      	subs	r3, #1
 8008a78:	4650      	mov	r0, sl
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	f7ff fa6a 	bl	8007f54 <quorem>
 8008a80:	4641      	mov	r1, r8
 8008a82:	9002      	str	r0, [sp, #8]
 8008a84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008a88:	4650      	mov	r0, sl
 8008a8a:	f000 fc5b 	bl	8009344 <__mcmp>
 8008a8e:	463a      	mov	r2, r7
 8008a90:	9005      	str	r0, [sp, #20]
 8008a92:	4631      	mov	r1, r6
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 fc71 	bl	800937c <__mdiff>
 8008a9a:	68c2      	ldr	r2, [r0, #12]
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	bb02      	cbnz	r2, 8008ae2 <_dtoa_r+0xa7a>
 8008aa0:	4601      	mov	r1, r0
 8008aa2:	4650      	mov	r0, sl
 8008aa4:	f000 fc4e 	bl	8009344 <__mcmp>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	4629      	mov	r1, r5
 8008aac:	4620      	mov	r0, r4
 8008aae:	9209      	str	r2, [sp, #36]	; 0x24
 8008ab0:	f000 fa0c 	bl	8008ecc <_Bfree>
 8008ab4:	9b07      	ldr	r3, [sp, #28]
 8008ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ab8:	9d04      	ldr	r5, [sp, #16]
 8008aba:	ea43 0102 	orr.w	r1, r3, r2
 8008abe:	9b06      	ldr	r3, [sp, #24]
 8008ac0:	4319      	orrs	r1, r3
 8008ac2:	d110      	bne.n	8008ae6 <_dtoa_r+0xa7e>
 8008ac4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ac8:	d029      	beq.n	8008b1e <_dtoa_r+0xab6>
 8008aca:	9b05      	ldr	r3, [sp, #20]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	dd02      	ble.n	8008ad6 <_dtoa_r+0xa6e>
 8008ad0:	9b02      	ldr	r3, [sp, #8]
 8008ad2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	f883 9000 	strb.w	r9, [r3]
 8008adc:	e774      	b.n	80089c8 <_dtoa_r+0x960>
 8008ade:	4638      	mov	r0, r7
 8008ae0:	e7ba      	b.n	8008a58 <_dtoa_r+0x9f0>
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	e7e1      	b.n	8008aaa <_dtoa_r+0xa42>
 8008ae6:	9b05      	ldr	r3, [sp, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	db04      	blt.n	8008af6 <_dtoa_r+0xa8e>
 8008aec:	9907      	ldr	r1, [sp, #28]
 8008aee:	430b      	orrs	r3, r1
 8008af0:	9906      	ldr	r1, [sp, #24]
 8008af2:	430b      	orrs	r3, r1
 8008af4:	d120      	bne.n	8008b38 <_dtoa_r+0xad0>
 8008af6:	2a00      	cmp	r2, #0
 8008af8:	dded      	ble.n	8008ad6 <_dtoa_r+0xa6e>
 8008afa:	4651      	mov	r1, sl
 8008afc:	2201      	movs	r2, #1
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 fbb4 	bl	800926c <__lshift>
 8008b04:	4631      	mov	r1, r6
 8008b06:	4682      	mov	sl, r0
 8008b08:	f000 fc1c 	bl	8009344 <__mcmp>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	dc03      	bgt.n	8008b18 <_dtoa_r+0xab0>
 8008b10:	d1e1      	bne.n	8008ad6 <_dtoa_r+0xa6e>
 8008b12:	f019 0f01 	tst.w	r9, #1
 8008b16:	d0de      	beq.n	8008ad6 <_dtoa_r+0xa6e>
 8008b18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b1c:	d1d8      	bne.n	8008ad0 <_dtoa_r+0xa68>
 8008b1e:	9a01      	ldr	r2, [sp, #4]
 8008b20:	2339      	movs	r3, #57	; 0x39
 8008b22:	7013      	strb	r3, [r2, #0]
 8008b24:	462b      	mov	r3, r5
 8008b26:	461d      	mov	r5, r3
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b2e:	2a39      	cmp	r2, #57	; 0x39
 8008b30:	d06c      	beq.n	8008c0c <_dtoa_r+0xba4>
 8008b32:	3201      	adds	r2, #1
 8008b34:	701a      	strb	r2, [r3, #0]
 8008b36:	e747      	b.n	80089c8 <_dtoa_r+0x960>
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	dd07      	ble.n	8008b4c <_dtoa_r+0xae4>
 8008b3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b40:	d0ed      	beq.n	8008b1e <_dtoa_r+0xab6>
 8008b42:	9a01      	ldr	r2, [sp, #4]
 8008b44:	f109 0301 	add.w	r3, r9, #1
 8008b48:	7013      	strb	r3, [r2, #0]
 8008b4a:	e73d      	b.n	80089c8 <_dtoa_r+0x960>
 8008b4c:	9b04      	ldr	r3, [sp, #16]
 8008b4e:	9a08      	ldr	r2, [sp, #32]
 8008b50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d043      	beq.n	8008be0 <_dtoa_r+0xb78>
 8008b58:	4651      	mov	r1, sl
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	220a      	movs	r2, #10
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 f9d6 	bl	8008f10 <__multadd>
 8008b64:	45b8      	cmp	r8, r7
 8008b66:	4682      	mov	sl, r0
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	f04f 020a 	mov.w	r2, #10
 8008b70:	4641      	mov	r1, r8
 8008b72:	4620      	mov	r0, r4
 8008b74:	d107      	bne.n	8008b86 <_dtoa_r+0xb1e>
 8008b76:	f000 f9cb 	bl	8008f10 <__multadd>
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	9b04      	ldr	r3, [sp, #16]
 8008b80:	3301      	adds	r3, #1
 8008b82:	9304      	str	r3, [sp, #16]
 8008b84:	e775      	b.n	8008a72 <_dtoa_r+0xa0a>
 8008b86:	f000 f9c3 	bl	8008f10 <__multadd>
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	2300      	movs	r3, #0
 8008b90:	220a      	movs	r2, #10
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 f9bc 	bl	8008f10 <__multadd>
 8008b98:	4607      	mov	r7, r0
 8008b9a:	e7f0      	b.n	8008b7e <_dtoa_r+0xb16>
 8008b9c:	9b04      	ldr	r3, [sp, #16]
 8008b9e:	9301      	str	r3, [sp, #4]
 8008ba0:	9d00      	ldr	r5, [sp, #0]
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4650      	mov	r0, sl
 8008ba6:	f7ff f9d5 	bl	8007f54 <quorem>
 8008baa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008bae:	9b00      	ldr	r3, [sp, #0]
 8008bb0:	f805 9b01 	strb.w	r9, [r5], #1
 8008bb4:	1aea      	subs	r2, r5, r3
 8008bb6:	9b01      	ldr	r3, [sp, #4]
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	dd07      	ble.n	8008bcc <_dtoa_r+0xb64>
 8008bbc:	4651      	mov	r1, sl
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	220a      	movs	r2, #10
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f000 f9a4 	bl	8008f10 <__multadd>
 8008bc8:	4682      	mov	sl, r0
 8008bca:	e7ea      	b.n	8008ba2 <_dtoa_r+0xb3a>
 8008bcc:	9b01      	ldr	r3, [sp, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	bfc8      	it	gt
 8008bd2:	461d      	movgt	r5, r3
 8008bd4:	9b00      	ldr	r3, [sp, #0]
 8008bd6:	bfd8      	it	le
 8008bd8:	2501      	movle	r5, #1
 8008bda:	441d      	add	r5, r3
 8008bdc:	f04f 0800 	mov.w	r8, #0
 8008be0:	4651      	mov	r1, sl
 8008be2:	2201      	movs	r2, #1
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fb41 	bl	800926c <__lshift>
 8008bea:	4631      	mov	r1, r6
 8008bec:	4682      	mov	sl, r0
 8008bee:	f000 fba9 	bl	8009344 <__mcmp>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	dc96      	bgt.n	8008b24 <_dtoa_r+0xabc>
 8008bf6:	d102      	bne.n	8008bfe <_dtoa_r+0xb96>
 8008bf8:	f019 0f01 	tst.w	r9, #1
 8008bfc:	d192      	bne.n	8008b24 <_dtoa_r+0xabc>
 8008bfe:	462b      	mov	r3, r5
 8008c00:	461d      	mov	r5, r3
 8008c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c06:	2a30      	cmp	r2, #48	; 0x30
 8008c08:	d0fa      	beq.n	8008c00 <_dtoa_r+0xb98>
 8008c0a:	e6dd      	b.n	80089c8 <_dtoa_r+0x960>
 8008c0c:	9a00      	ldr	r2, [sp, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d189      	bne.n	8008b26 <_dtoa_r+0xabe>
 8008c12:	f10b 0b01 	add.w	fp, fp, #1
 8008c16:	2331      	movs	r3, #49	; 0x31
 8008c18:	e796      	b.n	8008b48 <_dtoa_r+0xae0>
 8008c1a:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <_dtoa_r+0xbdc>)
 8008c1c:	f7ff ba99 	b.w	8008152 <_dtoa_r+0xea>
 8008c20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f47f aa6d 	bne.w	8008102 <_dtoa_r+0x9a>
 8008c28:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <_dtoa_r+0xbe0>)
 8008c2a:	f7ff ba92 	b.w	8008152 <_dtoa_r+0xea>
 8008c2e:	9b01      	ldr	r3, [sp, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	dcb5      	bgt.n	8008ba0 <_dtoa_r+0xb38>
 8008c34:	9b07      	ldr	r3, [sp, #28]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	f73f aeb1 	bgt.w	800899e <_dtoa_r+0x936>
 8008c3c:	e7b0      	b.n	8008ba0 <_dtoa_r+0xb38>
 8008c3e:	bf00      	nop
 8008c40:	08009de8 	.word	0x08009de8
 8008c44:	08009d48 	.word	0x08009d48
 8008c48:	08009d6c 	.word	0x08009d6c

08008c4c <_free_r>:
 8008c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c4e:	2900      	cmp	r1, #0
 8008c50:	d044      	beq.n	8008cdc <_free_r+0x90>
 8008c52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c56:	9001      	str	r0, [sp, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008c5e:	bfb8      	it	lt
 8008c60:	18e4      	addlt	r4, r4, r3
 8008c62:	f000 f8e7 	bl	8008e34 <__malloc_lock>
 8008c66:	4a1e      	ldr	r2, [pc, #120]	; (8008ce0 <_free_r+0x94>)
 8008c68:	9801      	ldr	r0, [sp, #4]
 8008c6a:	6813      	ldr	r3, [r2, #0]
 8008c6c:	b933      	cbnz	r3, 8008c7c <_free_r+0x30>
 8008c6e:	6063      	str	r3, [r4, #4]
 8008c70:	6014      	str	r4, [r2, #0]
 8008c72:	b003      	add	sp, #12
 8008c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c78:	f000 b8e2 	b.w	8008e40 <__malloc_unlock>
 8008c7c:	42a3      	cmp	r3, r4
 8008c7e:	d908      	bls.n	8008c92 <_free_r+0x46>
 8008c80:	6825      	ldr	r5, [r4, #0]
 8008c82:	1961      	adds	r1, r4, r5
 8008c84:	428b      	cmp	r3, r1
 8008c86:	bf01      	itttt	eq
 8008c88:	6819      	ldreq	r1, [r3, #0]
 8008c8a:	685b      	ldreq	r3, [r3, #4]
 8008c8c:	1949      	addeq	r1, r1, r5
 8008c8e:	6021      	streq	r1, [r4, #0]
 8008c90:	e7ed      	b.n	8008c6e <_free_r+0x22>
 8008c92:	461a      	mov	r2, r3
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	b10b      	cbz	r3, 8008c9c <_free_r+0x50>
 8008c98:	42a3      	cmp	r3, r4
 8008c9a:	d9fa      	bls.n	8008c92 <_free_r+0x46>
 8008c9c:	6811      	ldr	r1, [r2, #0]
 8008c9e:	1855      	adds	r5, r2, r1
 8008ca0:	42a5      	cmp	r5, r4
 8008ca2:	d10b      	bne.n	8008cbc <_free_r+0x70>
 8008ca4:	6824      	ldr	r4, [r4, #0]
 8008ca6:	4421      	add	r1, r4
 8008ca8:	1854      	adds	r4, r2, r1
 8008caa:	42a3      	cmp	r3, r4
 8008cac:	6011      	str	r1, [r2, #0]
 8008cae:	d1e0      	bne.n	8008c72 <_free_r+0x26>
 8008cb0:	681c      	ldr	r4, [r3, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	6053      	str	r3, [r2, #4]
 8008cb6:	440c      	add	r4, r1
 8008cb8:	6014      	str	r4, [r2, #0]
 8008cba:	e7da      	b.n	8008c72 <_free_r+0x26>
 8008cbc:	d902      	bls.n	8008cc4 <_free_r+0x78>
 8008cbe:	230c      	movs	r3, #12
 8008cc0:	6003      	str	r3, [r0, #0]
 8008cc2:	e7d6      	b.n	8008c72 <_free_r+0x26>
 8008cc4:	6825      	ldr	r5, [r4, #0]
 8008cc6:	1961      	adds	r1, r4, r5
 8008cc8:	428b      	cmp	r3, r1
 8008cca:	bf04      	itt	eq
 8008ccc:	6819      	ldreq	r1, [r3, #0]
 8008cce:	685b      	ldreq	r3, [r3, #4]
 8008cd0:	6063      	str	r3, [r4, #4]
 8008cd2:	bf04      	itt	eq
 8008cd4:	1949      	addeq	r1, r1, r5
 8008cd6:	6021      	streq	r1, [r4, #0]
 8008cd8:	6054      	str	r4, [r2, #4]
 8008cda:	e7ca      	b.n	8008c72 <_free_r+0x26>
 8008cdc:	b003      	add	sp, #12
 8008cde:	bd30      	pop	{r4, r5, pc}
 8008ce0:	20000594 	.word	0x20000594

08008ce4 <malloc>:
 8008ce4:	4b02      	ldr	r3, [pc, #8]	; (8008cf0 <malloc+0xc>)
 8008ce6:	4601      	mov	r1, r0
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	f000 b823 	b.w	8008d34 <_malloc_r>
 8008cee:	bf00      	nop
 8008cf0:	20000064 	.word	0x20000064

08008cf4 <sbrk_aligned>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	4e0e      	ldr	r6, [pc, #56]	; (8008d30 <sbrk_aligned+0x3c>)
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	6831      	ldr	r1, [r6, #0]
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	b911      	cbnz	r1, 8008d06 <sbrk_aligned+0x12>
 8008d00:	f000 fea8 	bl	8009a54 <_sbrk_r>
 8008d04:	6030      	str	r0, [r6, #0]
 8008d06:	4621      	mov	r1, r4
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f000 fea3 	bl	8009a54 <_sbrk_r>
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	d00a      	beq.n	8008d28 <sbrk_aligned+0x34>
 8008d12:	1cc4      	adds	r4, r0, #3
 8008d14:	f024 0403 	bic.w	r4, r4, #3
 8008d18:	42a0      	cmp	r0, r4
 8008d1a:	d007      	beq.n	8008d2c <sbrk_aligned+0x38>
 8008d1c:	1a21      	subs	r1, r4, r0
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f000 fe98 	bl	8009a54 <_sbrk_r>
 8008d24:	3001      	adds	r0, #1
 8008d26:	d101      	bne.n	8008d2c <sbrk_aligned+0x38>
 8008d28:	f04f 34ff 	mov.w	r4, #4294967295
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	bd70      	pop	{r4, r5, r6, pc}
 8008d30:	20000598 	.word	0x20000598

08008d34 <_malloc_r>:
 8008d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d38:	1ccd      	adds	r5, r1, #3
 8008d3a:	f025 0503 	bic.w	r5, r5, #3
 8008d3e:	3508      	adds	r5, #8
 8008d40:	2d0c      	cmp	r5, #12
 8008d42:	bf38      	it	cc
 8008d44:	250c      	movcc	r5, #12
 8008d46:	2d00      	cmp	r5, #0
 8008d48:	4607      	mov	r7, r0
 8008d4a:	db01      	blt.n	8008d50 <_malloc_r+0x1c>
 8008d4c:	42a9      	cmp	r1, r5
 8008d4e:	d905      	bls.n	8008d5c <_malloc_r+0x28>
 8008d50:	230c      	movs	r3, #12
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	2600      	movs	r6, #0
 8008d56:	4630      	mov	r0, r6
 8008d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008e30 <_malloc_r+0xfc>
 8008d60:	f000 f868 	bl	8008e34 <__malloc_lock>
 8008d64:	f8d8 3000 	ldr.w	r3, [r8]
 8008d68:	461c      	mov	r4, r3
 8008d6a:	bb5c      	cbnz	r4, 8008dc4 <_malloc_r+0x90>
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4638      	mov	r0, r7
 8008d70:	f7ff ffc0 	bl	8008cf4 <sbrk_aligned>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	4604      	mov	r4, r0
 8008d78:	d155      	bne.n	8008e26 <_malloc_r+0xf2>
 8008d7a:	f8d8 4000 	ldr.w	r4, [r8]
 8008d7e:	4626      	mov	r6, r4
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	d145      	bne.n	8008e10 <_malloc_r+0xdc>
 8008d84:	2c00      	cmp	r4, #0
 8008d86:	d048      	beq.n	8008e1a <_malloc_r+0xe6>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	eb04 0903 	add.w	r9, r4, r3
 8008d92:	f000 fe5f 	bl	8009a54 <_sbrk_r>
 8008d96:	4581      	cmp	r9, r0
 8008d98:	d13f      	bne.n	8008e1a <_malloc_r+0xe6>
 8008d9a:	6821      	ldr	r1, [r4, #0]
 8008d9c:	1a6d      	subs	r5, r5, r1
 8008d9e:	4629      	mov	r1, r5
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ffa7 	bl	8008cf4 <sbrk_aligned>
 8008da6:	3001      	adds	r0, #1
 8008da8:	d037      	beq.n	8008e1a <_malloc_r+0xe6>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	442b      	add	r3, r5
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	f8d8 3000 	ldr.w	r3, [r8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d038      	beq.n	8008e2a <_malloc_r+0xf6>
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	42a2      	cmp	r2, r4
 8008dbc:	d12b      	bne.n	8008e16 <_malloc_r+0xe2>
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	605a      	str	r2, [r3, #4]
 8008dc2:	e00f      	b.n	8008de4 <_malloc_r+0xb0>
 8008dc4:	6822      	ldr	r2, [r4, #0]
 8008dc6:	1b52      	subs	r2, r2, r5
 8008dc8:	d41f      	bmi.n	8008e0a <_malloc_r+0xd6>
 8008dca:	2a0b      	cmp	r2, #11
 8008dcc:	d917      	bls.n	8008dfe <_malloc_r+0xca>
 8008dce:	1961      	adds	r1, r4, r5
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	6025      	str	r5, [r4, #0]
 8008dd4:	bf18      	it	ne
 8008dd6:	6059      	strne	r1, [r3, #4]
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	bf08      	it	eq
 8008ddc:	f8c8 1000 	streq.w	r1, [r8]
 8008de0:	5162      	str	r2, [r4, r5]
 8008de2:	604b      	str	r3, [r1, #4]
 8008de4:	4638      	mov	r0, r7
 8008de6:	f104 060b 	add.w	r6, r4, #11
 8008dea:	f000 f829 	bl	8008e40 <__malloc_unlock>
 8008dee:	f026 0607 	bic.w	r6, r6, #7
 8008df2:	1d23      	adds	r3, r4, #4
 8008df4:	1af2      	subs	r2, r6, r3
 8008df6:	d0ae      	beq.n	8008d56 <_malloc_r+0x22>
 8008df8:	1b9b      	subs	r3, r3, r6
 8008dfa:	50a3      	str	r3, [r4, r2]
 8008dfc:	e7ab      	b.n	8008d56 <_malloc_r+0x22>
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	6862      	ldr	r2, [r4, #4]
 8008e02:	d1dd      	bne.n	8008dc0 <_malloc_r+0x8c>
 8008e04:	f8c8 2000 	str.w	r2, [r8]
 8008e08:	e7ec      	b.n	8008de4 <_malloc_r+0xb0>
 8008e0a:	4623      	mov	r3, r4
 8008e0c:	6864      	ldr	r4, [r4, #4]
 8008e0e:	e7ac      	b.n	8008d6a <_malloc_r+0x36>
 8008e10:	4634      	mov	r4, r6
 8008e12:	6876      	ldr	r6, [r6, #4]
 8008e14:	e7b4      	b.n	8008d80 <_malloc_r+0x4c>
 8008e16:	4613      	mov	r3, r2
 8008e18:	e7cc      	b.n	8008db4 <_malloc_r+0x80>
 8008e1a:	230c      	movs	r3, #12
 8008e1c:	603b      	str	r3, [r7, #0]
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f000 f80e 	bl	8008e40 <__malloc_unlock>
 8008e24:	e797      	b.n	8008d56 <_malloc_r+0x22>
 8008e26:	6025      	str	r5, [r4, #0]
 8008e28:	e7dc      	b.n	8008de4 <_malloc_r+0xb0>
 8008e2a:	605b      	str	r3, [r3, #4]
 8008e2c:	deff      	udf	#255	; 0xff
 8008e2e:	bf00      	nop
 8008e30:	20000594 	.word	0x20000594

08008e34 <__malloc_lock>:
 8008e34:	4801      	ldr	r0, [pc, #4]	; (8008e3c <__malloc_lock+0x8>)
 8008e36:	f7ff b87d 	b.w	8007f34 <__retarget_lock_acquire_recursive>
 8008e3a:	bf00      	nop
 8008e3c:	20000590 	.word	0x20000590

08008e40 <__malloc_unlock>:
 8008e40:	4801      	ldr	r0, [pc, #4]	; (8008e48 <__malloc_unlock+0x8>)
 8008e42:	f7ff b878 	b.w	8007f36 <__retarget_lock_release_recursive>
 8008e46:	bf00      	nop
 8008e48:	20000590 	.word	0x20000590

08008e4c <_Balloc>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	69c6      	ldr	r6, [r0, #28]
 8008e50:	4604      	mov	r4, r0
 8008e52:	460d      	mov	r5, r1
 8008e54:	b976      	cbnz	r6, 8008e74 <_Balloc+0x28>
 8008e56:	2010      	movs	r0, #16
 8008e58:	f7ff ff44 	bl	8008ce4 <malloc>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	61e0      	str	r0, [r4, #28]
 8008e60:	b920      	cbnz	r0, 8008e6c <_Balloc+0x20>
 8008e62:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <_Balloc+0x78>)
 8008e64:	4818      	ldr	r0, [pc, #96]	; (8008ec8 <_Balloc+0x7c>)
 8008e66:	216b      	movs	r1, #107	; 0x6b
 8008e68:	f000 fe04 	bl	8009a74 <__assert_func>
 8008e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e70:	6006      	str	r6, [r0, #0]
 8008e72:	60c6      	str	r6, [r0, #12]
 8008e74:	69e6      	ldr	r6, [r4, #28]
 8008e76:	68f3      	ldr	r3, [r6, #12]
 8008e78:	b183      	cbz	r3, 8008e9c <_Balloc+0x50>
 8008e7a:	69e3      	ldr	r3, [r4, #28]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e82:	b9b8      	cbnz	r0, 8008eb4 <_Balloc+0x68>
 8008e84:	2101      	movs	r1, #1
 8008e86:	fa01 f605 	lsl.w	r6, r1, r5
 8008e8a:	1d72      	adds	r2, r6, #5
 8008e8c:	0092      	lsls	r2, r2, #2
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 fe0e 	bl	8009ab0 <_calloc_r>
 8008e94:	b160      	cbz	r0, 8008eb0 <_Balloc+0x64>
 8008e96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e9a:	e00e      	b.n	8008eba <_Balloc+0x6e>
 8008e9c:	2221      	movs	r2, #33	; 0x21
 8008e9e:	2104      	movs	r1, #4
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fe05 	bl	8009ab0 <_calloc_r>
 8008ea6:	69e3      	ldr	r3, [r4, #28]
 8008ea8:	60f0      	str	r0, [r6, #12]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e4      	bne.n	8008e7a <_Balloc+0x2e>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	6802      	ldr	r2, [r0, #0]
 8008eb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ec0:	e7f7      	b.n	8008eb2 <_Balloc+0x66>
 8008ec2:	bf00      	nop
 8008ec4:	08009d79 	.word	0x08009d79
 8008ec8:	08009df9 	.word	0x08009df9

08008ecc <_Bfree>:
 8008ecc:	b570      	push	{r4, r5, r6, lr}
 8008ece:	69c6      	ldr	r6, [r0, #28]
 8008ed0:	4605      	mov	r5, r0
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	b976      	cbnz	r6, 8008ef4 <_Bfree+0x28>
 8008ed6:	2010      	movs	r0, #16
 8008ed8:	f7ff ff04 	bl	8008ce4 <malloc>
 8008edc:	4602      	mov	r2, r0
 8008ede:	61e8      	str	r0, [r5, #28]
 8008ee0:	b920      	cbnz	r0, 8008eec <_Bfree+0x20>
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <_Bfree+0x3c>)
 8008ee4:	4809      	ldr	r0, [pc, #36]	; (8008f0c <_Bfree+0x40>)
 8008ee6:	218f      	movs	r1, #143	; 0x8f
 8008ee8:	f000 fdc4 	bl	8009a74 <__assert_func>
 8008eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ef0:	6006      	str	r6, [r0, #0]
 8008ef2:	60c6      	str	r6, [r0, #12]
 8008ef4:	b13c      	cbz	r4, 8008f06 <_Bfree+0x3a>
 8008ef6:	69eb      	ldr	r3, [r5, #28]
 8008ef8:	6862      	ldr	r2, [r4, #4]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f00:	6021      	str	r1, [r4, #0]
 8008f02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	08009d79 	.word	0x08009d79
 8008f0c:	08009df9 	.word	0x08009df9

08008f10 <__multadd>:
 8008f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f14:	690d      	ldr	r5, [r1, #16]
 8008f16:	4607      	mov	r7, r0
 8008f18:	460c      	mov	r4, r1
 8008f1a:	461e      	mov	r6, r3
 8008f1c:	f101 0c14 	add.w	ip, r1, #20
 8008f20:	2000      	movs	r0, #0
 8008f22:	f8dc 3000 	ldr.w	r3, [ip]
 8008f26:	b299      	uxth	r1, r3
 8008f28:	fb02 6101 	mla	r1, r2, r1, r6
 8008f2c:	0c1e      	lsrs	r6, r3, #16
 8008f2e:	0c0b      	lsrs	r3, r1, #16
 8008f30:	fb02 3306 	mla	r3, r2, r6, r3
 8008f34:	b289      	uxth	r1, r1
 8008f36:	3001      	adds	r0, #1
 8008f38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f3c:	4285      	cmp	r5, r0
 8008f3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f46:	dcec      	bgt.n	8008f22 <__multadd+0x12>
 8008f48:	b30e      	cbz	r6, 8008f8e <__multadd+0x7e>
 8008f4a:	68a3      	ldr	r3, [r4, #8]
 8008f4c:	42ab      	cmp	r3, r5
 8008f4e:	dc19      	bgt.n	8008f84 <__multadd+0x74>
 8008f50:	6861      	ldr	r1, [r4, #4]
 8008f52:	4638      	mov	r0, r7
 8008f54:	3101      	adds	r1, #1
 8008f56:	f7ff ff79 	bl	8008e4c <_Balloc>
 8008f5a:	4680      	mov	r8, r0
 8008f5c:	b928      	cbnz	r0, 8008f6a <__multadd+0x5a>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	4b0c      	ldr	r3, [pc, #48]	; (8008f94 <__multadd+0x84>)
 8008f62:	480d      	ldr	r0, [pc, #52]	; (8008f98 <__multadd+0x88>)
 8008f64:	21ba      	movs	r1, #186	; 0xba
 8008f66:	f000 fd85 	bl	8009a74 <__assert_func>
 8008f6a:	6922      	ldr	r2, [r4, #16]
 8008f6c:	3202      	adds	r2, #2
 8008f6e:	f104 010c 	add.w	r1, r4, #12
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	300c      	adds	r0, #12
 8008f76:	f7fe ffdf 	bl	8007f38 <memcpy>
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7ff ffa5 	bl	8008ecc <_Bfree>
 8008f82:	4644      	mov	r4, r8
 8008f84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f88:	3501      	adds	r5, #1
 8008f8a:	615e      	str	r6, [r3, #20]
 8008f8c:	6125      	str	r5, [r4, #16]
 8008f8e:	4620      	mov	r0, r4
 8008f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f94:	08009de8 	.word	0x08009de8
 8008f98:	08009df9 	.word	0x08009df9

08008f9c <__hi0bits>:
 8008f9c:	0c03      	lsrs	r3, r0, #16
 8008f9e:	041b      	lsls	r3, r3, #16
 8008fa0:	b9d3      	cbnz	r3, 8008fd8 <__hi0bits+0x3c>
 8008fa2:	0400      	lsls	r0, r0, #16
 8008fa4:	2310      	movs	r3, #16
 8008fa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008faa:	bf04      	itt	eq
 8008fac:	0200      	lsleq	r0, r0, #8
 8008fae:	3308      	addeq	r3, #8
 8008fb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008fb4:	bf04      	itt	eq
 8008fb6:	0100      	lsleq	r0, r0, #4
 8008fb8:	3304      	addeq	r3, #4
 8008fba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008fbe:	bf04      	itt	eq
 8008fc0:	0080      	lsleq	r0, r0, #2
 8008fc2:	3302      	addeq	r3, #2
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	db05      	blt.n	8008fd4 <__hi0bits+0x38>
 8008fc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008fcc:	f103 0301 	add.w	r3, r3, #1
 8008fd0:	bf08      	it	eq
 8008fd2:	2320      	moveq	r3, #32
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	4770      	bx	lr
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e7e4      	b.n	8008fa6 <__hi0bits+0xa>

08008fdc <__lo0bits>:
 8008fdc:	6803      	ldr	r3, [r0, #0]
 8008fde:	f013 0207 	ands.w	r2, r3, #7
 8008fe2:	d00c      	beq.n	8008ffe <__lo0bits+0x22>
 8008fe4:	07d9      	lsls	r1, r3, #31
 8008fe6:	d422      	bmi.n	800902e <__lo0bits+0x52>
 8008fe8:	079a      	lsls	r2, r3, #30
 8008fea:	bf49      	itett	mi
 8008fec:	085b      	lsrmi	r3, r3, #1
 8008fee:	089b      	lsrpl	r3, r3, #2
 8008ff0:	6003      	strmi	r3, [r0, #0]
 8008ff2:	2201      	movmi	r2, #1
 8008ff4:	bf5c      	itt	pl
 8008ff6:	6003      	strpl	r3, [r0, #0]
 8008ff8:	2202      	movpl	r2, #2
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	4770      	bx	lr
 8008ffe:	b299      	uxth	r1, r3
 8009000:	b909      	cbnz	r1, 8009006 <__lo0bits+0x2a>
 8009002:	0c1b      	lsrs	r3, r3, #16
 8009004:	2210      	movs	r2, #16
 8009006:	b2d9      	uxtb	r1, r3
 8009008:	b909      	cbnz	r1, 800900e <__lo0bits+0x32>
 800900a:	3208      	adds	r2, #8
 800900c:	0a1b      	lsrs	r3, r3, #8
 800900e:	0719      	lsls	r1, r3, #28
 8009010:	bf04      	itt	eq
 8009012:	091b      	lsreq	r3, r3, #4
 8009014:	3204      	addeq	r2, #4
 8009016:	0799      	lsls	r1, r3, #30
 8009018:	bf04      	itt	eq
 800901a:	089b      	lsreq	r3, r3, #2
 800901c:	3202      	addeq	r2, #2
 800901e:	07d9      	lsls	r1, r3, #31
 8009020:	d403      	bmi.n	800902a <__lo0bits+0x4e>
 8009022:	085b      	lsrs	r3, r3, #1
 8009024:	f102 0201 	add.w	r2, r2, #1
 8009028:	d003      	beq.n	8009032 <__lo0bits+0x56>
 800902a:	6003      	str	r3, [r0, #0]
 800902c:	e7e5      	b.n	8008ffa <__lo0bits+0x1e>
 800902e:	2200      	movs	r2, #0
 8009030:	e7e3      	b.n	8008ffa <__lo0bits+0x1e>
 8009032:	2220      	movs	r2, #32
 8009034:	e7e1      	b.n	8008ffa <__lo0bits+0x1e>
	...

08009038 <__i2b>:
 8009038:	b510      	push	{r4, lr}
 800903a:	460c      	mov	r4, r1
 800903c:	2101      	movs	r1, #1
 800903e:	f7ff ff05 	bl	8008e4c <_Balloc>
 8009042:	4602      	mov	r2, r0
 8009044:	b928      	cbnz	r0, 8009052 <__i2b+0x1a>
 8009046:	4b05      	ldr	r3, [pc, #20]	; (800905c <__i2b+0x24>)
 8009048:	4805      	ldr	r0, [pc, #20]	; (8009060 <__i2b+0x28>)
 800904a:	f240 1145 	movw	r1, #325	; 0x145
 800904e:	f000 fd11 	bl	8009a74 <__assert_func>
 8009052:	2301      	movs	r3, #1
 8009054:	6144      	str	r4, [r0, #20]
 8009056:	6103      	str	r3, [r0, #16]
 8009058:	bd10      	pop	{r4, pc}
 800905a:	bf00      	nop
 800905c:	08009de8 	.word	0x08009de8
 8009060:	08009df9 	.word	0x08009df9

08009064 <__multiply>:
 8009064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	4691      	mov	r9, r2
 800906a:	690a      	ldr	r2, [r1, #16]
 800906c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009070:	429a      	cmp	r2, r3
 8009072:	bfb8      	it	lt
 8009074:	460b      	movlt	r3, r1
 8009076:	460c      	mov	r4, r1
 8009078:	bfbc      	itt	lt
 800907a:	464c      	movlt	r4, r9
 800907c:	4699      	movlt	r9, r3
 800907e:	6927      	ldr	r7, [r4, #16]
 8009080:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009084:	68a3      	ldr	r3, [r4, #8]
 8009086:	6861      	ldr	r1, [r4, #4]
 8009088:	eb07 060a 	add.w	r6, r7, sl
 800908c:	42b3      	cmp	r3, r6
 800908e:	b085      	sub	sp, #20
 8009090:	bfb8      	it	lt
 8009092:	3101      	addlt	r1, #1
 8009094:	f7ff feda 	bl	8008e4c <_Balloc>
 8009098:	b930      	cbnz	r0, 80090a8 <__multiply+0x44>
 800909a:	4602      	mov	r2, r0
 800909c:	4b44      	ldr	r3, [pc, #272]	; (80091b0 <__multiply+0x14c>)
 800909e:	4845      	ldr	r0, [pc, #276]	; (80091b4 <__multiply+0x150>)
 80090a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80090a4:	f000 fce6 	bl	8009a74 <__assert_func>
 80090a8:	f100 0514 	add.w	r5, r0, #20
 80090ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090b0:	462b      	mov	r3, r5
 80090b2:	2200      	movs	r2, #0
 80090b4:	4543      	cmp	r3, r8
 80090b6:	d321      	bcc.n	80090fc <__multiply+0x98>
 80090b8:	f104 0314 	add.w	r3, r4, #20
 80090bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090c0:	f109 0314 	add.w	r3, r9, #20
 80090c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090c8:	9202      	str	r2, [sp, #8]
 80090ca:	1b3a      	subs	r2, r7, r4
 80090cc:	3a15      	subs	r2, #21
 80090ce:	f022 0203 	bic.w	r2, r2, #3
 80090d2:	3204      	adds	r2, #4
 80090d4:	f104 0115 	add.w	r1, r4, #21
 80090d8:	428f      	cmp	r7, r1
 80090da:	bf38      	it	cc
 80090dc:	2204      	movcc	r2, #4
 80090de:	9201      	str	r2, [sp, #4]
 80090e0:	9a02      	ldr	r2, [sp, #8]
 80090e2:	9303      	str	r3, [sp, #12]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d80c      	bhi.n	8009102 <__multiply+0x9e>
 80090e8:	2e00      	cmp	r6, #0
 80090ea:	dd03      	ble.n	80090f4 <__multiply+0x90>
 80090ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d05b      	beq.n	80091ac <__multiply+0x148>
 80090f4:	6106      	str	r6, [r0, #16]
 80090f6:	b005      	add	sp, #20
 80090f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fc:	f843 2b04 	str.w	r2, [r3], #4
 8009100:	e7d8      	b.n	80090b4 <__multiply+0x50>
 8009102:	f8b3 a000 	ldrh.w	sl, [r3]
 8009106:	f1ba 0f00 	cmp.w	sl, #0
 800910a:	d024      	beq.n	8009156 <__multiply+0xf2>
 800910c:	f104 0e14 	add.w	lr, r4, #20
 8009110:	46a9      	mov	r9, r5
 8009112:	f04f 0c00 	mov.w	ip, #0
 8009116:	f85e 2b04 	ldr.w	r2, [lr], #4
 800911a:	f8d9 1000 	ldr.w	r1, [r9]
 800911e:	fa1f fb82 	uxth.w	fp, r2
 8009122:	b289      	uxth	r1, r1
 8009124:	fb0a 110b 	mla	r1, sl, fp, r1
 8009128:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800912c:	f8d9 2000 	ldr.w	r2, [r9]
 8009130:	4461      	add	r1, ip
 8009132:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009136:	fb0a c20b 	mla	r2, sl, fp, ip
 800913a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800913e:	b289      	uxth	r1, r1
 8009140:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009144:	4577      	cmp	r7, lr
 8009146:	f849 1b04 	str.w	r1, [r9], #4
 800914a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800914e:	d8e2      	bhi.n	8009116 <__multiply+0xb2>
 8009150:	9a01      	ldr	r2, [sp, #4]
 8009152:	f845 c002 	str.w	ip, [r5, r2]
 8009156:	9a03      	ldr	r2, [sp, #12]
 8009158:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800915c:	3304      	adds	r3, #4
 800915e:	f1b9 0f00 	cmp.w	r9, #0
 8009162:	d021      	beq.n	80091a8 <__multiply+0x144>
 8009164:	6829      	ldr	r1, [r5, #0]
 8009166:	f104 0c14 	add.w	ip, r4, #20
 800916a:	46ae      	mov	lr, r5
 800916c:	f04f 0a00 	mov.w	sl, #0
 8009170:	f8bc b000 	ldrh.w	fp, [ip]
 8009174:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009178:	fb09 220b 	mla	r2, r9, fp, r2
 800917c:	4452      	add	r2, sl
 800917e:	b289      	uxth	r1, r1
 8009180:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009184:	f84e 1b04 	str.w	r1, [lr], #4
 8009188:	f85c 1b04 	ldr.w	r1, [ip], #4
 800918c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009190:	f8be 1000 	ldrh.w	r1, [lr]
 8009194:	fb09 110a 	mla	r1, r9, sl, r1
 8009198:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800919c:	4567      	cmp	r7, ip
 800919e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091a2:	d8e5      	bhi.n	8009170 <__multiply+0x10c>
 80091a4:	9a01      	ldr	r2, [sp, #4]
 80091a6:	50a9      	str	r1, [r5, r2]
 80091a8:	3504      	adds	r5, #4
 80091aa:	e799      	b.n	80090e0 <__multiply+0x7c>
 80091ac:	3e01      	subs	r6, #1
 80091ae:	e79b      	b.n	80090e8 <__multiply+0x84>
 80091b0:	08009de8 	.word	0x08009de8
 80091b4:	08009df9 	.word	0x08009df9

080091b8 <__pow5mult>:
 80091b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091bc:	4615      	mov	r5, r2
 80091be:	f012 0203 	ands.w	r2, r2, #3
 80091c2:	4606      	mov	r6, r0
 80091c4:	460f      	mov	r7, r1
 80091c6:	d007      	beq.n	80091d8 <__pow5mult+0x20>
 80091c8:	4c25      	ldr	r4, [pc, #148]	; (8009260 <__pow5mult+0xa8>)
 80091ca:	3a01      	subs	r2, #1
 80091cc:	2300      	movs	r3, #0
 80091ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091d2:	f7ff fe9d 	bl	8008f10 <__multadd>
 80091d6:	4607      	mov	r7, r0
 80091d8:	10ad      	asrs	r5, r5, #2
 80091da:	d03d      	beq.n	8009258 <__pow5mult+0xa0>
 80091dc:	69f4      	ldr	r4, [r6, #28]
 80091de:	b97c      	cbnz	r4, 8009200 <__pow5mult+0x48>
 80091e0:	2010      	movs	r0, #16
 80091e2:	f7ff fd7f 	bl	8008ce4 <malloc>
 80091e6:	4602      	mov	r2, r0
 80091e8:	61f0      	str	r0, [r6, #28]
 80091ea:	b928      	cbnz	r0, 80091f8 <__pow5mult+0x40>
 80091ec:	4b1d      	ldr	r3, [pc, #116]	; (8009264 <__pow5mult+0xac>)
 80091ee:	481e      	ldr	r0, [pc, #120]	; (8009268 <__pow5mult+0xb0>)
 80091f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80091f4:	f000 fc3e 	bl	8009a74 <__assert_func>
 80091f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091fc:	6004      	str	r4, [r0, #0]
 80091fe:	60c4      	str	r4, [r0, #12]
 8009200:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009204:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009208:	b94c      	cbnz	r4, 800921e <__pow5mult+0x66>
 800920a:	f240 2171 	movw	r1, #625	; 0x271
 800920e:	4630      	mov	r0, r6
 8009210:	f7ff ff12 	bl	8009038 <__i2b>
 8009214:	2300      	movs	r3, #0
 8009216:	f8c8 0008 	str.w	r0, [r8, #8]
 800921a:	4604      	mov	r4, r0
 800921c:	6003      	str	r3, [r0, #0]
 800921e:	f04f 0900 	mov.w	r9, #0
 8009222:	07eb      	lsls	r3, r5, #31
 8009224:	d50a      	bpl.n	800923c <__pow5mult+0x84>
 8009226:	4639      	mov	r1, r7
 8009228:	4622      	mov	r2, r4
 800922a:	4630      	mov	r0, r6
 800922c:	f7ff ff1a 	bl	8009064 <__multiply>
 8009230:	4639      	mov	r1, r7
 8009232:	4680      	mov	r8, r0
 8009234:	4630      	mov	r0, r6
 8009236:	f7ff fe49 	bl	8008ecc <_Bfree>
 800923a:	4647      	mov	r7, r8
 800923c:	106d      	asrs	r5, r5, #1
 800923e:	d00b      	beq.n	8009258 <__pow5mult+0xa0>
 8009240:	6820      	ldr	r0, [r4, #0]
 8009242:	b938      	cbnz	r0, 8009254 <__pow5mult+0x9c>
 8009244:	4622      	mov	r2, r4
 8009246:	4621      	mov	r1, r4
 8009248:	4630      	mov	r0, r6
 800924a:	f7ff ff0b 	bl	8009064 <__multiply>
 800924e:	6020      	str	r0, [r4, #0]
 8009250:	f8c0 9000 	str.w	r9, [r0]
 8009254:	4604      	mov	r4, r0
 8009256:	e7e4      	b.n	8009222 <__pow5mult+0x6a>
 8009258:	4638      	mov	r0, r7
 800925a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800925e:	bf00      	nop
 8009260:	08009f48 	.word	0x08009f48
 8009264:	08009d79 	.word	0x08009d79
 8009268:	08009df9 	.word	0x08009df9

0800926c <__lshift>:
 800926c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009270:	460c      	mov	r4, r1
 8009272:	6849      	ldr	r1, [r1, #4]
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800927a:	68a3      	ldr	r3, [r4, #8]
 800927c:	4607      	mov	r7, r0
 800927e:	4691      	mov	r9, r2
 8009280:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009284:	f108 0601 	add.w	r6, r8, #1
 8009288:	42b3      	cmp	r3, r6
 800928a:	db0b      	blt.n	80092a4 <__lshift+0x38>
 800928c:	4638      	mov	r0, r7
 800928e:	f7ff fddd 	bl	8008e4c <_Balloc>
 8009292:	4605      	mov	r5, r0
 8009294:	b948      	cbnz	r0, 80092aa <__lshift+0x3e>
 8009296:	4602      	mov	r2, r0
 8009298:	4b28      	ldr	r3, [pc, #160]	; (800933c <__lshift+0xd0>)
 800929a:	4829      	ldr	r0, [pc, #164]	; (8009340 <__lshift+0xd4>)
 800929c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80092a0:	f000 fbe8 	bl	8009a74 <__assert_func>
 80092a4:	3101      	adds	r1, #1
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	e7ee      	b.n	8009288 <__lshift+0x1c>
 80092aa:	2300      	movs	r3, #0
 80092ac:	f100 0114 	add.w	r1, r0, #20
 80092b0:	f100 0210 	add.w	r2, r0, #16
 80092b4:	4618      	mov	r0, r3
 80092b6:	4553      	cmp	r3, sl
 80092b8:	db33      	blt.n	8009322 <__lshift+0xb6>
 80092ba:	6920      	ldr	r0, [r4, #16]
 80092bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092c0:	f104 0314 	add.w	r3, r4, #20
 80092c4:	f019 091f 	ands.w	r9, r9, #31
 80092c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092d0:	d02b      	beq.n	800932a <__lshift+0xbe>
 80092d2:	f1c9 0e20 	rsb	lr, r9, #32
 80092d6:	468a      	mov	sl, r1
 80092d8:	2200      	movs	r2, #0
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	fa00 f009 	lsl.w	r0, r0, r9
 80092e0:	4310      	orrs	r0, r2
 80092e2:	f84a 0b04 	str.w	r0, [sl], #4
 80092e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ea:	459c      	cmp	ip, r3
 80092ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80092f0:	d8f3      	bhi.n	80092da <__lshift+0x6e>
 80092f2:	ebac 0304 	sub.w	r3, ip, r4
 80092f6:	3b15      	subs	r3, #21
 80092f8:	f023 0303 	bic.w	r3, r3, #3
 80092fc:	3304      	adds	r3, #4
 80092fe:	f104 0015 	add.w	r0, r4, #21
 8009302:	4584      	cmp	ip, r0
 8009304:	bf38      	it	cc
 8009306:	2304      	movcc	r3, #4
 8009308:	50ca      	str	r2, [r1, r3]
 800930a:	b10a      	cbz	r2, 8009310 <__lshift+0xa4>
 800930c:	f108 0602 	add.w	r6, r8, #2
 8009310:	3e01      	subs	r6, #1
 8009312:	4638      	mov	r0, r7
 8009314:	612e      	str	r6, [r5, #16]
 8009316:	4621      	mov	r1, r4
 8009318:	f7ff fdd8 	bl	8008ecc <_Bfree>
 800931c:	4628      	mov	r0, r5
 800931e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009322:	f842 0f04 	str.w	r0, [r2, #4]!
 8009326:	3301      	adds	r3, #1
 8009328:	e7c5      	b.n	80092b6 <__lshift+0x4a>
 800932a:	3904      	subs	r1, #4
 800932c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009330:	f841 2f04 	str.w	r2, [r1, #4]!
 8009334:	459c      	cmp	ip, r3
 8009336:	d8f9      	bhi.n	800932c <__lshift+0xc0>
 8009338:	e7ea      	b.n	8009310 <__lshift+0xa4>
 800933a:	bf00      	nop
 800933c:	08009de8 	.word	0x08009de8
 8009340:	08009df9 	.word	0x08009df9

08009344 <__mcmp>:
 8009344:	b530      	push	{r4, r5, lr}
 8009346:	6902      	ldr	r2, [r0, #16]
 8009348:	690c      	ldr	r4, [r1, #16]
 800934a:	1b12      	subs	r2, r2, r4
 800934c:	d10e      	bne.n	800936c <__mcmp+0x28>
 800934e:	f100 0314 	add.w	r3, r0, #20
 8009352:	3114      	adds	r1, #20
 8009354:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009358:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800935c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009360:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009364:	42a5      	cmp	r5, r4
 8009366:	d003      	beq.n	8009370 <__mcmp+0x2c>
 8009368:	d305      	bcc.n	8009376 <__mcmp+0x32>
 800936a:	2201      	movs	r2, #1
 800936c:	4610      	mov	r0, r2
 800936e:	bd30      	pop	{r4, r5, pc}
 8009370:	4283      	cmp	r3, r0
 8009372:	d3f3      	bcc.n	800935c <__mcmp+0x18>
 8009374:	e7fa      	b.n	800936c <__mcmp+0x28>
 8009376:	f04f 32ff 	mov.w	r2, #4294967295
 800937a:	e7f7      	b.n	800936c <__mcmp+0x28>

0800937c <__mdiff>:
 800937c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	460c      	mov	r4, r1
 8009382:	4606      	mov	r6, r0
 8009384:	4611      	mov	r1, r2
 8009386:	4620      	mov	r0, r4
 8009388:	4690      	mov	r8, r2
 800938a:	f7ff ffdb 	bl	8009344 <__mcmp>
 800938e:	1e05      	subs	r5, r0, #0
 8009390:	d110      	bne.n	80093b4 <__mdiff+0x38>
 8009392:	4629      	mov	r1, r5
 8009394:	4630      	mov	r0, r6
 8009396:	f7ff fd59 	bl	8008e4c <_Balloc>
 800939a:	b930      	cbnz	r0, 80093aa <__mdiff+0x2e>
 800939c:	4b3a      	ldr	r3, [pc, #232]	; (8009488 <__mdiff+0x10c>)
 800939e:	4602      	mov	r2, r0
 80093a0:	f240 2137 	movw	r1, #567	; 0x237
 80093a4:	4839      	ldr	r0, [pc, #228]	; (800948c <__mdiff+0x110>)
 80093a6:	f000 fb65 	bl	8009a74 <__assert_func>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b4:	bfa4      	itt	ge
 80093b6:	4643      	movge	r3, r8
 80093b8:	46a0      	movge	r8, r4
 80093ba:	4630      	mov	r0, r6
 80093bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80093c0:	bfa6      	itte	ge
 80093c2:	461c      	movge	r4, r3
 80093c4:	2500      	movge	r5, #0
 80093c6:	2501      	movlt	r5, #1
 80093c8:	f7ff fd40 	bl	8008e4c <_Balloc>
 80093cc:	b920      	cbnz	r0, 80093d8 <__mdiff+0x5c>
 80093ce:	4b2e      	ldr	r3, [pc, #184]	; (8009488 <__mdiff+0x10c>)
 80093d0:	4602      	mov	r2, r0
 80093d2:	f240 2145 	movw	r1, #581	; 0x245
 80093d6:	e7e5      	b.n	80093a4 <__mdiff+0x28>
 80093d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80093dc:	6926      	ldr	r6, [r4, #16]
 80093de:	60c5      	str	r5, [r0, #12]
 80093e0:	f104 0914 	add.w	r9, r4, #20
 80093e4:	f108 0514 	add.w	r5, r8, #20
 80093e8:	f100 0e14 	add.w	lr, r0, #20
 80093ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80093f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80093f4:	f108 0210 	add.w	r2, r8, #16
 80093f8:	46f2      	mov	sl, lr
 80093fa:	2100      	movs	r1, #0
 80093fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009400:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009404:	fa11 f88b 	uxtah	r8, r1, fp
 8009408:	b299      	uxth	r1, r3
 800940a:	0c1b      	lsrs	r3, r3, #16
 800940c:	eba8 0801 	sub.w	r8, r8, r1
 8009410:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009414:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009418:	fa1f f888 	uxth.w	r8, r8
 800941c:	1419      	asrs	r1, r3, #16
 800941e:	454e      	cmp	r6, r9
 8009420:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009424:	f84a 3b04 	str.w	r3, [sl], #4
 8009428:	d8e8      	bhi.n	80093fc <__mdiff+0x80>
 800942a:	1b33      	subs	r3, r6, r4
 800942c:	3b15      	subs	r3, #21
 800942e:	f023 0303 	bic.w	r3, r3, #3
 8009432:	3304      	adds	r3, #4
 8009434:	3415      	adds	r4, #21
 8009436:	42a6      	cmp	r6, r4
 8009438:	bf38      	it	cc
 800943a:	2304      	movcc	r3, #4
 800943c:	441d      	add	r5, r3
 800943e:	4473      	add	r3, lr
 8009440:	469e      	mov	lr, r3
 8009442:	462e      	mov	r6, r5
 8009444:	4566      	cmp	r6, ip
 8009446:	d30e      	bcc.n	8009466 <__mdiff+0xea>
 8009448:	f10c 0203 	add.w	r2, ip, #3
 800944c:	1b52      	subs	r2, r2, r5
 800944e:	f022 0203 	bic.w	r2, r2, #3
 8009452:	3d03      	subs	r5, #3
 8009454:	45ac      	cmp	ip, r5
 8009456:	bf38      	it	cc
 8009458:	2200      	movcc	r2, #0
 800945a:	4413      	add	r3, r2
 800945c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009460:	b17a      	cbz	r2, 8009482 <__mdiff+0x106>
 8009462:	6107      	str	r7, [r0, #16]
 8009464:	e7a4      	b.n	80093b0 <__mdiff+0x34>
 8009466:	f856 8b04 	ldr.w	r8, [r6], #4
 800946a:	fa11 f288 	uxtah	r2, r1, r8
 800946e:	1414      	asrs	r4, r2, #16
 8009470:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009474:	b292      	uxth	r2, r2
 8009476:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800947a:	f84e 2b04 	str.w	r2, [lr], #4
 800947e:	1421      	asrs	r1, r4, #16
 8009480:	e7e0      	b.n	8009444 <__mdiff+0xc8>
 8009482:	3f01      	subs	r7, #1
 8009484:	e7ea      	b.n	800945c <__mdiff+0xe0>
 8009486:	bf00      	nop
 8009488:	08009de8 	.word	0x08009de8
 800948c:	08009df9 	.word	0x08009df9

08009490 <__d2b>:
 8009490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009494:	460f      	mov	r7, r1
 8009496:	2101      	movs	r1, #1
 8009498:	ec59 8b10 	vmov	r8, r9, d0
 800949c:	4616      	mov	r6, r2
 800949e:	f7ff fcd5 	bl	8008e4c <_Balloc>
 80094a2:	4604      	mov	r4, r0
 80094a4:	b930      	cbnz	r0, 80094b4 <__d2b+0x24>
 80094a6:	4602      	mov	r2, r0
 80094a8:	4b24      	ldr	r3, [pc, #144]	; (800953c <__d2b+0xac>)
 80094aa:	4825      	ldr	r0, [pc, #148]	; (8009540 <__d2b+0xb0>)
 80094ac:	f240 310f 	movw	r1, #783	; 0x30f
 80094b0:	f000 fae0 	bl	8009a74 <__assert_func>
 80094b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094bc:	bb2d      	cbnz	r5, 800950a <__d2b+0x7a>
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	f1b8 0300 	subs.w	r3, r8, #0
 80094c4:	d026      	beq.n	8009514 <__d2b+0x84>
 80094c6:	4668      	mov	r0, sp
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	f7ff fd87 	bl	8008fdc <__lo0bits>
 80094ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80094d2:	b1e8      	cbz	r0, 8009510 <__d2b+0x80>
 80094d4:	f1c0 0320 	rsb	r3, r0, #32
 80094d8:	fa02 f303 	lsl.w	r3, r2, r3
 80094dc:	430b      	orrs	r3, r1
 80094de:	40c2      	lsrs	r2, r0
 80094e0:	6163      	str	r3, [r4, #20]
 80094e2:	9201      	str	r2, [sp, #4]
 80094e4:	9b01      	ldr	r3, [sp, #4]
 80094e6:	61a3      	str	r3, [r4, #24]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bf14      	ite	ne
 80094ec:	2202      	movne	r2, #2
 80094ee:	2201      	moveq	r2, #1
 80094f0:	6122      	str	r2, [r4, #16]
 80094f2:	b1bd      	cbz	r5, 8009524 <__d2b+0x94>
 80094f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094f8:	4405      	add	r5, r0
 80094fa:	603d      	str	r5, [r7, #0]
 80094fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009500:	6030      	str	r0, [r6, #0]
 8009502:	4620      	mov	r0, r4
 8009504:	b003      	add	sp, #12
 8009506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800950a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800950e:	e7d6      	b.n	80094be <__d2b+0x2e>
 8009510:	6161      	str	r1, [r4, #20]
 8009512:	e7e7      	b.n	80094e4 <__d2b+0x54>
 8009514:	a801      	add	r0, sp, #4
 8009516:	f7ff fd61 	bl	8008fdc <__lo0bits>
 800951a:	9b01      	ldr	r3, [sp, #4]
 800951c:	6163      	str	r3, [r4, #20]
 800951e:	3020      	adds	r0, #32
 8009520:	2201      	movs	r2, #1
 8009522:	e7e5      	b.n	80094f0 <__d2b+0x60>
 8009524:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009528:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800952c:	6038      	str	r0, [r7, #0]
 800952e:	6918      	ldr	r0, [r3, #16]
 8009530:	f7ff fd34 	bl	8008f9c <__hi0bits>
 8009534:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009538:	e7e2      	b.n	8009500 <__d2b+0x70>
 800953a:	bf00      	nop
 800953c:	08009de8 	.word	0x08009de8
 8009540:	08009df9 	.word	0x08009df9

08009544 <__sfputc_r>:
 8009544:	6893      	ldr	r3, [r2, #8]
 8009546:	3b01      	subs	r3, #1
 8009548:	2b00      	cmp	r3, #0
 800954a:	b410      	push	{r4}
 800954c:	6093      	str	r3, [r2, #8]
 800954e:	da08      	bge.n	8009562 <__sfputc_r+0x1e>
 8009550:	6994      	ldr	r4, [r2, #24]
 8009552:	42a3      	cmp	r3, r4
 8009554:	db01      	blt.n	800955a <__sfputc_r+0x16>
 8009556:	290a      	cmp	r1, #10
 8009558:	d103      	bne.n	8009562 <__sfputc_r+0x1e>
 800955a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800955e:	f000 b9e3 	b.w	8009928 <__swbuf_r>
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	1c58      	adds	r0, r3, #1
 8009566:	6010      	str	r0, [r2, #0]
 8009568:	7019      	strb	r1, [r3, #0]
 800956a:	4608      	mov	r0, r1
 800956c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009570:	4770      	bx	lr

08009572 <__sfputs_r>:
 8009572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009574:	4606      	mov	r6, r0
 8009576:	460f      	mov	r7, r1
 8009578:	4614      	mov	r4, r2
 800957a:	18d5      	adds	r5, r2, r3
 800957c:	42ac      	cmp	r4, r5
 800957e:	d101      	bne.n	8009584 <__sfputs_r+0x12>
 8009580:	2000      	movs	r0, #0
 8009582:	e007      	b.n	8009594 <__sfputs_r+0x22>
 8009584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009588:	463a      	mov	r2, r7
 800958a:	4630      	mov	r0, r6
 800958c:	f7ff ffda 	bl	8009544 <__sfputc_r>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d1f3      	bne.n	800957c <__sfputs_r+0xa>
 8009594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009598 <_vfiprintf_r>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	460d      	mov	r5, r1
 800959e:	b09d      	sub	sp, #116	; 0x74
 80095a0:	4614      	mov	r4, r2
 80095a2:	4698      	mov	r8, r3
 80095a4:	4606      	mov	r6, r0
 80095a6:	b118      	cbz	r0, 80095b0 <_vfiprintf_r+0x18>
 80095a8:	6a03      	ldr	r3, [r0, #32]
 80095aa:	b90b      	cbnz	r3, 80095b0 <_vfiprintf_r+0x18>
 80095ac:	f7fe fbcc 	bl	8007d48 <__sinit>
 80095b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095b2:	07d9      	lsls	r1, r3, #31
 80095b4:	d405      	bmi.n	80095c2 <_vfiprintf_r+0x2a>
 80095b6:	89ab      	ldrh	r3, [r5, #12]
 80095b8:	059a      	lsls	r2, r3, #22
 80095ba:	d402      	bmi.n	80095c2 <_vfiprintf_r+0x2a>
 80095bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095be:	f7fe fcb9 	bl	8007f34 <__retarget_lock_acquire_recursive>
 80095c2:	89ab      	ldrh	r3, [r5, #12]
 80095c4:	071b      	lsls	r3, r3, #28
 80095c6:	d501      	bpl.n	80095cc <_vfiprintf_r+0x34>
 80095c8:	692b      	ldr	r3, [r5, #16]
 80095ca:	b99b      	cbnz	r3, 80095f4 <_vfiprintf_r+0x5c>
 80095cc:	4629      	mov	r1, r5
 80095ce:	4630      	mov	r0, r6
 80095d0:	f000 f9e8 	bl	80099a4 <__swsetup_r>
 80095d4:	b170      	cbz	r0, 80095f4 <_vfiprintf_r+0x5c>
 80095d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095d8:	07dc      	lsls	r4, r3, #31
 80095da:	d504      	bpl.n	80095e6 <_vfiprintf_r+0x4e>
 80095dc:	f04f 30ff 	mov.w	r0, #4294967295
 80095e0:	b01d      	add	sp, #116	; 0x74
 80095e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e6:	89ab      	ldrh	r3, [r5, #12]
 80095e8:	0598      	lsls	r0, r3, #22
 80095ea:	d4f7      	bmi.n	80095dc <_vfiprintf_r+0x44>
 80095ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ee:	f7fe fca2 	bl	8007f36 <__retarget_lock_release_recursive>
 80095f2:	e7f3      	b.n	80095dc <_vfiprintf_r+0x44>
 80095f4:	2300      	movs	r3, #0
 80095f6:	9309      	str	r3, [sp, #36]	; 0x24
 80095f8:	2320      	movs	r3, #32
 80095fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009602:	2330      	movs	r3, #48	; 0x30
 8009604:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80097b8 <_vfiprintf_r+0x220>
 8009608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800960c:	f04f 0901 	mov.w	r9, #1
 8009610:	4623      	mov	r3, r4
 8009612:	469a      	mov	sl, r3
 8009614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009618:	b10a      	cbz	r2, 800961e <_vfiprintf_r+0x86>
 800961a:	2a25      	cmp	r2, #37	; 0x25
 800961c:	d1f9      	bne.n	8009612 <_vfiprintf_r+0x7a>
 800961e:	ebba 0b04 	subs.w	fp, sl, r4
 8009622:	d00b      	beq.n	800963c <_vfiprintf_r+0xa4>
 8009624:	465b      	mov	r3, fp
 8009626:	4622      	mov	r2, r4
 8009628:	4629      	mov	r1, r5
 800962a:	4630      	mov	r0, r6
 800962c:	f7ff ffa1 	bl	8009572 <__sfputs_r>
 8009630:	3001      	adds	r0, #1
 8009632:	f000 80a9 	beq.w	8009788 <_vfiprintf_r+0x1f0>
 8009636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009638:	445a      	add	r2, fp
 800963a:	9209      	str	r2, [sp, #36]	; 0x24
 800963c:	f89a 3000 	ldrb.w	r3, [sl]
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 80a1 	beq.w	8009788 <_vfiprintf_r+0x1f0>
 8009646:	2300      	movs	r3, #0
 8009648:	f04f 32ff 	mov.w	r2, #4294967295
 800964c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009650:	f10a 0a01 	add.w	sl, sl, #1
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	9307      	str	r3, [sp, #28]
 8009658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800965c:	931a      	str	r3, [sp, #104]	; 0x68
 800965e:	4654      	mov	r4, sl
 8009660:	2205      	movs	r2, #5
 8009662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009666:	4854      	ldr	r0, [pc, #336]	; (80097b8 <_vfiprintf_r+0x220>)
 8009668:	f7f6 fdda 	bl	8000220 <memchr>
 800966c:	9a04      	ldr	r2, [sp, #16]
 800966e:	b9d8      	cbnz	r0, 80096a8 <_vfiprintf_r+0x110>
 8009670:	06d1      	lsls	r1, r2, #27
 8009672:	bf44      	itt	mi
 8009674:	2320      	movmi	r3, #32
 8009676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800967a:	0713      	lsls	r3, r2, #28
 800967c:	bf44      	itt	mi
 800967e:	232b      	movmi	r3, #43	; 0x2b
 8009680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009684:	f89a 3000 	ldrb.w	r3, [sl]
 8009688:	2b2a      	cmp	r3, #42	; 0x2a
 800968a:	d015      	beq.n	80096b8 <_vfiprintf_r+0x120>
 800968c:	9a07      	ldr	r2, [sp, #28]
 800968e:	4654      	mov	r4, sl
 8009690:	2000      	movs	r0, #0
 8009692:	f04f 0c0a 	mov.w	ip, #10
 8009696:	4621      	mov	r1, r4
 8009698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800969c:	3b30      	subs	r3, #48	; 0x30
 800969e:	2b09      	cmp	r3, #9
 80096a0:	d94d      	bls.n	800973e <_vfiprintf_r+0x1a6>
 80096a2:	b1b0      	cbz	r0, 80096d2 <_vfiprintf_r+0x13a>
 80096a4:	9207      	str	r2, [sp, #28]
 80096a6:	e014      	b.n	80096d2 <_vfiprintf_r+0x13a>
 80096a8:	eba0 0308 	sub.w	r3, r0, r8
 80096ac:	fa09 f303 	lsl.w	r3, r9, r3
 80096b0:	4313      	orrs	r3, r2
 80096b2:	9304      	str	r3, [sp, #16]
 80096b4:	46a2      	mov	sl, r4
 80096b6:	e7d2      	b.n	800965e <_vfiprintf_r+0xc6>
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	1d19      	adds	r1, r3, #4
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	9103      	str	r1, [sp, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bfbb      	ittet	lt
 80096c4:	425b      	neglt	r3, r3
 80096c6:	f042 0202 	orrlt.w	r2, r2, #2
 80096ca:	9307      	strge	r3, [sp, #28]
 80096cc:	9307      	strlt	r3, [sp, #28]
 80096ce:	bfb8      	it	lt
 80096d0:	9204      	strlt	r2, [sp, #16]
 80096d2:	7823      	ldrb	r3, [r4, #0]
 80096d4:	2b2e      	cmp	r3, #46	; 0x2e
 80096d6:	d10c      	bne.n	80096f2 <_vfiprintf_r+0x15a>
 80096d8:	7863      	ldrb	r3, [r4, #1]
 80096da:	2b2a      	cmp	r3, #42	; 0x2a
 80096dc:	d134      	bne.n	8009748 <_vfiprintf_r+0x1b0>
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	1d1a      	adds	r2, r3, #4
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	9203      	str	r2, [sp, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfb8      	it	lt
 80096ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80096ee:	3402      	adds	r4, #2
 80096f0:	9305      	str	r3, [sp, #20]
 80096f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80097c8 <_vfiprintf_r+0x230>
 80096f6:	7821      	ldrb	r1, [r4, #0]
 80096f8:	2203      	movs	r2, #3
 80096fa:	4650      	mov	r0, sl
 80096fc:	f7f6 fd90 	bl	8000220 <memchr>
 8009700:	b138      	cbz	r0, 8009712 <_vfiprintf_r+0x17a>
 8009702:	9b04      	ldr	r3, [sp, #16]
 8009704:	eba0 000a 	sub.w	r0, r0, sl
 8009708:	2240      	movs	r2, #64	; 0x40
 800970a:	4082      	lsls	r2, r0
 800970c:	4313      	orrs	r3, r2
 800970e:	3401      	adds	r4, #1
 8009710:	9304      	str	r3, [sp, #16]
 8009712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009716:	4829      	ldr	r0, [pc, #164]	; (80097bc <_vfiprintf_r+0x224>)
 8009718:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800971c:	2206      	movs	r2, #6
 800971e:	f7f6 fd7f 	bl	8000220 <memchr>
 8009722:	2800      	cmp	r0, #0
 8009724:	d03f      	beq.n	80097a6 <_vfiprintf_r+0x20e>
 8009726:	4b26      	ldr	r3, [pc, #152]	; (80097c0 <_vfiprintf_r+0x228>)
 8009728:	bb1b      	cbnz	r3, 8009772 <_vfiprintf_r+0x1da>
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	3307      	adds	r3, #7
 800972e:	f023 0307 	bic.w	r3, r3, #7
 8009732:	3308      	adds	r3, #8
 8009734:	9303      	str	r3, [sp, #12]
 8009736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009738:	443b      	add	r3, r7
 800973a:	9309      	str	r3, [sp, #36]	; 0x24
 800973c:	e768      	b.n	8009610 <_vfiprintf_r+0x78>
 800973e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009742:	460c      	mov	r4, r1
 8009744:	2001      	movs	r0, #1
 8009746:	e7a6      	b.n	8009696 <_vfiprintf_r+0xfe>
 8009748:	2300      	movs	r3, #0
 800974a:	3401      	adds	r4, #1
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	4619      	mov	r1, r3
 8009750:	f04f 0c0a 	mov.w	ip, #10
 8009754:	4620      	mov	r0, r4
 8009756:	f810 2b01 	ldrb.w	r2, [r0], #1
 800975a:	3a30      	subs	r2, #48	; 0x30
 800975c:	2a09      	cmp	r2, #9
 800975e:	d903      	bls.n	8009768 <_vfiprintf_r+0x1d0>
 8009760:	2b00      	cmp	r3, #0
 8009762:	d0c6      	beq.n	80096f2 <_vfiprintf_r+0x15a>
 8009764:	9105      	str	r1, [sp, #20]
 8009766:	e7c4      	b.n	80096f2 <_vfiprintf_r+0x15a>
 8009768:	fb0c 2101 	mla	r1, ip, r1, r2
 800976c:	4604      	mov	r4, r0
 800976e:	2301      	movs	r3, #1
 8009770:	e7f0      	b.n	8009754 <_vfiprintf_r+0x1bc>
 8009772:	ab03      	add	r3, sp, #12
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	462a      	mov	r2, r5
 8009778:	4b12      	ldr	r3, [pc, #72]	; (80097c4 <_vfiprintf_r+0x22c>)
 800977a:	a904      	add	r1, sp, #16
 800977c:	4630      	mov	r0, r6
 800977e:	f7fd fea3 	bl	80074c8 <_printf_float>
 8009782:	4607      	mov	r7, r0
 8009784:	1c78      	adds	r0, r7, #1
 8009786:	d1d6      	bne.n	8009736 <_vfiprintf_r+0x19e>
 8009788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800978a:	07d9      	lsls	r1, r3, #31
 800978c:	d405      	bmi.n	800979a <_vfiprintf_r+0x202>
 800978e:	89ab      	ldrh	r3, [r5, #12]
 8009790:	059a      	lsls	r2, r3, #22
 8009792:	d402      	bmi.n	800979a <_vfiprintf_r+0x202>
 8009794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009796:	f7fe fbce 	bl	8007f36 <__retarget_lock_release_recursive>
 800979a:	89ab      	ldrh	r3, [r5, #12]
 800979c:	065b      	lsls	r3, r3, #25
 800979e:	f53f af1d 	bmi.w	80095dc <_vfiprintf_r+0x44>
 80097a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097a4:	e71c      	b.n	80095e0 <_vfiprintf_r+0x48>
 80097a6:	ab03      	add	r3, sp, #12
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	462a      	mov	r2, r5
 80097ac:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <_vfiprintf_r+0x22c>)
 80097ae:	a904      	add	r1, sp, #16
 80097b0:	4630      	mov	r0, r6
 80097b2:	f7fe f92d 	bl	8007a10 <_printf_i>
 80097b6:	e7e4      	b.n	8009782 <_vfiprintf_r+0x1ea>
 80097b8:	08009f54 	.word	0x08009f54
 80097bc:	08009f5e 	.word	0x08009f5e
 80097c0:	080074c9 	.word	0x080074c9
 80097c4:	08009573 	.word	0x08009573
 80097c8:	08009f5a 	.word	0x08009f5a

080097cc <__sflush_r>:
 80097cc:	898a      	ldrh	r2, [r1, #12]
 80097ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d2:	4605      	mov	r5, r0
 80097d4:	0710      	lsls	r0, r2, #28
 80097d6:	460c      	mov	r4, r1
 80097d8:	d458      	bmi.n	800988c <__sflush_r+0xc0>
 80097da:	684b      	ldr	r3, [r1, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	dc05      	bgt.n	80097ec <__sflush_r+0x20>
 80097e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	dc02      	bgt.n	80097ec <__sflush_r+0x20>
 80097e6:	2000      	movs	r0, #0
 80097e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097ee:	2e00      	cmp	r6, #0
 80097f0:	d0f9      	beq.n	80097e6 <__sflush_r+0x1a>
 80097f2:	2300      	movs	r3, #0
 80097f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097f8:	682f      	ldr	r7, [r5, #0]
 80097fa:	6a21      	ldr	r1, [r4, #32]
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	d032      	beq.n	8009866 <__sflush_r+0x9a>
 8009800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	075a      	lsls	r2, r3, #29
 8009806:	d505      	bpl.n	8009814 <__sflush_r+0x48>
 8009808:	6863      	ldr	r3, [r4, #4]
 800980a:	1ac0      	subs	r0, r0, r3
 800980c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800980e:	b10b      	cbz	r3, 8009814 <__sflush_r+0x48>
 8009810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009812:	1ac0      	subs	r0, r0, r3
 8009814:	2300      	movs	r3, #0
 8009816:	4602      	mov	r2, r0
 8009818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800981a:	6a21      	ldr	r1, [r4, #32]
 800981c:	4628      	mov	r0, r5
 800981e:	47b0      	blx	r6
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	d106      	bne.n	8009834 <__sflush_r+0x68>
 8009826:	6829      	ldr	r1, [r5, #0]
 8009828:	291d      	cmp	r1, #29
 800982a:	d82b      	bhi.n	8009884 <__sflush_r+0xb8>
 800982c:	4a29      	ldr	r2, [pc, #164]	; (80098d4 <__sflush_r+0x108>)
 800982e:	410a      	asrs	r2, r1
 8009830:	07d6      	lsls	r6, r2, #31
 8009832:	d427      	bmi.n	8009884 <__sflush_r+0xb8>
 8009834:	2200      	movs	r2, #0
 8009836:	6062      	str	r2, [r4, #4]
 8009838:	04d9      	lsls	r1, r3, #19
 800983a:	6922      	ldr	r2, [r4, #16]
 800983c:	6022      	str	r2, [r4, #0]
 800983e:	d504      	bpl.n	800984a <__sflush_r+0x7e>
 8009840:	1c42      	adds	r2, r0, #1
 8009842:	d101      	bne.n	8009848 <__sflush_r+0x7c>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	b903      	cbnz	r3, 800984a <__sflush_r+0x7e>
 8009848:	6560      	str	r0, [r4, #84]	; 0x54
 800984a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800984c:	602f      	str	r7, [r5, #0]
 800984e:	2900      	cmp	r1, #0
 8009850:	d0c9      	beq.n	80097e6 <__sflush_r+0x1a>
 8009852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009856:	4299      	cmp	r1, r3
 8009858:	d002      	beq.n	8009860 <__sflush_r+0x94>
 800985a:	4628      	mov	r0, r5
 800985c:	f7ff f9f6 	bl	8008c4c <_free_r>
 8009860:	2000      	movs	r0, #0
 8009862:	6360      	str	r0, [r4, #52]	; 0x34
 8009864:	e7c0      	b.n	80097e8 <__sflush_r+0x1c>
 8009866:	2301      	movs	r3, #1
 8009868:	4628      	mov	r0, r5
 800986a:	47b0      	blx	r6
 800986c:	1c41      	adds	r1, r0, #1
 800986e:	d1c8      	bne.n	8009802 <__sflush_r+0x36>
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d0c5      	beq.n	8009802 <__sflush_r+0x36>
 8009876:	2b1d      	cmp	r3, #29
 8009878:	d001      	beq.n	800987e <__sflush_r+0xb2>
 800987a:	2b16      	cmp	r3, #22
 800987c:	d101      	bne.n	8009882 <__sflush_r+0xb6>
 800987e:	602f      	str	r7, [r5, #0]
 8009880:	e7b1      	b.n	80097e6 <__sflush_r+0x1a>
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009888:	81a3      	strh	r3, [r4, #12]
 800988a:	e7ad      	b.n	80097e8 <__sflush_r+0x1c>
 800988c:	690f      	ldr	r7, [r1, #16]
 800988e:	2f00      	cmp	r7, #0
 8009890:	d0a9      	beq.n	80097e6 <__sflush_r+0x1a>
 8009892:	0793      	lsls	r3, r2, #30
 8009894:	680e      	ldr	r6, [r1, #0]
 8009896:	bf08      	it	eq
 8009898:	694b      	ldreq	r3, [r1, #20]
 800989a:	600f      	str	r7, [r1, #0]
 800989c:	bf18      	it	ne
 800989e:	2300      	movne	r3, #0
 80098a0:	eba6 0807 	sub.w	r8, r6, r7
 80098a4:	608b      	str	r3, [r1, #8]
 80098a6:	f1b8 0f00 	cmp.w	r8, #0
 80098aa:	dd9c      	ble.n	80097e6 <__sflush_r+0x1a>
 80098ac:	6a21      	ldr	r1, [r4, #32]
 80098ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098b0:	4643      	mov	r3, r8
 80098b2:	463a      	mov	r2, r7
 80098b4:	4628      	mov	r0, r5
 80098b6:	47b0      	blx	r6
 80098b8:	2800      	cmp	r0, #0
 80098ba:	dc06      	bgt.n	80098ca <__sflush_r+0xfe>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c2:	81a3      	strh	r3, [r4, #12]
 80098c4:	f04f 30ff 	mov.w	r0, #4294967295
 80098c8:	e78e      	b.n	80097e8 <__sflush_r+0x1c>
 80098ca:	4407      	add	r7, r0
 80098cc:	eba8 0800 	sub.w	r8, r8, r0
 80098d0:	e7e9      	b.n	80098a6 <__sflush_r+0xda>
 80098d2:	bf00      	nop
 80098d4:	dfbffffe 	.word	0xdfbffffe

080098d8 <_fflush_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	690b      	ldr	r3, [r1, #16]
 80098dc:	4605      	mov	r5, r0
 80098de:	460c      	mov	r4, r1
 80098e0:	b913      	cbnz	r3, 80098e8 <_fflush_r+0x10>
 80098e2:	2500      	movs	r5, #0
 80098e4:	4628      	mov	r0, r5
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
 80098e8:	b118      	cbz	r0, 80098f2 <_fflush_r+0x1a>
 80098ea:	6a03      	ldr	r3, [r0, #32]
 80098ec:	b90b      	cbnz	r3, 80098f2 <_fflush_r+0x1a>
 80098ee:	f7fe fa2b 	bl	8007d48 <__sinit>
 80098f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d0f3      	beq.n	80098e2 <_fflush_r+0xa>
 80098fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098fc:	07d0      	lsls	r0, r2, #31
 80098fe:	d404      	bmi.n	800990a <_fflush_r+0x32>
 8009900:	0599      	lsls	r1, r3, #22
 8009902:	d402      	bmi.n	800990a <_fflush_r+0x32>
 8009904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009906:	f7fe fb15 	bl	8007f34 <__retarget_lock_acquire_recursive>
 800990a:	4628      	mov	r0, r5
 800990c:	4621      	mov	r1, r4
 800990e:	f7ff ff5d 	bl	80097cc <__sflush_r>
 8009912:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009914:	07da      	lsls	r2, r3, #31
 8009916:	4605      	mov	r5, r0
 8009918:	d4e4      	bmi.n	80098e4 <_fflush_r+0xc>
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	059b      	lsls	r3, r3, #22
 800991e:	d4e1      	bmi.n	80098e4 <_fflush_r+0xc>
 8009920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009922:	f7fe fb08 	bl	8007f36 <__retarget_lock_release_recursive>
 8009926:	e7dd      	b.n	80098e4 <_fflush_r+0xc>

08009928 <__swbuf_r>:
 8009928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992a:	460e      	mov	r6, r1
 800992c:	4614      	mov	r4, r2
 800992e:	4605      	mov	r5, r0
 8009930:	b118      	cbz	r0, 800993a <__swbuf_r+0x12>
 8009932:	6a03      	ldr	r3, [r0, #32]
 8009934:	b90b      	cbnz	r3, 800993a <__swbuf_r+0x12>
 8009936:	f7fe fa07 	bl	8007d48 <__sinit>
 800993a:	69a3      	ldr	r3, [r4, #24]
 800993c:	60a3      	str	r3, [r4, #8]
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	071a      	lsls	r2, r3, #28
 8009942:	d525      	bpl.n	8009990 <__swbuf_r+0x68>
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	b31b      	cbz	r3, 8009990 <__swbuf_r+0x68>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	6922      	ldr	r2, [r4, #16]
 800994c:	1a98      	subs	r0, r3, r2
 800994e:	6963      	ldr	r3, [r4, #20]
 8009950:	b2f6      	uxtb	r6, r6
 8009952:	4283      	cmp	r3, r0
 8009954:	4637      	mov	r7, r6
 8009956:	dc04      	bgt.n	8009962 <__swbuf_r+0x3a>
 8009958:	4621      	mov	r1, r4
 800995a:	4628      	mov	r0, r5
 800995c:	f7ff ffbc 	bl	80098d8 <_fflush_r>
 8009960:	b9e0      	cbnz	r0, 800999c <__swbuf_r+0x74>
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	3b01      	subs	r3, #1
 8009966:	60a3      	str	r3, [r4, #8]
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	6022      	str	r2, [r4, #0]
 800996e:	701e      	strb	r6, [r3, #0]
 8009970:	6962      	ldr	r2, [r4, #20]
 8009972:	1c43      	adds	r3, r0, #1
 8009974:	429a      	cmp	r2, r3
 8009976:	d004      	beq.n	8009982 <__swbuf_r+0x5a>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	07db      	lsls	r3, r3, #31
 800997c:	d506      	bpl.n	800998c <__swbuf_r+0x64>
 800997e:	2e0a      	cmp	r6, #10
 8009980:	d104      	bne.n	800998c <__swbuf_r+0x64>
 8009982:	4621      	mov	r1, r4
 8009984:	4628      	mov	r0, r5
 8009986:	f7ff ffa7 	bl	80098d8 <_fflush_r>
 800998a:	b938      	cbnz	r0, 800999c <__swbuf_r+0x74>
 800998c:	4638      	mov	r0, r7
 800998e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009990:	4621      	mov	r1, r4
 8009992:	4628      	mov	r0, r5
 8009994:	f000 f806 	bl	80099a4 <__swsetup_r>
 8009998:	2800      	cmp	r0, #0
 800999a:	d0d5      	beq.n	8009948 <__swbuf_r+0x20>
 800999c:	f04f 37ff 	mov.w	r7, #4294967295
 80099a0:	e7f4      	b.n	800998c <__swbuf_r+0x64>
	...

080099a4 <__swsetup_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4b2a      	ldr	r3, [pc, #168]	; (8009a50 <__swsetup_r+0xac>)
 80099a8:	4605      	mov	r5, r0
 80099aa:	6818      	ldr	r0, [r3, #0]
 80099ac:	460c      	mov	r4, r1
 80099ae:	b118      	cbz	r0, 80099b8 <__swsetup_r+0x14>
 80099b0:	6a03      	ldr	r3, [r0, #32]
 80099b2:	b90b      	cbnz	r3, 80099b8 <__swsetup_r+0x14>
 80099b4:	f7fe f9c8 	bl	8007d48 <__sinit>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099be:	0718      	lsls	r0, r3, #28
 80099c0:	d422      	bmi.n	8009a08 <__swsetup_r+0x64>
 80099c2:	06d9      	lsls	r1, r3, #27
 80099c4:	d407      	bmi.n	80099d6 <__swsetup_r+0x32>
 80099c6:	2309      	movs	r3, #9
 80099c8:	602b      	str	r3, [r5, #0]
 80099ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295
 80099d4:	e034      	b.n	8009a40 <__swsetup_r+0x9c>
 80099d6:	0758      	lsls	r0, r3, #29
 80099d8:	d512      	bpl.n	8009a00 <__swsetup_r+0x5c>
 80099da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099dc:	b141      	cbz	r1, 80099f0 <__swsetup_r+0x4c>
 80099de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099e2:	4299      	cmp	r1, r3
 80099e4:	d002      	beq.n	80099ec <__swsetup_r+0x48>
 80099e6:	4628      	mov	r0, r5
 80099e8:	f7ff f930 	bl	8008c4c <_free_r>
 80099ec:	2300      	movs	r3, #0
 80099ee:	6363      	str	r3, [r4, #52]	; 0x34
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099f6:	81a3      	strh	r3, [r4, #12]
 80099f8:	2300      	movs	r3, #0
 80099fa:	6063      	str	r3, [r4, #4]
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	f043 0308 	orr.w	r3, r3, #8
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	6923      	ldr	r3, [r4, #16]
 8009a0a:	b94b      	cbnz	r3, 8009a20 <__swsetup_r+0x7c>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a16:	d003      	beq.n	8009a20 <__swsetup_r+0x7c>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 f8b6 	bl	8009b8c <__smakebuf_r>
 8009a20:	89a0      	ldrh	r0, [r4, #12]
 8009a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a26:	f010 0301 	ands.w	r3, r0, #1
 8009a2a:	d00a      	beq.n	8009a42 <__swsetup_r+0x9e>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60a3      	str	r3, [r4, #8]
 8009a30:	6963      	ldr	r3, [r4, #20]
 8009a32:	425b      	negs	r3, r3
 8009a34:	61a3      	str	r3, [r4, #24]
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	b943      	cbnz	r3, 8009a4c <__swsetup_r+0xa8>
 8009a3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a3e:	d1c4      	bne.n	80099ca <__swsetup_r+0x26>
 8009a40:	bd38      	pop	{r3, r4, r5, pc}
 8009a42:	0781      	lsls	r1, r0, #30
 8009a44:	bf58      	it	pl
 8009a46:	6963      	ldrpl	r3, [r4, #20]
 8009a48:	60a3      	str	r3, [r4, #8]
 8009a4a:	e7f4      	b.n	8009a36 <__swsetup_r+0x92>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	e7f7      	b.n	8009a40 <__swsetup_r+0x9c>
 8009a50:	20000064 	.word	0x20000064

08009a54 <_sbrk_r>:
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	4d06      	ldr	r5, [pc, #24]	; (8009a70 <_sbrk_r+0x1c>)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	4608      	mov	r0, r1
 8009a5e:	602b      	str	r3, [r5, #0]
 8009a60:	f7f8 f922 	bl	8001ca8 <_sbrk>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d102      	bne.n	8009a6e <_sbrk_r+0x1a>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	b103      	cbz	r3, 8009a6e <_sbrk_r+0x1a>
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	2000058c 	.word	0x2000058c

08009a74 <__assert_func>:
 8009a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a76:	4614      	mov	r4, r2
 8009a78:	461a      	mov	r2, r3
 8009a7a:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <__assert_func+0x2c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4605      	mov	r5, r0
 8009a80:	68d8      	ldr	r0, [r3, #12]
 8009a82:	b14c      	cbz	r4, 8009a98 <__assert_func+0x24>
 8009a84:	4b07      	ldr	r3, [pc, #28]	; (8009aa4 <__assert_func+0x30>)
 8009a86:	9100      	str	r1, [sp, #0]
 8009a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a8c:	4906      	ldr	r1, [pc, #24]	; (8009aa8 <__assert_func+0x34>)
 8009a8e:	462b      	mov	r3, r5
 8009a90:	f000 f844 	bl	8009b1c <fiprintf>
 8009a94:	f000 f8d8 	bl	8009c48 <abort>
 8009a98:	4b04      	ldr	r3, [pc, #16]	; (8009aac <__assert_func+0x38>)
 8009a9a:	461c      	mov	r4, r3
 8009a9c:	e7f3      	b.n	8009a86 <__assert_func+0x12>
 8009a9e:	bf00      	nop
 8009aa0:	20000064 	.word	0x20000064
 8009aa4:	08009f6f 	.word	0x08009f6f
 8009aa8:	08009f7c 	.word	0x08009f7c
 8009aac:	08009faa 	.word	0x08009faa

08009ab0 <_calloc_r>:
 8009ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ab2:	fba1 2402 	umull	r2, r4, r1, r2
 8009ab6:	b94c      	cbnz	r4, 8009acc <_calloc_r+0x1c>
 8009ab8:	4611      	mov	r1, r2
 8009aba:	9201      	str	r2, [sp, #4]
 8009abc:	f7ff f93a 	bl	8008d34 <_malloc_r>
 8009ac0:	9a01      	ldr	r2, [sp, #4]
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	b930      	cbnz	r0, 8009ad4 <_calloc_r+0x24>
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	b003      	add	sp, #12
 8009aca:	bd30      	pop	{r4, r5, pc}
 8009acc:	220c      	movs	r2, #12
 8009ace:	6002      	str	r2, [r0, #0]
 8009ad0:	2500      	movs	r5, #0
 8009ad2:	e7f8      	b.n	8009ac6 <_calloc_r+0x16>
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	f7fe f9b0 	bl	8007e3a <memset>
 8009ada:	e7f4      	b.n	8009ac6 <_calloc_r+0x16>

08009adc <__ascii_mbtowc>:
 8009adc:	b082      	sub	sp, #8
 8009ade:	b901      	cbnz	r1, 8009ae2 <__ascii_mbtowc+0x6>
 8009ae0:	a901      	add	r1, sp, #4
 8009ae2:	b142      	cbz	r2, 8009af6 <__ascii_mbtowc+0x1a>
 8009ae4:	b14b      	cbz	r3, 8009afa <__ascii_mbtowc+0x1e>
 8009ae6:	7813      	ldrb	r3, [r2, #0]
 8009ae8:	600b      	str	r3, [r1, #0]
 8009aea:	7812      	ldrb	r2, [r2, #0]
 8009aec:	1e10      	subs	r0, r2, #0
 8009aee:	bf18      	it	ne
 8009af0:	2001      	movne	r0, #1
 8009af2:	b002      	add	sp, #8
 8009af4:	4770      	bx	lr
 8009af6:	4610      	mov	r0, r2
 8009af8:	e7fb      	b.n	8009af2 <__ascii_mbtowc+0x16>
 8009afa:	f06f 0001 	mvn.w	r0, #1
 8009afe:	e7f8      	b.n	8009af2 <__ascii_mbtowc+0x16>

08009b00 <__ascii_wctomb>:
 8009b00:	b149      	cbz	r1, 8009b16 <__ascii_wctomb+0x16>
 8009b02:	2aff      	cmp	r2, #255	; 0xff
 8009b04:	bf85      	ittet	hi
 8009b06:	238a      	movhi	r3, #138	; 0x8a
 8009b08:	6003      	strhi	r3, [r0, #0]
 8009b0a:	700a      	strbls	r2, [r1, #0]
 8009b0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b10:	bf98      	it	ls
 8009b12:	2001      	movls	r0, #1
 8009b14:	4770      	bx	lr
 8009b16:	4608      	mov	r0, r1
 8009b18:	4770      	bx	lr
	...

08009b1c <fiprintf>:
 8009b1c:	b40e      	push	{r1, r2, r3}
 8009b1e:	b503      	push	{r0, r1, lr}
 8009b20:	4601      	mov	r1, r0
 8009b22:	ab03      	add	r3, sp, #12
 8009b24:	4805      	ldr	r0, [pc, #20]	; (8009b3c <fiprintf+0x20>)
 8009b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2a:	6800      	ldr	r0, [r0, #0]
 8009b2c:	9301      	str	r3, [sp, #4]
 8009b2e:	f7ff fd33 	bl	8009598 <_vfiprintf_r>
 8009b32:	b002      	add	sp, #8
 8009b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b38:	b003      	add	sp, #12
 8009b3a:	4770      	bx	lr
 8009b3c:	20000064 	.word	0x20000064

08009b40 <__swhatbuf_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	460c      	mov	r4, r1
 8009b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	b096      	sub	sp, #88	; 0x58
 8009b4c:	4615      	mov	r5, r2
 8009b4e:	461e      	mov	r6, r3
 8009b50:	da0d      	bge.n	8009b6e <__swhatbuf_r+0x2e>
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b58:	f04f 0100 	mov.w	r1, #0
 8009b5c:	bf0c      	ite	eq
 8009b5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b62:	2340      	movne	r3, #64	; 0x40
 8009b64:	2000      	movs	r0, #0
 8009b66:	6031      	str	r1, [r6, #0]
 8009b68:	602b      	str	r3, [r5, #0]
 8009b6a:	b016      	add	sp, #88	; 0x58
 8009b6c:	bd70      	pop	{r4, r5, r6, pc}
 8009b6e:	466a      	mov	r2, sp
 8009b70:	f000 f848 	bl	8009c04 <_fstat_r>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	dbec      	blt.n	8009b52 <__swhatbuf_r+0x12>
 8009b78:	9901      	ldr	r1, [sp, #4]
 8009b7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b82:	4259      	negs	r1, r3
 8009b84:	4159      	adcs	r1, r3
 8009b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b8a:	e7eb      	b.n	8009b64 <__swhatbuf_r+0x24>

08009b8c <__smakebuf_r>:
 8009b8c:	898b      	ldrh	r3, [r1, #12]
 8009b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b90:	079d      	lsls	r5, r3, #30
 8009b92:	4606      	mov	r6, r0
 8009b94:	460c      	mov	r4, r1
 8009b96:	d507      	bpl.n	8009ba8 <__smakebuf_r+0x1c>
 8009b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	6123      	str	r3, [r4, #16]
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	6163      	str	r3, [r4, #20]
 8009ba4:	b002      	add	sp, #8
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	ab01      	add	r3, sp, #4
 8009baa:	466a      	mov	r2, sp
 8009bac:	f7ff ffc8 	bl	8009b40 <__swhatbuf_r>
 8009bb0:	9900      	ldr	r1, [sp, #0]
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7ff f8bd 	bl	8008d34 <_malloc_r>
 8009bba:	b948      	cbnz	r0, 8009bd0 <__smakebuf_r+0x44>
 8009bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc0:	059a      	lsls	r2, r3, #22
 8009bc2:	d4ef      	bmi.n	8009ba4 <__smakebuf_r+0x18>
 8009bc4:	f023 0303 	bic.w	r3, r3, #3
 8009bc8:	f043 0302 	orr.w	r3, r3, #2
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	e7e3      	b.n	8009b98 <__smakebuf_r+0xc>
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	6020      	str	r0, [r4, #0]
 8009bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd8:	81a3      	strh	r3, [r4, #12]
 8009bda:	9b00      	ldr	r3, [sp, #0]
 8009bdc:	6163      	str	r3, [r4, #20]
 8009bde:	9b01      	ldr	r3, [sp, #4]
 8009be0:	6120      	str	r0, [r4, #16]
 8009be2:	b15b      	cbz	r3, 8009bfc <__smakebuf_r+0x70>
 8009be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be8:	4630      	mov	r0, r6
 8009bea:	f000 f81d 	bl	8009c28 <_isatty_r>
 8009bee:	b128      	cbz	r0, 8009bfc <__smakebuf_r+0x70>
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	f023 0303 	bic.w	r3, r3, #3
 8009bf6:	f043 0301 	orr.w	r3, r3, #1
 8009bfa:	81a3      	strh	r3, [r4, #12]
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	431d      	orrs	r5, r3
 8009c00:	81a5      	strh	r5, [r4, #12]
 8009c02:	e7cf      	b.n	8009ba4 <__smakebuf_r+0x18>

08009c04 <_fstat_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4d07      	ldr	r5, [pc, #28]	; (8009c24 <_fstat_r+0x20>)
 8009c08:	2300      	movs	r3, #0
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	4611      	mov	r1, r2
 8009c10:	602b      	str	r3, [r5, #0]
 8009c12:	f7f8 f820 	bl	8001c56 <_fstat>
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	d102      	bne.n	8009c20 <_fstat_r+0x1c>
 8009c1a:	682b      	ldr	r3, [r5, #0]
 8009c1c:	b103      	cbz	r3, 8009c20 <_fstat_r+0x1c>
 8009c1e:	6023      	str	r3, [r4, #0]
 8009c20:	bd38      	pop	{r3, r4, r5, pc}
 8009c22:	bf00      	nop
 8009c24:	2000058c 	.word	0x2000058c

08009c28 <_isatty_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4d06      	ldr	r5, [pc, #24]	; (8009c44 <_isatty_r+0x1c>)
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	4604      	mov	r4, r0
 8009c30:	4608      	mov	r0, r1
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	f7f8 f81f 	bl	8001c76 <_isatty>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_isatty_r+0x1a>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_isatty_r+0x1a>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	2000058c 	.word	0x2000058c

08009c48 <abort>:
 8009c48:	b508      	push	{r3, lr}
 8009c4a:	2006      	movs	r0, #6
 8009c4c:	f000 f82c 	bl	8009ca8 <raise>
 8009c50:	2001      	movs	r0, #1
 8009c52:	f7f7 ffb1 	bl	8001bb8 <_exit>

08009c56 <_raise_r>:
 8009c56:	291f      	cmp	r1, #31
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	460d      	mov	r5, r1
 8009c5e:	d904      	bls.n	8009c6a <_raise_r+0x14>
 8009c60:	2316      	movs	r3, #22
 8009c62:	6003      	str	r3, [r0, #0]
 8009c64:	f04f 30ff 	mov.w	r0, #4294967295
 8009c68:	bd38      	pop	{r3, r4, r5, pc}
 8009c6a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009c6c:	b112      	cbz	r2, 8009c74 <_raise_r+0x1e>
 8009c6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c72:	b94b      	cbnz	r3, 8009c88 <_raise_r+0x32>
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 f831 	bl	8009cdc <_getpid_r>
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	4620      	mov	r0, r4
 8009c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c84:	f000 b818 	b.w	8009cb8 <_kill_r>
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d00a      	beq.n	8009ca2 <_raise_r+0x4c>
 8009c8c:	1c59      	adds	r1, r3, #1
 8009c8e:	d103      	bne.n	8009c98 <_raise_r+0x42>
 8009c90:	2316      	movs	r3, #22
 8009c92:	6003      	str	r3, [r0, #0]
 8009c94:	2001      	movs	r0, #1
 8009c96:	e7e7      	b.n	8009c68 <_raise_r+0x12>
 8009c98:	2400      	movs	r4, #0
 8009c9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	4798      	blx	r3
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	e7e0      	b.n	8009c68 <_raise_r+0x12>
	...

08009ca8 <raise>:
 8009ca8:	4b02      	ldr	r3, [pc, #8]	; (8009cb4 <raise+0xc>)
 8009caa:	4601      	mov	r1, r0
 8009cac:	6818      	ldr	r0, [r3, #0]
 8009cae:	f7ff bfd2 	b.w	8009c56 <_raise_r>
 8009cb2:	bf00      	nop
 8009cb4:	20000064 	.word	0x20000064

08009cb8 <_kill_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4d07      	ldr	r5, [pc, #28]	; (8009cd8 <_kill_r+0x20>)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	602b      	str	r3, [r5, #0]
 8009cc6:	f7f7 ff67 	bl	8001b98 <_kill>
 8009cca:	1c43      	adds	r3, r0, #1
 8009ccc:	d102      	bne.n	8009cd4 <_kill_r+0x1c>
 8009cce:	682b      	ldr	r3, [r5, #0]
 8009cd0:	b103      	cbz	r3, 8009cd4 <_kill_r+0x1c>
 8009cd2:	6023      	str	r3, [r4, #0]
 8009cd4:	bd38      	pop	{r3, r4, r5, pc}
 8009cd6:	bf00      	nop
 8009cd8:	2000058c 	.word	0x2000058c

08009cdc <_getpid_r>:
 8009cdc:	f7f7 bf54 	b.w	8001b88 <_getpid>

08009ce0 <_init>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	bf00      	nop
 8009ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce6:	bc08      	pop	{r3}
 8009ce8:	469e      	mov	lr, r3
 8009cea:	4770      	bx	lr

08009cec <_fini>:
 8009cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cee:	bf00      	nop
 8009cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf2:	bc08      	pop	{r3}
 8009cf4:	469e      	mov	lr, r3
 8009cf6:	4770      	bx	lr
