
Indus_Board_all_Peripherals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800b788  0800b788  0001b788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bba4  0800bba4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bba4  0800bba4  0001bba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbac  0800bbac  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbac  0800bbac  0001bbac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbb0  0800bbb0  0001bbb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800bbb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  200001d8  0800bd8c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800bd8c  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef9b  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398a  00000000  00000000  0003f1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc0  00000000  00000000  00042b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015a8  00000000  00000000  00044730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004999  00000000  00000000  00045cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020738  00000000  00000000  0004a671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4cfd  00000000  00000000  0006ada9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089b8  00000000  00000000  0014faa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00158460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b770 	.word	0x0800b770

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800b770 	.word	0x0800b770

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <__io_putchar>:
 * @brief //Modified Function Prototype for Printf
 * @param none
 * @return None
 **************************************************************************/
PUTCHAR_PROTOTYPE
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f02:	2201      	movs	r2, #1
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <__io_putchar+0x20>)
 8000f06:	f006 fb95 	bl	8007634 <HAL_UART_Transmit>
  return ch;
 8000f0a:	687b      	ldr	r3, [r7, #4]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000408 	.word	0x20000408

08000f18 <getinput>:
uint16_t TTemp = 0;
uint16_t THumd = 0;



void getinput(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000f1c:	2140      	movs	r1, #64	; 0x40
 8000f1e:	482b      	ldr	r0, [pc, #172]	; (8000fcc <getinput+0xb4>)
 8000f20:	f003 faec 	bl	80044fc <HAL_GPIO_ReadPin>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d114      	bne.n	8000f54 <getinput+0x3c>
		HAL_ADC_Start(&hadc1);
 8000f2a:	4829      	ldr	r0, [pc, #164]	; (8000fd0 <getinput+0xb8>)
 8000f2c:	f001 ff0c 	bl	8002d48 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,1000);
 8000f30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f34:	4826      	ldr	r0, [pc, #152]	; (8000fd0 <getinput+0xb8>)
 8000f36:	f001 ffc3 	bl	8002ec0 <HAL_ADC_PollForConversion>
		TTemp = (HAL_ADC_GetValue(&hadc1) / 160) + 20;
 8000f3a:	4825      	ldr	r0, [pc, #148]	; (8000fd0 <getinput+0xb8>)
 8000f3c:	f002 f898 	bl	8003070 <HAL_ADC_GetValue>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <getinput+0xbc>)
 8000f44:	fba2 2303 	umull	r2, r3, r2, r3
 8000f48:	09db      	lsrs	r3, r3, #7
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	3314      	adds	r3, #20
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <getinput+0xc0>)
 8000f52:	801a      	strh	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	481d      	ldr	r0, [pc, #116]	; (8000fcc <getinput+0xb4>)
 8000f58:	f003 fad0 	bl	80044fc <HAL_GPIO_ReadPin>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d112      	bne.n	8000f88 <getinput+0x70>
			HAL_ADC_Start(&hadc1);
 8000f62:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <getinput+0xb8>)
 8000f64:	f001 fef0 	bl	8002d48 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1,1000);
 8000f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f6c:	4818      	ldr	r0, [pc, #96]	; (8000fd0 <getinput+0xb8>)
 8000f6e:	f001 ffa7 	bl	8002ec0 <HAL_ADC_PollForConversion>
			THumd = HAL_ADC_GetValue(&hadc1) / 40;
 8000f72:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <getinput+0xb8>)
 8000f74:	f002 f87c 	bl	8003070 <HAL_ADC_GetValue>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <getinput+0xbc>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	095b      	lsrs	r3, r3, #5
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <getinput+0xc4>)
 8000f86:	801a      	strh	r2, [r3, #0]
		}

	GetDeviceIDSht21();
 8000f88:	f000 fd9a 	bl	8001ac0 <GetDeviceIDSht21>
	GetSlaveAcknowledgment();
 8000f8c:	f000 fd6e 	bl	8001a6c <GetSlaveAcknowledgment>
	GetTempratureSht21();
 8000f90:	f000 fdc4 	bl	8001b1c <GetTempratureSht21>
	GetHumidyShtc3();
 8000f94:	f000 fe0a 	bl	8001bac <GetHumidyShtc3>
	temp = Read_Temprature() / 1000;
 8000f98:	f000 fe76 	bl	8001c88 <Read_Temprature>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <getinput+0xc8>)
 8000fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa4:	1192      	asrs	r2, r2, #6
 8000fa6:	17db      	asrs	r3, r3, #31
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <getinput+0xcc>)
 8000fae:	801a      	strh	r2, [r3, #0]
	humd = Read_Humidity() / 1000;
 8000fb0:	f000 fe96 	bl	8001ce0 <Read_Humidity>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <getinput+0xc8>)
 8000fb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fbc:	1192      	asrs	r2, r2, #6
 8000fbe:	17db      	asrs	r3, r3, #31
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <getinput+0xd0>)
 8000fc6:	801a      	strh	r2, [r3, #0]


}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	200001f4 	.word	0x200001f4
 8000fd4:	cccccccd 	.word	0xcccccccd
 8000fd8:	2000049c 	.word	0x2000049c
 8000fdc:	2000049e 	.word	0x2000049e
 8000fe0:	10624dd3 	.word	0x10624dd3
 8000fe4:	20000498 	.word	0x20000498
 8000fe8:	2000049a 	.word	0x2000049a

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff2:	f001 fa5c 	bl	80024ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff6:	f000 f93f 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffa:	f000 fc61 	bl	80018c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ffe:	f000 f97b 	bl	80012f8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001002:	f000 f9f1 	bl	80013e8 <MX_DAC1_Init>
  MX_I2C2_Init();
 8001006:	f000 fa29 	bl	800145c <MX_I2C2_Init>
  MX_SPI2_Init();
 800100a:	f000 faa7 	bl	800155c <MX_SPI2_Init>
  MX_TIM1_Init();
 800100e:	f000 fae3 	bl	80015d8 <MX_TIM1_Init>
  MX_TIM16_Init();
 8001012:	f000 fb91 	bl	8001738 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8001016:	f000 fc07 	bl	8001828 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800101a:	f000 fa5f 	bl	80014dc <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 800101e:	f000 f8a0 	bl	8001162 <lcd_init>
  lcd_backlight(1); // Turn on backlight
 8001022:	2001      	movs	r0, #1
 8001024:	f000 f910 	bl	8001248 <lcd_backlight>
  uint16_t Data = 10;
 8001028:	230a      	movs	r3, #10
 800102a:	82fb      	strh	r3, [r7, #22]
  char *text = "EmbeddedThere";
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <main+0x70>)
 800102e:	613b      	str	r3, [r7, #16]
  char int_to_str[10];
  sprintf(int_to_str, "%d", Data);
 8001030:	8afa      	ldrh	r2, [r7, #22]
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	490a      	ldr	r1, [pc, #40]	; (8001060 <main+0x74>)
 8001036:	4618      	mov	r0, r3
 8001038:	f008 fa3c 	bl	80094b4 <siprintf>

  lcd_clear();
 800103c:	f000 f8fa 	bl	8001234 <lcd_clear>
  lcd_set_cursor(0, 0);
 8001040:	2100      	movs	r1, #0
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f8d1 	bl	80011ea <lcd_set_cursor>
  lcd_write_string(text);
 8001048:	6938      	ldr	r0, [r7, #16]
 800104a:	f000 f8b9 	bl	80011c0 <lcd_write_string>
  lcd_write_string(int_to_str);
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8b5 	bl	80011c0 <lcd_write_string>

  while (1){
    /* USER CODE END WHILE */
	  getinput();
 8001056:	f7ff ff5f 	bl	8000f18 <getinput>
 800105a:	e7fc      	b.n	8001056 <main+0x6a>
 800105c:	0800b788 	.word	0x0800b788
 8001060:	0800b798 	.word	0x0800b798

08001064 <lcd_write_nibble>:

  }
  /* USER CODE END 3 */
}

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	b2db      	uxtb	r3, r3
 800107a:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	4313      	orrs	r3, r2
 8001082:	b2db      	uxtb	r3, r3
 8001084:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <lcd_write_nibble+0x7c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	b25a      	sxtb	r2, r3
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	b25b      	sxtb	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b25b      	sxtb	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR << 1, &data, 1, 100);
 80010a4:	f107 020f 	add.w	r2, r7, #15
 80010a8:	2364      	movs	r3, #100	; 0x64
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2301      	movs	r3, #1
 80010ae:	214e      	movs	r1, #78	; 0x4e
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <lcd_write_nibble+0x80>)
 80010b2:	f003 fb05 	bl	80046c0 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f001 fa6a 	bl	8002590 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	f023 0304 	bic.w	r3, r3, #4
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c3, I2C_ADDR << 1, &data, 1, 100);
 80010c6:	f107 020f 	add.w	r2, r7, #15
 80010ca:	2364      	movs	r3, #100	; 0x64
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	214e      	movs	r1, #78	; 0x4e
 80010d2:	4804      	ldr	r0, [pc, #16]	; (80010e4 <lcd_write_nibble+0x80>)
 80010d4:	f003 faf4 	bl	80046c0 <HAL_I2C_Master_Transmit>
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000000 	.word	0x20000000
 80010e4:	200002c0 	.word	0x200002c0

080010e8 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ffad 	bl	8001064 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffa8 	bl	8001064 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d002      	beq.n	8001120 <lcd_send_cmd+0x38>
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d102      	bne.n	8001126 <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 8001120:	2002      	movs	r0, #2
 8001122:	f001 fa35 	bl	8002590 <HAL_Delay>
  }
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff8a 	bl	8001064 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	2101      	movs	r1, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff85 	bl	8001064 <lcd_write_nibble>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <lcd_init>:

void lcd_init() {
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8001166:	2032      	movs	r0, #50	; 0x32
 8001168:	f001 fa12 	bl	8002590 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800116c:	2100      	movs	r1, #0
 800116e:	2003      	movs	r0, #3
 8001170:	f7ff ff78 	bl	8001064 <lcd_write_nibble>
  HAL_Delay(5);
 8001174:	2005      	movs	r0, #5
 8001176:	f001 fa0b 	bl	8002590 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800117a:	2100      	movs	r1, #0
 800117c:	2003      	movs	r0, #3
 800117e:	f7ff ff71 	bl	8001064 <lcd_write_nibble>
  HAL_Delay(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f001 fa04 	bl	8002590 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8001188:	2100      	movs	r1, #0
 800118a:	2003      	movs	r0, #3
 800118c:	f7ff ff6a 	bl	8001064 <lcd_write_nibble>
  HAL_Delay(1);
 8001190:	2001      	movs	r0, #1
 8001192:	f001 f9fd 	bl	8002590 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8001196:	2100      	movs	r1, #0
 8001198:	2002      	movs	r0, #2
 800119a:	f7ff ff63 	bl	8001064 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 800119e:	2028      	movs	r0, #40	; 0x28
 80011a0:	f7ff ffa2 	bl	80010e8 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 80011a4:	200c      	movs	r0, #12
 80011a6:	f7ff ff9f 	bl	80010e8 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 80011aa:	2006      	movs	r0, #6
 80011ac:	f7ff ff9c 	bl	80010e8 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f7ff ff99 	bl	80010e8 <lcd_send_cmd>
  HAL_Delay(2);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f001 f9ea 	bl	8002590 <HAL_Delay>
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <lcd_write_string>:

void lcd_write_string(char *str) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  while (*str) {
 80011c8:	e006      	b.n	80011d8 <lcd_write_string+0x18>
    lcd_send_data(*str++);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ffab 	bl	800112e <lcd_send_data>
  while (*str) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f4      	bne.n	80011ca <lcd_write_string+0xa>
  }
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	460a      	mov	r2, r1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	4613      	mov	r3, r2
 80011f8:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <lcd_set_cursor+0x1c>
 8001200:	2b01      	cmp	r3, #1
 8001202:	d003      	beq.n	800120c <lcd_set_cursor+0x22>
 8001204:	e005      	b.n	8001212 <lcd_set_cursor+0x28>
        case 0:
            address = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]
            break;
 800120a:	e004      	b.n	8001216 <lcd_set_cursor+0x2c>
        case 1:
            address = 0x40;
 800120c:	2340      	movs	r3, #64	; 0x40
 800120e:	73fb      	strb	r3, [r7, #15]
            break;
 8001210:	e001      	b.n	8001216 <lcd_set_cursor+0x2c>
        default:
            address = 0x00;
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	4413      	add	r3, r2
 800121c:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff5e 	bl	80010e8 <lcd_send_cmd>
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <lcd_clear>:

void lcd_clear(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff ff55 	bl	80010e8 <lcd_send_cmd>
    HAL_Delay(2);
 800123e:	2002      	movs	r0, #2
 8001240:	f001 f9a6 	bl	8002590 <HAL_Delay>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <lcd_backlight>:

void lcd_backlight(uint8_t state) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if (state) {
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <lcd_backlight+0x18>
    backlight_state = 1;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <lcd_backlight+0x2c>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = 0;
  }
}
 800125e:	e002      	b.n	8001266 <lcd_backlight+0x1e>
    backlight_state = 0;
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <lcd_backlight+0x2c>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000000 	.word	0x20000000

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	2238      	movs	r2, #56	; 0x38
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f008 f977 	bl	800957a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800129e:	f004 f811 	bl	80052c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ac:	2340      	movs	r3, #64	; 0x40
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 f8b7 	bl	800542c <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80012c4:	f000 fbcc 	bl	8001a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 fbbb 	bl	8005a5c <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80012ec:	f000 fbb8 	bl	8001a60 <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3750      	adds	r7, #80	; 0x50
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	; 0x30
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2220      	movs	r2, #32
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f008 f932 	bl	800957a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001318:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800131c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001320:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001324:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001326:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <MX_ADC1_Init+0xe8>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001332:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <MX_ADC1_Init+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001340:	2204      	movs	r2, #4
 8001342:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001346:	2200      	movs	r2, #0
 8001348:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <MX_ADC1_Init+0xe8>)
 800134c:	2200      	movs	r2, #0
 800134e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001352:	2201      	movs	r2, #1
 8001354:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001360:	2200      	movs	r2, #0
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <MX_ADC1_Init+0xe8>)
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_ADC1_Init+0xe8>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001380:	4817      	ldr	r0, [pc, #92]	; (80013e0 <MX_ADC1_Init+0xe8>)
 8001382:	f001 fb57 	bl	8002a34 <HAL_ADC_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800138c:	f000 fb68 	bl	8001a60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <MX_ADC1_Init+0xe8>)
 800139c:	f002 faee 	bl	800397c <HAL_ADCEx_MultiModeConfigChannel>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80013a6:	f000 fb5b 	bl	8001a60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_ADC1_Init+0xec>)
 80013ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ae:	2306      	movs	r3, #6
 80013b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013b6:	237f      	movs	r3, #127	; 0x7f
 80013b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ba:	2304      	movs	r3, #4
 80013bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_ADC1_Init+0xe8>)
 80013c8:	f001 fe60 	bl	800308c <HAL_ADC_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013d2:	f000 fb45 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	; 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200001f4 	.word	0x200001f4
 80013e4:	04300002 	.word	0x04300002

080013e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2230      	movs	r2, #48	; 0x30
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f008 f8c0 	bl	800957a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_DAC1_Init+0x6c>)
 80013fc:	4a16      	ldr	r2, [pc, #88]	; (8001458 <MX_DAC1_Init+0x70>)
 80013fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001400:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_DAC1_Init+0x6c>)
 8001402:	f002 fc6e 	bl	8003ce2 <HAL_DAC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800140c:	f000 fb28 	bl	8001a60 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001410:	2302      	movs	r3, #2
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_DAC1_Init+0x6c>)
 800143c:	f002 fc74 	bl	8003d28 <HAL_DAC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001446:	f000 fb0b 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3730      	adds	r7, #48	; 0x30
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000260 	.word	0x20000260
 8001458:	50000800 	.word	0x50000800

0800145c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_I2C2_Init+0x74>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <MX_I2C2_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_I2C2_Init+0x74>)
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <MX_I2C2_Init+0x7c>)
 800146a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_I2C2_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_I2C2_Init+0x74>)
 8001474:	2201      	movs	r2, #1
 8001476:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_I2C2_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_I2C2_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C2_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C2_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C2_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001496:	480e      	ldr	r0, [pc, #56]	; (80014d0 <MX_I2C2_Init+0x74>)
 8001498:	f003 f883 	bl	80045a2 <HAL_I2C_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014a2:	f000 fadd 	bl	8001a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <MX_I2C2_Init+0x74>)
 80014aa:	f003 fe73 	bl	8005194 <HAL_I2CEx_ConfigAnalogFilter>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014b4:	f000 fad4 	bl	8001a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014b8:	2100      	movs	r1, #0
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_I2C2_Init+0x74>)
 80014bc:	f003 feb5 	bl	800522a <HAL_I2CEx_ConfigDigitalFilter>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 facb 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000274 	.word	0x20000274
 80014d4:	40005800 	.word	0x40005800
 80014d8:	00303d5b 	.word	0x00303d5b

080014dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_I2C3_Init+0x74>)
 80014e2:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <MX_I2C3_Init+0x78>)
 80014e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_I2C3_Init+0x74>)
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <MX_I2C3_Init+0x7c>)
 80014ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_I2C3_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_I2C3_Init+0x74>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_I2C3_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_I2C3_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_I2C3_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_I2C3_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_I2C3_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001516:	480e      	ldr	r0, [pc, #56]	; (8001550 <MX_I2C3_Init+0x74>)
 8001518:	f003 f843 	bl	80045a2 <HAL_I2C_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001522:	f000 fa9d 	bl	8001a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001526:	2100      	movs	r1, #0
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <MX_I2C3_Init+0x74>)
 800152a:	f003 fe33 	bl	8005194 <HAL_I2CEx_ConfigAnalogFilter>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001534:	f000 fa94 	bl	8001a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001538:	2100      	movs	r1, #0
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_I2C3_Init+0x74>)
 800153c:	f003 fe75 	bl	800522a <HAL_I2CEx_ConfigDigitalFilter>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001546:	f000 fa8b 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002c0 	.word	0x200002c0
 8001554:	40007800 	.word	0x40007800
 8001558:	00303d5b 	.word	0x00303d5b

0800155c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_SPI2_Init+0x74>)
 8001562:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <MX_SPI2_Init+0x78>)
 8001564:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_SPI2_Init+0x74>)
 8001568:	f44f 7282 	mov.w	r2, #260	; 0x104
 800156c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_SPI2_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_SPI2_Init+0x74>)
 8001576:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800157a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_SPI2_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_SPI2_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_SPI2_Init+0x74>)
 800158a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_SPI2_Init+0x74>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_SPI2_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_SPI2_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_SPI2_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_SPI2_Init+0x74>)
 80015aa:	2207      	movs	r2, #7
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_SPI2_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_SPI2_Init+0x74>)
 80015b6:	2208      	movs	r2, #8
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_SPI2_Init+0x74>)
 80015bc:	f004 fe5a 	bl	8006274 <HAL_SPI_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015c6:	f000 fa4b 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000030c 	.word	0x2000030c
 80015d4:	40003800 	.word	0x40003800

080015d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b09c      	sub	sp, #112	; 0x70
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
 8001608:	615a      	str	r2, [r3, #20]
 800160a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2234      	movs	r2, #52	; 0x34
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f007 ffb1 	bl	800957a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001618:	4b45      	ldr	r3, [pc, #276]	; (8001730 <MX_TIM1_Init+0x158>)
 800161a:	4a46      	ldr	r2, [pc, #280]	; (8001734 <MX_TIM1_Init+0x15c>)
 800161c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800161e:	4b44      	ldr	r3, [pc, #272]	; (8001730 <MX_TIM1_Init+0x158>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b42      	ldr	r3, [pc, #264]	; (8001730 <MX_TIM1_Init+0x158>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <MX_TIM1_Init+0x158>)
 800162c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001630:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <MX_TIM1_Init+0x158>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001638:	4b3d      	ldr	r3, [pc, #244]	; (8001730 <MX_TIM1_Init+0x158>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163e:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <MX_TIM1_Init+0x158>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001644:	483a      	ldr	r0, [pc, #232]	; (8001730 <MX_TIM1_Init+0x158>)
 8001646:	f004 fec0 	bl	80063ca <HAL_TIM_Base_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001650:	f000 fa06 	bl	8001a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001658:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800165a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800165e:	4619      	mov	r1, r3
 8001660:	4833      	ldr	r0, [pc, #204]	; (8001730 <MX_TIM1_Init+0x158>)
 8001662:	f005 f959 	bl	8006918 <HAL_TIM_ConfigClockSource>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800166c:	f000 f9f8 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001670:	482f      	ldr	r0, [pc, #188]	; (8001730 <MX_TIM1_Init+0x158>)
 8001672:	f004 ff62 	bl	800653a <HAL_TIM_PWM_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800167c:	f000 f9f0 	bl	8001a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800168c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001690:	4619      	mov	r1, r3
 8001692:	4827      	ldr	r0, [pc, #156]	; (8001730 <MX_TIM1_Init+0x158>)
 8001694:	f005 fe5c 	bl	8007350 <HAL_TIMEx_MasterConfigSynchronization>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800169e:	f000 f9df 	bl	8001a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a2:	2360      	movs	r3, #96	; 0x60
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016aa:	2300      	movs	r3, #0
 80016ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016c2:	2204      	movs	r2, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	481a      	ldr	r0, [pc, #104]	; (8001730 <MX_TIM1_Init+0x158>)
 80016c8:	f005 f812 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80016d2:	f000 f9c5 	bl	8001a60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001706:	2300      	movs	r3, #0
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM1_Init+0x158>)
 8001714:	f005 fe9e 	bl	8007454 <HAL_TIMEx_ConfigBreakDeadTime>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800171e:	f000 f99f 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM1_Init+0x158>)
 8001724:	f000 fce8 	bl	80020f8 <HAL_TIM_MspPostInit>

}
 8001728:	bf00      	nop
 800172a:	3770      	adds	r7, #112	; 0x70
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000370 	.word	0x20000370
 8001734:	40012c00 	.word	0x40012c00

08001738 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b094      	sub	sp, #80	; 0x50
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800173e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001752:	463b      	mov	r3, r7
 8001754:	2234      	movs	r2, #52	; 0x34
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f007 ff0e 	bl	800957a <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <MX_TIM16_Init+0xe8>)
 8001760:	4a30      	ldr	r2, [pc, #192]	; (8001824 <MX_TIM16_Init+0xec>)
 8001762:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 37000;
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <MX_TIM16_Init+0xe8>)
 8001766:	f249 0288 	movw	r2, #37000	; 0x9088
 800176a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <MX_TIM16_Init+0xe8>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001772:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <MX_TIM16_Init+0xe8>)
 8001774:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001778:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <MX_TIM16_Init+0xe8>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <MX_TIM16_Init+0xe8>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <MX_TIM16_Init+0xe8>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800178c:	4824      	ldr	r0, [pc, #144]	; (8001820 <MX_TIM16_Init+0xe8>)
 800178e:	f004 fe1c 	bl	80063ca <HAL_TIM_Base_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8001798:	f000 f962 	bl	8001a60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800179c:	4820      	ldr	r0, [pc, #128]	; (8001820 <MX_TIM16_Init+0xe8>)
 800179e:	f004 fe6b 	bl	8006478 <HAL_TIM_OC_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 80017a8:	f000 f95a 	bl	8001a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80017ac:	2330      	movs	r3, #48	; 0x30
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017cc:	2200      	movs	r2, #0
 80017ce:	4619      	mov	r1, r3
 80017d0:	4813      	ldr	r0, [pc, #76]	; (8001820 <MX_TIM16_Init+0xe8>)
 80017d2:	f004 ff13 	bl	80065fc <HAL_TIM_OC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80017dc:	f000 f940 	bl	8001a60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001802:	463b      	mov	r3, r7
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <MX_TIM16_Init+0xe8>)
 8001808:	f005 fe24 	bl	8007454 <HAL_TIMEx_ConfigBreakDeadTime>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8001812:	f000 f925 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3750      	adds	r7, #80	; 0x50
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200003bc 	.word	0x200003bc
 8001824:	40014400 	.word	0x40014400

08001828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 800182e:	4a23      	ldr	r2, [pc, #140]	; (80018bc <MX_USART1_UART_Init+0x94>)
 8001830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001870:	4811      	ldr	r0, [pc, #68]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 8001872:	f005 fe8f 	bl	8007594 <HAL_UART_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800187c:	f000 f8f0 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001880:	2100      	movs	r1, #0
 8001882:	480d      	ldr	r0, [pc, #52]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 8001884:	f007 f823 	bl	80088ce <HAL_UARTEx_SetTxFifoThreshold>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800188e:	f000 f8e7 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001892:	2100      	movs	r1, #0
 8001894:	4808      	ldr	r0, [pc, #32]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 8001896:	f007 f858 	bl	800894a <HAL_UARTEx_SetRxFifoThreshold>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80018a0:	f000 f8de 	bl	8001a60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MX_USART1_UART_Init+0x90>)
 80018a6:	f006 ffd9 	bl	800885c <HAL_UARTEx_DisableFifoMode>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80018b0:	f000 f8d6 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000408 	.word	0x20000408
 80018bc:	40013800 	.word	0x40013800

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <MX_GPIO_Init+0x18c>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a5c      	ldr	r2, [pc, #368]	; (8001a4c <MX_GPIO_Init+0x18c>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <MX_GPIO_Init+0x18c>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <MX_GPIO_Init+0x18c>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a56      	ldr	r2, [pc, #344]	; (8001a4c <MX_GPIO_Init+0x18c>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <MX_GPIO_Init+0x18c>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <MX_GPIO_Init+0x18c>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a50      	ldr	r2, [pc, #320]	; (8001a4c <MX_GPIO_Init+0x18c>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001912:	4b4e      	ldr	r3, [pc, #312]	; (8001a4c <MX_GPIO_Init+0x18c>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800191e:	4b4b      	ldr	r3, [pc, #300]	; (8001a4c <MX_GPIO_Init+0x18c>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a4a      	ldr	r2, [pc, #296]	; (8001a4c <MX_GPIO_Init+0x18c>)
 8001924:	f043 0310 	orr.w	r3, r3, #16
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <MX_GPIO_Init+0x18c>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <MX_GPIO_Init+0x18c>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <MX_GPIO_Init+0x18c>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <MX_GPIO_Init+0x18c>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
 8001954:	483e      	ldr	r0, [pc, #248]	; (8001a50 <MX_GPIO_Init+0x190>)
 8001956:	f002 fde9 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2136      	movs	r1, #54	; 0x36
 800195e:	483d      	ldr	r0, [pc, #244]	; (8001a54 <MX_GPIO_Init+0x194>)
 8001960:	f002 fde4 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800196a:	483b      	ldr	r0, [pc, #236]	; (8001a58 <MX_GPIO_Init+0x198>)
 800196c:	f002 fdde 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001976:	4839      	ldr	r0, [pc, #228]	; (8001a5c <MX_GPIO_Init+0x19c>)
 8001978:	f002 fdd8 	bl	800452c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 800197c:	f44f 5303 	mov.w	r3, #8384	; 0x20c0
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	482e      	ldr	r0, [pc, #184]	; (8001a50 <MX_GPIO_Init+0x190>)
 8001996:	f002 fc2f 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800199a:	230c      	movs	r3, #12
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800199e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	4828      	ldr	r0, [pc, #160]	; (8001a50 <MX_GPIO_Init+0x190>)
 80019b0:	f002 fc22 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 80019b4:	2336      	movs	r3, #54	; 0x36
 80019b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4822      	ldr	r0, [pc, #136]	; (8001a54 <MX_GPIO_Init+0x194>)
 80019cc:	f002 fc14 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80019d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	481b      	ldr	r0, [pc, #108]	; (8001a58 <MX_GPIO_Init+0x198>)
 80019ea:	f002 fc05 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80019ee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4815      	ldr	r0, [pc, #84]	; (8001a5c <MX_GPIO_Init+0x19c>)
 8001a08:	f002 fbf6 	bl	80041f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a0c:	23c0      	movs	r3, #192	; 0xc0
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <MX_GPIO_Init+0x194>)
 8001a20:	f002 fbea 	bl	80041f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	2008      	movs	r0, #8
 8001a2a:	f002 f926 	bl	8003c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a2e:	2008      	movs	r0, #8
 8001a30:	f002 f93d 	bl	8003cae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2009      	movs	r0, #9
 8001a3a:	f002 f91e 	bl	8003c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a3e:	2009      	movs	r0, #9
 8001a40:	f002 f935 	bl	8003cae <HAL_NVIC_EnableIRQ>

}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	48000800 	.word	0x48000800
 8001a54:	48000400 	.word	0x48000400
 8001a58:	48001000 	.word	0x48001000
 8001a5c:	48000c00 	.word	0x48000c00

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <Error_Handler+0x8>
	...

08001a6c <GetSlaveAcknowledgment>:
 * @brief To get acknowledment from slave(Sensor)
 * @param None
 * @return None
 ******************************************************************************
 */
void GetSlaveAcknowledgment(){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
	char buffer10[32];
		if (HAL_OK == Device_check())
 8001a72:	f000 f961 	bl	8001d38 <Device_check>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10b      	bne.n	8001a94 <GetSlaveAcknowledgment+0x28>
  {
    	  sprintf(buffer10,"\n\rSHTC3 Device Ready");
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <GetSlaveAcknowledgment+0x48>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f007 fd17 	bl	80094b4 <siprintf>
    	  HAL_UART_Transmit(&huart1, (uint8_t *)buffer10, 20, 100);
 8001a86:	4639      	mov	r1, r7
 8001a88:	2364      	movs	r3, #100	; 0x64
 8001a8a:	2214      	movs	r2, #20
 8001a8c:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <GetSlaveAcknowledgment+0x4c>)
 8001a8e:	f005 fdd1 	bl	8007634 <HAL_UART_Transmit>
    }
    else{
    	  sprintf(buffer10,"\n\rSHTC3 Device Not Ready");
    	  HAL_UART_Transmit(&huart1,(uint8_t *) buffer10, 20, 100);
    }
}
 8001a92:	e00a      	b.n	8001aaa <GetSlaveAcknowledgment+0x3e>
    	  sprintf(buffer10,"\n\rSHTC3 Device Not Ready");
 8001a94:	463b      	mov	r3, r7
 8001a96:	4909      	ldr	r1, [pc, #36]	; (8001abc <GetSlaveAcknowledgment+0x50>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f007 fd0b 	bl	80094b4 <siprintf>
    	  HAL_UART_Transmit(&huart1,(uint8_t *) buffer10, 20, 100);
 8001a9e:	4639      	mov	r1, r7
 8001aa0:	2364      	movs	r3, #100	; 0x64
 8001aa2:	2214      	movs	r2, #20
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <GetSlaveAcknowledgment+0x4c>)
 8001aa6:	f005 fdc5 	bl	8007634 <HAL_UART_Transmit>
}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	0800b79c 	.word	0x0800b79c
 8001ab8:	20000408 	.word	0x20000408
 8001abc:	0800b7b4 	.word	0x0800b7b4

08001ac0 <GetDeviceIDSht21>:
 * @brief To get device(Sensor)ID
 * @param None
 * @return None
 ******************************************************************************
 */
void GetDeviceIDSht21(){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
char buffer8[32]={0};
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	619a      	str	r2, [r3, #24]
	uint16_t buffer7=0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	84fb      	strh	r3, [r7, #38]	; 0x26
buffer7 = Read_Device_Id();
 8001ae2:	f000 f8a5 	bl	8001c30 <Read_Device_Id>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	84fb      	strh	r3, [r7, #38]	; 0x26
	  sprintf(buffer8,"\n\rID-%x",buffer7);
 8001aea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	4909      	ldr	r1, [pc, #36]	; (8001b14 <GetDeviceIDSht21+0x54>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f007 fcdf 	bl	80094b4 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)buffer8,11,100);
 8001af6:	1d39      	adds	r1, r7, #4
 8001af8:	2364      	movs	r3, #100	; 0x64
 8001afa:	220b      	movs	r2, #11
 8001afc:	4806      	ldr	r0, [pc, #24]	; (8001b18 <GetDeviceIDSht21+0x58>)
 8001afe:	f005 fd99 	bl	8007634 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b06:	f000 fd43 	bl	8002590 <HAL_Delay>
}
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	; 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	0800b7d0 	.word	0x0800b7d0
 8001b18:	20000408 	.word	0x20000408

08001b1c <GetTempratureSht21>:
 * @brief To get Temperature value
 * @param None
 * @return None
 ******************************************************************************
 */
void GetTempratureSht21(){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
char buffer8[27]={0};
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	f8c3 2013 	str.w	r2, [r3, #19]
	uint16_t buffer7 = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	83fb      	strh	r3, [r7, #30]
buffer7 = Read_Temprature();
 8001b3c:	f000 f8a4 	bl	8001c88 <Read_Temprature>
 8001b40:	4603      	mov	r3, r0
 8001b42:	83fb      	strh	r3, [r7, #30]
	buffer7 = 175 * (float)buffer7 / 65536.0f - 45.0f;
 8001b44:	8bfb      	ldrh	r3, [r7, #30]
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b4e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001b98 <GetTempratureSht21+0x7c>
 8001b52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b56:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001b9c <GetTempratureSht21+0x80>
 8001b5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001ba0 <GetTempratureSht21+0x84>
 8001b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b6a:	ee17 3a90 	vmov	r3, s15
 8001b6e:	83fb      	strh	r3, [r7, #30]
	  sprintf(buffer8,"\n\rTemp->%d",buffer7);
 8001b70:	8bfa      	ldrh	r2, [r7, #30]
 8001b72:	463b      	mov	r3, r7
 8001b74:	490b      	ldr	r1, [pc, #44]	; (8001ba4 <GetTempratureSht21+0x88>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f007 fc9c 	bl	80094b4 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)buffer8,11,100);
 8001b7c:	4639      	mov	r1, r7
 8001b7e:	2364      	movs	r3, #100	; 0x64
 8001b80:	220b      	movs	r2, #11
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <GetTempratureSht21+0x8c>)
 8001b84:	f005 fd56 	bl	8007634 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001b88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b8c:	f000 fd00 	bl	8002590 <HAL_Delay>
}
 8001b90:	bf00      	nop
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	432f0000 	.word	0x432f0000
 8001b9c:	47800000 	.word	0x47800000
 8001ba0:	42340000 	.word	0x42340000
 8001ba4:	0800b7d8 	.word	0x0800b7d8
 8001ba8:	20000408 	.word	0x20000408

08001bac <GetHumidyShtc3>:
 * @brief To get Relative Humidity Value
 * @param None
 * @return None
 ******************************************************************************
 */
void GetHumidyShtc3(){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
char buffer8[27]={0};
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
 8001bc4:	f8c3 2013 	str.w	r2, [r3, #19]
uint16_t buffer17 = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	83fb      	strh	r3, [r7, #30]
buffer17 = Read_Humidity();
 8001bcc:	f000 f888 	bl	8001ce0 <Read_Humidity>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	83fb      	strh	r3, [r7, #30]
	buffer17 = 100 * (float)buffer17 / 65536.0f;
 8001bd4:	8bfb      	ldrh	r3, [r7, #30]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bde:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001c20 <GetHumidyShtc3+0x74>
 8001be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001be6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001c24 <GetHumidyShtc3+0x78>
 8001bea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf2:	ee17 3a90 	vmov	r3, s15
 8001bf6:	83fb      	strh	r3, [r7, #30]
	sprintf(buffer8,"\n\rRH-%d %%",buffer17);
 8001bf8:	8bfa      	ldrh	r2, [r7, #30]
 8001bfa:	463b      	mov	r3, r7
 8001bfc:	490a      	ldr	r1, [pc, #40]	; (8001c28 <GetHumidyShtc3+0x7c>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f007 fc58 	bl	80094b4 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)buffer8,11,100);
 8001c04:	4639      	mov	r1, r7
 8001c06:	2364      	movs	r3, #100	; 0x64
 8001c08:	220b      	movs	r2, #11
 8001c0a:	4808      	ldr	r0, [pc, #32]	; (8001c2c <GetHumidyShtc3+0x80>)
 8001c0c:	f005 fd12 	bl	8007634 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c14:	f000 fcbc 	bl	8002590 <HAL_Delay>
}
 8001c18:	bf00      	nop
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	42c80000 	.word	0x42c80000
 8001c24:	47800000 	.word	0x47800000
 8001c28:	0800b7e4 	.word	0x0800b7e4
 8001c2c:	20000408 	.word	0x20000408

08001c30 <Read_Device_Id>:


/*API for sensing temperature*/
uint16_t Read_Device_Id(void){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af02      	add	r7, sp, #8
		uint8_t command1[2];
			uint8_t Rx_buf[2];
    uint16_t data=0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	80fb      	strh	r3, [r7, #6]
	command1[0]=CMD19;
 8001c3a:	23ef      	movs	r3, #239	; 0xef
 8001c3c:	713b      	strb	r3, [r7, #4]
	command1[1]=CMD20;
 8001c3e:	23c8      	movs	r3, #200	; 0xc8
 8001c40:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit(&hi2c2,SLAVEADDERESS,&command1[0],2,100);
 8001c42:	1d3a      	adds	r2, r7, #4
 8001c44:	2364      	movs	r3, #100	; 0x64
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2302      	movs	r3, #2
 8001c4a:	21e0      	movs	r1, #224	; 0xe0
 8001c4c:	480d      	ldr	r0, [pc, #52]	; (8001c84 <Read_Device_Id+0x54>)
 8001c4e:	f002 fd37 	bl	80046c0 <HAL_I2C_Master_Transmit>
HAL_Delay(100);
 8001c52:	2064      	movs	r0, #100	; 0x64
 8001c54:	f000 fc9c 	bl	8002590 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2,SLAVEADDERESS,Rx_buf,2,100);                 //HAL API fro i2c master Rx
 8001c58:	463a      	mov	r2, r7
 8001c5a:	2364      	movs	r3, #100	; 0x64
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2302      	movs	r3, #2
 8001c60:	21e0      	movs	r1, #224	; 0xe0
 8001c62:	4808      	ldr	r0, [pc, #32]	; (8001c84 <Read_Device_Id+0x54>)
 8001c64:	f002 fe20 	bl	80048a8 <HAL_I2C_Master_Receive>
		data = ((Rx_buf[0]<<8)|Rx_buf[1]);
 8001c68:	783b      	ldrb	r3, [r7, #0]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	787b      	ldrb	r3, [r7, #1]
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4313      	orrs	r3, r2
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	80fb      	strh	r3, [r7, #6]
		return data;
 8001c78:	88fb      	ldrh	r3, [r7, #6]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000274 	.word	0x20000274

08001c88 <Read_Temprature>:


/*Read Temperature data*/
uint16_t Read_Temprature(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af02      	add	r7, sp, #8
		uint8_t command2[2];
			uint8_t Rx_buf1[2];
    uint16_t data=0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	80fb      	strh	r3, [r7, #6]
	command2[0]=CMD21;
 8001c92:	237c      	movs	r3, #124	; 0x7c
 8001c94:	713b      	strb	r3, [r7, #4]
	command2[1]=CMD22;
 8001c96:	23a2      	movs	r3, #162	; 0xa2
 8001c98:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit(&hi2c2,SLAVEADDERESS,&command2[0],2,100);
 8001c9a:	1d3a      	adds	r2, r7, #4
 8001c9c:	2364      	movs	r3, #100	; 0x64
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	21e0      	movs	r1, #224	; 0xe0
 8001ca4:	480d      	ldr	r0, [pc, #52]	; (8001cdc <Read_Temprature+0x54>)
 8001ca6:	f002 fd0b 	bl	80046c0 <HAL_I2C_Master_Transmit>
HAL_Delay(100);
 8001caa:	2064      	movs	r0, #100	; 0x64
 8001cac:	f000 fc70 	bl	8002590 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2,SLAVEADDERESS,Rx_buf1,2,100);                 //HAL API fro i2c master Rx
 8001cb0:	463a      	mov	r2, r7
 8001cb2:	2364      	movs	r3, #100	; 0x64
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	21e0      	movs	r1, #224	; 0xe0
 8001cba:	4808      	ldr	r0, [pc, #32]	; (8001cdc <Read_Temprature+0x54>)
 8001cbc:	f002 fdf4 	bl	80048a8 <HAL_I2C_Master_Receive>
		data = ((Rx_buf1[0]<<8)|Rx_buf1[1]);
 8001cc0:	783b      	ldrb	r3, [r7, #0]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	787b      	ldrb	r3, [r7, #1]
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	80fb      	strh	r3, [r7, #6]
		return data;
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000274 	.word	0x20000274

08001ce0 <Read_Humidity>:


/*Read Humidity Data*/
uint16_t Read_Humidity(){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af02      	add	r7, sp, #8
uint8_t command3[2];
			uint8_t Rx_buf2[2];
    uint16_t data=0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	80fb      	strh	r3, [r7, #6]
	command3[0]=CMD23;
 8001cea:	235c      	movs	r3, #92	; 0x5c
 8001cec:	713b      	strb	r3, [r7, #4]
	command3[1]=CMD24;
 8001cee:	2324      	movs	r3, #36	; 0x24
 8001cf0:	717b      	strb	r3, [r7, #5]
HAL_I2C_Master_Transmit(&hi2c2,SLAVEADDERESS,&command3[0],2,100);
 8001cf2:	1d3a      	adds	r2, r7, #4
 8001cf4:	2364      	movs	r3, #100	; 0x64
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	21e0      	movs	r1, #224	; 0xe0
 8001cfc:	480d      	ldr	r0, [pc, #52]	; (8001d34 <Read_Humidity+0x54>)
 8001cfe:	f002 fcdf 	bl	80046c0 <HAL_I2C_Master_Transmit>
HAL_Delay(100);
 8001d02:	2064      	movs	r0, #100	; 0x64
 8001d04:	f000 fc44 	bl	8002590 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2,SLAVEADDERESS,Rx_buf2,2,100);                 //HAL API fro i2c master Rx
 8001d08:	463a      	mov	r2, r7
 8001d0a:	2364      	movs	r3, #100	; 0x64
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	21e0      	movs	r1, #224	; 0xe0
 8001d12:	4808      	ldr	r0, [pc, #32]	; (8001d34 <Read_Humidity+0x54>)
 8001d14:	f002 fdc8 	bl	80048a8 <HAL_I2C_Master_Receive>
		data = ((Rx_buf2[0]<<8)|Rx_buf2[1]);
 8001d18:	783b      	ldrb	r3, [r7, #0]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	b21a      	sxth	r2, r3
 8001d1e:	787b      	ldrb	r3, [r7, #1]
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	4313      	orrs	r3, r2
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	80fb      	strh	r3, [r7, #6]
		return data;
 8001d28:	88fb      	ldrh	r3, [r7, #6]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000274 	.word	0x20000274

08001d38 <Device_check>:

/*Check for I2C Device*/
uint8_t Device_check(void){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
	uint8_t DeviceAddress1=SLAVEADDERESS;
 8001d3e:	23e0      	movs	r3, #224	; 0xe0
 8001d40:	71fb      	strb	r3, [r7, #7]
    if (HAL_OK == HAL_I2C_IsDeviceReady(&hi2c2, DeviceAddress1, 1, 100))
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	b299      	uxth	r1, r3
 8001d46:	2364      	movs	r3, #100	; 0x64
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <Device_check+0x2c>)
 8001d4c:	f002 fea2 	bl	8004a94 <HAL_I2C_IsDeviceReady>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <Device_check+0x22>
    {
    	  return 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <Device_check+0x24>
    }
    else{
	      return 1;
 8001d5a:	2301      	movs	r3, #1
        }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000274 	.word	0x20000274

08001d68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_MspInit+0x44>)
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_MspInit+0x44>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6613      	str	r3, [r2, #96]	; 0x60
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_MspInit+0x44>)
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_MspInit+0x44>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_MspInit+0x44>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_MspInit+0x44>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d9e:	f003 fb35 	bl	800540c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000

08001db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b09a      	sub	sp, #104	; 0x68
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	2244      	movs	r2, #68	; 0x44
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f007 fbd2 	bl	800957a <memset>
  if(hadc->Instance==ADC1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dde:	d134      	bne.n	8001e4a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001de6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 f84f 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001dfc:	f7ff fe30 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_ADC_MspInit+0xa4>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e04:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_ADC_MspInit+0xa4>)
 8001e06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_ADC_MspInit+0xa4>)
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_ADC_MspInit+0xa4>)
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_ADC_MspInit+0xa4>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_ADC_MspInit+0xa4>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e30:	2303      	movs	r3, #3
 8001e32:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e34:	2303      	movs	r3, #3
 8001e36:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e40:	4619      	mov	r1, r3
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e46:	f002 f9d7 	bl	80041f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3768      	adds	r7, #104	; 0x68
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <HAL_DAC_MspInit+0x74>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d124      	bne.n	8001ec4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_DAC_MspInit+0x78>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <HAL_DAC_MspInit+0x78>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_DAC_MspInit+0x78>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_DAC_MspInit+0x78>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_DAC_MspInit+0x78>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_DAC_MspInit+0x78>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eaa:	2310      	movs	r3, #16
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec0:	f002 f99a 	bl	80041f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	50000800 	.word	0x50000800
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b09c      	sub	sp, #112	; 0x70
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eec:	f107 0318 	add.w	r3, r7, #24
 8001ef0:	2244      	movs	r2, #68	; 0x44
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f007 fb40 	bl	800957a <memset>
  if(hi2c->Instance==I2C2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a3e      	ldr	r2, [pc, #248]	; (8001ff8 <HAL_I2C_MspInit+0x124>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d138      	bne.n	8001f76 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 ffbf 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f1c:	f7ff fda0 	bl	8001a60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	4a35      	ldr	r2, [pc, #212]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2c:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3e:	2312      	movs	r3, #18
 8001f40:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f002 f94e 	bl	80041f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001f62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f66:	6593      	str	r3, [r2, #88]	; 0x58
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f74:	e03c      	b.n	8001ff0 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_I2C_MspInit+0x12c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d137      	bne.n	8001ff0 <HAL_I2C_MspInit+0x11c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f84:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f8a:	f107 0318 	add.w	r3, r7, #24
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 ff80 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_MspInit+0xca>
      Error_Handler();
 8001f9a:	f7ff fd61 	bl	8001a60 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fbc:	2312      	movs	r3, #18
 8001fbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480c      	ldr	r0, [pc, #48]	; (8002004 <HAL_I2C_MspInit+0x130>)
 8001fd4:	f002 f910 	bl	80041f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001fde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_I2C_MspInit+0x128>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	3770      	adds	r7, #112	; 0x70
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40005800 	.word	0x40005800
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007800 	.word	0x40007800
 8002004:	48000800 	.word	0x48000800

08002008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_SPI_MspInit+0x7c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d128      	bne.n	800207c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <HAL_SPI_MspInit+0x80>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_SPI_MspInit+0x80>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6593      	str	r3, [r2, #88]	; 0x58
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_SPI_MspInit+0x80>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_SPI_MspInit+0x80>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	4a10      	ldr	r2, [pc, #64]	; (8002088 <HAL_SPI_MspInit+0x80>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_SPI_MspInit+0x80>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800205a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800205e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800206c:	2305      	movs	r3, #5
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <HAL_SPI_MspInit+0x84>)
 8002078:	f002 f8be 	bl	80041f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800207c:	bf00      	nop
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40003800 	.word	0x40003800
 8002088:	40021000 	.word	0x40021000
 800208c:	48000400 	.word	0x48000400

08002090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a13      	ldr	r2, [pc, #76]	; (80020ec <HAL_TIM_Base_MspInit+0x5c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10c      	bne.n	80020bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_TIM_Base_MspInit+0x60>)
 80020a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a6:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <HAL_TIM_Base_MspInit+0x60>)
 80020a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ac:	6613      	str	r3, [r2, #96]	; 0x60
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_TIM_Base_MspInit+0x60>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80020ba:	e010      	b.n	80020de <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_TIM_Base_MspInit+0x64>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10b      	bne.n	80020de <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_TIM_Base_MspInit+0x60>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <HAL_TIM_Base_MspInit+0x60>)
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	6613      	str	r3, [r2, #96]	; 0x60
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <HAL_TIM_Base_MspInit+0x60>)
 80020d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40012c00 	.word	0x40012c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40014400 	.word	0x40014400

080020f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a11      	ldr	r2, [pc, #68]	; (800215c <HAL_TIM_MspPostInit+0x64>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d11c      	bne.n	8002154 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_TIM_MspPostInit+0x68>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_TIM_MspPostInit+0x68>)
 8002120:	f043 0310 	orr.w	r3, r3, #16
 8002124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_TIM_MspPostInit+0x68>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002132:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002136:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002144:	2302      	movs	r3, #2
 8002146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	4619      	mov	r1, r3
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_TIM_MspPostInit+0x6c>)
 8002150:	f002 f852 	bl	80041f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40021000 	.word	0x40021000
 8002164:	48001000 	.word	0x48001000

08002168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b09a      	sub	sp, #104	; 0x68
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	2244      	movs	r2, #68	; 0x44
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f007 f9f6 	bl	800957a <memset>
  if(huart->Instance==USART1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a22      	ldr	r2, [pc, #136]	; (800221c <HAL_UART_MspInit+0xb4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d13d      	bne.n	8002214 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002198:	2301      	movs	r3, #1
 800219a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 fe75 	bl	8005e94 <HAL_RCCEx_PeriphCLKConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021b0:	f7ff fc56 	bl	8001a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_UART_MspInit+0xb8>)
 80021b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_UART_MspInit+0xb8>)
 80021ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021be:	6613      	str	r3, [r2, #96]	; 0x60
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_UART_MspInit+0xb8>)
 80021c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_UART_MspInit+0xb8>)
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d0:	4a13      	ldr	r2, [pc, #76]	; (8002220 <HAL_UART_MspInit+0xb8>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_UART_MspInit+0xb8>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021e4:	2330      	movs	r3, #48	; 0x30
 80021e6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f4:	2307      	movs	r3, #7
 80021f6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021fc:	4619      	mov	r1, r3
 80021fe:	4809      	ldr	r0, [pc, #36]	; (8002224 <HAL_UART_MspInit+0xbc>)
 8002200:	f001 fffa 	bl	80041f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	2025      	movs	r0, #37	; 0x25
 800220a:	f001 fd36 	bl	8003c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800220e:	2025      	movs	r0, #37	; 0x25
 8002210:	f001 fd4d 	bl	8003cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002214:	bf00      	nop
 8002216:	3768      	adds	r7, #104	; 0x68
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40013800 	.word	0x40013800
 8002220:	40021000 	.word	0x40021000
 8002224:	48000800 	.word	0x48000800

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800222c:	e7fe      	b.n	800222c <NMI_Handler+0x4>

0800222e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>

08002246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002274:	f000 f96e 	bl	8002554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002280:	2004      	movs	r0, #4
 8002282:	f002 f96b 	bl	800455c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}

0800228a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800228e:	2008      	movs	r0, #8
 8002290:	f002 f964 	bl	800455c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}

08002298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <USART1_IRQHandler+0x10>)
 800229e:	f005 fa5f 	bl	8007760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000408 	.word	0x20000408

080022ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return 1;
 80022b0:	2301      	movs	r3, #1
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_kill>:

int _kill(int pid, int sig)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022c6:	f007 f9ab 	bl	8009620 <__errno>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2216      	movs	r2, #22
 80022ce:	601a      	str	r2, [r3, #0]
  return -1;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <_exit>:

void _exit (int status)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ffe7 	bl	80022bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ee:	e7fe      	b.n	80022ee <_exit+0x12>

080022f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e00a      	b.n	8002318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002302:	f3af 8000 	nop.w
 8002306:	4601      	mov	r1, r0
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	60ba      	str	r2, [r7, #8]
 800230e:	b2ca      	uxtb	r2, r1
 8002310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	dbf0      	blt.n	8002302 <_read+0x12>
  }

  return len;
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e009      	b.n	8002350 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60ba      	str	r2, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fdd5 	bl	8000ef4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	dbf1      	blt.n	800233c <_write+0x12>
  }
  return len;
 8002358:	687b      	ldr	r3, [r7, #4]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_close>:

int _close(int file)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238a:	605a      	str	r2, [r3, #4]
  return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_isatty>:

int _isatty(int file)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <_sbrk+0x5c>)
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <_sbrk+0x60>)
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <_sbrk+0x64>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <_sbrk+0x68>)
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d207      	bcs.n	800240c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023fc:	f007 f910 	bl	8009620 <__errno>
 8002400:	4603      	mov	r3, r0
 8002402:	220c      	movs	r2, #12
 8002404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
 800240a:	e009      	b.n	8002420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <_sbrk+0x64>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <_sbrk+0x64>)
 800241c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20008000 	.word	0x20008000
 800242c:	00000400 	.word	0x00000400
 8002430:	200004a0 	.word	0x200004a0
 8002434:	200005f8 	.word	0x200005f8

08002438 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <SystemInit+0x20>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <SystemInit+0x20>)
 8002444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800245c:	480d      	ldr	r0, [pc, #52]	; (8002494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800245e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002460:	480d      	ldr	r0, [pc, #52]	; (8002498 <LoopForever+0x6>)
  ldr r1, =_edata
 8002462:	490e      	ldr	r1, [pc, #56]	; (800249c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002464:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <LoopForever+0xe>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002478:	4c0b      	ldr	r4, [pc, #44]	; (80024a8 <LoopForever+0x16>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002486:	f7ff ffd7 	bl	8002438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248a:	f007 f8cf 	bl	800962c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800248e:	f7fe fdad 	bl	8000fec <main>

08002492 <LoopForever>:

LoopForever:
    b LoopForever
 8002492:	e7fe      	b.n	8002492 <LoopForever>
  ldr   r0, =_estack
 8002494:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800249c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80024a0:	0800bbb4 	.word	0x0800bbb4
  ldr r2, =_sbss
 80024a4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80024a8:	200005f4 	.word	0x200005f4

080024ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024ac:	e7fe      	b.n	80024ac <ADC1_2_IRQHandler>

080024ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f001 fbd3 	bl	8003c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024be:	200f      	movs	r0, #15
 80024c0:	f000 f80e 	bl	80024e0 <HAL_InitTick>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	71fb      	strb	r3, [r7, #7]
 80024ce:	e001      	b.n	80024d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024d0:	f7ff fc4a 	bl	8001d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024d4:	79fb      	ldrb	r3, [r7, #7]

}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_InitTick+0x68>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d022      	beq.n	800253a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_InitTick+0x6c>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_InitTick+0x68>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002500:	fbb1 f3f3 	udiv	r3, r1, r3
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	4618      	mov	r0, r3
 800250a:	f001 fbde 	bl	8003cca <HAL_SYSTICK_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10f      	bne.n	8002534 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	d809      	bhi.n	800252e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800251a:	2200      	movs	r2, #0
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	f04f 30ff 	mov.w	r0, #4294967295
 8002522:	f001 fbaa 	bl	8003c7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002526:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <HAL_InitTick+0x70>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	e007      	b.n	800253e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e004      	b.n	800253e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e001      	b.n	800253e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	2000000c 	.word	0x2000000c
 800254c:	20000004 	.word	0x20000004
 8002550:	20000008 	.word	0x20000008

08002554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_IncTick+0x1c>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_IncTick+0x20>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4413      	add	r3, r2
 8002562:	4a03      	ldr	r2, [pc, #12]	; (8002570 <HAL_IncTick+0x1c>)
 8002564:	6013      	str	r3, [r2, #0]
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	200004a4 	.word	0x200004a4
 8002574:	2000000c 	.word	0x2000000c

08002578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return uwTick;
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_GetTick+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	200004a4 	.word	0x200004a4

08002590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002598:	f7ff ffee 	bl	8002578 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d004      	beq.n	80025b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_Delay+0x40>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4413      	add	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025b4:	bf00      	nop
 80025b6:	f7ff ffdf 	bl	8002578 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d8f7      	bhi.n	80025b6 <HAL_Delay+0x26>
  {
  }
}
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000000c 	.word	0x2000000c

080025d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	609a      	str	r2, [r3, #8]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3360      	adds	r3, #96	; 0x60
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <LL_ADC_SetOffset+0x44>)
 800265e:	4013      	ands	r3, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	4313      	orrs	r3, r2
 800266c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	03fff000 	.word	0x03fff000

08002684 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3360      	adds	r3, #96	; 0x60
 8002692:	461a      	mov	r2, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3360      	adds	r3, #96	; 0x60
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026da:	bf00      	nop
 80026dc:	371c      	adds	r7, #28
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b087      	sub	sp, #28
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3360      	adds	r3, #96	; 0x60
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	431a      	orrs	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3360      	adds	r3, #96	; 0x60
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	431a      	orrs	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	615a      	str	r2, [r3, #20]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800279e:	b480      	push	{r7}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3330      	adds	r3, #48	; 0x30
 80027ae:	461a      	mov	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	4413      	add	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	211f      	movs	r1, #31
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	401a      	ands	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	f003 011f 	and.w	r1, r3, #31
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	431a      	orrs	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b087      	sub	sp, #28
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3314      	adds	r3, #20
 8002806:	461a      	mov	r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	0e5b      	lsrs	r3, r3, #25
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	4413      	add	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	0d1b      	lsrs	r3, r3, #20
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2107      	movs	r1, #7
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	0d1b      	lsrs	r3, r3, #20
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	431a      	orrs	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d10a      	bne.n	8002876 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286c:	431a      	orrs	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002874:	e00a      	b.n	800288c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	43db      	mvns	r3, r3
 8002884:	401a      	ands	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	407f0000 	.word	0x407f0000

0800289c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 031f 	and.w	r3, r3, #31
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6093      	str	r3, [r2, #8]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800290c:	d101      	bne.n	8002912 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002930:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002934:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800295c:	d101      	bne.n	8002962 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002980:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002984:	f043 0201 	orr.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <LL_ADC_IsEnabled+0x18>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <LL_ADC_IsEnabled+0x1a>
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029d2:	f043 0204 	orr.w	r2, r3, #4
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d101      	bne.n	80029fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d101      	bne.n	8002a24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e177      	b.n	8002d3e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d109      	bne.n	8002a70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff f9a7 	bl	8001db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff3f 	bl	80028f8 <LL_ADC_IsDeepPowerDownEnabled>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff25 	bl	80028d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ff5a 	bl	8002948 <LL_ADC_IsInternalRegulatorEnabled>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d115      	bne.n	8002ac6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff3e 	bl	8002920 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aa4:	4b9c      	ldr	r3, [pc, #624]	; (8002d18 <HAL_ADC_Init+0x2e4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	4a9c      	ldr	r2, [pc, #624]	; (8002d1c <HAL_ADC_Init+0x2e8>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ab8:	e002      	b.n	8002ac0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f9      	bne.n	8002aba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff3c 	bl	8002948 <LL_ADC_IsInternalRegulatorEnabled>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	f043 0210 	orr.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff75 	bl	80029e6 <LL_ADC_REG_IsConversionOngoing>
 8002afc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 8110 	bne.w	8002d2c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 810c 	bne.w	8002d2c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b1c:	f043 0202 	orr.w	r2, r3, #2
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff35 	bl	8002998 <LL_ADC_IsEnabled>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d111      	bne.n	8002b58 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b38:	f7ff ff2e 	bl	8002998 <LL_ADC_IsEnabled>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	4878      	ldr	r0, [pc, #480]	; (8002d20 <HAL_ADC_Init+0x2ec>)
 8002b40:	f7ff ff2a 	bl	8002998 <LL_ADC_IsEnabled>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4323      	orrs	r3, r4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4874      	ldr	r0, [pc, #464]	; (8002d24 <HAL_ADC_Init+0x2f0>)
 8002b54:	f7ff fd3e 	bl	80025d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	7f5b      	ldrb	r3, [r3, #29]
 8002b5c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b62:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b68:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b6e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b76:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d106      	bne.n	8002b94 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	045b      	lsls	r3, r3, #17
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <HAL_ADC_Init+0x2f4>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ff01 	bl	80029e6 <LL_ADC_REG_IsConversionOngoing>
 8002be4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff0e 	bl	8002a0c <LL_ADC_INJ_IsConversionOngoing>
 8002bf0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d16d      	bne.n	8002cd4 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d16a      	bne.n	8002cd4 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c02:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c0a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c1a:	f023 0302 	bic.w	r3, r3, #2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	69b9      	ldr	r1, [r7, #24]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d017      	beq.n	8002c60 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6911      	ldr	r1, [r2, #16]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002c5e:	e013      	b.n	8002c88 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c84:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d118      	bne.n	8002cc4 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ca8:	4311      	orrs	r1, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	611a      	str	r2, [r3, #16]
 8002cc2:	e007      	b.n	8002cd4 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d10c      	bne.n	8002cf6 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f023 010f 	bic.w	r1, r3, #15
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf4:	e007      	b.n	8002d06 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 020f 	bic.w	r2, r2, #15
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	f023 0303 	bic.w	r3, r3, #3
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d16:	e011      	b.n	8002d3c <HAL_ADC_Init+0x308>
 8002d18:	20000004 	.word	0x20000004
 8002d1c:	053e2d63 	.word	0x053e2d63
 8002d20:	50000100 	.word	0x50000100
 8002d24:	50000300 	.word	0x50000300
 8002d28:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	f043 0210 	orr.w	r2, r3, #16
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}
 8002d46:	bf00      	nop

08002d48 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d50:	4859      	ldr	r0, [pc, #356]	; (8002eb8 <HAL_ADC_Start+0x170>)
 8002d52:	f7ff fda3 	bl	800289c <LL_ADC_GetMultimode>
 8002d56:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fe42 	bl	80029e6 <LL_ADC_REG_IsConversionOngoing>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 809f 	bne.w	8002ea8 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_Start+0x30>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e09a      	b.n	8002eae <HAL_ADC_Start+0x166>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fd73 	bl	800386c <ADC_Enable>
 8002d86:	4603      	mov	r3, r0
 8002d88:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 8086 	bne.w	8002e9e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a44      	ldr	r2, [pc, #272]	; (8002ebc <HAL_ADC_Start+0x174>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d002      	beq.n	8002db6 <HAL_ADC_Start+0x6e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	e001      	b.n	8002dba <HAL_ADC_Start+0x72>
 8002db6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d002      	beq.n	8002dc8 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de0:	d106      	bne.n	8002df0 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de6:	f023 0206 	bic.w	r2, r3, #6
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	661a      	str	r2, [r3, #96]	; 0x60
 8002dee:	e002      	b.n	8002df6 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	221c      	movs	r2, #28
 8002dfc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	; (8002ebc <HAL_ADC_Start+0x174>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d002      	beq.n	8002e16 <HAL_ADC_Start+0xce>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	e001      	b.n	8002e1a <HAL_ADC_Start+0xd2>
 8002e16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d008      	beq.n	8002e34 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d002      	beq.n	8002e34 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	d114      	bne.n	8002e5e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fdb1 	bl	80029be <LL_ADC_REG_StartConversion>
 8002e5c:	e026      	b.n	8002eac <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <HAL_ADC_Start+0x174>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d002      	beq.n	8002e7a <HAL_ADC_Start+0x132>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	e001      	b.n	8002e7e <HAL_ADC_Start+0x136>
 8002e7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e7e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00f      	beq.n	8002eac <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e9c:	e006      	b.n	8002eac <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002ea6:	e001      	b.n	8002eac <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	50000300 	.word	0x50000300
 8002ebc:	50000100 	.word	0x50000100

08002ec0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eca:	4867      	ldr	r0, [pc, #412]	; (8003068 <HAL_ADC_PollForConversion+0x1a8>)
 8002ecc:	f7ff fce6 	bl	800289c <LL_ADC_GetMultimode>
 8002ed0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d102      	bne.n	8002ee0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002eda:	2308      	movs	r3, #8
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e02a      	b.n	8002f36 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d002      	beq.n	8002ef2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b09      	cmp	r3, #9
 8002ef0:	d111      	bne.n	8002f16 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0a6      	b.n	800305e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002f10:	2304      	movs	r3, #4
 8002f12:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f14:	e00f      	b.n	8002f36 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f16:	4854      	ldr	r0, [pc, #336]	; (8003068 <HAL_ADC_PollForConversion+0x1a8>)
 8002f18:	f7ff fcce 	bl	80028b8 <LL_ADC_GetMultiDMATransfer>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e095      	b.n	800305e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002f32:	2304      	movs	r3, #4
 8002f34:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f36:	f7ff fb1f 	bl	8002578 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f3c:	e021      	b.n	8002f82 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d01d      	beq.n	8002f82 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002f46:	f7ff fb17 	bl	8002578 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <HAL_ADC_PollForConversion+0x9c>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d112      	bne.n	8002f82 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f043 0204 	orr.w	r2, r3, #4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e06d      	b.n	800305e <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0d6      	beq.n	8002f3e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fbe9 	bl	8002778 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01c      	beq.n	8002fe6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7f5b      	ldrb	r3, [r3, #29]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d118      	bne.n	8002fe6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d111      	bne.n	8002fe6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	f043 0201 	orr.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a20      	ldr	r2, [pc, #128]	; (800306c <HAL_ADC_PollForConversion+0x1ac>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d002      	beq.n	8002ff6 <HAL_ADC_PollForConversion+0x136>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	e001      	b.n	8002ffa <HAL_ADC_PollForConversion+0x13a>
 8002ff6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d008      	beq.n	8003014 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d002      	beq.n	8003014 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b09      	cmp	r3, #9
 8003012:	d104      	bne.n	800301e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	e00d      	b.n	800303a <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_ADC_PollForConversion+0x1ac>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d002      	beq.n	800302e <HAL_ADC_PollForConversion+0x16e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	e001      	b.n	8003032 <HAL_ADC_PollForConversion+0x172>
 800302e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003032:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d104      	bne.n	800304a <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2208      	movs	r2, #8
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	e008      	b.n	800305c <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	220c      	movs	r2, #12
 800305a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	50000300 	.word	0x50000300
 800306c:	50000100 	.word	0x50000100

08003070 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b0b6      	sub	sp, #216	; 0xd8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x22>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e3c8      	b.n	8003840 <HAL_ADC_ConfigChannel+0x7b4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fc93 	bl	80029e6 <LL_ADC_REG_IsConversionOngoing>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f040 83ad 	bne.w	8003822 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f7ff fb62 	bl	800279e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fc81 	bl	80029e6 <LL_ADC_REG_IsConversionOngoing>
 80030e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fc8d 	bl	8002a0c <LL_ADC_INJ_IsConversionOngoing>
 80030f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 81d9 	bne.w	80034b2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003100:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003104:	2b00      	cmp	r3, #0
 8003106:	f040 81d4 	bne.w	80034b2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003112:	d10f      	bne.n	8003134 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2200      	movs	r2, #0
 800311e:	4619      	mov	r1, r3
 8003120:	f7ff fb69 	bl	80027f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fb10 	bl	8002752 <LL_ADC_SetSamplingTimeCommonConfig>
 8003132:	e00e      	b.n	8003152 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	461a      	mov	r2, r3
 8003142:	f7ff fb58 	bl	80027f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2100      	movs	r1, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fb00 	bl	8002752 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	08db      	lsrs	r3, r3, #3
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b04      	cmp	r3, #4
 8003172:	d022      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6919      	ldr	r1, [r3, #16]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003184:	f7ff fa5a 	bl	800263c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6919      	ldr	r1, [r3, #16]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	461a      	mov	r2, r3
 8003196:	f7ff faa6 	bl	80026e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6919      	ldr	r1, [r3, #16]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	7f1b      	ldrb	r3, [r3, #28]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d102      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x124>
 80031aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ae:	e000      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x126>
 80031b0:	2300      	movs	r3, #0
 80031b2:	461a      	mov	r2, r3
 80031b4:	f7ff fab2 	bl	800271c <LL_ADC_SetOffsetSaturation>
 80031b8:	e17b      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fa5f 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x15a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fa54 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80031dc:	4603      	mov	r3, r0
 80031de:	0e9b      	lsrs	r3, r3, #26
 80031e0:	f003 021f 	and.w	r2, r3, #31
 80031e4:	e01e      	b.n	8003224 <HAL_ADC_ConfigChannel+0x198>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fa49 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003204:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800320c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003214:	2320      	movs	r3, #32
 8003216:	e004      	b.n	8003222 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003218:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1b0>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	0e9b      	lsrs	r3, r3, #26
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	e018      	b.n	800326e <HAL_ADC_ConfigChannel+0x1e2>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003258:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003260:	2320      	movs	r3, #32
 8003262:	e004      	b.n	800326e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003264:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800326e:	429a      	cmp	r2, r3
 8003270:	d106      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fa18 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f9fc 	bl	8002684 <LL_ADC_GetOffsetChannel>
 800328c:	4603      	mov	r3, r0
 800328e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x220>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2101      	movs	r1, #1
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff f9f1 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80032a2:	4603      	mov	r3, r0
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	f003 021f 	and.w	r2, r3, #31
 80032aa:	e01e      	b.n	80032ea <HAL_ADC_ConfigChannel+0x25e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff f9e6 	bl	8002684 <LL_ADC_GetOffsetChannel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80032da:	2320      	movs	r3, #32
 80032dc:	e004      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80032de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x276>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0e9b      	lsrs	r3, r3, #26
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	e018      	b.n	8003334 <HAL_ADC_ConfigChannel+0x2a8>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003316:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800331a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800331e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003326:	2320      	movs	r3, #32
 8003328:	e004      	b.n	8003334 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800332a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003334:	429a      	cmp	r2, r3
 8003336:	d106      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2200      	movs	r2, #0
 800333e:	2101      	movs	r1, #1
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f9b5 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2102      	movs	r1, #2
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff f999 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x2e6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2102      	movs	r1, #2
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff f98e 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003368:	4603      	mov	r3, r0
 800336a:	0e9b      	lsrs	r3, r3, #26
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	e01e      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x324>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2102      	movs	r1, #2
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f983 	bl	8002684 <LL_ADC_GetOffsetChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003390:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003394:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003398:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e004      	b.n	80033ae <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80033a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x33c>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	0e9b      	lsrs	r3, r3, #26
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	e016      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x36a>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80033e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80033e8:	2320      	movs	r3, #32
 80033ea:	e004      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80033ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d106      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	2102      	movs	r1, #2
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff f954 	bl	80026b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2103      	movs	r1, #3
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff f938 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003414:	4603      	mov	r3, r0
 8003416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x3a8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2103      	movs	r1, #3
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff f92d 	bl	8002684 <LL_ADC_GetOffsetChannel>
 800342a:	4603      	mov	r3, r0
 800342c:	0e9b      	lsrs	r3, r3, #26
 800342e:	f003 021f 	and.w	r2, r3, #31
 8003432:	e017      	b.n	8003464 <HAL_ADC_ConfigChannel+0x3d8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2103      	movs	r1, #3
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff f922 	bl	8002684 <LL_ADC_GetOffsetChannel>
 8003440:	4603      	mov	r3, r0
 8003442:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800344c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800344e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e003      	b.n	8003462 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800345a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_ADC_ConfigChannel+0x3f0>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	e011      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x414>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800348a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800348c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e003      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d106      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2103      	movs	r1, #3
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff f8ff 	bl	80026b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fa6e 	bl	8002998 <LL_ADC_IsEnabled>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 8140 	bne.w	8003744 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	461a      	mov	r2, r3
 80034d2:	f7ff f9bb 	bl	800284c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	4a8f      	ldr	r2, [pc, #572]	; (8003718 <HAL_ADC_ConfigChannel+0x68c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	f040 8131 	bne.w	8003744 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <HAL_ADC_ConfigChannel+0x47e>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	3301      	adds	r3, #1
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2b09      	cmp	r3, #9
 8003500:	bf94      	ite	ls
 8003502:	2301      	movls	r3, #1
 8003504:	2300      	movhi	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	e019      	b.n	800353e <HAL_ADC_ConfigChannel+0x4b2>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800351a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800351c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003522:	2320      	movs	r3, #32
 8003524:	e003      	b.n	800352e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	3301      	adds	r3, #1
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	2b09      	cmp	r3, #9
 8003536:	bf94      	ite	ls
 8003538:	2301      	movls	r3, #1
 800353a:	2300      	movhi	r3, #0
 800353c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353e:	2b00      	cmp	r3, #0
 8003540:	d079      	beq.n	8003636 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_ADC_ConfigChannel+0x4d2>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	0e9b      	lsrs	r3, r3, #26
 8003554:	3301      	adds	r3, #1
 8003556:	069b      	lsls	r3, r3, #26
 8003558:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800355c:	e015      	b.n	800358a <HAL_ADC_ConfigChannel+0x4fe>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800356c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800356e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003576:	2320      	movs	r3, #32
 8003578:	e003      	b.n	8003582 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800357a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800357c:	fab3 f383 	clz	r3, r3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	3301      	adds	r3, #1
 8003584:	069b      	lsls	r3, r3, #26
 8003586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x51e>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	0e9b      	lsrs	r3, r3, #26
 800359c:	3301      	adds	r3, #1
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2101      	movs	r1, #1
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	e017      	b.n	80035da <HAL_ADC_ConfigChannel+0x54e>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80035c2:	2320      	movs	r3, #32
 80035c4:	e003      	b.n	80035ce <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80035c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	ea42 0103 	orr.w	r1, r2, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x574>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	3301      	adds	r3, #1
 80035f2:	f003 021f 	and.w	r2, r3, #31
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	051b      	lsls	r3, r3, #20
 80035fe:	e018      	b.n	8003632 <HAL_ADC_ConfigChannel+0x5a6>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003618:	2320      	movs	r3, #32
 800361a:	e003      	b.n	8003624 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800361c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3301      	adds	r3, #1
 8003626:	f003 021f 	and.w	r2, r3, #31
 800362a:	4613      	mov	r3, r2
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003632:	430b      	orrs	r3, r1
 8003634:	e081      	b.n	800373a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x5c6>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0e9b      	lsrs	r3, r3, #26
 8003648:	3301      	adds	r3, #1
 800364a:	069b      	lsls	r3, r3, #26
 800364c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003650:	e015      	b.n	800367e <HAL_ADC_ConfigChannel+0x5f2>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800366a:	2320      	movs	r3, #32
 800366c:	e003      	b.n	8003676 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	fab3 f383 	clz	r3, r3
 8003674:	b2db      	uxtb	r3, r3
 8003676:	3301      	adds	r3, #1
 8003678:	069b      	lsls	r3, r3, #26
 800367a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_ADC_ConfigChannel+0x612>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	0e9b      	lsrs	r3, r3, #26
 8003690:	3301      	adds	r3, #1
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2101      	movs	r1, #1
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	e017      	b.n	80036ce <HAL_ADC_ConfigChannel+0x642>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	61fb      	str	r3, [r7, #28]
  return result;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80036b6:	2320      	movs	r3, #32
 80036b8:	e003      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	2101      	movs	r1, #1
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	ea42 0103 	orr.w	r1, r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x66e>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	0e9b      	lsrs	r3, r3, #26
 80036e4:	3301      	adds	r3, #1
 80036e6:	f003 021f 	and.w	r2, r3, #31
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	3b1e      	subs	r3, #30
 80036f2:	051b      	lsls	r3, r3, #20
 80036f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036f8:	e01e      	b.n	8003738 <HAL_ADC_ConfigChannel+0x6ac>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	613b      	str	r3, [r7, #16]
  return result;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003712:	2320      	movs	r3, #32
 8003714:	e006      	b.n	8003724 <HAL_ADC_ConfigChannel+0x698>
 8003716:	bf00      	nop
 8003718:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3301      	adds	r3, #1
 8003726:	f003 021f 	and.w	r2, r3, #31
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	3b1e      	subs	r3, #30
 8003732:	051b      	lsls	r3, r3, #20
 8003734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003738:	430b      	orrs	r3, r1
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	6892      	ldr	r2, [r2, #8]
 800373e:	4619      	mov	r1, r3
 8003740:	f7ff f859 	bl	80027f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <HAL_ADC_ConfigChannel+0x7bc>)
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d071      	beq.n	8003834 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003750:	483e      	ldr	r0, [pc, #248]	; (800384c <HAL_ADC_ConfigChannel+0x7c0>)
 8003752:	f7fe ff65 	bl	8002620 <LL_ADC_GetCommonPathInternalCh>
 8003756:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3c      	ldr	r2, [pc, #240]	; (8003850 <HAL_ADC_ConfigChannel+0x7c4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d004      	beq.n	800376e <HAL_ADC_ConfigChannel+0x6e2>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a3a      	ldr	r2, [pc, #232]	; (8003854 <HAL_ADC_ConfigChannel+0x7c8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d127      	bne.n	80037be <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800376e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d121      	bne.n	80037be <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003782:	d157      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800378c:	4619      	mov	r1, r3
 800378e:	482f      	ldr	r0, [pc, #188]	; (800384c <HAL_ADC_ConfigChannel+0x7c0>)
 8003790:	f7fe ff33 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003794:	4b30      	ldr	r3, [pc, #192]	; (8003858 <HAL_ADC_ConfigChannel+0x7cc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	099b      	lsrs	r3, r3, #6
 800379a:	4a30      	ldr	r2, [pc, #192]	; (800385c <HAL_ADC_ConfigChannel+0x7d0>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037ae:	e002      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f9      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037bc:	e03a      	b.n	8003834 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a27      	ldr	r2, [pc, #156]	; (8003860 <HAL_ADC_ConfigChannel+0x7d4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d113      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x764>
 80037c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10d      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <HAL_ADC_ConfigChannel+0x7d8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02a      	beq.n	8003834 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e6:	4619      	mov	r1, r3
 80037e8:	4818      	ldr	r0, [pc, #96]	; (800384c <HAL_ADC_ConfigChannel+0x7c0>)
 80037ea:	f7fe ff06 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037ee:	e021      	b.n	8003834 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <HAL_ADC_ConfigChannel+0x7dc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d11c      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d116      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_ADC_ConfigChannel+0x7d8>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d011      	beq.n	8003834 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003814:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003818:	4619      	mov	r1, r3
 800381a:	480c      	ldr	r0, [pc, #48]	; (800384c <HAL_ADC_ConfigChannel+0x7c0>)
 800381c:	f7fe feed 	bl	80025fa <LL_ADC_SetCommonPathInternalCh>
 8003820:	e008      	b.n	8003834 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800383c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003840:	4618      	mov	r0, r3
 8003842:	37d8      	adds	r7, #216	; 0xd8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	80080000 	.word	0x80080000
 800384c:	50000300 	.word	0x50000300
 8003850:	c3210000 	.word	0xc3210000
 8003854:	90c00010 	.word	0x90c00010
 8003858:	20000004 	.word	0x20000004
 800385c:	053e2d63 	.word	0x053e2d63
 8003860:	c7520000 	.word	0xc7520000
 8003864:	50000100 	.word	0x50000100
 8003868:	cb840000 	.word	0xcb840000

0800386c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff f88d 	bl	8002998 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d14d      	bne.n	8003920 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	4b28      	ldr	r3, [pc, #160]	; (800392c <ADC_Enable+0xc0>)
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	f043 0210 	orr.w	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a2:	f043 0201 	orr.w	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e039      	b.n	8003922 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff f85c 	bl	8002970 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038b8:	f7fe fe5e 	bl	8002578 <HAL_GetTick>
 80038bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038be:	e028      	b.n	8003912 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff f867 	bl	8002998 <LL_ADC_IsEnabled>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff f84b 	bl	8002970 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038da:	f7fe fe4d 	bl	8002578 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d914      	bls.n	8003912 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d00d      	beq.n	8003912 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	f043 0210 	orr.w	r2, r3, #16
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003906:	f043 0201 	orr.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e007      	b.n	8003922 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d1cf      	bne.n	80038c0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	8000003f 	.word	0x8000003f

08003930 <LL_ADC_IsEnabled>:
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <LL_ADC_IsEnabled+0x18>
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <LL_ADC_IsEnabled+0x1a>
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_ADC_REG_IsConversionOngoing>:
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b04      	cmp	r3, #4
 8003968:	d101      	bne.n	800396e <LL_ADC_REG_IsConversionOngoing+0x18>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b0a1      	sub	sp, #132	; 0x84
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003996:	2302      	movs	r3, #2
 8003998:	e08b      	b.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80039a2:	2300      	movs	r3, #0
 80039a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80039a6:	2300      	movs	r3, #0
 80039a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b2:	d102      	bne.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039b4:	4b41      	ldr	r3, [pc, #260]	; (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	e001      	b.n	80039be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	f043 0220 	orr.w	r2, r3, #32
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e06a      	b.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ffb9 	bl	8003956 <LL_ADC_REG_IsConversionOngoing>
 80039e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ffb3 	bl	8003956 <LL_ADC_REG_IsConversionOngoing>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d14c      	bne.n	8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d149      	bne.n	8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039fc:	4b30      	ldr	r3, [pc, #192]	; (8003ac0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80039fe:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d028      	beq.n	8003a5a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a1a:	035b      	lsls	r3, r3, #13
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a28:	f7ff ff82 	bl	8003930 <LL_ADC_IsEnabled>
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	4823      	ldr	r0, [pc, #140]	; (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a30:	f7ff ff7e 	bl	8003930 <LL_ADC_IsEnabled>
 8003a34:	4603      	mov	r3, r0
 8003a36:	4323      	orrs	r3, r4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d133      	bne.n	8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a44:	f023 030f 	bic.w	r3, r3, #15
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	6811      	ldr	r1, [r2, #0]
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	6892      	ldr	r2, [r2, #8]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	431a      	orrs	r2, r3
 8003a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a56:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a58:	e024      	b.n	8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a66:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a6a:	f7ff ff61 	bl	8003930 <LL_ADC_IsEnabled>
 8003a6e:	4604      	mov	r4, r0
 8003a70:	4812      	ldr	r0, [pc, #72]	; (8003abc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003a72:	f7ff ff5d 	bl	8003930 <LL_ADC_IsEnabled>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4323      	orrs	r3, r4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d112      	bne.n	8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a86:	f023 030f 	bic.w	r3, r3, #15
 8003a8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003a8c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a8e:	e009      	b.n	8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003aa2:	e000      	b.n	8003aa6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003aa4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003aae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3784      	adds	r7, #132	; 0x84
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd90      	pop	{r4, r7, pc}
 8003aba:	bf00      	nop
 8003abc:	50000100 	.word	0x50000100
 8003ac0:	50000300 	.word	0x50000300

08003ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003af6:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <__NVIC_SetPriorityGrouping+0x44>)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	60d3      	str	r3, [r2, #12]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <__NVIC_GetPriorityGrouping+0x18>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	f003 0307 	and.w	r3, r3, #7
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	db0b      	blt.n	8003b52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	f003 021f 	and.w	r2, r3, #31
 8003b40:	4907      	ldr	r1, [pc, #28]	; (8003b60 <__NVIC_EnableIRQ+0x38>)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2001      	movs	r0, #1
 8003b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000e100 	.word	0xe000e100

08003b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	6039      	str	r1, [r7, #0]
 8003b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	db0a      	blt.n	8003b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	490c      	ldr	r1, [pc, #48]	; (8003bb0 <__NVIC_SetPriority+0x4c>)
 8003b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b82:	0112      	lsls	r2, r2, #4
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	440b      	add	r3, r1
 8003b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b8c:	e00a      	b.n	8003ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4908      	ldr	r1, [pc, #32]	; (8003bb4 <__NVIC_SetPriority+0x50>)
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	3b04      	subs	r3, #4
 8003b9c:	0112      	lsls	r2, r2, #4
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	761a      	strb	r2, [r3, #24]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	e000e100 	.word	0xe000e100
 8003bb4:	e000ed00 	.word	0xe000ed00

08003bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b089      	sub	sp, #36	; 0x24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f1c3 0307 	rsb	r3, r3, #7
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	bf28      	it	cs
 8003bd6:	2304      	movcs	r3, #4
 8003bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	2b06      	cmp	r3, #6
 8003be0:	d902      	bls.n	8003be8 <NVIC_EncodePriority+0x30>
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	3b03      	subs	r3, #3
 8003be6:	e000      	b.n	8003bea <NVIC_EncodePriority+0x32>
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bec:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c00:	f04f 31ff 	mov.w	r1, #4294967295
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	43d9      	mvns	r1, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c10:	4313      	orrs	r3, r2
         );
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3724      	adds	r7, #36	; 0x24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c30:	d301      	bcc.n	8003c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00f      	b.n	8003c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c36:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <SysTick_Config+0x40>)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c3e:	210f      	movs	r1, #15
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	f7ff ff8e 	bl	8003b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <SysTick_Config+0x40>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c4e:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <SysTick_Config+0x40>)
 8003c50:	2207      	movs	r2, #7
 8003c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	e000e010 	.word	0xe000e010

08003c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff29 	bl	8003ac4 <__NVIC_SetPriorityGrouping>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b086      	sub	sp, #24
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	4603      	mov	r3, r0
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c88:	f7ff ff40 	bl	8003b0c <__NVIC_GetPriorityGrouping>
 8003c8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	6978      	ldr	r0, [r7, #20]
 8003c94:	f7ff ff90 	bl	8003bb8 <NVIC_EncodePriority>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ff5f 	bl	8003b64 <__NVIC_SetPriority>
}
 8003ca6:	bf00      	nop
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff33 	bl	8003b28 <__NVIC_EnableIRQ>
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ffa4 	bl	8003c20 <SysTick_Config>
 8003cd8:	4603      	mov	r3, r0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e014      	b.n	8003d1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	791b      	ldrb	r3, [r3, #4]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7fe f8a7 	bl	8001e58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	795b      	ldrb	r3, [r3, #5]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_DAC_ConfigChannel+0x18>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e192      	b.n	8004066 <HAL_DAC_ConfigChannel+0x33e>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d174      	bne.n	8003e3e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d54:	f7fe fc10 	bl	8002578 <HAL_GetTick>
 8003d58:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d134      	bne.n	8003dca <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d60:	e011      	b.n	8003d86 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d62:	f7fe fc09 	bl	8002578 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d90a      	bls.n	8003d86 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f043 0208 	orr.w	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2203      	movs	r2, #3
 8003d80:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e16f      	b.n	8004066 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e6      	bne.n	8003d62 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003d94:	2001      	movs	r0, #1
 8003d96:	f7fe fbfb 	bl	8002590 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
 8003da4:	e01e      	b.n	8003de4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003da6:	f7fe fbe7 	bl	8002578 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d90a      	bls.n	8003dca <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f043 0208 	orr.w	r2, r3, #8
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e14d      	b.n	8004066 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	dbe8      	blt.n	8003da6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f7fe fbdb 	bl	8002590 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	ea02 0103 	and.w	r1, r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	21ff      	movs	r1, #255	; 0xff
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	ea02 0103 	and.w	r1, r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	409a      	lsls	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d11d      	bne.n	8003e82 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	221f      	movs	r2, #31
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	4013      	ands	r3, r2
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e76:	4313      	orrs	r3, r2
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2207      	movs	r2, #7
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d102      	bne.n	8003eac <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	623b      	str	r3, [r7, #32]
 8003eaa:	e00f      	b.n	8003ecc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d102      	bne.n	8003eba <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	623b      	str	r3, [r7, #32]
 8003eb8:	e008      	b.n	8003ecc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	623b      	str	r3, [r7, #32]
 8003ec6:	e001      	b.n	8003ecc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	6a3a      	ldr	r2, [r7, #32]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eee:	4013      	ands	r3, r2
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	791b      	ldrb	r3, [r3, #4]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d102      	bne.n	8003f00 <HAL_DAC_ConfigChannel+0x1d8>
 8003efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003efe:	e000      	b.n	8003f02 <HAL_DAC_ConfigChannel+0x1da>
 8003f00:	2300      	movs	r3, #0
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	795b      	ldrb	r3, [r3, #5]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d102      	bne.n	8003f2c <HAL_DAC_ConfigChannel+0x204>
 8003f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f2a:	e000      	b.n	8003f2e <HAL_DAC_ConfigChannel+0x206>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d114      	bne.n	8003f6e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003f44:	f001 ff28 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8003f48:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	4a48      	ldr	r2, [pc, #288]	; (8004070 <HAL_DAC_ConfigChannel+0x348>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d904      	bls.n	8003f5c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5a:	e00f      	b.n	8003f7c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	4a45      	ldr	r2, [pc, #276]	; (8004074 <HAL_DAC_ConfigChannel+0x34c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d90a      	bls.n	8003f7a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	e006      	b.n	8003f7c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f74:	4313      	orrs	r3, r2
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	e000      	b.n	8003f7c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003f7a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6819      	ldr	r1, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	400a      	ands	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	4013      	ands	r3, r2
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	22c0      	movs	r2, #192	; 0xc0
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43da      	mvns	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	400a      	ands	r2, r1
 800400c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	f640 710f 	movw	r1, #3855	; 0xf0f
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	ea02 0103 	and.w	r1, r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	409a      	lsls	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3728      	adds	r7, #40	; 0x28
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	09896800 	.word	0x09896800
 8004074:	04c4b400 	.word	0x04c4b400

08004078 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d005      	beq.n	800409c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2204      	movs	r2, #4
 8004094:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	e037      	b.n	800410c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 020e 	bic.w	r2, r2, #14
 80040aa:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ba:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f003 021f 	and.w	r2, r3, #31
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	2101      	movs	r1, #1
 80040da:	fa01 f202 	lsl.w	r2, r1, r2
 80040de:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040e8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00c      	beq.n	800410c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004100:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800410a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800411c:	7bfb      	ldrb	r3, [r7, #15]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d00d      	beq.n	800415e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2204      	movs	r2, #4
 8004146:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
 800415c:	e047      	b.n	80041ee <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 020e 	bic.w	r2, r2, #14
 800416c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800418c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f003 021f 	and.w	r2, r3, #31
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2101      	movs	r1, #1
 800419c:	fa01 f202 	lsl.w	r2, r1, r2
 80041a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
    }
  }
  return status;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004206:	e15a      	b.n	80044be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2101      	movs	r1, #1
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	fa01 f303 	lsl.w	r3, r1, r3
 8004214:	4013      	ands	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 814c 	beq.w	80044b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d005      	beq.n	8004238 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004234:	2b02      	cmp	r3, #2
 8004236:	d130      	bne.n	800429a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	2203      	movs	r2, #3
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800426e:	2201      	movs	r2, #1
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 0201 	and.w	r2, r3, #1
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d017      	beq.n	80042d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	2203      	movs	r2, #3
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d123      	bne.n	800432a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	08da      	lsrs	r2, r3, #3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3208      	adds	r2, #8
 80042ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	220f      	movs	r2, #15
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43db      	mvns	r3, r3
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4013      	ands	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	08da      	lsrs	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3208      	adds	r2, #8
 8004324:	6939      	ldr	r1, [r7, #16]
 8004326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	2203      	movs	r2, #3
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0203 	and.w	r2, r3, #3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 80a6 	beq.w	80044b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436c:	4b5b      	ldr	r3, [pc, #364]	; (80044dc <HAL_GPIO_Init+0x2e4>)
 800436e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004370:	4a5a      	ldr	r2, [pc, #360]	; (80044dc <HAL_GPIO_Init+0x2e4>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6613      	str	r3, [r2, #96]	; 0x60
 8004378:	4b58      	ldr	r3, [pc, #352]	; (80044dc <HAL_GPIO_Init+0x2e4>)
 800437a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004384:	4a56      	ldr	r2, [pc, #344]	; (80044e0 <HAL_GPIO_Init+0x2e8>)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	3302      	adds	r3, #2
 800438c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	220f      	movs	r2, #15
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043ae:	d01f      	beq.n	80043f0 <HAL_GPIO_Init+0x1f8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a4c      	ldr	r2, [pc, #304]	; (80044e4 <HAL_GPIO_Init+0x2ec>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d019      	beq.n	80043ec <HAL_GPIO_Init+0x1f4>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a4b      	ldr	r2, [pc, #300]	; (80044e8 <HAL_GPIO_Init+0x2f0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <HAL_GPIO_Init+0x1f0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a4a      	ldr	r2, [pc, #296]	; (80044ec <HAL_GPIO_Init+0x2f4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00d      	beq.n	80043e4 <HAL_GPIO_Init+0x1ec>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a49      	ldr	r2, [pc, #292]	; (80044f0 <HAL_GPIO_Init+0x2f8>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d007      	beq.n	80043e0 <HAL_GPIO_Init+0x1e8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a48      	ldr	r2, [pc, #288]	; (80044f4 <HAL_GPIO_Init+0x2fc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d101      	bne.n	80043dc <HAL_GPIO_Init+0x1e4>
 80043d8:	2305      	movs	r3, #5
 80043da:	e00a      	b.n	80043f2 <HAL_GPIO_Init+0x1fa>
 80043dc:	2306      	movs	r3, #6
 80043de:	e008      	b.n	80043f2 <HAL_GPIO_Init+0x1fa>
 80043e0:	2304      	movs	r3, #4
 80043e2:	e006      	b.n	80043f2 <HAL_GPIO_Init+0x1fa>
 80043e4:	2303      	movs	r3, #3
 80043e6:	e004      	b.n	80043f2 <HAL_GPIO_Init+0x1fa>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e002      	b.n	80043f2 <HAL_GPIO_Init+0x1fa>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <HAL_GPIO_Init+0x1fa>
 80043f0:	2300      	movs	r3, #0
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	f002 0203 	and.w	r2, r2, #3
 80043f8:	0092      	lsls	r2, r2, #2
 80043fa:	4093      	lsls	r3, r2
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004402:	4937      	ldr	r1, [pc, #220]	; (80044e0 <HAL_GPIO_Init+0x2e8>)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	3302      	adds	r3, #2
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004410:	4b39      	ldr	r3, [pc, #228]	; (80044f8 <HAL_GPIO_Init+0x300>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	43db      	mvns	r3, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004434:	4a30      	ldr	r2, [pc, #192]	; (80044f8 <HAL_GPIO_Init+0x300>)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800443a:	4b2f      	ldr	r3, [pc, #188]	; (80044f8 <HAL_GPIO_Init+0x300>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800445e:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <HAL_GPIO_Init+0x300>)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_GPIO_Init+0x300>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	43db      	mvns	r3, r3
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4013      	ands	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004488:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_GPIO_Init+0x300>)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800448e:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <HAL_GPIO_Init+0x300>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	43db      	mvns	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044b2:	4a11      	ldr	r2, [pc, #68]	; (80044f8 <HAL_GPIO_Init+0x300>)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	3301      	adds	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f47f ae9d 	bne.w	8004208 <HAL_GPIO_Init+0x10>
  }
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40010000 	.word	0x40010000
 80044e4:	48000400 	.word	0x48000400
 80044e8:	48000800 	.word	0x48000800
 80044ec:	48000c00 	.word	0x48000c00
 80044f0:	48001000 	.word	0x48001000
 80044f4:	48001400 	.word	0x48001400
 80044f8:	40010400 	.word	0x40010400

080044fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	887b      	ldrh	r3, [r7, #2]
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004514:	2301      	movs	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
 8004518:	e001      	b.n	800451e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800451e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	807b      	strh	r3, [r7, #2]
 8004538:	4613      	mov	r3, r2
 800453a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800453c:	787b      	ldrb	r3, [r7, #1]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004542:	887a      	ldrh	r2, [r7, #2]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004548:	e002      	b.n	8004550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800454a:	887a      	ldrh	r2, [r7, #2]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004566:	4b08      	ldr	r3, [pc, #32]	; (8004588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	4013      	ands	r3, r2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004572:	4a05      	ldr	r2, [pc, #20]	; (8004588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f806 	bl	800458c <HAL_GPIO_EXTI_Callback>
  }
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40010400 	.word	0x40010400

0800458c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e081      	b.n	80046b8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fd fc83 	bl	8001ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2224      	movs	r2, #36	; 0x24
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004602:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d107      	bne.n	800461c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004618:	609a      	str	r2, [r3, #8]
 800461a:	e006      	b.n	800462a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004628:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d104      	bne.n	800463c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800463a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800464a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800465e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69d9      	ldr	r1, [r3, #28]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1a      	ldr	r2, [r3, #32]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	461a      	mov	r2, r3
 80046cc:	460b      	mov	r3, r1
 80046ce:	817b      	strh	r3, [r7, #10]
 80046d0:	4613      	mov	r3, r2
 80046d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b20      	cmp	r3, #32
 80046de:	f040 80da 	bne.w	8004896 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_I2C_Master_Transmit+0x30>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0d3      	b.n	8004898 <HAL_I2C_Master_Transmit+0x1d8>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046f8:	f7fd ff3e 	bl	8002578 <HAL_GetTick>
 80046fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	2319      	movs	r3, #25
 8004704:	2201      	movs	r2, #1
 8004706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 faed 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0be      	b.n	8004898 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2221      	movs	r2, #33	; 0x21
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2210      	movs	r2, #16
 8004726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	893a      	ldrh	r2, [r7, #8]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004746:	b29b      	uxth	r3, r3
 8004748:	2bff      	cmp	r3, #255	; 0xff
 800474a:	d90e      	bls.n	800476a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	22ff      	movs	r2, #255	; 0xff
 8004750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	b2da      	uxtb	r2, r3
 8004758:	8979      	ldrh	r1, [r7, #10]
 800475a:	4b51      	ldr	r3, [pc, #324]	; (80048a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fce4 	bl	8005130 <I2C_TransferConfig>
 8004768:	e06c      	b.n	8004844 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	b2da      	uxtb	r2, r3
 800477a:	8979      	ldrh	r1, [r7, #10]
 800477c:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fcd3 	bl	8005130 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800478a:	e05b      	b.n	8004844 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	6a39      	ldr	r1, [r7, #32]
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 faea 	bl	8004d6a <I2C_WaitOnTXISFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e07b      	b.n	8004898 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d034      	beq.n	8004844 <HAL_I2C_Master_Transmit+0x184>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d130      	bne.n	8004844 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	2200      	movs	r2, #0
 80047ea:	2180      	movs	r1, #128	; 0x80
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fa7c 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e04d      	b.n	8004898 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2bff      	cmp	r3, #255	; 0xff
 8004804:	d90e      	bls.n	8004824 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	22ff      	movs	r2, #255	; 0xff
 800480a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	b2da      	uxtb	r2, r3
 8004812:	8979      	ldrh	r1, [r7, #10]
 8004814:	2300      	movs	r3, #0
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fc87 	bl	8005130 <I2C_TransferConfig>
 8004822:	e00f      	b.n	8004844 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	b2da      	uxtb	r2, r3
 8004834:	8979      	ldrh	r1, [r7, #10]
 8004836:	2300      	movs	r3, #0
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fc76 	bl	8005130 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d19e      	bne.n	800478c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	6a39      	ldr	r1, [r7, #32]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fac9 	bl	8004dea <I2C_WaitOnSTOPFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e01a      	b.n	8004898 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2220      	movs	r2, #32
 8004868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8004876:	400b      	ands	r3, r1
 8004878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e000      	b.n	8004898 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004896:	2302      	movs	r3, #2
  }
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	80002000 	.word	0x80002000
 80048a4:	fe00e800 	.word	0xfe00e800

080048a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	461a      	mov	r2, r3
 80048b4:	460b      	mov	r3, r1
 80048b6:	817b      	strh	r3, [r7, #10]
 80048b8:	4613      	mov	r3, r2
 80048ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	f040 80db 	bne.w	8004a80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_I2C_Master_Receive+0x30>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e0d4      	b.n	8004a82 <HAL_I2C_Master_Receive+0x1da>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048e0:	f7fd fe4a 	bl	8002578 <HAL_GetTick>
 80048e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	2319      	movs	r3, #25
 80048ec:	2201      	movs	r2, #1
 80048ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f9f9 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e0bf      	b.n	8004a82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2222      	movs	r2, #34	; 0x22
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2210      	movs	r2, #16
 800490e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	893a      	ldrh	r2, [r7, #8]
 8004922:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	2bff      	cmp	r3, #255	; 0xff
 8004932:	d90e      	bls.n	8004952 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	22ff      	movs	r2, #255	; 0xff
 8004938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	b2da      	uxtb	r2, r3
 8004940:	8979      	ldrh	r1, [r7, #10]
 8004942:	4b52      	ldr	r3, [pc, #328]	; (8004a8c <HAL_I2C_Master_Receive+0x1e4>)
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fbf0 	bl	8005130 <I2C_TransferConfig>
 8004950:	e06d      	b.n	8004a2e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004960:	b2da      	uxtb	r2, r3
 8004962:	8979      	ldrh	r1, [r7, #10]
 8004964:	4b49      	ldr	r3, [pc, #292]	; (8004a8c <HAL_I2C_Master_Receive+0x1e4>)
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fbdf 	bl	8005130 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004972:	e05c      	b.n	8004a2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	6a39      	ldr	r1, [r7, #32]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fa73 	bl	8004e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e07c      	b.n	8004a82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3b01      	subs	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d034      	beq.n	8004a2e <HAL_I2C_Master_Receive+0x186>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d130      	bne.n	8004a2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	2200      	movs	r2, #0
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f987 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e04d      	b.n	8004a82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2bff      	cmp	r3, #255	; 0xff
 80049ee:	d90e      	bls.n	8004a0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	22ff      	movs	r2, #255	; 0xff
 80049f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	8979      	ldrh	r1, [r7, #10]
 80049fe:	2300      	movs	r3, #0
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fb92 	bl	8005130 <I2C_TransferConfig>
 8004a0c:	e00f      	b.n	8004a2e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	8979      	ldrh	r1, [r7, #10]
 8004a20:	2300      	movs	r3, #0
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fb81 	bl	8005130 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d19d      	bne.n	8004974 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	6a39      	ldr	r1, [r7, #32]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 f9d4 	bl	8004dea <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e01a      	b.n	8004a82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2220      	movs	r2, #32
 8004a52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6859      	ldr	r1, [r3, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <HAL_I2C_Master_Receive+0x1e8>)
 8004a60:	400b      	ands	r3, r1
 8004a62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e000      	b.n	8004a82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004a80:	2302      	movs	r3, #2
  }
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	80002400 	.word	0x80002400
 8004a90:	fe00e800 	.word	0xfe00e800

08004a94 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	; 0x28
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	f040 80f1 	bne.w	8004c98 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac4:	d101      	bne.n	8004aca <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e0e7      	b.n	8004c9a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_I2C_IsDeviceReady+0x44>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e0e0      	b.n	8004c9a <HAL_I2C_IsDeviceReady+0x206>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2224      	movs	r2, #36	; 0x24
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d107      	bne.n	8004b06 <HAL_I2C_IsDeviceReady+0x72>
 8004af6:	897b      	ldrh	r3, [r7, #10]
 8004af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b04:	e004      	b.n	8004b10 <HAL_I2C_IsDeviceReady+0x7c>
 8004b06:	897b      	ldrh	r3, [r7, #10]
 8004b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b0c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004b16:	f7fd fd2f 	bl	8002578 <HAL_GetTick>
 8004b1a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	2b10      	cmp	r3, #16
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004b48:	e034      	b.n	8004bb4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d01a      	beq.n	8004b88 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b52:	f7fd fd11 	bl	8002578 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d302      	bcc.n	8004b68 <HAL_I2C_IsDeviceReady+0xd4>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10f      	bne.n	8004b88 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b74:	f043 0220 	orr.w	r2, r3, #32
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e088      	b.n	8004c9a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	bf0c      	ite	eq
 8004b96:	2301      	moveq	r3, #1
 8004b98:	2300      	movne	r3, #0
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	bf0c      	ite	eq
 8004bac:	2301      	moveq	r3, #1
 8004bae:	2300      	movne	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004bb4:	7ffb      	ldrb	r3, [r7, #31]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d102      	bne.n	8004bc0 <HAL_I2C_IsDeviceReady+0x12c>
 8004bba:	7fbb      	ldrb	r3, [r7, #30]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0c4      	beq.n	8004b4a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d01a      	beq.n	8004c04 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2120      	movs	r1, #32
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f886 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e058      	b.n	8004c9a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2220      	movs	r2, #32
 8004bee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e04a      	b.n	8004c9a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	2120      	movs	r1, #32
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f86b 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e03d      	b.n	8004c9a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2210      	movs	r2, #16
 8004c24:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d118      	bne.n	8004c68 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c44:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2120      	movs	r1, #32
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f84a 	bl	8004cea <I2C_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e01c      	b.n	8004c9a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2220      	movs	r2, #32
 8004c66:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	f63f af3b 	bhi.w	8004aee <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
  }
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d103      	bne.n	8004cc0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d007      	beq.n	8004cde <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	619a      	str	r2, [r3, #24]
  }
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	603b      	str	r3, [r7, #0]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cfa:	e022      	b.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d01e      	beq.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d04:	f7fd fc38 	bl	8002578 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d302      	bcc.n	8004d1a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d113      	bne.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1e:	f043 0220 	orr.w	r2, r3, #32
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e00f      	b.n	8004d62 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699a      	ldr	r2, [r3, #24]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d0cd      	beq.n	8004cfc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d76:	e02c      	b.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f8eb 	bl	8004f58 <I2C_IsErrorOccurred>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e02a      	b.n	8004de2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d01e      	beq.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d94:	f7fd fbf0 	bl	8002578 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d113      	bne.n	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e007      	b.n	8004de2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d1cb      	bne.n	8004d78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df6:	e028      	b.n	8004e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f8ab 	bl	8004f58 <I2C_IsErrorOccurred>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e026      	b.n	8004e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fd fbb4 	bl	8002578 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d113      	bne.n	8004e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e007      	b.n	8004e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d1cf      	bne.n	8004df8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e70:	e064      	b.n	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f86e 	bl	8004f58 <I2C_IsErrorOccurred>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e062      	b.n	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d138      	bne.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d105      	bne.n	8004eae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e04e      	b.n	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d107      	bne.n	8004ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	645a      	str	r2, [r3, #68]	; 0x44
 8004eca:	e002      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6859      	ldr	r1, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004ee6:	400b      	ands	r3, r1
 8004ee8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e022      	b.n	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f06:	f7fd fb37 	bl	8002578 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d302      	bcc.n	8004f1c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10f      	bne.n	8004f3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e007      	b.n	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d193      	bne.n	8004e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	fe00e800 	.word	0xfe00e800

08004f58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	; 0x28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d075      	beq.n	8005070 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2210      	movs	r2, #16
 8004f8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f8c:	e056      	b.n	800503c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d052      	beq.n	800503c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fd faef 	bl	8002578 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <I2C_IsErrorOccurred+0x54>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d147      	bne.n	800503c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fce:	d12e      	bne.n	800502e <I2C_IsErrorOccurred+0xd6>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fd6:	d02a      	beq.n	800502e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d027      	beq.n	800502e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fec:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004fee:	f7fd fac3 	bl	8002578 <HAL_GetTick>
 8004ff2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ff4:	e01b      	b.n	800502e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ff6:	f7fd fabf 	bl	8002578 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b19      	cmp	r3, #25
 8005002:	d914      	bls.n	800502e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005008:	f043 0220 	orr.w	r2, r3, #32
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b20      	cmp	r3, #32
 800503a:	d1dc      	bne.n	8004ff6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b20      	cmp	r3, #32
 8005048:	d003      	beq.n	8005052 <I2C_IsErrorOccurred+0xfa>
 800504a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800504e:	2b00      	cmp	r3, #0
 8005050:	d09d      	beq.n	8004f8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2220      	movs	r2, #32
 8005060:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	f043 0304 	orr.w	r3, r3, #4
 8005068:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005092:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	f043 0308 	orr.w	r3, r3, #8
 80050aa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	f043 0302 	orr.w	r3, r3, #2
 80050cc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80050de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01c      	beq.n	8005120 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff fddb 	bl	8004ca2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6859      	ldr	r1, [r3, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <I2C_IsErrorOccurred+0x1d4>)
 80050f8:	400b      	ands	r3, r1
 80050fa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	431a      	orrs	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005124:	4618      	mov	r0, r3
 8005126:	3728      	adds	r7, #40	; 0x28
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	fe00e800 	.word	0xfe00e800

08005130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	817b      	strh	r3, [r7, #10]
 800513e:	4613      	mov	r3, r2
 8005140:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005142:	897b      	ldrh	r3, [r7, #10]
 8005144:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005148:	7a7b      	ldrb	r3, [r7, #9]
 800514a:	041b      	lsls	r3, r3, #16
 800514c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005150:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	4313      	orrs	r3, r2
 800515a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800515e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	0d5b      	lsrs	r3, r3, #21
 800516a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800516e:	4b08      	ldr	r3, [pc, #32]	; (8005190 <I2C_TransferConfig+0x60>)
 8005170:	430b      	orrs	r3, r1
 8005172:	43db      	mvns	r3, r3
 8005174:	ea02 0103 	and.w	r1, r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	03ff63ff 	.word	0x03ff63ff

08005194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d138      	bne.n	800521c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e032      	b.n	800521e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	; 0x24
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6819      	ldr	r1, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e000      	b.n	800521e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800521c:	2302      	movs	r3, #2
  }
}
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b20      	cmp	r3, #32
 800523e:	d139      	bne.n	80052b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800524a:	2302      	movs	r3, #2
 800524c:	e033      	b.n	80052b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2224      	movs	r2, #36	; 0x24
 800525a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800527c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d141      	bne.n	8005356 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052d2:	4b4b      	ldr	r3, [pc, #300]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052de:	d131      	bne.n	8005344 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052e0:	4b47      	ldr	r3, [pc, #284]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e6:	4a46      	ldr	r2, [pc, #280]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052f0:	4b43      	ldr	r3, [pc, #268]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052f8:	4a41      	ldr	r2, [pc, #260]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005300:	4b40      	ldr	r3, [pc, #256]	; (8005404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2232      	movs	r2, #50	; 0x32
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	4a3f      	ldr	r2, [pc, #252]	; (8005408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	0c9b      	lsrs	r3, r3, #18
 8005312:	3301      	adds	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005316:	e002      	b.n	800531e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3b01      	subs	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800531e:	4b38      	ldr	r3, [pc, #224]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532a:	d102      	bne.n	8005332 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f2      	bne.n	8005318 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005332:	4b33      	ldr	r3, [pc, #204]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533e:	d158      	bne.n	80053f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e057      	b.n	80053f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005344:	4b2e      	ldr	r3, [pc, #184]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800534a:	4a2d      	ldr	r2, [pc, #180]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005354:	e04d      	b.n	80053f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800535c:	d141      	bne.n	80053e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800535e:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800536a:	d131      	bne.n	80053d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800536c:	4b24      	ldr	r3, [pc, #144]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005372:	4a23      	ldr	r2, [pc, #140]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005378:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800537c:	4b20      	ldr	r3, [pc, #128]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005384:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800538a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800538c:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2232      	movs	r2, #50	; 0x32
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	0c9b      	lsrs	r3, r3, #18
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053a2:	e002      	b.n	80053aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053aa:	4b15      	ldr	r3, [pc, #84]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b6:	d102      	bne.n	80053be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f2      	bne.n	80053a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ca:	d112      	bne.n	80053f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e011      	b.n	80053f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053d6:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80053e0:	e007      	b.n	80053f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053e2:	4b07      	ldr	r3, [pc, #28]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053ea:	4a05      	ldr	r2, [pc, #20]	; (8005400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	40007000 	.word	0x40007000
 8005404:	20000004 	.word	0x20000004
 8005408:	431bde83 	.word	0x431bde83

0800540c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4a04      	ldr	r2, [pc, #16]	; (8005428 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800541a:	6093      	str	r3, [r2, #8]
}
 800541c:	bf00      	nop
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40007000 	.word	0x40007000

0800542c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e306      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d075      	beq.n	8005536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800544a:	4b97      	ldr	r3, [pc, #604]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 030c 	and.w	r3, r3, #12
 8005452:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005454:	4b94      	ldr	r3, [pc, #592]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b0c      	cmp	r3, #12
 8005462:	d102      	bne.n	800546a <HAL_RCC_OscConfig+0x3e>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b03      	cmp	r3, #3
 8005468:	d002      	beq.n	8005470 <HAL_RCC_OscConfig+0x44>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d10b      	bne.n	8005488 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005470:	4b8d      	ldr	r3, [pc, #564]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d05b      	beq.n	8005534 <HAL_RCC_OscConfig+0x108>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d157      	bne.n	8005534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e2e1      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005490:	d106      	bne.n	80054a0 <HAL_RCC_OscConfig+0x74>
 8005492:	4b85      	ldr	r3, [pc, #532]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a84      	ldr	r2, [pc, #528]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e01d      	b.n	80054dc <HAL_RCC_OscConfig+0xb0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a8:	d10c      	bne.n	80054c4 <HAL_RCC_OscConfig+0x98>
 80054aa:	4b7f      	ldr	r3, [pc, #508]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a7e      	ldr	r2, [pc, #504]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80054b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4b7c      	ldr	r3, [pc, #496]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a7b      	ldr	r2, [pc, #492]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80054bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e00b      	b.n	80054dc <HAL_RCC_OscConfig+0xb0>
 80054c4:	4b78      	ldr	r3, [pc, #480]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a77      	ldr	r2, [pc, #476]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80054ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	4b75      	ldr	r3, [pc, #468]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a74      	ldr	r2, [pc, #464]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80054d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d013      	beq.n	800550c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fd f848 	bl	8002578 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ec:	f7fd f844 	bl	8002578 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b64      	cmp	r3, #100	; 0x64
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e2a6      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054fe:	4b6a      	ldr	r3, [pc, #424]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0xc0>
 800550a:	e014      	b.n	8005536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fd f834 	bl	8002578 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005514:	f7fd f830 	bl	8002578 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	; 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e292      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005526:	4b60      	ldr	r3, [pc, #384]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0xe8>
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d075      	beq.n	800562e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005542:	4b59      	ldr	r3, [pc, #356]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
 800554a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800554c:	4b56      	ldr	r3, [pc, #344]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b0c      	cmp	r3, #12
 800555a:	d102      	bne.n	8005562 <HAL_RCC_OscConfig+0x136>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d002      	beq.n	8005568 <HAL_RCC_OscConfig+0x13c>
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b04      	cmp	r3, #4
 8005566:	d11f      	bne.n	80055a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005568:	4b4f      	ldr	r3, [pc, #316]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <HAL_RCC_OscConfig+0x154>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e265      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005580:	4b49      	ldr	r3, [pc, #292]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	061b      	lsls	r3, r3, #24
 800558e:	4946      	ldr	r1, [pc, #280]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005590:	4313      	orrs	r3, r2
 8005592:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005594:	4b45      	ldr	r3, [pc, #276]	; (80056ac <HAL_RCC_OscConfig+0x280>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f7fc ffa1 	bl	80024e0 <HAL_InitTick>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d043      	beq.n	800562c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e251      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d023      	beq.n	80055f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055b0:	4b3d      	ldr	r3, [pc, #244]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a3c      	ldr	r2, [pc, #240]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80055b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055bc:	f7fc ffdc 	bl	8002578 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055c4:	f7fc ffd8 	bl	8002578 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e23a      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055d6:	4b34      	ldr	r3, [pc, #208]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e2:	4b31      	ldr	r3, [pc, #196]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	061b      	lsls	r3, r3, #24
 80055f0:	492d      	ldr	r1, [pc, #180]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]
 80055f6:	e01a      	b.n	800562e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055f8:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a2a      	ldr	r2, [pc, #168]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 80055fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fc ffb8 	bl	8002578 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800560c:	f7fc ffb4 	bl	8002578 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e216      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800561e:	4b22      	ldr	r3, [pc, #136]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x1e0>
 800562a:	e000      	b.n	800562e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800562c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d041      	beq.n	80056be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01c      	beq.n	800567c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005642:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005648:	4a17      	ldr	r2, [pc, #92]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005652:	f7fc ff91 	bl	8002578 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800565a:	f7fc ff8d 	bl	8002578 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e1ef      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800566c:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 800566e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0ef      	beq.n	800565a <HAL_RCC_OscConfig+0x22e>
 800567a:	e020      	b.n	80056be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 800567e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005682:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <HAL_RCC_OscConfig+0x27c>)
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568c:	f7fc ff74 	bl	8002578 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005692:	e00d      	b.n	80056b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005694:	f7fc ff70 	bl	8002578 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d906      	bls.n	80056b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e1d2      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000
 80056ac:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056b0:	4b8c      	ldr	r3, [pc, #560]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 80056b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1ea      	bne.n	8005694 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80a6 	beq.w	8005818 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056cc:	2300      	movs	r3, #0
 80056ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056d0:	4b84      	ldr	r3, [pc, #528]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_OscConfig+0x2b4>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_RCC_OscConfig+0x2b6>
 80056e0:	2300      	movs	r3, #0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00d      	beq.n	8005702 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e6:	4b7f      	ldr	r3, [pc, #508]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	4a7e      	ldr	r2, [pc, #504]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 80056ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f0:	6593      	str	r3, [r2, #88]	; 0x58
 80056f2:	4b7c      	ldr	r3, [pc, #496]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056fe:	2301      	movs	r3, #1
 8005700:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005702:	4b79      	ldr	r3, [pc, #484]	; (80058e8 <HAL_RCC_OscConfig+0x4bc>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570a:	2b00      	cmp	r3, #0
 800570c:	d118      	bne.n	8005740 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800570e:	4b76      	ldr	r3, [pc, #472]	; (80058e8 <HAL_RCC_OscConfig+0x4bc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a75      	ldr	r2, [pc, #468]	; (80058e8 <HAL_RCC_OscConfig+0x4bc>)
 8005714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800571a:	f7fc ff2d 	bl	8002578 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005720:	e008      	b.n	8005734 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005722:	f7fc ff29 	bl	8002578 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e18b      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005734:	4b6c      	ldr	r3, [pc, #432]	; (80058e8 <HAL_RCC_OscConfig+0x4bc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d108      	bne.n	800575a <HAL_RCC_OscConfig+0x32e>
 8005748:	4b66      	ldr	r3, [pc, #408]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	4a65      	ldr	r2, [pc, #404]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005758:	e024      	b.n	80057a4 <HAL_RCC_OscConfig+0x378>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b05      	cmp	r3, #5
 8005760:	d110      	bne.n	8005784 <HAL_RCC_OscConfig+0x358>
 8005762:	4b60      	ldr	r3, [pc, #384]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005768:	4a5e      	ldr	r2, [pc, #376]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 800576a:	f043 0304 	orr.w	r3, r3, #4
 800576e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005772:	4b5c      	ldr	r3, [pc, #368]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 8005774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005778:	4a5a      	ldr	r2, [pc, #360]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005782:	e00f      	b.n	80057a4 <HAL_RCC_OscConfig+0x378>
 8005784:	4b57      	ldr	r3, [pc, #348]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	4a56      	ldr	r2, [pc, #344]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005794:	4b53      	ldr	r3, [pc, #332]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	4a52      	ldr	r2, [pc, #328]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 800579c:	f023 0304 	bic.w	r3, r3, #4
 80057a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d016      	beq.n	80057da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fc fee4 	bl	8002578 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b2:	e00a      	b.n	80057ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b4:	f7fc fee0 	bl	8002578 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e140      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ca:	4b46      	ldr	r3, [pc, #280]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0ed      	beq.n	80057b4 <HAL_RCC_OscConfig+0x388>
 80057d8:	e015      	b.n	8005806 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057da:	f7fc fecd 	bl	8002578 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057e0:	e00a      	b.n	80057f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e2:	f7fc fec9 	bl	8002578 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e129      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057f8:	4b3a      	ldr	r3, [pc, #232]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1ed      	bne.n	80057e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005806:	7ffb      	ldrb	r3, [r7, #31]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d105      	bne.n	8005818 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800580c:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 800580e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005810:	4a34      	ldr	r2, [pc, #208]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 8005812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005816:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d03c      	beq.n	800589e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01c      	beq.n	8005866 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800582c:	4b2d      	ldr	r3, [pc, #180]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 800582e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005832:	4a2c      	ldr	r2, [pc, #176]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fc fe9c 	bl	8002578 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005844:	f7fc fe98 	bl	8002578 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e0fa      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005856:	4b23      	ldr	r3, [pc, #140]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 8005858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ef      	beq.n	8005844 <HAL_RCC_OscConfig+0x418>
 8005864:	e01b      	b.n	800589e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005866:	4b1f      	ldr	r3, [pc, #124]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 8005868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800586c:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005876:	f7fc fe7f 	bl	8002578 <HAL_GetTick>
 800587a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800587e:	f7fc fe7b 	bl	8002578 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e0dd      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005890:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 8005892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1ef      	bne.n	800587e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80d1 	beq.w	8005a4a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058a8:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 030c 	and.w	r3, r3, #12
 80058b0:	2b0c      	cmp	r3, #12
 80058b2:	f000 808b 	beq.w	80059cc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d15e      	bne.n	800597c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a08      	ldr	r2, [pc, #32]	; (80058e4 <HAL_RCC_OscConfig+0x4b8>)
 80058c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ca:	f7fc fe55 	bl	8002578 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d0:	e00c      	b.n	80058ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d2:	f7fc fe51 	bl	8002578 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d905      	bls.n	80058ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0b3      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
 80058e4:	40021000 	.word	0x40021000
 80058e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058ec:	4b59      	ldr	r3, [pc, #356]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1ec      	bne.n	80058d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058f8:	4b56      	ldr	r3, [pc, #344]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	4b56      	ldr	r3, [pc, #344]	; (8005a58 <HAL_RCC_OscConfig+0x62c>)
 80058fe:	4013      	ands	r3, r2
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6a11      	ldr	r1, [r2, #32]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005908:	3a01      	subs	r2, #1
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	4311      	orrs	r1, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005912:	0212      	lsls	r2, r2, #8
 8005914:	4311      	orrs	r1, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800591a:	0852      	lsrs	r2, r2, #1
 800591c:	3a01      	subs	r2, #1
 800591e:	0552      	lsls	r2, r2, #21
 8005920:	4311      	orrs	r1, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005926:	0852      	lsrs	r2, r2, #1
 8005928:	3a01      	subs	r2, #1
 800592a:	0652      	lsls	r2, r2, #25
 800592c:	4311      	orrs	r1, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005932:	06d2      	lsls	r2, r2, #27
 8005934:	430a      	orrs	r2, r1
 8005936:	4947      	ldr	r1, [pc, #284]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 8005938:	4313      	orrs	r3, r2
 800593a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800593c:	4b45      	ldr	r3, [pc, #276]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a44      	ldr	r2, [pc, #272]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 8005942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005946:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005948:	4b42      	ldr	r3, [pc, #264]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4a41      	ldr	r2, [pc, #260]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 800594e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005952:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005954:	f7fc fe10 	bl	8002578 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800595c:	f7fc fe0c 	bl	8002578 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e06e      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0f0      	beq.n	800595c <HAL_RCC_OscConfig+0x530>
 800597a:	e066      	b.n	8005a4a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597c:	4b35      	ldr	r3, [pc, #212]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a34      	ldr	r2, [pc, #208]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 8005982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005986:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005988:	4b32      	ldr	r3, [pc, #200]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4a31      	ldr	r2, [pc, #196]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005994:	4b2f      	ldr	r3, [pc, #188]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4a2e      	ldr	r2, [pc, #184]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 800599a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800599e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7fc fde8 	bl	8002578 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fc fde4 	bl	8002578 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e046      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059be:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x580>
 80059ca:	e03e      	b.n	8005a4a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e039      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80059d8:	4b1e      	ldr	r3, [pc, #120]	; (8005a54 <HAL_RCC_OscConfig+0x628>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f003 0203 	and.w	r2, r3, #3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d12c      	bne.n	8005a46 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	3b01      	subs	r3, #1
 80059f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d123      	bne.n	8005a46 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d11b      	bne.n	8005a46 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d113      	bne.n	8005a46 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	085b      	lsrs	r3, r3, #1
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d109      	bne.n	8005a46 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3c:	085b      	lsrs	r3, r3, #1
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d001      	beq.n	8005a4a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3720      	adds	r7, #32
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40021000 	.word	0x40021000
 8005a58:	019f800c 	.word	0x019f800c

08005a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e11e      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a74:	4b91      	ldr	r3, [pc, #580]	; (8005cbc <HAL_RCC_ClockConfig+0x260>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d910      	bls.n	8005aa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a82:	4b8e      	ldr	r3, [pc, #568]	; (8005cbc <HAL_RCC_ClockConfig+0x260>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 020f 	bic.w	r2, r3, #15
 8005a8a:	498c      	ldr	r1, [pc, #560]	; (8005cbc <HAL_RCC_ClockConfig+0x260>)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a92:	4b8a      	ldr	r3, [pc, #552]	; (8005cbc <HAL_RCC_ClockConfig+0x260>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d001      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e106      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d073      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d129      	bne.n	8005b0c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ab8:	4b81      	ldr	r3, [pc, #516]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0f4      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005ac8:	f000 f99e 	bl	8005e08 <RCC_GetSysClockFreqFromPLLSource>
 8005acc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4a7c      	ldr	r2, [pc, #496]	; (8005cc4 <HAL_RCC_ClockConfig+0x268>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d93f      	bls.n	8005b56 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ad6:	4b7a      	ldr	r3, [pc, #488]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d009      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d033      	beq.n	8005b56 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d12f      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005af6:	4b72      	ldr	r3, [pc, #456]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005afe:	4a70      	ldr	r2, [pc, #448]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b06:	2380      	movs	r3, #128	; 0x80
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	e024      	b.n	8005b56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d107      	bne.n	8005b24 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b14:	4b6a      	ldr	r3, [pc, #424]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d109      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0c6      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b24:	4b66      	ldr	r3, [pc, #408]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0be      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005b34:	f000 f8ce 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 8005b38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4a61      	ldr	r2, [pc, #388]	; (8005cc4 <HAL_RCC_ClockConfig+0x268>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d909      	bls.n	8005b56 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b42:	4b5f      	ldr	r3, [pc, #380]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b4a:	4a5d      	ldr	r2, [pc, #372]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b56:	4b5a      	ldr	r3, [pc, #360]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f023 0203 	bic.w	r2, r3, #3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4957      	ldr	r1, [pc, #348]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b68:	f7fc fd06 	bl	8002578 <HAL_GetTick>
 8005b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b70:	f7fc fd02 	bl	8002578 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e095      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b86:	4b4e      	ldr	r3, [pc, #312]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 020c 	and.w	r2, r3, #12
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d1eb      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d023      	beq.n	8005bec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bb0:	4b43      	ldr	r3, [pc, #268]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4a42      	ldr	r2, [pc, #264]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005bb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005bc8:	4b3d      	ldr	r3, [pc, #244]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005bd0:	4a3b      	ldr	r2, [pc, #236]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005bd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd8:	4b39      	ldr	r3, [pc, #228]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4936      	ldr	r1, [pc, #216]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	608b      	str	r3, [r1, #8]
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2b80      	cmp	r3, #128	; 0x80
 8005bf0:	d105      	bne.n	8005bfe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bf2:	4b33      	ldr	r3, [pc, #204]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	4a32      	ldr	r2, [pc, #200]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bfc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bfe:	4b2f      	ldr	r3, [pc, #188]	; (8005cbc <HAL_RCC_ClockConfig+0x260>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d21d      	bcs.n	8005c48 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0c:	4b2b      	ldr	r3, [pc, #172]	; (8005cbc <HAL_RCC_ClockConfig+0x260>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 020f 	bic.w	r2, r3, #15
 8005c14:	4929      	ldr	r1, [pc, #164]	; (8005cbc <HAL_RCC_ClockConfig+0x260>)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c1c:	f7fc fcac 	bl	8002578 <HAL_GetTick>
 8005c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c22:	e00a      	b.n	8005c3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c24:	f7fc fca8 	bl	8002578 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e03b      	b.n	8005cb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3a:	4b20      	ldr	r3, [pc, #128]	; (8005cbc <HAL_RCC_ClockConfig+0x260>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d1ed      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4917      	ldr	r1, [pc, #92]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c72:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	490f      	ldr	r1, [pc, #60]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c86:	f000 f825 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <HAL_RCC_ClockConfig+0x264>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	490c      	ldr	r1, [pc, #48]	; (8005cc8 <HAL_RCC_ClockConfig+0x26c>)
 8005c98:	5ccb      	ldrb	r3, [r1, r3]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca2:	4a0a      	ldr	r2, [pc, #40]	; (8005ccc <HAL_RCC_ClockConfig+0x270>)
 8005ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <HAL_RCC_ClockConfig+0x274>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fc fc18 	bl	80024e0 <HAL_InitTick>
 8005cb0:	4603      	mov	r3, r0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40022000 	.word	0x40022000
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	04c4b400 	.word	0x04c4b400
 8005cc8:	0800b7f0 	.word	0x0800b7f0
 8005ccc:	20000004 	.word	0x20000004
 8005cd0:	20000008 	.word	0x20000008

08005cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005cda:	4b2c      	ldr	r3, [pc, #176]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d102      	bne.n	8005cec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ce6:	4b2a      	ldr	r3, [pc, #168]	; (8005d90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	e047      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005cec:	4b27      	ldr	r3, [pc, #156]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 030c 	and.w	r3, r3, #12
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d102      	bne.n	8005cfe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cf8:	4b26      	ldr	r3, [pc, #152]	; (8005d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e03e      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
 8005d06:	2b0c      	cmp	r3, #12
 8005d08:	d136      	bne.n	8005d78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d0a:	4b20      	ldr	r3, [pc, #128]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d14:	4b1d      	ldr	r3, [pc, #116]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d10c      	bne.n	8005d42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d28:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	4a16      	ldr	r2, [pc, #88]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d32:	68d2      	ldr	r2, [r2, #12]
 8005d34:	0a12      	lsrs	r2, r2, #8
 8005d36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	617b      	str	r3, [r7, #20]
      break;
 8005d40:	e00c      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d42:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4a:	4a10      	ldr	r2, [pc, #64]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d4c:	68d2      	ldr	r2, [r2, #12]
 8005d4e:	0a12      	lsrs	r2, r2, #8
 8005d50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d54:	fb02 f303 	mul.w	r3, r2, r3
 8005d58:	617b      	str	r3, [r7, #20]
      break;
 8005d5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d5c:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	0e5b      	lsrs	r3, r3, #25
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	3301      	adds	r3, #1
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	e001      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d7c:	693b      	ldr	r3, [r7, #16]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	00f42400 	.word	0x00f42400
 8005d94:	007a1200 	.word	0x007a1200

08005d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d9c:	4b03      	ldr	r3, [pc, #12]	; (8005dac <HAL_RCC_GetHCLKFreq+0x14>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	20000004 	.word	0x20000004

08005db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005db4:	f7ff fff0 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005db8:	4602      	mov	r2, r0
 8005dba:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	0a1b      	lsrs	r3, r3, #8
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	4904      	ldr	r1, [pc, #16]	; (8005dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dc6:	5ccb      	ldrb	r3, [r1, r3]
 8005dc8:	f003 031f 	and.w	r3, r3, #31
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	0800b800 	.word	0x0800b800

08005ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005de0:	f7ff ffda 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005de4:	4602      	mov	r2, r0
 8005de6:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	0adb      	lsrs	r3, r3, #11
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	4904      	ldr	r1, [pc, #16]	; (8005e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005df2:	5ccb      	ldrb	r3, [r1, r3]
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40021000 	.word	0x40021000
 8005e04:	0800b800 	.word	0x0800b800

08005e08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e18:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	091b      	lsrs	r3, r3, #4
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	3301      	adds	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d10c      	bne.n	8005e46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e2c:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e34:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e36:	68d2      	ldr	r2, [r2, #12]
 8005e38:	0a12      	lsrs	r2, r2, #8
 8005e3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e3e:	fb02 f303 	mul.w	r3, r2, r3
 8005e42:	617b      	str	r3, [r7, #20]
    break;
 8005e44:	e00c      	b.n	8005e60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e46:	4a12      	ldr	r2, [pc, #72]	; (8005e90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	4a0e      	ldr	r2, [pc, #56]	; (8005e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e50:	68d2      	ldr	r2, [r2, #12]
 8005e52:	0a12      	lsrs	r2, r2, #8
 8005e54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]
    break;
 8005e5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e60:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	0e5b      	lsrs	r3, r3, #25
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e7a:	687b      	ldr	r3, [r7, #4]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	007a1200 	.word	0x007a1200
 8005e90:	00f42400 	.word	0x00f42400

08005e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8098 	beq.w	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eb6:	4b43      	ldr	r3, [pc, #268]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10d      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ec2:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec6:	4a3f      	ldr	r2, [pc, #252]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8005ece:	4b3d      	ldr	r3, [pc, #244]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	60bb      	str	r3, [r7, #8]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eda:	2301      	movs	r3, #1
 8005edc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ede:	4b3a      	ldr	r3, [pc, #232]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a39      	ldr	r2, [pc, #228]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eea:	f7fc fb45 	bl	8002578 <HAL_GetTick>
 8005eee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ef0:	e009      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ef2:	f7fc fb41 	bl	8002578 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d902      	bls.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	74fb      	strb	r3, [r7, #19]
        break;
 8005f04:	e005      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f06:	4b30      	ldr	r3, [pc, #192]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0ef      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005f12:	7cfb      	ldrb	r3, [r7, #19]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d159      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f18:	4b2a      	ldr	r3, [pc, #168]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01e      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d019      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f34:	4b23      	ldr	r3, [pc, #140]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f40:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f46:	4a1f      	ldr	r2, [pc, #124]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f50:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f56:	4a1b      	ldr	r2, [pc, #108]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f60:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d016      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f72:	f7fc fb01 	bl	8002578 <HAL_GetTick>
 8005f76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f78:	e00b      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7a:	f7fc fafd 	bl	8002578 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d902      	bls.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	74fb      	strb	r3, [r7, #19]
            break;
 8005f90:	e006      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f92:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ec      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005fa0:	7cfb      	ldrb	r3, [r7, #19]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fa6:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	4903      	ldr	r1, [pc, #12]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fbe:	7cfb      	ldrb	r3, [r7, #19]
 8005fc0:	74bb      	strb	r3, [r7, #18]
 8005fc2:	e005      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fcc:	7cfb      	ldrb	r3, [r7, #19]
 8005fce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fd0:	7c7b      	ldrb	r3, [r7, #17]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d105      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd6:	4ba6      	ldr	r3, [pc, #664]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fda:	4aa5      	ldr	r2, [pc, #660]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fee:	4ba0      	ldr	r3, [pc, #640]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff4:	f023 0203 	bic.w	r2, r3, #3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	499c      	ldr	r1, [pc, #624]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006010:	4b97      	ldr	r3, [pc, #604]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f023 020c 	bic.w	r2, r3, #12
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	4994      	ldr	r1, [pc, #592]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006032:	4b8f      	ldr	r3, [pc, #572]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006038:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	498b      	ldr	r1, [pc, #556]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006054:	4b86      	ldr	r3, [pc, #536]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	4983      	ldr	r1, [pc, #524]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006076:	4b7e      	ldr	r3, [pc, #504]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	497a      	ldr	r1, [pc, #488]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006098:	4b75      	ldr	r3, [pc, #468]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	4972      	ldr	r1, [pc, #456]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060ba:	4b6d      	ldr	r3, [pc, #436]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	4969      	ldr	r1, [pc, #420]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060dc:	4b64      	ldr	r3, [pc, #400]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	4961      	ldr	r1, [pc, #388]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060fe:	4b5c      	ldr	r3, [pc, #368]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	4958      	ldr	r1, [pc, #352]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611c:	2b00      	cmp	r3, #0
 800611e:	d015      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006120:	4b53      	ldr	r3, [pc, #332]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	4950      	ldr	r1, [pc, #320]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006130:	4313      	orrs	r3, r2
 8006132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800613e:	d105      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006140:	4b4b      	ldr	r3, [pc, #300]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4a4a      	ldr	r2, [pc, #296]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800614a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006154:	2b00      	cmp	r3, #0
 8006156:	d015      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006158:	4b45      	ldr	r3, [pc, #276]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	4942      	ldr	r1, [pc, #264]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006176:	d105      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006178:	4b3d      	ldr	r3, [pc, #244]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4a3c      	ldr	r2, [pc, #240]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800617e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006182:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d015      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006190:	4b37      	ldr	r3, [pc, #220]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	4934      	ldr	r1, [pc, #208]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061ae:	d105      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061b0:	4b2f      	ldr	r3, [pc, #188]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	4a2e      	ldr	r2, [pc, #184]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d015      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061c8:	4b29      	ldr	r3, [pc, #164]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d6:	4926      	ldr	r1, [pc, #152]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061e6:	d105      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061e8:	4b21      	ldr	r3, [pc, #132]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	4a20      	ldr	r2, [pc, #128]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d015      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006200:	4b1b      	ldr	r3, [pc, #108]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	4918      	ldr	r1, [pc, #96]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800621e:	d105      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006220:	4b13      	ldr	r3, [pc, #76]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	4a12      	ldr	r2, [pc, #72]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800622a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d015      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006238:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800623a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	490a      	ldr	r1, [pc, #40]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006248:	4313      	orrs	r3, r2
 800624a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006256:	d105      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	4a04      	ldr	r2, [pc, #16]	; (8006270 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800625e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006262:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006264:	7cbb      	ldrb	r3, [r7, #18]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40021000 	.word	0x40021000

08006274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e09d      	b.n	80063c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006296:	d009      	beq.n	80062ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	61da      	str	r2, [r3, #28]
 800629e:	e005      	b.n	80062ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fb fe9e 	bl	8002008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062ec:	d902      	bls.n	80062f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	e002      	b.n	80062fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006302:	d007      	beq.n	8006314 <HAL_SPI_Init+0xa0>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800630c:	d002      	beq.n	8006314 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006356:	ea42 0103 	orr.w	r1, r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	0c1b      	lsrs	r3, r3, #16
 8006370:	f003 0204 	and.w	r2, r3, #4
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006390:	ea42 0103 	orr.w	r1, r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e049      	b.n	8006470 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d106      	bne.n	80063f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fb fe4d 	bl	8002090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2202      	movs	r2, #2
 80063fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3304      	adds	r3, #4
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f000 fb7f 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e049      	b.n	800651e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f841 	bl	8006526 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f000 fb28 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e049      	b.n	80065e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f841 	bl	80065e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3304      	adds	r3, #4
 8006576:	4619      	mov	r1, r3
 8006578:	4610      	mov	r0, r2
 800657a:	f000 fac7 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006616:	2302      	movs	r3, #2
 8006618:	e066      	b.n	80066e8 <HAL_TIM_OC_ConfigChannel+0xec>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b14      	cmp	r3, #20
 8006626:	d857      	bhi.n	80066d8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006628:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <HAL_TIM_OC_ConfigChannel+0x34>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006685 	.word	0x08006685
 8006634:	080066d9 	.word	0x080066d9
 8006638:	080066d9 	.word	0x080066d9
 800663c:	080066d9 	.word	0x080066d9
 8006640:	08006693 	.word	0x08006693
 8006644:	080066d9 	.word	0x080066d9
 8006648:	080066d9 	.word	0x080066d9
 800664c:	080066d9 	.word	0x080066d9
 8006650:	080066a1 	.word	0x080066a1
 8006654:	080066d9 	.word	0x080066d9
 8006658:	080066d9 	.word	0x080066d9
 800665c:	080066d9 	.word	0x080066d9
 8006660:	080066af 	.word	0x080066af
 8006664:	080066d9 	.word	0x080066d9
 8006668:	080066d9 	.word	0x080066d9
 800666c:	080066d9 	.word	0x080066d9
 8006670:	080066bd 	.word	0x080066bd
 8006674:	080066d9 	.word	0x080066d9
 8006678:	080066d9 	.word	0x080066d9
 800667c:	080066d9 	.word	0x080066d9
 8006680:	080066cb 	.word	0x080066cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 face 	bl	8006c2c <TIM_OC1_SetConfig>
      break;
 8006690:	e025      	b.n	80066de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fb57 	bl	8006d4c <TIM_OC2_SetConfig>
      break;
 800669e:	e01e      	b.n	80066de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68b9      	ldr	r1, [r7, #8]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fbda 	bl	8006e60 <TIM_OC3_SetConfig>
      break;
 80066ac:	e017      	b.n	80066de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fc5b 	bl	8006f70 <TIM_OC4_SetConfig>
      break;
 80066ba:	e010      	b.n	80066de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fcde 	bl	8007084 <TIM_OC5_SetConfig>
      break;
 80066c8:	e009      	b.n	80066de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68b9      	ldr	r1, [r7, #8]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fd3b 	bl	800714c <TIM_OC6_SetConfig>
      break;
 80066d6:	e002      	b.n	80066de <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	75fb      	strb	r3, [r7, #23]
      break;
 80066dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006706:	2b01      	cmp	r3, #1
 8006708:	d101      	bne.n	800670e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800670a:	2302      	movs	r3, #2
 800670c:	e0ff      	b.n	800690e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b14      	cmp	r3, #20
 800671a:	f200 80f0 	bhi.w	80068fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800671e:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006779 	.word	0x08006779
 8006728:	080068ff 	.word	0x080068ff
 800672c:	080068ff 	.word	0x080068ff
 8006730:	080068ff 	.word	0x080068ff
 8006734:	080067b9 	.word	0x080067b9
 8006738:	080068ff 	.word	0x080068ff
 800673c:	080068ff 	.word	0x080068ff
 8006740:	080068ff 	.word	0x080068ff
 8006744:	080067fb 	.word	0x080067fb
 8006748:	080068ff 	.word	0x080068ff
 800674c:	080068ff 	.word	0x080068ff
 8006750:	080068ff 	.word	0x080068ff
 8006754:	0800683b 	.word	0x0800683b
 8006758:	080068ff 	.word	0x080068ff
 800675c:	080068ff 	.word	0x080068ff
 8006760:	080068ff 	.word	0x080068ff
 8006764:	0800687d 	.word	0x0800687d
 8006768:	080068ff 	.word	0x080068ff
 800676c:	080068ff 	.word	0x080068ff
 8006770:	080068ff 	.word	0x080068ff
 8006774:	080068bd 	.word	0x080068bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fa54 	bl	8006c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0208 	orr.w	r2, r2, #8
 8006792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0204 	bic.w	r2, r2, #4
 80067a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6999      	ldr	r1, [r3, #24]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691a      	ldr	r2, [r3, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	619a      	str	r2, [r3, #24]
      break;
 80067b6:	e0a5      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fac4 	bl	8006d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6999      	ldr	r1, [r3, #24]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	021a      	lsls	r2, r3, #8
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	619a      	str	r2, [r3, #24]
      break;
 80067f8:	e084      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fb2d 	bl	8006e60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0208 	orr.w	r2, r2, #8
 8006814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0204 	bic.w	r2, r2, #4
 8006824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69d9      	ldr	r1, [r3, #28]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	61da      	str	r2, [r3, #28]
      break;
 8006838:	e064      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	4618      	mov	r0, r3
 8006842:	f000 fb95 	bl	8006f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69d9      	ldr	r1, [r3, #28]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	021a      	lsls	r2, r3, #8
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	61da      	str	r2, [r3, #28]
      break;
 800687a:	e043      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fbfe 	bl	8007084 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0208 	orr.w	r2, r2, #8
 8006896:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0204 	bic.w	r2, r2, #4
 80068a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80068ba:	e023      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fc42 	bl	800714c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	021a      	lsls	r2, r3, #8
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80068fc:	e002      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]
      break;
 8006902:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800690c:	7dfb      	ldrb	r3, [r7, #23]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop

08006918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_TIM_ConfigClockSource+0x1c>
 8006930:	2302      	movs	r3, #2
 8006932:	e0de      	b.n	8006af2 <HAL_TIM_ConfigClockSource+0x1da>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a63      	ldr	r2, [pc, #396]	; (8006afc <HAL_TIM_ConfigClockSource+0x1e4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	f000 80a9 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006974:	4a61      	ldr	r2, [pc, #388]	; (8006afc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	f200 80ae 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 800697c:	4a60      	ldr	r2, [pc, #384]	; (8006b00 <HAL_TIM_ConfigClockSource+0x1e8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	f000 80a1 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006984:	4a5e      	ldr	r2, [pc, #376]	; (8006b00 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	f200 80a6 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 800698c:	4a5d      	ldr	r2, [pc, #372]	; (8006b04 <HAL_TIM_ConfigClockSource+0x1ec>)
 800698e:	4293      	cmp	r3, r2
 8006990:	f000 8099 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006994:	4a5b      	ldr	r2, [pc, #364]	; (8006b04 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006996:	4293      	cmp	r3, r2
 8006998:	f200 809e 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 800699c:	4a5a      	ldr	r2, [pc, #360]	; (8006b08 <HAL_TIM_ConfigClockSource+0x1f0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	f000 8091 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 80069a4:	4a58      	ldr	r2, [pc, #352]	; (8006b08 <HAL_TIM_ConfigClockSource+0x1f0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	f200 8096 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80069b0:	f000 8089 	beq.w	8006ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 80069b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80069b8:	f200 808e 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c0:	d03e      	beq.n	8006a40 <HAL_TIM_ConfigClockSource+0x128>
 80069c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069c6:	f200 8087 	bhi.w	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ce:	f000 8086 	beq.w	8006ade <HAL_TIM_ConfigClockSource+0x1c6>
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d6:	d87f      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069d8:	2b70      	cmp	r3, #112	; 0x70
 80069da:	d01a      	beq.n	8006a12 <HAL_TIM_ConfigClockSource+0xfa>
 80069dc:	2b70      	cmp	r3, #112	; 0x70
 80069de:	d87b      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069e0:	2b60      	cmp	r3, #96	; 0x60
 80069e2:	d050      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x16e>
 80069e4:	2b60      	cmp	r3, #96	; 0x60
 80069e6:	d877      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069e8:	2b50      	cmp	r3, #80	; 0x50
 80069ea:	d03c      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x14e>
 80069ec:	2b50      	cmp	r3, #80	; 0x50
 80069ee:	d873      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	d058      	beq.n	8006aa6 <HAL_TIM_ConfigClockSource+0x18e>
 80069f4:	2b40      	cmp	r3, #64	; 0x40
 80069f6:	d86f      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 80069f8:	2b30      	cmp	r3, #48	; 0x30
 80069fa:	d064      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 80069fc:	2b30      	cmp	r3, #48	; 0x30
 80069fe:	d86b      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d060      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d867      	bhi.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d05c      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d05a      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006a10:	e062      	b.n	8006ad8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6899      	ldr	r1, [r3, #8]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f000 fc75 	bl	8007310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	609a      	str	r2, [r3, #8]
      break;
 8006a3e:	e04f      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6899      	ldr	r1, [r3, #8]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f000 fc5e 	bl	8007310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a62:	609a      	str	r2, [r3, #8]
      break;
 8006a64:	e03c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f000 fbd0 	bl	8007218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2150      	movs	r1, #80	; 0x50
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fc29 	bl	80072d6 <TIM_ITRx_SetConfig>
      break;
 8006a84:	e02c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6859      	ldr	r1, [r3, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f000 fbef 	bl	8007276 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2160      	movs	r1, #96	; 0x60
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fc19 	bl	80072d6 <TIM_ITRx_SetConfig>
      break;
 8006aa4:	e01c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	6859      	ldr	r1, [r3, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f000 fbb0 	bl	8007218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2140      	movs	r1, #64	; 0x40
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fc09 	bl	80072d6 <TIM_ITRx_SetConfig>
      break;
 8006ac4:	e00c      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	f000 fc00 	bl	80072d6 <TIM_ITRx_SetConfig>
      break;
 8006ad6:	e003      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
      break;
 8006adc:	e000      	b.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006ade:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	00100070 	.word	0x00100070
 8006b00:	00100040 	.word	0x00100040
 8006b04:	00100030 	.word	0x00100030
 8006b08:	00100020 	.word	0x00100020

08006b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a3c      	ldr	r2, [pc, #240]	; (8006c10 <TIM_Base_SetConfig+0x104>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00f      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2a:	d00b      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a39      	ldr	r2, [pc, #228]	; (8006c14 <TIM_Base_SetConfig+0x108>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d007      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a38      	ldr	r2, [pc, #224]	; (8006c18 <TIM_Base_SetConfig+0x10c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_Base_SetConfig+0x38>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a37      	ldr	r2, [pc, #220]	; (8006c1c <TIM_Base_SetConfig+0x110>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d108      	bne.n	8006b56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2d      	ldr	r2, [pc, #180]	; (8006c10 <TIM_Base_SetConfig+0x104>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01b      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b64:	d017      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a2a      	ldr	r2, [pc, #168]	; (8006c14 <TIM_Base_SetConfig+0x108>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a29      	ldr	r2, [pc, #164]	; (8006c18 <TIM_Base_SetConfig+0x10c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a28      	ldr	r2, [pc, #160]	; (8006c1c <TIM_Base_SetConfig+0x110>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a27      	ldr	r2, [pc, #156]	; (8006c20 <TIM_Base_SetConfig+0x114>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a26      	ldr	r2, [pc, #152]	; (8006c24 <TIM_Base_SetConfig+0x118>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_Base_SetConfig+0x8a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a25      	ldr	r2, [pc, #148]	; (8006c28 <TIM_Base_SetConfig+0x11c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a10      	ldr	r2, [pc, #64]	; (8006c10 <TIM_Base_SetConfig+0x104>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00f      	beq.n	8006bf4 <TIM_Base_SetConfig+0xe8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a11      	ldr	r2, [pc, #68]	; (8006c1c <TIM_Base_SetConfig+0x110>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00b      	beq.n	8006bf4 <TIM_Base_SetConfig+0xe8>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a10      	ldr	r2, [pc, #64]	; (8006c20 <TIM_Base_SetConfig+0x114>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d007      	beq.n	8006bf4 <TIM_Base_SetConfig+0xe8>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a0f      	ldr	r2, [pc, #60]	; (8006c24 <TIM_Base_SetConfig+0x118>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_Base_SetConfig+0xe8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a0e      	ldr	r2, [pc, #56]	; (8006c28 <TIM_Base_SetConfig+0x11c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d103      	bne.n	8006bfc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	615a      	str	r2, [r3, #20]
}
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40000400 	.word	0x40000400
 8006c18:	40000800 	.word	0x40000800
 8006c1c:	40013400 	.word	0x40013400
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800

08006c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f023 0302 	bic.w	r3, r3, #2
 8006c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a2c      	ldr	r2, [pc, #176]	; (8006d38 <TIM_OC1_SetConfig+0x10c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00f      	beq.n	8006cac <TIM_OC1_SetConfig+0x80>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a2b      	ldr	r2, [pc, #172]	; (8006d3c <TIM_OC1_SetConfig+0x110>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00b      	beq.n	8006cac <TIM_OC1_SetConfig+0x80>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a2a      	ldr	r2, [pc, #168]	; (8006d40 <TIM_OC1_SetConfig+0x114>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d007      	beq.n	8006cac <TIM_OC1_SetConfig+0x80>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a29      	ldr	r2, [pc, #164]	; (8006d44 <TIM_OC1_SetConfig+0x118>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d003      	beq.n	8006cac <TIM_OC1_SetConfig+0x80>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a28      	ldr	r2, [pc, #160]	; (8006d48 <TIM_OC1_SetConfig+0x11c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d10c      	bne.n	8006cc6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f023 0308 	bic.w	r3, r3, #8
 8006cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f023 0304 	bic.w	r3, r3, #4
 8006cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <TIM_OC1_SetConfig+0x10c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00f      	beq.n	8006cee <TIM_OC1_SetConfig+0xc2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a1a      	ldr	r2, [pc, #104]	; (8006d3c <TIM_OC1_SetConfig+0x110>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00b      	beq.n	8006cee <TIM_OC1_SetConfig+0xc2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a19      	ldr	r2, [pc, #100]	; (8006d40 <TIM_OC1_SetConfig+0x114>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d007      	beq.n	8006cee <TIM_OC1_SetConfig+0xc2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a18      	ldr	r2, [pc, #96]	; (8006d44 <TIM_OC1_SetConfig+0x118>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d003      	beq.n	8006cee <TIM_OC1_SetConfig+0xc2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a17      	ldr	r2, [pc, #92]	; (8006d48 <TIM_OC1_SetConfig+0x11c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d111      	bne.n	8006d12 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	621a      	str	r2, [r3, #32]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	40012c00 	.word	0x40012c00
 8006d3c:	40013400 	.word	0x40013400
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40014400 	.word	0x40014400
 8006d48:	40014800 	.word	0x40014800

08006d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f023 0210 	bic.w	r2, r3, #16
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f023 0320 	bic.w	r3, r3, #32
 8006d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a28      	ldr	r2, [pc, #160]	; (8006e4c <TIM_OC2_SetConfig+0x100>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <TIM_OC2_SetConfig+0x6c>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a27      	ldr	r2, [pc, #156]	; (8006e50 <TIM_OC2_SetConfig+0x104>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d10d      	bne.n	8006dd4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a1d      	ldr	r2, [pc, #116]	; (8006e4c <TIM_OC2_SetConfig+0x100>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00f      	beq.n	8006dfc <TIM_OC2_SetConfig+0xb0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a1c      	ldr	r2, [pc, #112]	; (8006e50 <TIM_OC2_SetConfig+0x104>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00b      	beq.n	8006dfc <TIM_OC2_SetConfig+0xb0>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a1b      	ldr	r2, [pc, #108]	; (8006e54 <TIM_OC2_SetConfig+0x108>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d007      	beq.n	8006dfc <TIM_OC2_SetConfig+0xb0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a1a      	ldr	r2, [pc, #104]	; (8006e58 <TIM_OC2_SetConfig+0x10c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_OC2_SetConfig+0xb0>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a19      	ldr	r2, [pc, #100]	; (8006e5c <TIM_OC2_SetConfig+0x110>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d113      	bne.n	8006e24 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	40012c00 	.word	0x40012c00
 8006e50:	40013400 	.word	0x40013400
 8006e54:	40014000 	.word	0x40014000
 8006e58:	40014400 	.word	0x40014400
 8006e5c:	40014800 	.word	0x40014800

08006e60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a27      	ldr	r2, [pc, #156]	; (8006f5c <TIM_OC3_SetConfig+0xfc>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_OC3_SetConfig+0x6a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a26      	ldr	r2, [pc, #152]	; (8006f60 <TIM_OC3_SetConfig+0x100>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d10d      	bne.n	8006ee6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a1c      	ldr	r2, [pc, #112]	; (8006f5c <TIM_OC3_SetConfig+0xfc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00f      	beq.n	8006f0e <TIM_OC3_SetConfig+0xae>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <TIM_OC3_SetConfig+0x100>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00b      	beq.n	8006f0e <TIM_OC3_SetConfig+0xae>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <TIM_OC3_SetConfig+0x104>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d007      	beq.n	8006f0e <TIM_OC3_SetConfig+0xae>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <TIM_OC3_SetConfig+0x108>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d003      	beq.n	8006f0e <TIM_OC3_SetConfig+0xae>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <TIM_OC3_SetConfig+0x10c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d113      	bne.n	8006f36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	621a      	str	r2, [r3, #32]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	40012c00 	.word	0x40012c00
 8006f60:	40013400 	.word	0x40013400
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	031b      	lsls	r3, r3, #12
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a28      	ldr	r2, [pc, #160]	; (8007070 <TIM_OC4_SetConfig+0x100>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_OC4_SetConfig+0x6c>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a27      	ldr	r2, [pc, #156]	; (8007074 <TIM_OC4_SetConfig+0x104>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d10d      	bne.n	8006ff8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	031b      	lsls	r3, r3, #12
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <TIM_OC4_SetConfig+0x100>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00f      	beq.n	8007020 <TIM_OC4_SetConfig+0xb0>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <TIM_OC4_SetConfig+0x104>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00b      	beq.n	8007020 <TIM_OC4_SetConfig+0xb0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a1b      	ldr	r2, [pc, #108]	; (8007078 <TIM_OC4_SetConfig+0x108>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_OC4_SetConfig+0xb0>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a1a      	ldr	r2, [pc, #104]	; (800707c <TIM_OC4_SetConfig+0x10c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_OC4_SetConfig+0xb0>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a19      	ldr	r2, [pc, #100]	; (8007080 <TIM_OC4_SetConfig+0x110>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d113      	bne.n	8007048 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007026:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800702e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	019b      	lsls	r3, r3, #6
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	019b      	lsls	r3, r3, #6
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40012c00 	.word	0x40012c00
 8007074:	40013400 	.word	0x40013400
 8007078:	40014000 	.word	0x40014000
 800707c:	40014400 	.word	0x40014400
 8007080:	40014800 	.word	0x40014800

08007084 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a17      	ldr	r2, [pc, #92]	; (8007138 <TIM_OC5_SetConfig+0xb4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00f      	beq.n	80070fe <TIM_OC5_SetConfig+0x7a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a16      	ldr	r2, [pc, #88]	; (800713c <TIM_OC5_SetConfig+0xb8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00b      	beq.n	80070fe <TIM_OC5_SetConfig+0x7a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a15      	ldr	r2, [pc, #84]	; (8007140 <TIM_OC5_SetConfig+0xbc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d007      	beq.n	80070fe <TIM_OC5_SetConfig+0x7a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a14      	ldr	r2, [pc, #80]	; (8007144 <TIM_OC5_SetConfig+0xc0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d003      	beq.n	80070fe <TIM_OC5_SetConfig+0x7a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a13      	ldr	r2, [pc, #76]	; (8007148 <TIM_OC5_SetConfig+0xc4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d109      	bne.n	8007112 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007104:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	621a      	str	r2, [r3, #32]
}
 800712c:	bf00      	nop
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40013400 	.word	0x40013400
 8007140:	40014000 	.word	0x40014000
 8007144:	40014400 	.word	0x40014400
 8007148:	40014800 	.word	0x40014800

0800714c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	051b      	lsls	r3, r3, #20
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a18      	ldr	r2, [pc, #96]	; (8007204 <TIM_OC6_SetConfig+0xb8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00f      	beq.n	80071c8 <TIM_OC6_SetConfig+0x7c>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a17      	ldr	r2, [pc, #92]	; (8007208 <TIM_OC6_SetConfig+0xbc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00b      	beq.n	80071c8 <TIM_OC6_SetConfig+0x7c>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a16      	ldr	r2, [pc, #88]	; (800720c <TIM_OC6_SetConfig+0xc0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d007      	beq.n	80071c8 <TIM_OC6_SetConfig+0x7c>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a15      	ldr	r2, [pc, #84]	; (8007210 <TIM_OC6_SetConfig+0xc4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC6_SetConfig+0x7c>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a14      	ldr	r2, [pc, #80]	; (8007214 <TIM_OC6_SetConfig+0xc8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d109      	bne.n	80071dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	029b      	lsls	r3, r3, #10
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40012c00 	.word	0x40012c00
 8007208:	40013400 	.word	0x40013400
 800720c:	40014000 	.word	0x40014000
 8007210:	40014400 	.word	0x40014400
 8007214:	40014800 	.word	0x40014800

08007218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	f023 0201 	bic.w	r2, r3, #1
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f023 030a 	bic.w	r3, r3, #10
 8007254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	621a      	str	r2, [r3, #32]
}
 800726a:	bf00      	nop
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007276:	b480      	push	{r7}
 8007278:	b087      	sub	sp, #28
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0210 	bic.w	r2, r3, #16
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	031b      	lsls	r3, r3, #12
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	621a      	str	r2, [r3, #32]
}
 80072ca:	bf00      	nop
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80072ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f043 0307 	orr.w	r3, r3, #7
 80072fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	609a      	str	r2, [r3, #8]
}
 8007304:	bf00      	nop
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800732a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	021a      	lsls	r2, r3, #8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	431a      	orrs	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4313      	orrs	r3, r2
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4313      	orrs	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	609a      	str	r2, [r3, #8]
}
 8007344:	bf00      	nop
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007360:	2b01      	cmp	r3, #1
 8007362:	d101      	bne.n	8007368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007364:	2302      	movs	r3, #2
 8007366:	e065      	b.n	8007434 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a2c      	ldr	r2, [pc, #176]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d004      	beq.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2b      	ldr	r2, [pc, #172]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d108      	bne.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80073b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1b      	ldr	r2, [pc, #108]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d018      	beq.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073de:	d013      	beq.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a18      	ldr	r2, [pc, #96]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00e      	beq.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a17      	ldr	r2, [pc, #92]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d009      	beq.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a12      	ldr	r2, [pc, #72]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d004      	beq.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a13      	ldr	r2, [pc, #76]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d10c      	bne.n	8007422 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800740e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	4313      	orrs	r3, r2
 8007418:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	40012c00 	.word	0x40012c00
 8007444:	40013400 	.word	0x40013400
 8007448:	40000400 	.word	0x40000400
 800744c:	40000800 	.word	0x40000800
 8007450:	40014000 	.word	0x40014000

08007454 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800746c:	2302      	movs	r3, #2
 800746e:	e087      	b.n	8007580 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	4313      	orrs	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a27      	ldr	r2, [pc, #156]	; (800758c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d004      	beq.n	80074fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a25      	ldr	r2, [pc, #148]	; (8007590 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d106      	bne.n	800750c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	4313      	orrs	r3, r2
 800750a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a1e      	ldr	r2, [pc, #120]	; (800758c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a1d      	ldr	r2, [pc, #116]	; (8007590 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d126      	bne.n	800756e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	051b      	lsls	r3, r3, #20
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a0e      	ldr	r2, [pc, #56]	; (800758c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d004      	beq.n	8007560 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a0d      	ldr	r2, [pc, #52]	; (8007590 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d106      	bne.n	800756e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	40012c00 	.word	0x40012c00
 8007590:	40013400 	.word	0x40013400

08007594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e042      	b.n	800762c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fa fdd5 	bl	8002168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2224      	movs	r2, #36	; 0x24
 80075c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 0201 	bic.w	r2, r2, #1
 80075d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fbfa 	bl	8007dd0 <UART_SetConfig>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d101      	bne.n	80075e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e022      	b.n	800762c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 feba 	bl	8008368 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0201 	orr.w	r2, r2, #1
 8007622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 ff41 	bl	80084ac <UART_CheckIdleState>
 800762a:	4603      	mov	r3, r0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	; 0x28
 8007638:	af02      	add	r7, sp, #8
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	4613      	mov	r3, r2
 8007642:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800764a:	2b20      	cmp	r3, #32
 800764c:	f040 8083 	bne.w	8007756 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <HAL_UART_Transmit+0x28>
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e07b      	b.n	8007758 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_UART_Transmit+0x3a>
 800766a:	2302      	movs	r3, #2
 800766c:	e074      	b.n	8007758 <HAL_UART_Transmit+0x124>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2221      	movs	r2, #33	; 0x21
 8007682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007686:	f7fa ff77 	bl	8002578 <HAL_GetTick>
 800768a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	88fa      	ldrh	r2, [r7, #6]
 8007698:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a4:	d108      	bne.n	80076b8 <HAL_UART_Transmit+0x84>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d104      	bne.n	80076b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	61bb      	str	r3, [r7, #24]
 80076b6:	e003      	b.n	80076c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80076c8:	e02c      	b.n	8007724 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2200      	movs	r2, #0
 80076d2:	2180      	movs	r1, #128	; 0x80
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 ff34 	bl	8008542 <UART_WaitOnFlagUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e039      	b.n	8007758 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10b      	bne.n	8007702 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	3302      	adds	r3, #2
 80076fe:	61bb      	str	r3, [r7, #24]
 8007700:	e007      	b.n	8007712 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	3301      	adds	r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007718:	b29b      	uxth	r3, r3
 800771a:	3b01      	subs	r3, #1
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1cc      	bne.n	80076ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2200      	movs	r2, #0
 8007738:	2140      	movs	r1, #64	; 0x40
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f000 ff01 	bl	8008542 <UART_WaitOnFlagUntilTimeout>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e006      	b.n	8007758 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2220      	movs	r2, #32
 800774e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	e000      	b.n	8007758 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007756:	2302      	movs	r3, #2
  }
}
 8007758:	4618      	mov	r0, r3
 800775a:	3720      	adds	r7, #32
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b0ba      	sub	sp, #232	; 0xe8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800778a:	f640 030f 	movw	r3, #2063	; 0x80f
 800778e:	4013      	ands	r3, r2
 8007790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d11b      	bne.n	80077d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d015      	beq.n	80077d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d105      	bne.n	80077c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d009      	beq.n	80077d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 82d6 	beq.w	8007d76 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
      }
      return;
 80077d2:	e2d0      	b.n	8007d76 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 811f 	beq.w	8007a1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80077de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80077e2:	4b8b      	ldr	r3, [pc, #556]	; (8007a10 <HAL_UART_IRQHandler+0x2b0>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80077ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80077ee:	4b89      	ldr	r3, [pc, #548]	; (8007a14 <HAL_UART_IRQHandler+0x2b4>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 8112 	beq.w	8007a1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	d011      	beq.n	8007828 <HAL_UART_IRQHandler+0xc8>
 8007804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2201      	movs	r2, #1
 8007816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800781e:	f043 0201 	orr.w	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d011      	beq.n	8007858 <HAL_UART_IRQHandler+0xf8>
 8007834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2202      	movs	r2, #2
 8007846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800784e:	f043 0204 	orr.w	r2, r3, #4
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785c:	f003 0304 	and.w	r3, r3, #4
 8007860:	2b00      	cmp	r3, #0
 8007862:	d011      	beq.n	8007888 <HAL_UART_IRQHandler+0x128>
 8007864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00b      	beq.n	8007888 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2204      	movs	r2, #4
 8007876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800787e:	f043 0202 	orr.w	r2, r3, #2
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b00      	cmp	r3, #0
 8007892:	d017      	beq.n	80078c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d105      	bne.n	80078ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80078a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80078a4:	4b5a      	ldr	r3, [pc, #360]	; (8007a10 <HAL_UART_IRQHandler+0x2b0>)
 80078a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00b      	beq.n	80078c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2208      	movs	r2, #8
 80078b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078ba:	f043 0208 	orr.w	r2, r3, #8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80078c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d012      	beq.n	80078f6 <HAL_UART_IRQHandler+0x196>
 80078d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00c      	beq.n	80078f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078ec:	f043 0220 	orr.w	r2, r3, #32
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 823c 	beq.w	8007d7a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d013      	beq.n	8007936 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800790e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d105      	bne.n	8007926 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800791a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800791e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d007      	beq.n	8007936 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800793c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794a:	2b40      	cmp	r3, #64	; 0x40
 800794c:	d005      	beq.n	800795a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800794e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007952:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007956:	2b00      	cmp	r3, #0
 8007958:	d04f      	beq.n	80079fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 feb9 	bl	80086d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796a:	2b40      	cmp	r3, #64	; 0x40
 800796c:	d141      	bne.n	80079f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3308      	adds	r3, #8
 8007974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800798c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800799a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800799e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1d9      	bne.n	800796e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d013      	beq.n	80079ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c6:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <HAL_UART_IRQHandler+0x2b8>)
 80079c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fc fbab 	bl	800412a <HAL_DMA_Abort_IT>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d017      	beq.n	8007a0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e8:	e00f      	b.n	8007a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f9da 	bl	8007da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f0:	e00b      	b.n	8007a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f9d6 	bl	8007da4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f8:	e007      	b.n	8007a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f9d2 	bl	8007da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007a08:	e1b7      	b.n	8007d7a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0a:	bf00      	nop
    return;
 8007a0c:	e1b5      	b.n	8007d7a <HAL_UART_IRQHandler+0x61a>
 8007a0e:	bf00      	nop
 8007a10:	10000001 	.word	0x10000001
 8007a14:	04000120 	.word	0x04000120
 8007a18:	0800879f 	.word	0x0800879f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	f040 814a 	bne.w	8007cba <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2a:	f003 0310 	and.w	r3, r3, #16
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 8143 	beq.w	8007cba <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a38:	f003 0310 	and.w	r3, r3, #16
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 813c 	beq.w	8007cba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2210      	movs	r2, #16
 8007a48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	f040 80b5 	bne.w	8007bc4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 8187 	beq.w	8007d7e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	f080 817f 	bcs.w	8007d7e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f040 8086 	bne.w	8007ba8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007aca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1da      	bne.n	8007a9c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3308      	adds	r3, #8
 8007aec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007af8:	f023 0301 	bic.w	r3, r3, #1
 8007afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e1      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3308      	adds	r3, #8
 8007b42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e3      	bne.n	8007b22 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b78:	f023 0310 	bic.w	r3, r3, #16
 8007b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e4      	bne.n	8007b68 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fc fa68 	bl	8004078 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8fb 	bl	8007db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bc2:	e0dc      	b.n	8007d7e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 80ce 	beq.w	8007d82 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007be6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 80c9 	beq.w	8007d82 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c12:	647b      	str	r3, [r7, #68]	; 0x44
 8007c14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e4      	bne.n	8007bf0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	623b      	str	r3, [r7, #32]
   return(result);
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	f023 0301 	bic.w	r3, r3, #1
 8007c40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c4e:	633a      	str	r2, [r7, #48]	; 0x30
 8007c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e1      	bne.n	8007c26 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0310 	bic.w	r3, r3, #16
 8007c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	69b9      	ldr	r1, [r7, #24]
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e4      	bne.n	8007c76 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f880 	bl	8007db8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cb8:	e063      	b.n	8007d82 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00e      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x584>
 8007cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007cda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fd9f 	bl	8008820 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ce2:	e051      	b.n	8007d88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d014      	beq.n	8007d1a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d105      	bne.n	8007d08 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d008      	beq.n	8007d1a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d03a      	beq.n	8007d86 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
    }
    return;
 8007d18:	e035      	b.n	8007d86 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d009      	beq.n	8007d3a <HAL_UART_IRQHandler+0x5da>
 8007d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fd49 	bl	80087ca <UART_EndTransmit_IT>
    return;
 8007d38:	e026      	b.n	8007d88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <HAL_UART_IRQHandler+0x5fa>
 8007d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fd78 	bl	8008848 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d58:	e016      	b.n	8007d88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d010      	beq.n	8007d88 <HAL_UART_IRQHandler+0x628>
 8007d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	da0c      	bge.n	8007d88 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fd60 	bl	8008834 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d74:	e008      	b.n	8007d88 <HAL_UART_IRQHandler+0x628>
      return;
 8007d76:	bf00      	nop
 8007d78:	e006      	b.n	8007d88 <HAL_UART_IRQHandler+0x628>
    return;
 8007d7a:	bf00      	nop
 8007d7c:	e004      	b.n	8007d88 <HAL_UART_IRQHandler+0x628>
      return;
 8007d7e:	bf00      	nop
 8007d80:	e002      	b.n	8007d88 <HAL_UART_IRQHandler+0x628>
      return;
 8007d82:	bf00      	nop
 8007d84:	e000      	b.n	8007d88 <HAL_UART_IRQHandler+0x628>
    return;
 8007d86:	bf00      	nop
  }
}
 8007d88:	37e8      	adds	r7, #232	; 0xe8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop

08007d90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dd4:	b08c      	sub	sp, #48	; 0x30
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	431a      	orrs	r2, r3
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	431a      	orrs	r2, r3
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	4bab      	ldr	r3, [pc, #684]	; (80080ac <UART_SetConfig+0x2dc>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	6812      	ldr	r2, [r2, #0]
 8007e06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4aa0      	ldr	r2, [pc, #640]	; (80080b0 <UART_SetConfig+0x2e0>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e46:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	6812      	ldr	r2, [r2, #0]
 8007e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e50:	430b      	orrs	r3, r1
 8007e52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	f023 010f 	bic.w	r1, r3, #15
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a91      	ldr	r2, [pc, #580]	; (80080b4 <UART_SetConfig+0x2e4>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d125      	bne.n	8007ec0 <UART_SetConfig+0xf0>
 8007e74:	4b90      	ldr	r3, [pc, #576]	; (80080b8 <UART_SetConfig+0x2e8>)
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7a:	f003 0303 	and.w	r3, r3, #3
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d81a      	bhi.n	8007eb8 <UART_SetConfig+0xe8>
 8007e82:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <UART_SetConfig+0xb8>)
 8007e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e88:	08007e99 	.word	0x08007e99
 8007e8c:	08007ea9 	.word	0x08007ea9
 8007e90:	08007ea1 	.word	0x08007ea1
 8007e94:	08007eb1 	.word	0x08007eb1
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e9e:	e0d6      	b.n	800804e <UART_SetConfig+0x27e>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ea6:	e0d2      	b.n	800804e <UART_SetConfig+0x27e>
 8007ea8:	2304      	movs	r3, #4
 8007eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eae:	e0ce      	b.n	800804e <UART_SetConfig+0x27e>
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb6:	e0ca      	b.n	800804e <UART_SetConfig+0x27e>
 8007eb8:	2310      	movs	r3, #16
 8007eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ebe:	e0c6      	b.n	800804e <UART_SetConfig+0x27e>
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a7d      	ldr	r2, [pc, #500]	; (80080bc <UART_SetConfig+0x2ec>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d138      	bne.n	8007f3c <UART_SetConfig+0x16c>
 8007eca:	4b7b      	ldr	r3, [pc, #492]	; (80080b8 <UART_SetConfig+0x2e8>)
 8007ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed0:	f003 030c 	and.w	r3, r3, #12
 8007ed4:	2b0c      	cmp	r3, #12
 8007ed6:	d82d      	bhi.n	8007f34 <UART_SetConfig+0x164>
 8007ed8:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <UART_SetConfig+0x110>)
 8007eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ede:	bf00      	nop
 8007ee0:	08007f15 	.word	0x08007f15
 8007ee4:	08007f35 	.word	0x08007f35
 8007ee8:	08007f35 	.word	0x08007f35
 8007eec:	08007f35 	.word	0x08007f35
 8007ef0:	08007f25 	.word	0x08007f25
 8007ef4:	08007f35 	.word	0x08007f35
 8007ef8:	08007f35 	.word	0x08007f35
 8007efc:	08007f35 	.word	0x08007f35
 8007f00:	08007f1d 	.word	0x08007f1d
 8007f04:	08007f35 	.word	0x08007f35
 8007f08:	08007f35 	.word	0x08007f35
 8007f0c:	08007f35 	.word	0x08007f35
 8007f10:	08007f2d 	.word	0x08007f2d
 8007f14:	2300      	movs	r3, #0
 8007f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f1a:	e098      	b.n	800804e <UART_SetConfig+0x27e>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f22:	e094      	b.n	800804e <UART_SetConfig+0x27e>
 8007f24:	2304      	movs	r3, #4
 8007f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f2a:	e090      	b.n	800804e <UART_SetConfig+0x27e>
 8007f2c:	2308      	movs	r3, #8
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f32:	e08c      	b.n	800804e <UART_SetConfig+0x27e>
 8007f34:	2310      	movs	r3, #16
 8007f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3a:	e088      	b.n	800804e <UART_SetConfig+0x27e>
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a5f      	ldr	r2, [pc, #380]	; (80080c0 <UART_SetConfig+0x2f0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d125      	bne.n	8007f92 <UART_SetConfig+0x1c2>
 8007f46:	4b5c      	ldr	r3, [pc, #368]	; (80080b8 <UART_SetConfig+0x2e8>)
 8007f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f50:	2b30      	cmp	r3, #48	; 0x30
 8007f52:	d016      	beq.n	8007f82 <UART_SetConfig+0x1b2>
 8007f54:	2b30      	cmp	r3, #48	; 0x30
 8007f56:	d818      	bhi.n	8007f8a <UART_SetConfig+0x1ba>
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	d00a      	beq.n	8007f72 <UART_SetConfig+0x1a2>
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d814      	bhi.n	8007f8a <UART_SetConfig+0x1ba>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <UART_SetConfig+0x19a>
 8007f64:	2b10      	cmp	r3, #16
 8007f66:	d008      	beq.n	8007f7a <UART_SetConfig+0x1aa>
 8007f68:	e00f      	b.n	8007f8a <UART_SetConfig+0x1ba>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f70:	e06d      	b.n	800804e <UART_SetConfig+0x27e>
 8007f72:	2302      	movs	r3, #2
 8007f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f78:	e069      	b.n	800804e <UART_SetConfig+0x27e>
 8007f7a:	2304      	movs	r3, #4
 8007f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f80:	e065      	b.n	800804e <UART_SetConfig+0x27e>
 8007f82:	2308      	movs	r3, #8
 8007f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f88:	e061      	b.n	800804e <UART_SetConfig+0x27e>
 8007f8a:	2310      	movs	r3, #16
 8007f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f90:	e05d      	b.n	800804e <UART_SetConfig+0x27e>
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a4b      	ldr	r2, [pc, #300]	; (80080c4 <UART_SetConfig+0x2f4>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d125      	bne.n	8007fe8 <UART_SetConfig+0x218>
 8007f9c:	4b46      	ldr	r3, [pc, #280]	; (80080b8 <UART_SetConfig+0x2e8>)
 8007f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007fa6:	2bc0      	cmp	r3, #192	; 0xc0
 8007fa8:	d016      	beq.n	8007fd8 <UART_SetConfig+0x208>
 8007faa:	2bc0      	cmp	r3, #192	; 0xc0
 8007fac:	d818      	bhi.n	8007fe0 <UART_SetConfig+0x210>
 8007fae:	2b80      	cmp	r3, #128	; 0x80
 8007fb0:	d00a      	beq.n	8007fc8 <UART_SetConfig+0x1f8>
 8007fb2:	2b80      	cmp	r3, #128	; 0x80
 8007fb4:	d814      	bhi.n	8007fe0 <UART_SetConfig+0x210>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <UART_SetConfig+0x1f0>
 8007fba:	2b40      	cmp	r3, #64	; 0x40
 8007fbc:	d008      	beq.n	8007fd0 <UART_SetConfig+0x200>
 8007fbe:	e00f      	b.n	8007fe0 <UART_SetConfig+0x210>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc6:	e042      	b.n	800804e <UART_SetConfig+0x27e>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fce:	e03e      	b.n	800804e <UART_SetConfig+0x27e>
 8007fd0:	2304      	movs	r3, #4
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd6:	e03a      	b.n	800804e <UART_SetConfig+0x27e>
 8007fd8:	2308      	movs	r3, #8
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fde:	e036      	b.n	800804e <UART_SetConfig+0x27e>
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fe6:	e032      	b.n	800804e <UART_SetConfig+0x27e>
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a30      	ldr	r2, [pc, #192]	; (80080b0 <UART_SetConfig+0x2e0>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d12a      	bne.n	8008048 <UART_SetConfig+0x278>
 8007ff2:	4b31      	ldr	r3, [pc, #196]	; (80080b8 <UART_SetConfig+0x2e8>)
 8007ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008000:	d01a      	beq.n	8008038 <UART_SetConfig+0x268>
 8008002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008006:	d81b      	bhi.n	8008040 <UART_SetConfig+0x270>
 8008008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800c:	d00c      	beq.n	8008028 <UART_SetConfig+0x258>
 800800e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008012:	d815      	bhi.n	8008040 <UART_SetConfig+0x270>
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <UART_SetConfig+0x250>
 8008018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801c:	d008      	beq.n	8008030 <UART_SetConfig+0x260>
 800801e:	e00f      	b.n	8008040 <UART_SetConfig+0x270>
 8008020:	2300      	movs	r3, #0
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008026:	e012      	b.n	800804e <UART_SetConfig+0x27e>
 8008028:	2302      	movs	r3, #2
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800802e:	e00e      	b.n	800804e <UART_SetConfig+0x27e>
 8008030:	2304      	movs	r3, #4
 8008032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008036:	e00a      	b.n	800804e <UART_SetConfig+0x27e>
 8008038:	2308      	movs	r3, #8
 800803a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800803e:	e006      	b.n	800804e <UART_SetConfig+0x27e>
 8008040:	2310      	movs	r3, #16
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008046:	e002      	b.n	800804e <UART_SetConfig+0x27e>
 8008048:	2310      	movs	r3, #16
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a17      	ldr	r2, [pc, #92]	; (80080b0 <UART_SetConfig+0x2e0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	f040 80a8 	bne.w	80081aa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800805a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800805e:	2b08      	cmp	r3, #8
 8008060:	d834      	bhi.n	80080cc <UART_SetConfig+0x2fc>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <UART_SetConfig+0x298>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	0800808d 	.word	0x0800808d
 800806c:	080080cd 	.word	0x080080cd
 8008070:	08008095 	.word	0x08008095
 8008074:	080080cd 	.word	0x080080cd
 8008078:	0800809b 	.word	0x0800809b
 800807c:	080080cd 	.word	0x080080cd
 8008080:	080080cd 	.word	0x080080cd
 8008084:	080080cd 	.word	0x080080cd
 8008088:	080080a3 	.word	0x080080a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800808c:	f7fd fe90 	bl	8005db0 <HAL_RCC_GetPCLK1Freq>
 8008090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008092:	e021      	b.n	80080d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008094:	4b0c      	ldr	r3, [pc, #48]	; (80080c8 <UART_SetConfig+0x2f8>)
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008098:	e01e      	b.n	80080d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800809a:	f7fd fe1b 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 800809e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080a0:	e01a      	b.n	80080d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080a8:	e016      	b.n	80080d8 <UART_SetConfig+0x308>
 80080aa:	bf00      	nop
 80080ac:	cfff69f3 	.word	0xcfff69f3
 80080b0:	40008000 	.word	0x40008000
 80080b4:	40013800 	.word	0x40013800
 80080b8:	40021000 	.word	0x40021000
 80080bc:	40004400 	.word	0x40004400
 80080c0:	40004800 	.word	0x40004800
 80080c4:	40004c00 	.word	0x40004c00
 80080c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80080d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 812a 	beq.w	8008334 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	4a9e      	ldr	r2, [pc, #632]	; (8008360 <UART_SetConfig+0x590>)
 80080e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ea:	461a      	mov	r2, r3
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80080f2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	4613      	mov	r3, r2
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	4413      	add	r3, r2
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	429a      	cmp	r2, r3
 8008102:	d305      	bcc.n	8008110 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	429a      	cmp	r2, r3
 800810e:	d903      	bls.n	8008118 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008116:	e10d      	b.n	8008334 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	2200      	movs	r2, #0
 800811c:	60bb      	str	r3, [r7, #8]
 800811e:	60fa      	str	r2, [r7, #12]
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	4a8e      	ldr	r2, [pc, #568]	; (8008360 <UART_SetConfig+0x590>)
 8008126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800812a:	b29b      	uxth	r3, r3
 800812c:	2200      	movs	r2, #0
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	607a      	str	r2, [r7, #4]
 8008132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008136:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800813a:	f7f8 fd5d 	bl	8000bf8 <__aeabi_uldivmod>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4610      	mov	r0, r2
 8008144:	4619      	mov	r1, r3
 8008146:	f04f 0200 	mov.w	r2, #0
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	020b      	lsls	r3, r1, #8
 8008150:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008154:	0202      	lsls	r2, r0, #8
 8008156:	6979      	ldr	r1, [r7, #20]
 8008158:	6849      	ldr	r1, [r1, #4]
 800815a:	0849      	lsrs	r1, r1, #1
 800815c:	2000      	movs	r0, #0
 800815e:	460c      	mov	r4, r1
 8008160:	4605      	mov	r5, r0
 8008162:	eb12 0804 	adds.w	r8, r2, r4
 8008166:	eb43 0905 	adc.w	r9, r3, r5
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	469a      	mov	sl, r3
 8008172:	4693      	mov	fp, r2
 8008174:	4652      	mov	r2, sl
 8008176:	465b      	mov	r3, fp
 8008178:	4640      	mov	r0, r8
 800817a:	4649      	mov	r1, r9
 800817c:	f7f8 fd3c 	bl	8000bf8 <__aeabi_uldivmod>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4613      	mov	r3, r2
 8008186:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800818e:	d308      	bcc.n	80081a2 <UART_SetConfig+0x3d2>
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008196:	d204      	bcs.n	80081a2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6a3a      	ldr	r2, [r7, #32]
 800819e:	60da      	str	r2, [r3, #12]
 80081a0:	e0c8      	b.n	8008334 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081a8:	e0c4      	b.n	8008334 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b2:	d167      	bne.n	8008284 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80081b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d828      	bhi.n	800820e <UART_SetConfig+0x43e>
 80081bc:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <UART_SetConfig+0x3f4>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	080081f1 	.word	0x080081f1
 80081cc:	080081f9 	.word	0x080081f9
 80081d0:	0800820f 	.word	0x0800820f
 80081d4:	080081ff 	.word	0x080081ff
 80081d8:	0800820f 	.word	0x0800820f
 80081dc:	0800820f 	.word	0x0800820f
 80081e0:	0800820f 	.word	0x0800820f
 80081e4:	08008207 	.word	0x08008207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e8:	f7fd fde2 	bl	8005db0 <HAL_RCC_GetPCLK1Freq>
 80081ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081ee:	e014      	b.n	800821a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081f0:	f7fd fdf4 	bl	8005ddc <HAL_RCC_GetPCLK2Freq>
 80081f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081f6:	e010      	b.n	800821a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081f8:	4b5a      	ldr	r3, [pc, #360]	; (8008364 <UART_SetConfig+0x594>)
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081fc:	e00d      	b.n	800821a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081fe:	f7fd fd69 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 8008202:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008204:	e009      	b.n	800821a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800820a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800820c:	e005      	b.n	800821a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008218:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8089 	beq.w	8008334 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	4a4e      	ldr	r2, [pc, #312]	; (8008360 <UART_SetConfig+0x590>)
 8008228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800822c:	461a      	mov	r2, r3
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	fbb3 f3f2 	udiv	r3, r3, r2
 8008234:	005a      	lsls	r2, r3, #1
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	441a      	add	r2, r3
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	fbb2 f3f3 	udiv	r3, r2, r3
 8008246:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	2b0f      	cmp	r3, #15
 800824c:	d916      	bls.n	800827c <UART_SetConfig+0x4ac>
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008254:	d212      	bcs.n	800827c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	b29b      	uxth	r3, r3
 800825a:	f023 030f 	bic.w	r3, r3, #15
 800825e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	b29b      	uxth	r3, r3
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	b29a      	uxth	r2, r3
 800826c:	8bfb      	ldrh	r3, [r7, #30]
 800826e:	4313      	orrs	r3, r2
 8008270:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	8bfa      	ldrh	r2, [r7, #30]
 8008278:	60da      	str	r2, [r3, #12]
 800827a:	e05b      	b.n	8008334 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008282:	e057      	b.n	8008334 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008284:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008288:	2b08      	cmp	r3, #8
 800828a:	d828      	bhi.n	80082de <UART_SetConfig+0x50e>
 800828c:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <UART_SetConfig+0x4c4>)
 800828e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008292:	bf00      	nop
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	080082df 	.word	0x080082df
 80082a4:	080082cf 	.word	0x080082cf
 80082a8:	080082df 	.word	0x080082df
 80082ac:	080082df 	.word	0x080082df
 80082b0:	080082df 	.word	0x080082df
 80082b4:	080082d7 	.word	0x080082d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b8:	f7fd fd7a 	bl	8005db0 <HAL_RCC_GetPCLK1Freq>
 80082bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082be:	e014      	b.n	80082ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082c0:	f7fd fd8c 	bl	8005ddc <HAL_RCC_GetPCLK2Freq>
 80082c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082c6:	e010      	b.n	80082ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082c8:	4b26      	ldr	r3, [pc, #152]	; (8008364 <UART_SetConfig+0x594>)
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082cc:	e00d      	b.n	80082ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ce:	f7fd fd01 	bl	8005cd4 <HAL_RCC_GetSysClockFreq>
 80082d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082d4:	e009      	b.n	80082ea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082dc:	e005      	b.n	80082ea <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082e8:	bf00      	nop
    }

    if (pclk != 0U)
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d021      	beq.n	8008334 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	4a1a      	ldr	r2, [pc, #104]	; (8008360 <UART_SetConfig+0x590>)
 80082f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082fa:	461a      	mov	r2, r3
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	085b      	lsrs	r3, r3, #1
 8008308:	441a      	add	r2, r3
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008312:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	2b0f      	cmp	r3, #15
 8008318:	d909      	bls.n	800832e <UART_SetConfig+0x55e>
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008320:	d205      	bcs.n	800832e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	b29a      	uxth	r2, r3
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	60da      	str	r2, [r3, #12]
 800832c:	e002      	b.n	8008334 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2201      	movs	r2, #1
 8008338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2201      	movs	r2, #1
 8008340:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	2200      	movs	r2, #0
 8008348:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2200      	movs	r2, #0
 800834e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008350:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008354:	4618      	mov	r0, r3
 8008356:	3730      	adds	r7, #48	; 0x30
 8008358:	46bd      	mov	sp, r7
 800835a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800835e:	bf00      	nop
 8008360:	0800b808 	.word	0x0800b808
 8008364:	00f42400 	.word	0x00f42400

08008368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00a      	beq.n	80083d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	f003 0308 	and.w	r3, r3, #8
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fc:	f003 0310 	and.w	r3, r3, #16
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00a      	beq.n	800841a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00a      	beq.n	800843c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01a      	beq.n	800847e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008466:	d10a      	bne.n	800847e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
  }
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084bc:	f7fa f85c 	bl	8002578 <HAL_GetTick>
 80084c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0308 	and.w	r3, r3, #8
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d10e      	bne.n	80084ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f82f 	bl	8008542 <UART_WaitOnFlagUntilTimeout>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e025      	b.n	800853a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0304 	and.w	r3, r3, #4
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d10e      	bne.n	800851a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f819 	bl	8008542 <UART_WaitOnFlagUntilTimeout>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e00f      	b.n	800853a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b09c      	sub	sp, #112	; 0x70
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	603b      	str	r3, [r7, #0]
 800854e:	4613      	mov	r3, r2
 8008550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008552:	e0a9      	b.n	80086a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855a:	f000 80a5 	beq.w	80086a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855e:	f7fa f80b 	bl	8002578 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800856a:	429a      	cmp	r2, r3
 800856c:	d302      	bcc.n	8008574 <UART_WaitOnFlagUntilTimeout+0x32>
 800856e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008570:	2b00      	cmp	r3, #0
 8008572:	d140      	bne.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008584:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008588:	667b      	str	r3, [r7, #100]	; 0x64
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008592:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008594:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008598:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e6      	bne.n	8008574 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3308      	adds	r3, #8
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b8:	f023 0301 	bic.w	r3, r3, #1
 80085bc:	663b      	str	r3, [r7, #96]	; 0x60
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3308      	adds	r3, #8
 80085c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80085c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80085d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e5      	bne.n	80085a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2220      	movs	r2, #32
 80085de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e069      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0304 	and.w	r3, r3, #4
 8008600:	2b00      	cmp	r3, #0
 8008602:	d051      	beq.n	80086a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800860e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008612:	d149      	bne.n	80086a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800861c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008632:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	461a      	mov	r2, r3
 800863a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800863c:	637b      	str	r3, [r7, #52]	; 0x34
 800863e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800864a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e6      	bne.n	800861e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3308      	adds	r3, #8
 8008656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	613b      	str	r3, [r7, #16]
   return(result);
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f023 0301 	bic.w	r3, r3, #1
 8008666:	66bb      	str	r3, [r7, #104]	; 0x68
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3308      	adds	r3, #8
 800866e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008670:	623a      	str	r2, [r7, #32]
 8008672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	69f9      	ldr	r1, [r7, #28]
 8008676:	6a3a      	ldr	r2, [r7, #32]
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	61bb      	str	r3, [r7, #24]
   return(result);
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e5      	bne.n	8008650 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2220      	movs	r2, #32
 8008688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2220      	movs	r2, #32
 8008690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2220      	movs	r2, #32
 8008698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e010      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	69da      	ldr	r2, [r3, #28]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4013      	ands	r3, r2
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	bf0c      	ite	eq
 80086b8:	2301      	moveq	r3, #1
 80086ba:	2300      	movne	r3, #0
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	f43f af46 	beq.w	8008554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3770      	adds	r7, #112	; 0x70
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b095      	sub	sp, #84	; 0x54
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	461a      	mov	r2, r3
 80086f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f8:	643b      	str	r3, [r7, #64]	; 0x40
 80086fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e6      	bne.n	80086da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3308      	adds	r3, #8
 8008712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	61fb      	str	r3, [r7, #28]
   return(result);
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008722:	f023 0301 	bic.w	r3, r3, #1
 8008726:	64bb      	str	r3, [r7, #72]	; 0x48
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3308      	adds	r3, #8
 800872e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008730:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008738:	e841 2300 	strex	r3, r2, [r1]
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e3      	bne.n	800870c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008748:	2b01      	cmp	r3, #1
 800874a:	d118      	bne.n	800877e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	60bb      	str	r3, [r7, #8]
   return(result);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	f023 0310 	bic.w	r3, r3, #16
 8008760:	647b      	str	r3, [r7, #68]	; 0x44
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800876a:	61bb      	str	r3, [r7, #24]
 800876c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6979      	ldr	r1, [r7, #20]
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	613b      	str	r3, [r7, #16]
   return(result);
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e6      	bne.n	800874c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2220      	movs	r2, #32
 8008782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008792:	bf00      	nop
 8008794:	3754      	adds	r7, #84	; 0x54
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7ff faf1 	bl	8007da4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b088      	sub	sp, #32
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	461a      	mov	r2, r3
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	61bb      	str	r3, [r7, #24]
 80087f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6979      	ldr	r1, [r7, #20]
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	613b      	str	r3, [r7, #16]
   return(result);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e6      	bne.n	80087d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff fabc 	bl	8007d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008818:	bf00      	nop
 800881a:	3720      	adds	r7, #32
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800886a:	2b01      	cmp	r3, #1
 800886c:	d101      	bne.n	8008872 <HAL_UARTEx_DisableFifoMode+0x16>
 800886e:	2302      	movs	r3, #2
 8008870:	e027      	b.n	80088c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2224      	movs	r2, #36	; 0x24
 800887e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0201 	bic.w	r2, r2, #1
 8008898:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2220      	movs	r2, #32
 80088b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d101      	bne.n	80088e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088e2:	2302      	movs	r3, #2
 80088e4:	e02d      	b.n	8008942 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2224      	movs	r2, #36	; 0x24
 80088f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0201 	bic.w	r2, r2, #1
 800890c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	683a      	ldr	r2, [r7, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f850 	bl	80089c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2220      	movs	r2, #32
 8008934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800895a:	2b01      	cmp	r3, #1
 800895c:	d101      	bne.n	8008962 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800895e:	2302      	movs	r3, #2
 8008960:	e02d      	b.n	80089be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2224      	movs	r2, #36	; 0x24
 800896e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 0201 	bic.w	r2, r2, #1
 8008988:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f812 	bl	80089c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d108      	bne.n	80089ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089e8:	e031      	b.n	8008a4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089ea:	2308      	movs	r3, #8
 80089ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089ee:	2308      	movs	r3, #8
 80089f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	0e5b      	lsrs	r3, r3, #25
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	0f5b      	lsrs	r3, r3, #29
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	f003 0307 	and.w	r3, r3, #7
 8008a10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	7b3a      	ldrb	r2, [r7, #12]
 8008a16:	4911      	ldr	r1, [pc, #68]	; (8008a5c <UARTEx_SetNbDataToProcess+0x94>)
 8008a18:	5c8a      	ldrb	r2, [r1, r2]
 8008a1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a1e:	7b3a      	ldrb	r2, [r7, #12]
 8008a20:	490f      	ldr	r1, [pc, #60]	; (8008a60 <UARTEx_SetNbDataToProcess+0x98>)
 8008a22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	7b7a      	ldrb	r2, [r7, #13]
 8008a34:	4909      	ldr	r1, [pc, #36]	; (8008a5c <UARTEx_SetNbDataToProcess+0x94>)
 8008a36:	5c8a      	ldrb	r2, [r1, r2]
 8008a38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a3c:	7b7a      	ldrb	r2, [r7, #13]
 8008a3e:	4908      	ldr	r1, [pc, #32]	; (8008a60 <UARTEx_SetNbDataToProcess+0x98>)
 8008a40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a42:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a4e:	bf00      	nop
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	0800b820 	.word	0x0800b820
 8008a60:	0800b828 	.word	0x0800b828

08008a64 <__cvt>:
 8008a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a68:	ec55 4b10 	vmov	r4, r5, d0
 8008a6c:	2d00      	cmp	r5, #0
 8008a6e:	460e      	mov	r6, r1
 8008a70:	4619      	mov	r1, r3
 8008a72:	462b      	mov	r3, r5
 8008a74:	bfbb      	ittet	lt
 8008a76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a7a:	461d      	movlt	r5, r3
 8008a7c:	2300      	movge	r3, #0
 8008a7e:	232d      	movlt	r3, #45	; 0x2d
 8008a80:	700b      	strb	r3, [r1, #0]
 8008a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a88:	4691      	mov	r9, r2
 8008a8a:	f023 0820 	bic.w	r8, r3, #32
 8008a8e:	bfbc      	itt	lt
 8008a90:	4622      	movlt	r2, r4
 8008a92:	4614      	movlt	r4, r2
 8008a94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a98:	d005      	beq.n	8008aa6 <__cvt+0x42>
 8008a9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a9e:	d100      	bne.n	8008aa2 <__cvt+0x3e>
 8008aa0:	3601      	adds	r6, #1
 8008aa2:	2102      	movs	r1, #2
 8008aa4:	e000      	b.n	8008aa8 <__cvt+0x44>
 8008aa6:	2103      	movs	r1, #3
 8008aa8:	ab03      	add	r3, sp, #12
 8008aaa:	9301      	str	r3, [sp, #4]
 8008aac:	ab02      	add	r3, sp, #8
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	ec45 4b10 	vmov	d0, r4, r5
 8008ab4:	4653      	mov	r3, sl
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	f000 fe76 	bl	80097a8 <_dtoa_r>
 8008abc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	d102      	bne.n	8008aca <__cvt+0x66>
 8008ac4:	f019 0f01 	tst.w	r9, #1
 8008ac8:	d022      	beq.n	8008b10 <__cvt+0xac>
 8008aca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ace:	eb07 0906 	add.w	r9, r7, r6
 8008ad2:	d110      	bne.n	8008af6 <__cvt+0x92>
 8008ad4:	783b      	ldrb	r3, [r7, #0]
 8008ad6:	2b30      	cmp	r3, #48	; 0x30
 8008ad8:	d10a      	bne.n	8008af0 <__cvt+0x8c>
 8008ada:	2200      	movs	r2, #0
 8008adc:	2300      	movs	r3, #0
 8008ade:	4620      	mov	r0, r4
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	f7f8 f819 	bl	8000b18 <__aeabi_dcmpeq>
 8008ae6:	b918      	cbnz	r0, 8008af0 <__cvt+0x8c>
 8008ae8:	f1c6 0601 	rsb	r6, r6, #1
 8008aec:	f8ca 6000 	str.w	r6, [sl]
 8008af0:	f8da 3000 	ldr.w	r3, [sl]
 8008af4:	4499      	add	r9, r3
 8008af6:	2200      	movs	r2, #0
 8008af8:	2300      	movs	r3, #0
 8008afa:	4620      	mov	r0, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	f7f8 f80b 	bl	8000b18 <__aeabi_dcmpeq>
 8008b02:	b108      	cbz	r0, 8008b08 <__cvt+0xa4>
 8008b04:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b08:	2230      	movs	r2, #48	; 0x30
 8008b0a:	9b03      	ldr	r3, [sp, #12]
 8008b0c:	454b      	cmp	r3, r9
 8008b0e:	d307      	bcc.n	8008b20 <__cvt+0xbc>
 8008b10:	9b03      	ldr	r3, [sp, #12]
 8008b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b14:	1bdb      	subs	r3, r3, r7
 8008b16:	4638      	mov	r0, r7
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	b004      	add	sp, #16
 8008b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b20:	1c59      	adds	r1, r3, #1
 8008b22:	9103      	str	r1, [sp, #12]
 8008b24:	701a      	strb	r2, [r3, #0]
 8008b26:	e7f0      	b.n	8008b0a <__cvt+0xa6>

08008b28 <__exponent>:
 8008b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2900      	cmp	r1, #0
 8008b2e:	bfb8      	it	lt
 8008b30:	4249      	neglt	r1, r1
 8008b32:	f803 2b02 	strb.w	r2, [r3], #2
 8008b36:	bfb4      	ite	lt
 8008b38:	222d      	movlt	r2, #45	; 0x2d
 8008b3a:	222b      	movge	r2, #43	; 0x2b
 8008b3c:	2909      	cmp	r1, #9
 8008b3e:	7042      	strb	r2, [r0, #1]
 8008b40:	dd2a      	ble.n	8008b98 <__exponent+0x70>
 8008b42:	f10d 0207 	add.w	r2, sp, #7
 8008b46:	4617      	mov	r7, r2
 8008b48:	260a      	movs	r6, #10
 8008b4a:	4694      	mov	ip, r2
 8008b4c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008b50:	fb06 1415 	mls	r4, r6, r5, r1
 8008b54:	3430      	adds	r4, #48	; 0x30
 8008b56:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	2c63      	cmp	r4, #99	; 0x63
 8008b5e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008b62:	4629      	mov	r1, r5
 8008b64:	dcf1      	bgt.n	8008b4a <__exponent+0x22>
 8008b66:	3130      	adds	r1, #48	; 0x30
 8008b68:	f1ac 0402 	sub.w	r4, ip, #2
 8008b6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008b70:	1c41      	adds	r1, r0, #1
 8008b72:	4622      	mov	r2, r4
 8008b74:	42ba      	cmp	r2, r7
 8008b76:	d30a      	bcc.n	8008b8e <__exponent+0x66>
 8008b78:	f10d 0209 	add.w	r2, sp, #9
 8008b7c:	eba2 020c 	sub.w	r2, r2, ip
 8008b80:	42bc      	cmp	r4, r7
 8008b82:	bf88      	it	hi
 8008b84:	2200      	movhi	r2, #0
 8008b86:	4413      	add	r3, r2
 8008b88:	1a18      	subs	r0, r3, r0
 8008b8a:	b003      	add	sp, #12
 8008b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b8e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008b92:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008b96:	e7ed      	b.n	8008b74 <__exponent+0x4c>
 8008b98:	2330      	movs	r3, #48	; 0x30
 8008b9a:	3130      	adds	r1, #48	; 0x30
 8008b9c:	7083      	strb	r3, [r0, #2]
 8008b9e:	70c1      	strb	r1, [r0, #3]
 8008ba0:	1d03      	adds	r3, r0, #4
 8008ba2:	e7f1      	b.n	8008b88 <__exponent+0x60>

08008ba4 <_printf_float>:
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	ed2d 8b02 	vpush	{d8}
 8008bac:	b08d      	sub	sp, #52	; 0x34
 8008bae:	460c      	mov	r4, r1
 8008bb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008bb4:	4616      	mov	r6, r2
 8008bb6:	461f      	mov	r7, r3
 8008bb8:	4605      	mov	r5, r0
 8008bba:	f000 fce7 	bl	800958c <_localeconv_r>
 8008bbe:	f8d0 a000 	ldr.w	sl, [r0]
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	f7f7 fb7c 	bl	80002c0 <strlen>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	930a      	str	r3, [sp, #40]	; 0x28
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	9305      	str	r3, [sp, #20]
 8008bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008bd8:	3307      	adds	r3, #7
 8008bda:	f023 0307 	bic.w	r3, r3, #7
 8008bde:	f103 0208 	add.w	r2, r3, #8
 8008be2:	f8c8 2000 	str.w	r2, [r8]
 8008be6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008bee:	9307      	str	r3, [sp, #28]
 8008bf0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bf4:	ee08 0a10 	vmov	s16, r0
 8008bf8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008bfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c00:	4b9e      	ldr	r3, [pc, #632]	; (8008e7c <_printf_float+0x2d8>)
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295
 8008c06:	f7f7 ffb9 	bl	8000b7c <__aeabi_dcmpun>
 8008c0a:	bb88      	cbnz	r0, 8008c70 <_printf_float+0xcc>
 8008c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c10:	4b9a      	ldr	r3, [pc, #616]	; (8008e7c <_printf_float+0x2d8>)
 8008c12:	f04f 32ff 	mov.w	r2, #4294967295
 8008c16:	f7f7 ff93 	bl	8000b40 <__aeabi_dcmple>
 8008c1a:	bb48      	cbnz	r0, 8008c70 <_printf_float+0xcc>
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	2300      	movs	r3, #0
 8008c20:	4640      	mov	r0, r8
 8008c22:	4649      	mov	r1, r9
 8008c24:	f7f7 ff82 	bl	8000b2c <__aeabi_dcmplt>
 8008c28:	b110      	cbz	r0, 8008c30 <_printf_float+0x8c>
 8008c2a:	232d      	movs	r3, #45	; 0x2d
 8008c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c30:	4a93      	ldr	r2, [pc, #588]	; (8008e80 <_printf_float+0x2dc>)
 8008c32:	4b94      	ldr	r3, [pc, #592]	; (8008e84 <_printf_float+0x2e0>)
 8008c34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c38:	bf94      	ite	ls
 8008c3a:	4690      	movls	r8, r2
 8008c3c:	4698      	movhi	r8, r3
 8008c3e:	2303      	movs	r3, #3
 8008c40:	6123      	str	r3, [r4, #16]
 8008c42:	9b05      	ldr	r3, [sp, #20]
 8008c44:	f023 0304 	bic.w	r3, r3, #4
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	f04f 0900 	mov.w	r9, #0
 8008c4e:	9700      	str	r7, [sp, #0]
 8008c50:	4633      	mov	r3, r6
 8008c52:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c54:	4621      	mov	r1, r4
 8008c56:	4628      	mov	r0, r5
 8008c58:	f000 f9da 	bl	8009010 <_printf_common>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	f040 8090 	bne.w	8008d82 <_printf_float+0x1de>
 8008c62:	f04f 30ff 	mov.w	r0, #4294967295
 8008c66:	b00d      	add	sp, #52	; 0x34
 8008c68:	ecbd 8b02 	vpop	{d8}
 8008c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c70:	4642      	mov	r2, r8
 8008c72:	464b      	mov	r3, r9
 8008c74:	4640      	mov	r0, r8
 8008c76:	4649      	mov	r1, r9
 8008c78:	f7f7 ff80 	bl	8000b7c <__aeabi_dcmpun>
 8008c7c:	b140      	cbz	r0, 8008c90 <_printf_float+0xec>
 8008c7e:	464b      	mov	r3, r9
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	bfbc      	itt	lt
 8008c84:	232d      	movlt	r3, #45	; 0x2d
 8008c86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c8a:	4a7f      	ldr	r2, [pc, #508]	; (8008e88 <_printf_float+0x2e4>)
 8008c8c:	4b7f      	ldr	r3, [pc, #508]	; (8008e8c <_printf_float+0x2e8>)
 8008c8e:	e7d1      	b.n	8008c34 <_printf_float+0x90>
 8008c90:	6863      	ldr	r3, [r4, #4]
 8008c92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c96:	9206      	str	r2, [sp, #24]
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	d13f      	bne.n	8008d1c <_printf_float+0x178>
 8008c9c:	2306      	movs	r3, #6
 8008c9e:	6063      	str	r3, [r4, #4]
 8008ca0:	9b05      	ldr	r3, [sp, #20]
 8008ca2:	6861      	ldr	r1, [r4, #4]
 8008ca4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9303      	str	r3, [sp, #12]
 8008cac:	ab0a      	add	r3, sp, #40	; 0x28
 8008cae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008cb2:	ab09      	add	r3, sp, #36	; 0x24
 8008cb4:	ec49 8b10 	vmov	d0, r8, r9
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	6022      	str	r2, [r4, #0]
 8008cbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f7ff fecf 	bl	8008a64 <__cvt>
 8008cc6:	9b06      	ldr	r3, [sp, #24]
 8008cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cca:	2b47      	cmp	r3, #71	; 0x47
 8008ccc:	4680      	mov	r8, r0
 8008cce:	d108      	bne.n	8008ce2 <_printf_float+0x13e>
 8008cd0:	1cc8      	adds	r0, r1, #3
 8008cd2:	db02      	blt.n	8008cda <_printf_float+0x136>
 8008cd4:	6863      	ldr	r3, [r4, #4]
 8008cd6:	4299      	cmp	r1, r3
 8008cd8:	dd41      	ble.n	8008d5e <_printf_float+0x1ba>
 8008cda:	f1ab 0302 	sub.w	r3, fp, #2
 8008cde:	fa5f fb83 	uxtb.w	fp, r3
 8008ce2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ce6:	d820      	bhi.n	8008d2a <_printf_float+0x186>
 8008ce8:	3901      	subs	r1, #1
 8008cea:	465a      	mov	r2, fp
 8008cec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8008cf2:	f7ff ff19 	bl	8008b28 <__exponent>
 8008cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cf8:	1813      	adds	r3, r2, r0
 8008cfa:	2a01      	cmp	r2, #1
 8008cfc:	4681      	mov	r9, r0
 8008cfe:	6123      	str	r3, [r4, #16]
 8008d00:	dc02      	bgt.n	8008d08 <_printf_float+0x164>
 8008d02:	6822      	ldr	r2, [r4, #0]
 8008d04:	07d2      	lsls	r2, r2, #31
 8008d06:	d501      	bpl.n	8008d0c <_printf_float+0x168>
 8008d08:	3301      	adds	r3, #1
 8008d0a:	6123      	str	r3, [r4, #16]
 8008d0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d09c      	beq.n	8008c4e <_printf_float+0xaa>
 8008d14:	232d      	movs	r3, #45	; 0x2d
 8008d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d1a:	e798      	b.n	8008c4e <_printf_float+0xaa>
 8008d1c:	9a06      	ldr	r2, [sp, #24]
 8008d1e:	2a47      	cmp	r2, #71	; 0x47
 8008d20:	d1be      	bne.n	8008ca0 <_printf_float+0xfc>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1bc      	bne.n	8008ca0 <_printf_float+0xfc>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e7b9      	b.n	8008c9e <_printf_float+0xfa>
 8008d2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d2e:	d118      	bne.n	8008d62 <_printf_float+0x1be>
 8008d30:	2900      	cmp	r1, #0
 8008d32:	6863      	ldr	r3, [r4, #4]
 8008d34:	dd0b      	ble.n	8008d4e <_printf_float+0x1aa>
 8008d36:	6121      	str	r1, [r4, #16]
 8008d38:	b913      	cbnz	r3, 8008d40 <_printf_float+0x19c>
 8008d3a:	6822      	ldr	r2, [r4, #0]
 8008d3c:	07d0      	lsls	r0, r2, #31
 8008d3e:	d502      	bpl.n	8008d46 <_printf_float+0x1a2>
 8008d40:	3301      	adds	r3, #1
 8008d42:	440b      	add	r3, r1
 8008d44:	6123      	str	r3, [r4, #16]
 8008d46:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d48:	f04f 0900 	mov.w	r9, #0
 8008d4c:	e7de      	b.n	8008d0c <_printf_float+0x168>
 8008d4e:	b913      	cbnz	r3, 8008d56 <_printf_float+0x1b2>
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	07d2      	lsls	r2, r2, #31
 8008d54:	d501      	bpl.n	8008d5a <_printf_float+0x1b6>
 8008d56:	3302      	adds	r3, #2
 8008d58:	e7f4      	b.n	8008d44 <_printf_float+0x1a0>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e7f2      	b.n	8008d44 <_printf_float+0x1a0>
 8008d5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d64:	4299      	cmp	r1, r3
 8008d66:	db05      	blt.n	8008d74 <_printf_float+0x1d0>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	6121      	str	r1, [r4, #16]
 8008d6c:	07d8      	lsls	r0, r3, #31
 8008d6e:	d5ea      	bpl.n	8008d46 <_printf_float+0x1a2>
 8008d70:	1c4b      	adds	r3, r1, #1
 8008d72:	e7e7      	b.n	8008d44 <_printf_float+0x1a0>
 8008d74:	2900      	cmp	r1, #0
 8008d76:	bfd4      	ite	le
 8008d78:	f1c1 0202 	rsble	r2, r1, #2
 8008d7c:	2201      	movgt	r2, #1
 8008d7e:	4413      	add	r3, r2
 8008d80:	e7e0      	b.n	8008d44 <_printf_float+0x1a0>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	055a      	lsls	r2, r3, #21
 8008d86:	d407      	bmi.n	8008d98 <_printf_float+0x1f4>
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	4642      	mov	r2, r8
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	4628      	mov	r0, r5
 8008d90:	47b8      	blx	r7
 8008d92:	3001      	adds	r0, #1
 8008d94:	d12c      	bne.n	8008df0 <_printf_float+0x24c>
 8008d96:	e764      	b.n	8008c62 <_printf_float+0xbe>
 8008d98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d9c:	f240 80e0 	bls.w	8008f60 <_printf_float+0x3bc>
 8008da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008da4:	2200      	movs	r2, #0
 8008da6:	2300      	movs	r3, #0
 8008da8:	f7f7 feb6 	bl	8000b18 <__aeabi_dcmpeq>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d034      	beq.n	8008e1a <_printf_float+0x276>
 8008db0:	4a37      	ldr	r2, [pc, #220]	; (8008e90 <_printf_float+0x2ec>)
 8008db2:	2301      	movs	r3, #1
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f af51 	beq.w	8008c62 <_printf_float+0xbe>
 8008dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	db02      	blt.n	8008dce <_printf_float+0x22a>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	07d8      	lsls	r0, r3, #31
 8008dcc:	d510      	bpl.n	8008df0 <_printf_float+0x24c>
 8008dce:	ee18 3a10 	vmov	r3, s16
 8008dd2:	4652      	mov	r2, sl
 8008dd4:	4631      	mov	r1, r6
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	47b8      	blx	r7
 8008dda:	3001      	adds	r0, #1
 8008ddc:	f43f af41 	beq.w	8008c62 <_printf_float+0xbe>
 8008de0:	f04f 0800 	mov.w	r8, #0
 8008de4:	f104 091a 	add.w	r9, r4, #26
 8008de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dea:	3b01      	subs	r3, #1
 8008dec:	4543      	cmp	r3, r8
 8008dee:	dc09      	bgt.n	8008e04 <_printf_float+0x260>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	079b      	lsls	r3, r3, #30
 8008df4:	f100 8107 	bmi.w	8009006 <_printf_float+0x462>
 8008df8:	68e0      	ldr	r0, [r4, #12]
 8008dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dfc:	4298      	cmp	r0, r3
 8008dfe:	bfb8      	it	lt
 8008e00:	4618      	movlt	r0, r3
 8008e02:	e730      	b.n	8008c66 <_printf_float+0xc2>
 8008e04:	2301      	movs	r3, #1
 8008e06:	464a      	mov	r2, r9
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	47b8      	blx	r7
 8008e0e:	3001      	adds	r0, #1
 8008e10:	f43f af27 	beq.w	8008c62 <_printf_float+0xbe>
 8008e14:	f108 0801 	add.w	r8, r8, #1
 8008e18:	e7e6      	b.n	8008de8 <_printf_float+0x244>
 8008e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dc39      	bgt.n	8008e94 <_printf_float+0x2f0>
 8008e20:	4a1b      	ldr	r2, [pc, #108]	; (8008e90 <_printf_float+0x2ec>)
 8008e22:	2301      	movs	r3, #1
 8008e24:	4631      	mov	r1, r6
 8008e26:	4628      	mov	r0, r5
 8008e28:	47b8      	blx	r7
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	f43f af19 	beq.w	8008c62 <_printf_float+0xbe>
 8008e30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008e34:	4313      	orrs	r3, r2
 8008e36:	d102      	bne.n	8008e3e <_printf_float+0x29a>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	07d9      	lsls	r1, r3, #31
 8008e3c:	d5d8      	bpl.n	8008df0 <_printf_float+0x24c>
 8008e3e:	ee18 3a10 	vmov	r3, s16
 8008e42:	4652      	mov	r2, sl
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	f43f af09 	beq.w	8008c62 <_printf_float+0xbe>
 8008e50:	f04f 0900 	mov.w	r9, #0
 8008e54:	f104 0a1a 	add.w	sl, r4, #26
 8008e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e5a:	425b      	negs	r3, r3
 8008e5c:	454b      	cmp	r3, r9
 8008e5e:	dc01      	bgt.n	8008e64 <_printf_float+0x2c0>
 8008e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e62:	e792      	b.n	8008d8a <_printf_float+0x1e6>
 8008e64:	2301      	movs	r3, #1
 8008e66:	4652      	mov	r2, sl
 8008e68:	4631      	mov	r1, r6
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	47b8      	blx	r7
 8008e6e:	3001      	adds	r0, #1
 8008e70:	f43f aef7 	beq.w	8008c62 <_printf_float+0xbe>
 8008e74:	f109 0901 	add.w	r9, r9, #1
 8008e78:	e7ee      	b.n	8008e58 <_printf_float+0x2b4>
 8008e7a:	bf00      	nop
 8008e7c:	7fefffff 	.word	0x7fefffff
 8008e80:	0800b830 	.word	0x0800b830
 8008e84:	0800b834 	.word	0x0800b834
 8008e88:	0800b838 	.word	0x0800b838
 8008e8c:	0800b83c 	.word	0x0800b83c
 8008e90:	0800b840 	.word	0x0800b840
 8008e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	bfa8      	it	ge
 8008e9c:	461a      	movge	r2, r3
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	4691      	mov	r9, r2
 8008ea2:	dc37      	bgt.n	8008f14 <_printf_float+0x370>
 8008ea4:	f04f 0b00 	mov.w	fp, #0
 8008ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eac:	f104 021a 	add.w	r2, r4, #26
 8008eb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	eba3 0309 	sub.w	r3, r3, r9
 8008eb8:	455b      	cmp	r3, fp
 8008eba:	dc33      	bgt.n	8008f24 <_printf_float+0x380>
 8008ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	db3b      	blt.n	8008f3c <_printf_float+0x398>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	07da      	lsls	r2, r3, #31
 8008ec8:	d438      	bmi.n	8008f3c <_printf_float+0x398>
 8008eca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008ece:	eba2 0903 	sub.w	r9, r2, r3
 8008ed2:	9b05      	ldr	r3, [sp, #20]
 8008ed4:	1ad2      	subs	r2, r2, r3
 8008ed6:	4591      	cmp	r9, r2
 8008ed8:	bfa8      	it	ge
 8008eda:	4691      	movge	r9, r2
 8008edc:	f1b9 0f00 	cmp.w	r9, #0
 8008ee0:	dc35      	bgt.n	8008f4e <_printf_float+0x3aa>
 8008ee2:	f04f 0800 	mov.w	r8, #0
 8008ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eea:	f104 0a1a 	add.w	sl, r4, #26
 8008eee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	eba3 0309 	sub.w	r3, r3, r9
 8008ef8:	4543      	cmp	r3, r8
 8008efa:	f77f af79 	ble.w	8008df0 <_printf_float+0x24c>
 8008efe:	2301      	movs	r3, #1
 8008f00:	4652      	mov	r2, sl
 8008f02:	4631      	mov	r1, r6
 8008f04:	4628      	mov	r0, r5
 8008f06:	47b8      	blx	r7
 8008f08:	3001      	adds	r0, #1
 8008f0a:	f43f aeaa 	beq.w	8008c62 <_printf_float+0xbe>
 8008f0e:	f108 0801 	add.w	r8, r8, #1
 8008f12:	e7ec      	b.n	8008eee <_printf_float+0x34a>
 8008f14:	4613      	mov	r3, r2
 8008f16:	4631      	mov	r1, r6
 8008f18:	4642      	mov	r2, r8
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d1c0      	bne.n	8008ea4 <_printf_float+0x300>
 8008f22:	e69e      	b.n	8008c62 <_printf_float+0xbe>
 8008f24:	2301      	movs	r3, #1
 8008f26:	4631      	mov	r1, r6
 8008f28:	4628      	mov	r0, r5
 8008f2a:	9205      	str	r2, [sp, #20]
 8008f2c:	47b8      	blx	r7
 8008f2e:	3001      	adds	r0, #1
 8008f30:	f43f ae97 	beq.w	8008c62 <_printf_float+0xbe>
 8008f34:	9a05      	ldr	r2, [sp, #20]
 8008f36:	f10b 0b01 	add.w	fp, fp, #1
 8008f3a:	e7b9      	b.n	8008eb0 <_printf_float+0x30c>
 8008f3c:	ee18 3a10 	vmov	r3, s16
 8008f40:	4652      	mov	r2, sl
 8008f42:	4631      	mov	r1, r6
 8008f44:	4628      	mov	r0, r5
 8008f46:	47b8      	blx	r7
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d1be      	bne.n	8008eca <_printf_float+0x326>
 8008f4c:	e689      	b.n	8008c62 <_printf_float+0xbe>
 8008f4e:	9a05      	ldr	r2, [sp, #20]
 8008f50:	464b      	mov	r3, r9
 8008f52:	4442      	add	r2, r8
 8008f54:	4631      	mov	r1, r6
 8008f56:	4628      	mov	r0, r5
 8008f58:	47b8      	blx	r7
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d1c1      	bne.n	8008ee2 <_printf_float+0x33e>
 8008f5e:	e680      	b.n	8008c62 <_printf_float+0xbe>
 8008f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f62:	2a01      	cmp	r2, #1
 8008f64:	dc01      	bgt.n	8008f6a <_printf_float+0x3c6>
 8008f66:	07db      	lsls	r3, r3, #31
 8008f68:	d53a      	bpl.n	8008fe0 <_printf_float+0x43c>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	4631      	mov	r1, r6
 8008f70:	4628      	mov	r0, r5
 8008f72:	47b8      	blx	r7
 8008f74:	3001      	adds	r0, #1
 8008f76:	f43f ae74 	beq.w	8008c62 <_printf_float+0xbe>
 8008f7a:	ee18 3a10 	vmov	r3, s16
 8008f7e:	4652      	mov	r2, sl
 8008f80:	4631      	mov	r1, r6
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	f43f ae6b 	beq.w	8008c62 <_printf_float+0xbe>
 8008f8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f90:	2200      	movs	r2, #0
 8008f92:	2300      	movs	r3, #0
 8008f94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008f98:	f7f7 fdbe 	bl	8000b18 <__aeabi_dcmpeq>
 8008f9c:	b9d8      	cbnz	r0, 8008fd6 <_printf_float+0x432>
 8008f9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008fa2:	f108 0201 	add.w	r2, r8, #1
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	4628      	mov	r0, r5
 8008faa:	47b8      	blx	r7
 8008fac:	3001      	adds	r0, #1
 8008fae:	d10e      	bne.n	8008fce <_printf_float+0x42a>
 8008fb0:	e657      	b.n	8008c62 <_printf_float+0xbe>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4652      	mov	r2, sl
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	4628      	mov	r0, r5
 8008fba:	47b8      	blx	r7
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	f43f ae50 	beq.w	8008c62 <_printf_float+0xbe>
 8008fc2:	f108 0801 	add.w	r8, r8, #1
 8008fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	4543      	cmp	r3, r8
 8008fcc:	dcf1      	bgt.n	8008fb2 <_printf_float+0x40e>
 8008fce:	464b      	mov	r3, r9
 8008fd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fd4:	e6da      	b.n	8008d8c <_printf_float+0x1e8>
 8008fd6:	f04f 0800 	mov.w	r8, #0
 8008fda:	f104 0a1a 	add.w	sl, r4, #26
 8008fde:	e7f2      	b.n	8008fc6 <_printf_float+0x422>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	4642      	mov	r2, r8
 8008fe4:	e7df      	b.n	8008fa6 <_printf_float+0x402>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	464a      	mov	r2, r9
 8008fea:	4631      	mov	r1, r6
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b8      	blx	r7
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	f43f ae36 	beq.w	8008c62 <_printf_float+0xbe>
 8008ff6:	f108 0801 	add.w	r8, r8, #1
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ffe:	1a5b      	subs	r3, r3, r1
 8009000:	4543      	cmp	r3, r8
 8009002:	dcf0      	bgt.n	8008fe6 <_printf_float+0x442>
 8009004:	e6f8      	b.n	8008df8 <_printf_float+0x254>
 8009006:	f04f 0800 	mov.w	r8, #0
 800900a:	f104 0919 	add.w	r9, r4, #25
 800900e:	e7f4      	b.n	8008ffa <_printf_float+0x456>

08009010 <_printf_common>:
 8009010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009014:	4616      	mov	r6, r2
 8009016:	4699      	mov	r9, r3
 8009018:	688a      	ldr	r2, [r1, #8]
 800901a:	690b      	ldr	r3, [r1, #16]
 800901c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009020:	4293      	cmp	r3, r2
 8009022:	bfb8      	it	lt
 8009024:	4613      	movlt	r3, r2
 8009026:	6033      	str	r3, [r6, #0]
 8009028:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800902c:	4607      	mov	r7, r0
 800902e:	460c      	mov	r4, r1
 8009030:	b10a      	cbz	r2, 8009036 <_printf_common+0x26>
 8009032:	3301      	adds	r3, #1
 8009034:	6033      	str	r3, [r6, #0]
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	0699      	lsls	r1, r3, #26
 800903a:	bf42      	ittt	mi
 800903c:	6833      	ldrmi	r3, [r6, #0]
 800903e:	3302      	addmi	r3, #2
 8009040:	6033      	strmi	r3, [r6, #0]
 8009042:	6825      	ldr	r5, [r4, #0]
 8009044:	f015 0506 	ands.w	r5, r5, #6
 8009048:	d106      	bne.n	8009058 <_printf_common+0x48>
 800904a:	f104 0a19 	add.w	sl, r4, #25
 800904e:	68e3      	ldr	r3, [r4, #12]
 8009050:	6832      	ldr	r2, [r6, #0]
 8009052:	1a9b      	subs	r3, r3, r2
 8009054:	42ab      	cmp	r3, r5
 8009056:	dc26      	bgt.n	80090a6 <_printf_common+0x96>
 8009058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800905c:	1e13      	subs	r3, r2, #0
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	bf18      	it	ne
 8009062:	2301      	movne	r3, #1
 8009064:	0692      	lsls	r2, r2, #26
 8009066:	d42b      	bmi.n	80090c0 <_printf_common+0xb0>
 8009068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800906c:	4649      	mov	r1, r9
 800906e:	4638      	mov	r0, r7
 8009070:	47c0      	blx	r8
 8009072:	3001      	adds	r0, #1
 8009074:	d01e      	beq.n	80090b4 <_printf_common+0xa4>
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	6922      	ldr	r2, [r4, #16]
 800907a:	f003 0306 	and.w	r3, r3, #6
 800907e:	2b04      	cmp	r3, #4
 8009080:	bf02      	ittt	eq
 8009082:	68e5      	ldreq	r5, [r4, #12]
 8009084:	6833      	ldreq	r3, [r6, #0]
 8009086:	1aed      	subeq	r5, r5, r3
 8009088:	68a3      	ldr	r3, [r4, #8]
 800908a:	bf0c      	ite	eq
 800908c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009090:	2500      	movne	r5, #0
 8009092:	4293      	cmp	r3, r2
 8009094:	bfc4      	itt	gt
 8009096:	1a9b      	subgt	r3, r3, r2
 8009098:	18ed      	addgt	r5, r5, r3
 800909a:	2600      	movs	r6, #0
 800909c:	341a      	adds	r4, #26
 800909e:	42b5      	cmp	r5, r6
 80090a0:	d11a      	bne.n	80090d8 <_printf_common+0xc8>
 80090a2:	2000      	movs	r0, #0
 80090a4:	e008      	b.n	80090b8 <_printf_common+0xa8>
 80090a6:	2301      	movs	r3, #1
 80090a8:	4652      	mov	r2, sl
 80090aa:	4649      	mov	r1, r9
 80090ac:	4638      	mov	r0, r7
 80090ae:	47c0      	blx	r8
 80090b0:	3001      	adds	r0, #1
 80090b2:	d103      	bne.n	80090bc <_printf_common+0xac>
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295
 80090b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090bc:	3501      	adds	r5, #1
 80090be:	e7c6      	b.n	800904e <_printf_common+0x3e>
 80090c0:	18e1      	adds	r1, r4, r3
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	2030      	movs	r0, #48	; 0x30
 80090c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090ca:	4422      	add	r2, r4
 80090cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090d4:	3302      	adds	r3, #2
 80090d6:	e7c7      	b.n	8009068 <_printf_common+0x58>
 80090d8:	2301      	movs	r3, #1
 80090da:	4622      	mov	r2, r4
 80090dc:	4649      	mov	r1, r9
 80090de:	4638      	mov	r0, r7
 80090e0:	47c0      	blx	r8
 80090e2:	3001      	adds	r0, #1
 80090e4:	d0e6      	beq.n	80090b4 <_printf_common+0xa4>
 80090e6:	3601      	adds	r6, #1
 80090e8:	e7d9      	b.n	800909e <_printf_common+0x8e>
	...

080090ec <_printf_i>:
 80090ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090f0:	7e0f      	ldrb	r7, [r1, #24]
 80090f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090f4:	2f78      	cmp	r7, #120	; 0x78
 80090f6:	4691      	mov	r9, r2
 80090f8:	4680      	mov	r8, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	469a      	mov	sl, r3
 80090fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009102:	d807      	bhi.n	8009114 <_printf_i+0x28>
 8009104:	2f62      	cmp	r7, #98	; 0x62
 8009106:	d80a      	bhi.n	800911e <_printf_i+0x32>
 8009108:	2f00      	cmp	r7, #0
 800910a:	f000 80d4 	beq.w	80092b6 <_printf_i+0x1ca>
 800910e:	2f58      	cmp	r7, #88	; 0x58
 8009110:	f000 80c0 	beq.w	8009294 <_printf_i+0x1a8>
 8009114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800911c:	e03a      	b.n	8009194 <_printf_i+0xa8>
 800911e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009122:	2b15      	cmp	r3, #21
 8009124:	d8f6      	bhi.n	8009114 <_printf_i+0x28>
 8009126:	a101      	add	r1, pc, #4	; (adr r1, 800912c <_printf_i+0x40>)
 8009128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800912c:	08009185 	.word	0x08009185
 8009130:	08009199 	.word	0x08009199
 8009134:	08009115 	.word	0x08009115
 8009138:	08009115 	.word	0x08009115
 800913c:	08009115 	.word	0x08009115
 8009140:	08009115 	.word	0x08009115
 8009144:	08009199 	.word	0x08009199
 8009148:	08009115 	.word	0x08009115
 800914c:	08009115 	.word	0x08009115
 8009150:	08009115 	.word	0x08009115
 8009154:	08009115 	.word	0x08009115
 8009158:	0800929d 	.word	0x0800929d
 800915c:	080091c5 	.word	0x080091c5
 8009160:	08009257 	.word	0x08009257
 8009164:	08009115 	.word	0x08009115
 8009168:	08009115 	.word	0x08009115
 800916c:	080092bf 	.word	0x080092bf
 8009170:	08009115 	.word	0x08009115
 8009174:	080091c5 	.word	0x080091c5
 8009178:	08009115 	.word	0x08009115
 800917c:	08009115 	.word	0x08009115
 8009180:	0800925f 	.word	0x0800925f
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	1d1a      	adds	r2, r3, #4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	602a      	str	r2, [r5, #0]
 800918c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009194:	2301      	movs	r3, #1
 8009196:	e09f      	b.n	80092d8 <_printf_i+0x1ec>
 8009198:	6820      	ldr	r0, [r4, #0]
 800919a:	682b      	ldr	r3, [r5, #0]
 800919c:	0607      	lsls	r7, r0, #24
 800919e:	f103 0104 	add.w	r1, r3, #4
 80091a2:	6029      	str	r1, [r5, #0]
 80091a4:	d501      	bpl.n	80091aa <_printf_i+0xbe>
 80091a6:	681e      	ldr	r6, [r3, #0]
 80091a8:	e003      	b.n	80091b2 <_printf_i+0xc6>
 80091aa:	0646      	lsls	r6, r0, #25
 80091ac:	d5fb      	bpl.n	80091a6 <_printf_i+0xba>
 80091ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	da03      	bge.n	80091be <_printf_i+0xd2>
 80091b6:	232d      	movs	r3, #45	; 0x2d
 80091b8:	4276      	negs	r6, r6
 80091ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091be:	485a      	ldr	r0, [pc, #360]	; (8009328 <_printf_i+0x23c>)
 80091c0:	230a      	movs	r3, #10
 80091c2:	e012      	b.n	80091ea <_printf_i+0xfe>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	6820      	ldr	r0, [r4, #0]
 80091c8:	1d19      	adds	r1, r3, #4
 80091ca:	6029      	str	r1, [r5, #0]
 80091cc:	0605      	lsls	r5, r0, #24
 80091ce:	d501      	bpl.n	80091d4 <_printf_i+0xe8>
 80091d0:	681e      	ldr	r6, [r3, #0]
 80091d2:	e002      	b.n	80091da <_printf_i+0xee>
 80091d4:	0641      	lsls	r1, r0, #25
 80091d6:	d5fb      	bpl.n	80091d0 <_printf_i+0xe4>
 80091d8:	881e      	ldrh	r6, [r3, #0]
 80091da:	4853      	ldr	r0, [pc, #332]	; (8009328 <_printf_i+0x23c>)
 80091dc:	2f6f      	cmp	r7, #111	; 0x6f
 80091de:	bf0c      	ite	eq
 80091e0:	2308      	moveq	r3, #8
 80091e2:	230a      	movne	r3, #10
 80091e4:	2100      	movs	r1, #0
 80091e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091ea:	6865      	ldr	r5, [r4, #4]
 80091ec:	60a5      	str	r5, [r4, #8]
 80091ee:	2d00      	cmp	r5, #0
 80091f0:	bfa2      	ittt	ge
 80091f2:	6821      	ldrge	r1, [r4, #0]
 80091f4:	f021 0104 	bicge.w	r1, r1, #4
 80091f8:	6021      	strge	r1, [r4, #0]
 80091fa:	b90e      	cbnz	r6, 8009200 <_printf_i+0x114>
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	d04b      	beq.n	8009298 <_printf_i+0x1ac>
 8009200:	4615      	mov	r5, r2
 8009202:	fbb6 f1f3 	udiv	r1, r6, r3
 8009206:	fb03 6711 	mls	r7, r3, r1, r6
 800920a:	5dc7      	ldrb	r7, [r0, r7]
 800920c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009210:	4637      	mov	r7, r6
 8009212:	42bb      	cmp	r3, r7
 8009214:	460e      	mov	r6, r1
 8009216:	d9f4      	bls.n	8009202 <_printf_i+0x116>
 8009218:	2b08      	cmp	r3, #8
 800921a:	d10b      	bne.n	8009234 <_printf_i+0x148>
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	07de      	lsls	r6, r3, #31
 8009220:	d508      	bpl.n	8009234 <_printf_i+0x148>
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	6861      	ldr	r1, [r4, #4]
 8009226:	4299      	cmp	r1, r3
 8009228:	bfde      	ittt	le
 800922a:	2330      	movle	r3, #48	; 0x30
 800922c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009230:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009234:	1b52      	subs	r2, r2, r5
 8009236:	6122      	str	r2, [r4, #16]
 8009238:	f8cd a000 	str.w	sl, [sp]
 800923c:	464b      	mov	r3, r9
 800923e:	aa03      	add	r2, sp, #12
 8009240:	4621      	mov	r1, r4
 8009242:	4640      	mov	r0, r8
 8009244:	f7ff fee4 	bl	8009010 <_printf_common>
 8009248:	3001      	adds	r0, #1
 800924a:	d14a      	bne.n	80092e2 <_printf_i+0x1f6>
 800924c:	f04f 30ff 	mov.w	r0, #4294967295
 8009250:	b004      	add	sp, #16
 8009252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	f043 0320 	orr.w	r3, r3, #32
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	4833      	ldr	r0, [pc, #204]	; (800932c <_printf_i+0x240>)
 8009260:	2778      	movs	r7, #120	; 0x78
 8009262:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	6829      	ldr	r1, [r5, #0]
 800926a:	061f      	lsls	r7, r3, #24
 800926c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009270:	d402      	bmi.n	8009278 <_printf_i+0x18c>
 8009272:	065f      	lsls	r7, r3, #25
 8009274:	bf48      	it	mi
 8009276:	b2b6      	uxthmi	r6, r6
 8009278:	07df      	lsls	r7, r3, #31
 800927a:	bf48      	it	mi
 800927c:	f043 0320 	orrmi.w	r3, r3, #32
 8009280:	6029      	str	r1, [r5, #0]
 8009282:	bf48      	it	mi
 8009284:	6023      	strmi	r3, [r4, #0]
 8009286:	b91e      	cbnz	r6, 8009290 <_printf_i+0x1a4>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	f023 0320 	bic.w	r3, r3, #32
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	2310      	movs	r3, #16
 8009292:	e7a7      	b.n	80091e4 <_printf_i+0xf8>
 8009294:	4824      	ldr	r0, [pc, #144]	; (8009328 <_printf_i+0x23c>)
 8009296:	e7e4      	b.n	8009262 <_printf_i+0x176>
 8009298:	4615      	mov	r5, r2
 800929a:	e7bd      	b.n	8009218 <_printf_i+0x12c>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	6826      	ldr	r6, [r4, #0]
 80092a0:	6961      	ldr	r1, [r4, #20]
 80092a2:	1d18      	adds	r0, r3, #4
 80092a4:	6028      	str	r0, [r5, #0]
 80092a6:	0635      	lsls	r5, r6, #24
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	d501      	bpl.n	80092b0 <_printf_i+0x1c4>
 80092ac:	6019      	str	r1, [r3, #0]
 80092ae:	e002      	b.n	80092b6 <_printf_i+0x1ca>
 80092b0:	0670      	lsls	r0, r6, #25
 80092b2:	d5fb      	bpl.n	80092ac <_printf_i+0x1c0>
 80092b4:	8019      	strh	r1, [r3, #0]
 80092b6:	2300      	movs	r3, #0
 80092b8:	6123      	str	r3, [r4, #16]
 80092ba:	4615      	mov	r5, r2
 80092bc:	e7bc      	b.n	8009238 <_printf_i+0x14c>
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	1d1a      	adds	r2, r3, #4
 80092c2:	602a      	str	r2, [r5, #0]
 80092c4:	681d      	ldr	r5, [r3, #0]
 80092c6:	6862      	ldr	r2, [r4, #4]
 80092c8:	2100      	movs	r1, #0
 80092ca:	4628      	mov	r0, r5
 80092cc:	f7f6 ffa8 	bl	8000220 <memchr>
 80092d0:	b108      	cbz	r0, 80092d6 <_printf_i+0x1ea>
 80092d2:	1b40      	subs	r0, r0, r5
 80092d4:	6060      	str	r0, [r4, #4]
 80092d6:	6863      	ldr	r3, [r4, #4]
 80092d8:	6123      	str	r3, [r4, #16]
 80092da:	2300      	movs	r3, #0
 80092dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092e0:	e7aa      	b.n	8009238 <_printf_i+0x14c>
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	462a      	mov	r2, r5
 80092e6:	4649      	mov	r1, r9
 80092e8:	4640      	mov	r0, r8
 80092ea:	47d0      	blx	sl
 80092ec:	3001      	adds	r0, #1
 80092ee:	d0ad      	beq.n	800924c <_printf_i+0x160>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	079b      	lsls	r3, r3, #30
 80092f4:	d413      	bmi.n	800931e <_printf_i+0x232>
 80092f6:	68e0      	ldr	r0, [r4, #12]
 80092f8:	9b03      	ldr	r3, [sp, #12]
 80092fa:	4298      	cmp	r0, r3
 80092fc:	bfb8      	it	lt
 80092fe:	4618      	movlt	r0, r3
 8009300:	e7a6      	b.n	8009250 <_printf_i+0x164>
 8009302:	2301      	movs	r3, #1
 8009304:	4632      	mov	r2, r6
 8009306:	4649      	mov	r1, r9
 8009308:	4640      	mov	r0, r8
 800930a:	47d0      	blx	sl
 800930c:	3001      	adds	r0, #1
 800930e:	d09d      	beq.n	800924c <_printf_i+0x160>
 8009310:	3501      	adds	r5, #1
 8009312:	68e3      	ldr	r3, [r4, #12]
 8009314:	9903      	ldr	r1, [sp, #12]
 8009316:	1a5b      	subs	r3, r3, r1
 8009318:	42ab      	cmp	r3, r5
 800931a:	dcf2      	bgt.n	8009302 <_printf_i+0x216>
 800931c:	e7eb      	b.n	80092f6 <_printf_i+0x20a>
 800931e:	2500      	movs	r5, #0
 8009320:	f104 0619 	add.w	r6, r4, #25
 8009324:	e7f5      	b.n	8009312 <_printf_i+0x226>
 8009326:	bf00      	nop
 8009328:	0800b842 	.word	0x0800b842
 800932c:	0800b853 	.word	0x0800b853

08009330 <std>:
 8009330:	2300      	movs	r3, #0
 8009332:	b510      	push	{r4, lr}
 8009334:	4604      	mov	r4, r0
 8009336:	e9c0 3300 	strd	r3, r3, [r0]
 800933a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800933e:	6083      	str	r3, [r0, #8]
 8009340:	8181      	strh	r1, [r0, #12]
 8009342:	6643      	str	r3, [r0, #100]	; 0x64
 8009344:	81c2      	strh	r2, [r0, #14]
 8009346:	6183      	str	r3, [r0, #24]
 8009348:	4619      	mov	r1, r3
 800934a:	2208      	movs	r2, #8
 800934c:	305c      	adds	r0, #92	; 0x5c
 800934e:	f000 f914 	bl	800957a <memset>
 8009352:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <std+0x58>)
 8009354:	6263      	str	r3, [r4, #36]	; 0x24
 8009356:	4b0d      	ldr	r3, [pc, #52]	; (800938c <std+0x5c>)
 8009358:	62a3      	str	r3, [r4, #40]	; 0x28
 800935a:	4b0d      	ldr	r3, [pc, #52]	; (8009390 <std+0x60>)
 800935c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800935e:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <std+0x64>)
 8009360:	6323      	str	r3, [r4, #48]	; 0x30
 8009362:	4b0d      	ldr	r3, [pc, #52]	; (8009398 <std+0x68>)
 8009364:	6224      	str	r4, [r4, #32]
 8009366:	429c      	cmp	r4, r3
 8009368:	d006      	beq.n	8009378 <std+0x48>
 800936a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800936e:	4294      	cmp	r4, r2
 8009370:	d002      	beq.n	8009378 <std+0x48>
 8009372:	33d0      	adds	r3, #208	; 0xd0
 8009374:	429c      	cmp	r4, r3
 8009376:	d105      	bne.n	8009384 <std+0x54>
 8009378:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800937c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009380:	f000 b978 	b.w	8009674 <__retarget_lock_init_recursive>
 8009384:	bd10      	pop	{r4, pc}
 8009386:	bf00      	nop
 8009388:	080094f5 	.word	0x080094f5
 800938c:	08009517 	.word	0x08009517
 8009390:	0800954f 	.word	0x0800954f
 8009394:	08009573 	.word	0x08009573
 8009398:	200004a8 	.word	0x200004a8

0800939c <stdio_exit_handler>:
 800939c:	4a02      	ldr	r2, [pc, #8]	; (80093a8 <stdio_exit_handler+0xc>)
 800939e:	4903      	ldr	r1, [pc, #12]	; (80093ac <stdio_exit_handler+0x10>)
 80093a0:	4803      	ldr	r0, [pc, #12]	; (80093b0 <stdio_exit_handler+0x14>)
 80093a2:	f000 b869 	b.w	8009478 <_fwalk_sglue>
 80093a6:	bf00      	nop
 80093a8:	20000010 	.word	0x20000010
 80093ac:	0800b2c9 	.word	0x0800b2c9
 80093b0:	2000001c 	.word	0x2000001c

080093b4 <cleanup_stdio>:
 80093b4:	6841      	ldr	r1, [r0, #4]
 80093b6:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <cleanup_stdio+0x34>)
 80093b8:	4299      	cmp	r1, r3
 80093ba:	b510      	push	{r4, lr}
 80093bc:	4604      	mov	r4, r0
 80093be:	d001      	beq.n	80093c4 <cleanup_stdio+0x10>
 80093c0:	f001 ff82 	bl	800b2c8 <_fflush_r>
 80093c4:	68a1      	ldr	r1, [r4, #8]
 80093c6:	4b09      	ldr	r3, [pc, #36]	; (80093ec <cleanup_stdio+0x38>)
 80093c8:	4299      	cmp	r1, r3
 80093ca:	d002      	beq.n	80093d2 <cleanup_stdio+0x1e>
 80093cc:	4620      	mov	r0, r4
 80093ce:	f001 ff7b 	bl	800b2c8 <_fflush_r>
 80093d2:	68e1      	ldr	r1, [r4, #12]
 80093d4:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <cleanup_stdio+0x3c>)
 80093d6:	4299      	cmp	r1, r3
 80093d8:	d004      	beq.n	80093e4 <cleanup_stdio+0x30>
 80093da:	4620      	mov	r0, r4
 80093dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093e0:	f001 bf72 	b.w	800b2c8 <_fflush_r>
 80093e4:	bd10      	pop	{r4, pc}
 80093e6:	bf00      	nop
 80093e8:	200004a8 	.word	0x200004a8
 80093ec:	20000510 	.word	0x20000510
 80093f0:	20000578 	.word	0x20000578

080093f4 <global_stdio_init.part.0>:
 80093f4:	b510      	push	{r4, lr}
 80093f6:	4b0b      	ldr	r3, [pc, #44]	; (8009424 <global_stdio_init.part.0+0x30>)
 80093f8:	4c0b      	ldr	r4, [pc, #44]	; (8009428 <global_stdio_init.part.0+0x34>)
 80093fa:	4a0c      	ldr	r2, [pc, #48]	; (800942c <global_stdio_init.part.0+0x38>)
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	4620      	mov	r0, r4
 8009400:	2200      	movs	r2, #0
 8009402:	2104      	movs	r1, #4
 8009404:	f7ff ff94 	bl	8009330 <std>
 8009408:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800940c:	2201      	movs	r2, #1
 800940e:	2109      	movs	r1, #9
 8009410:	f7ff ff8e 	bl	8009330 <std>
 8009414:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009418:	2202      	movs	r2, #2
 800941a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800941e:	2112      	movs	r1, #18
 8009420:	f7ff bf86 	b.w	8009330 <std>
 8009424:	200005e0 	.word	0x200005e0
 8009428:	200004a8 	.word	0x200004a8
 800942c:	0800939d 	.word	0x0800939d

08009430 <__sfp_lock_acquire>:
 8009430:	4801      	ldr	r0, [pc, #4]	; (8009438 <__sfp_lock_acquire+0x8>)
 8009432:	f000 b920 	b.w	8009676 <__retarget_lock_acquire_recursive>
 8009436:	bf00      	nop
 8009438:	200005e9 	.word	0x200005e9

0800943c <__sfp_lock_release>:
 800943c:	4801      	ldr	r0, [pc, #4]	; (8009444 <__sfp_lock_release+0x8>)
 800943e:	f000 b91b 	b.w	8009678 <__retarget_lock_release_recursive>
 8009442:	bf00      	nop
 8009444:	200005e9 	.word	0x200005e9

08009448 <__sinit>:
 8009448:	b510      	push	{r4, lr}
 800944a:	4604      	mov	r4, r0
 800944c:	f7ff fff0 	bl	8009430 <__sfp_lock_acquire>
 8009450:	6a23      	ldr	r3, [r4, #32]
 8009452:	b11b      	cbz	r3, 800945c <__sinit+0x14>
 8009454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009458:	f7ff bff0 	b.w	800943c <__sfp_lock_release>
 800945c:	4b04      	ldr	r3, [pc, #16]	; (8009470 <__sinit+0x28>)
 800945e:	6223      	str	r3, [r4, #32]
 8009460:	4b04      	ldr	r3, [pc, #16]	; (8009474 <__sinit+0x2c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1f5      	bne.n	8009454 <__sinit+0xc>
 8009468:	f7ff ffc4 	bl	80093f4 <global_stdio_init.part.0>
 800946c:	e7f2      	b.n	8009454 <__sinit+0xc>
 800946e:	bf00      	nop
 8009470:	080093b5 	.word	0x080093b5
 8009474:	200005e0 	.word	0x200005e0

08009478 <_fwalk_sglue>:
 8009478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800947c:	4607      	mov	r7, r0
 800947e:	4688      	mov	r8, r1
 8009480:	4614      	mov	r4, r2
 8009482:	2600      	movs	r6, #0
 8009484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009488:	f1b9 0901 	subs.w	r9, r9, #1
 800948c:	d505      	bpl.n	800949a <_fwalk_sglue+0x22>
 800948e:	6824      	ldr	r4, [r4, #0]
 8009490:	2c00      	cmp	r4, #0
 8009492:	d1f7      	bne.n	8009484 <_fwalk_sglue+0xc>
 8009494:	4630      	mov	r0, r6
 8009496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d907      	bls.n	80094b0 <_fwalk_sglue+0x38>
 80094a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094a4:	3301      	adds	r3, #1
 80094a6:	d003      	beq.n	80094b0 <_fwalk_sglue+0x38>
 80094a8:	4629      	mov	r1, r5
 80094aa:	4638      	mov	r0, r7
 80094ac:	47c0      	blx	r8
 80094ae:	4306      	orrs	r6, r0
 80094b0:	3568      	adds	r5, #104	; 0x68
 80094b2:	e7e9      	b.n	8009488 <_fwalk_sglue+0x10>

080094b4 <siprintf>:
 80094b4:	b40e      	push	{r1, r2, r3}
 80094b6:	b500      	push	{lr}
 80094b8:	b09c      	sub	sp, #112	; 0x70
 80094ba:	ab1d      	add	r3, sp, #116	; 0x74
 80094bc:	9002      	str	r0, [sp, #8]
 80094be:	9006      	str	r0, [sp, #24]
 80094c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094c4:	4809      	ldr	r0, [pc, #36]	; (80094ec <siprintf+0x38>)
 80094c6:	9107      	str	r1, [sp, #28]
 80094c8:	9104      	str	r1, [sp, #16]
 80094ca:	4909      	ldr	r1, [pc, #36]	; (80094f0 <siprintf+0x3c>)
 80094cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d0:	9105      	str	r1, [sp, #20]
 80094d2:	6800      	ldr	r0, [r0, #0]
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	a902      	add	r1, sp, #8
 80094d8:	f001 fc2e 	bl	800ad38 <_svfiprintf_r>
 80094dc:	9b02      	ldr	r3, [sp, #8]
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	b01c      	add	sp, #112	; 0x70
 80094e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e8:	b003      	add	sp, #12
 80094ea:	4770      	bx	lr
 80094ec:	20000068 	.word	0x20000068
 80094f0:	ffff0208 	.word	0xffff0208

080094f4 <__sread>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	460c      	mov	r4, r1
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	f000 f86c 	bl	80095d8 <_read_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	bfab      	itete	ge
 8009504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009506:	89a3      	ldrhlt	r3, [r4, #12]
 8009508:	181b      	addge	r3, r3, r0
 800950a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800950e:	bfac      	ite	ge
 8009510:	6563      	strge	r3, [r4, #84]	; 0x54
 8009512:	81a3      	strhlt	r3, [r4, #12]
 8009514:	bd10      	pop	{r4, pc}

08009516 <__swrite>:
 8009516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951a:	461f      	mov	r7, r3
 800951c:	898b      	ldrh	r3, [r1, #12]
 800951e:	05db      	lsls	r3, r3, #23
 8009520:	4605      	mov	r5, r0
 8009522:	460c      	mov	r4, r1
 8009524:	4616      	mov	r6, r2
 8009526:	d505      	bpl.n	8009534 <__swrite+0x1e>
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	2302      	movs	r3, #2
 800952e:	2200      	movs	r2, #0
 8009530:	f000 f840 	bl	80095b4 <_lseek_r>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800953a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	4628      	mov	r0, r5
 8009546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800954a:	f000 b857 	b.w	80095fc <_write_r>

0800954e <__sseek>:
 800954e:	b510      	push	{r4, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009556:	f000 f82d 	bl	80095b4 <_lseek_r>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	bf15      	itete	ne
 8009560:	6560      	strne	r0, [r4, #84]	; 0x54
 8009562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800956a:	81a3      	strheq	r3, [r4, #12]
 800956c:	bf18      	it	ne
 800956e:	81a3      	strhne	r3, [r4, #12]
 8009570:	bd10      	pop	{r4, pc}

08009572 <__sclose>:
 8009572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009576:	f000 b80d 	b.w	8009594 <_close_r>

0800957a <memset>:
 800957a:	4402      	add	r2, r0
 800957c:	4603      	mov	r3, r0
 800957e:	4293      	cmp	r3, r2
 8009580:	d100      	bne.n	8009584 <memset+0xa>
 8009582:	4770      	bx	lr
 8009584:	f803 1b01 	strb.w	r1, [r3], #1
 8009588:	e7f9      	b.n	800957e <memset+0x4>
	...

0800958c <_localeconv_r>:
 800958c:	4800      	ldr	r0, [pc, #0]	; (8009590 <_localeconv_r+0x4>)
 800958e:	4770      	bx	lr
 8009590:	2000015c 	.word	0x2000015c

08009594 <_close_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d06      	ldr	r5, [pc, #24]	; (80095b0 <_close_r+0x1c>)
 8009598:	2300      	movs	r3, #0
 800959a:	4604      	mov	r4, r0
 800959c:	4608      	mov	r0, r1
 800959e:	602b      	str	r3, [r5, #0]
 80095a0:	f7f8 fedf 	bl	8002362 <_close>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_close_r+0x1a>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_close_r+0x1a>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	200005e4 	.word	0x200005e4

080095b4 <_lseek_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d07      	ldr	r5, [pc, #28]	; (80095d4 <_lseek_r+0x20>)
 80095b8:	4604      	mov	r4, r0
 80095ba:	4608      	mov	r0, r1
 80095bc:	4611      	mov	r1, r2
 80095be:	2200      	movs	r2, #0
 80095c0:	602a      	str	r2, [r5, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	f7f8 fef4 	bl	80023b0 <_lseek>
 80095c8:	1c43      	adds	r3, r0, #1
 80095ca:	d102      	bne.n	80095d2 <_lseek_r+0x1e>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	b103      	cbz	r3, 80095d2 <_lseek_r+0x1e>
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	bd38      	pop	{r3, r4, r5, pc}
 80095d4:	200005e4 	.word	0x200005e4

080095d8 <_read_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d07      	ldr	r5, [pc, #28]	; (80095f8 <_read_r+0x20>)
 80095dc:	4604      	mov	r4, r0
 80095de:	4608      	mov	r0, r1
 80095e0:	4611      	mov	r1, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	602a      	str	r2, [r5, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	f7f8 fe82 	bl	80022f0 <_read>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d102      	bne.n	80095f6 <_read_r+0x1e>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	b103      	cbz	r3, 80095f6 <_read_r+0x1e>
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	200005e4 	.word	0x200005e4

080095fc <_write_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4d07      	ldr	r5, [pc, #28]	; (800961c <_write_r+0x20>)
 8009600:	4604      	mov	r4, r0
 8009602:	4608      	mov	r0, r1
 8009604:	4611      	mov	r1, r2
 8009606:	2200      	movs	r2, #0
 8009608:	602a      	str	r2, [r5, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	f7f8 fe8d 	bl	800232a <_write>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	d102      	bne.n	800961a <_write_r+0x1e>
 8009614:	682b      	ldr	r3, [r5, #0]
 8009616:	b103      	cbz	r3, 800961a <_write_r+0x1e>
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	bd38      	pop	{r3, r4, r5, pc}
 800961c:	200005e4 	.word	0x200005e4

08009620 <__errno>:
 8009620:	4b01      	ldr	r3, [pc, #4]	; (8009628 <__errno+0x8>)
 8009622:	6818      	ldr	r0, [r3, #0]
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	20000068 	.word	0x20000068

0800962c <__libc_init_array>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	4d0d      	ldr	r5, [pc, #52]	; (8009664 <__libc_init_array+0x38>)
 8009630:	4c0d      	ldr	r4, [pc, #52]	; (8009668 <__libc_init_array+0x3c>)
 8009632:	1b64      	subs	r4, r4, r5
 8009634:	10a4      	asrs	r4, r4, #2
 8009636:	2600      	movs	r6, #0
 8009638:	42a6      	cmp	r6, r4
 800963a:	d109      	bne.n	8009650 <__libc_init_array+0x24>
 800963c:	4d0b      	ldr	r5, [pc, #44]	; (800966c <__libc_init_array+0x40>)
 800963e:	4c0c      	ldr	r4, [pc, #48]	; (8009670 <__libc_init_array+0x44>)
 8009640:	f002 f896 	bl	800b770 <_init>
 8009644:	1b64      	subs	r4, r4, r5
 8009646:	10a4      	asrs	r4, r4, #2
 8009648:	2600      	movs	r6, #0
 800964a:	42a6      	cmp	r6, r4
 800964c:	d105      	bne.n	800965a <__libc_init_array+0x2e>
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	f855 3b04 	ldr.w	r3, [r5], #4
 8009654:	4798      	blx	r3
 8009656:	3601      	adds	r6, #1
 8009658:	e7ee      	b.n	8009638 <__libc_init_array+0xc>
 800965a:	f855 3b04 	ldr.w	r3, [r5], #4
 800965e:	4798      	blx	r3
 8009660:	3601      	adds	r6, #1
 8009662:	e7f2      	b.n	800964a <__libc_init_array+0x1e>
 8009664:	0800bbac 	.word	0x0800bbac
 8009668:	0800bbac 	.word	0x0800bbac
 800966c:	0800bbac 	.word	0x0800bbac
 8009670:	0800bbb0 	.word	0x0800bbb0

08009674 <__retarget_lock_init_recursive>:
 8009674:	4770      	bx	lr

08009676 <__retarget_lock_acquire_recursive>:
 8009676:	4770      	bx	lr

08009678 <__retarget_lock_release_recursive>:
 8009678:	4770      	bx	lr

0800967a <memcpy>:
 800967a:	440a      	add	r2, r1
 800967c:	4291      	cmp	r1, r2
 800967e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009682:	d100      	bne.n	8009686 <memcpy+0xc>
 8009684:	4770      	bx	lr
 8009686:	b510      	push	{r4, lr}
 8009688:	f811 4b01 	ldrb.w	r4, [r1], #1
 800968c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009690:	4291      	cmp	r1, r2
 8009692:	d1f9      	bne.n	8009688 <memcpy+0xe>
 8009694:	bd10      	pop	{r4, pc}

08009696 <quorem>:
 8009696:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969a:	6903      	ldr	r3, [r0, #16]
 800969c:	690c      	ldr	r4, [r1, #16]
 800969e:	42a3      	cmp	r3, r4
 80096a0:	4607      	mov	r7, r0
 80096a2:	db7e      	blt.n	80097a2 <quorem+0x10c>
 80096a4:	3c01      	subs	r4, #1
 80096a6:	f101 0814 	add.w	r8, r1, #20
 80096aa:	f100 0514 	add.w	r5, r0, #20
 80096ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096bc:	3301      	adds	r3, #1
 80096be:	429a      	cmp	r2, r3
 80096c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80096cc:	d331      	bcc.n	8009732 <quorem+0x9c>
 80096ce:	f04f 0e00 	mov.w	lr, #0
 80096d2:	4640      	mov	r0, r8
 80096d4:	46ac      	mov	ip, r5
 80096d6:	46f2      	mov	sl, lr
 80096d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80096dc:	b293      	uxth	r3, r2
 80096de:	fb06 e303 	mla	r3, r6, r3, lr
 80096e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096e6:	0c1a      	lsrs	r2, r3, #16
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	ebaa 0303 	sub.w	r3, sl, r3
 80096ee:	f8dc a000 	ldr.w	sl, [ip]
 80096f2:	fa13 f38a 	uxtah	r3, r3, sl
 80096f6:	fb06 220e 	mla	r2, r6, lr, r2
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	9b00      	ldr	r3, [sp, #0]
 80096fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009702:	b292      	uxth	r2, r2
 8009704:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009708:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800970c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009710:	4581      	cmp	r9, r0
 8009712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009716:	f84c 3b04 	str.w	r3, [ip], #4
 800971a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800971e:	d2db      	bcs.n	80096d8 <quorem+0x42>
 8009720:	f855 300b 	ldr.w	r3, [r5, fp]
 8009724:	b92b      	cbnz	r3, 8009732 <quorem+0x9c>
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	3b04      	subs	r3, #4
 800972a:	429d      	cmp	r5, r3
 800972c:	461a      	mov	r2, r3
 800972e:	d32c      	bcc.n	800978a <quorem+0xf4>
 8009730:	613c      	str	r4, [r7, #16]
 8009732:	4638      	mov	r0, r7
 8009734:	f001 f9a6 	bl	800aa84 <__mcmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	db22      	blt.n	8009782 <quorem+0xec>
 800973c:	3601      	adds	r6, #1
 800973e:	4629      	mov	r1, r5
 8009740:	2000      	movs	r0, #0
 8009742:	f858 2b04 	ldr.w	r2, [r8], #4
 8009746:	f8d1 c000 	ldr.w	ip, [r1]
 800974a:	b293      	uxth	r3, r2
 800974c:	1ac3      	subs	r3, r0, r3
 800974e:	0c12      	lsrs	r2, r2, #16
 8009750:	fa13 f38c 	uxtah	r3, r3, ip
 8009754:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800975c:	b29b      	uxth	r3, r3
 800975e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009762:	45c1      	cmp	r9, r8
 8009764:	f841 3b04 	str.w	r3, [r1], #4
 8009768:	ea4f 4022 	mov.w	r0, r2, asr #16
 800976c:	d2e9      	bcs.n	8009742 <quorem+0xac>
 800976e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009772:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009776:	b922      	cbnz	r2, 8009782 <quorem+0xec>
 8009778:	3b04      	subs	r3, #4
 800977a:	429d      	cmp	r5, r3
 800977c:	461a      	mov	r2, r3
 800977e:	d30a      	bcc.n	8009796 <quorem+0x100>
 8009780:	613c      	str	r4, [r7, #16]
 8009782:	4630      	mov	r0, r6
 8009784:	b003      	add	sp, #12
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	6812      	ldr	r2, [r2, #0]
 800978c:	3b04      	subs	r3, #4
 800978e:	2a00      	cmp	r2, #0
 8009790:	d1ce      	bne.n	8009730 <quorem+0x9a>
 8009792:	3c01      	subs	r4, #1
 8009794:	e7c9      	b.n	800972a <quorem+0x94>
 8009796:	6812      	ldr	r2, [r2, #0]
 8009798:	3b04      	subs	r3, #4
 800979a:	2a00      	cmp	r2, #0
 800979c:	d1f0      	bne.n	8009780 <quorem+0xea>
 800979e:	3c01      	subs	r4, #1
 80097a0:	e7eb      	b.n	800977a <quorem+0xe4>
 80097a2:	2000      	movs	r0, #0
 80097a4:	e7ee      	b.n	8009784 <quorem+0xee>
	...

080097a8 <_dtoa_r>:
 80097a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	ed2d 8b04 	vpush	{d8-d9}
 80097b0:	69c5      	ldr	r5, [r0, #28]
 80097b2:	b093      	sub	sp, #76	; 0x4c
 80097b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80097b8:	ec57 6b10 	vmov	r6, r7, d0
 80097bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097c0:	9107      	str	r1, [sp, #28]
 80097c2:	4604      	mov	r4, r0
 80097c4:	920a      	str	r2, [sp, #40]	; 0x28
 80097c6:	930d      	str	r3, [sp, #52]	; 0x34
 80097c8:	b975      	cbnz	r5, 80097e8 <_dtoa_r+0x40>
 80097ca:	2010      	movs	r0, #16
 80097cc:	f000 fe2a 	bl	800a424 <malloc>
 80097d0:	4602      	mov	r2, r0
 80097d2:	61e0      	str	r0, [r4, #28]
 80097d4:	b920      	cbnz	r0, 80097e0 <_dtoa_r+0x38>
 80097d6:	4bae      	ldr	r3, [pc, #696]	; (8009a90 <_dtoa_r+0x2e8>)
 80097d8:	21ef      	movs	r1, #239	; 0xef
 80097da:	48ae      	ldr	r0, [pc, #696]	; (8009a94 <_dtoa_r+0x2ec>)
 80097dc:	f001 fe5c 	bl	800b498 <__assert_func>
 80097e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097e4:	6005      	str	r5, [r0, #0]
 80097e6:	60c5      	str	r5, [r0, #12]
 80097e8:	69e3      	ldr	r3, [r4, #28]
 80097ea:	6819      	ldr	r1, [r3, #0]
 80097ec:	b151      	cbz	r1, 8009804 <_dtoa_r+0x5c>
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	604a      	str	r2, [r1, #4]
 80097f2:	2301      	movs	r3, #1
 80097f4:	4093      	lsls	r3, r2
 80097f6:	608b      	str	r3, [r1, #8]
 80097f8:	4620      	mov	r0, r4
 80097fa:	f000 ff07 	bl	800a60c <_Bfree>
 80097fe:	69e3      	ldr	r3, [r4, #28]
 8009800:	2200      	movs	r2, #0
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	1e3b      	subs	r3, r7, #0
 8009806:	bfbb      	ittet	lt
 8009808:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800980c:	9303      	strlt	r3, [sp, #12]
 800980e:	2300      	movge	r3, #0
 8009810:	2201      	movlt	r2, #1
 8009812:	bfac      	ite	ge
 8009814:	f8c8 3000 	strge.w	r3, [r8]
 8009818:	f8c8 2000 	strlt.w	r2, [r8]
 800981c:	4b9e      	ldr	r3, [pc, #632]	; (8009a98 <_dtoa_r+0x2f0>)
 800981e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009822:	ea33 0308 	bics.w	r3, r3, r8
 8009826:	d11b      	bne.n	8009860 <_dtoa_r+0xb8>
 8009828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800982a:	f242 730f 	movw	r3, #9999	; 0x270f
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009834:	4333      	orrs	r3, r6
 8009836:	f000 8593 	beq.w	800a360 <_dtoa_r+0xbb8>
 800983a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800983c:	b963      	cbnz	r3, 8009858 <_dtoa_r+0xb0>
 800983e:	4b97      	ldr	r3, [pc, #604]	; (8009a9c <_dtoa_r+0x2f4>)
 8009840:	e027      	b.n	8009892 <_dtoa_r+0xea>
 8009842:	4b97      	ldr	r3, [pc, #604]	; (8009aa0 <_dtoa_r+0x2f8>)
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	3308      	adds	r3, #8
 8009848:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	9800      	ldr	r0, [sp, #0]
 800984e:	b013      	add	sp, #76	; 0x4c
 8009850:	ecbd 8b04 	vpop	{d8-d9}
 8009854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009858:	4b90      	ldr	r3, [pc, #576]	; (8009a9c <_dtoa_r+0x2f4>)
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	3303      	adds	r3, #3
 800985e:	e7f3      	b.n	8009848 <_dtoa_r+0xa0>
 8009860:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009864:	2200      	movs	r2, #0
 8009866:	ec51 0b17 	vmov	r0, r1, d7
 800986a:	eeb0 8a47 	vmov.f32	s16, s14
 800986e:	eef0 8a67 	vmov.f32	s17, s15
 8009872:	2300      	movs	r3, #0
 8009874:	f7f7 f950 	bl	8000b18 <__aeabi_dcmpeq>
 8009878:	4681      	mov	r9, r0
 800987a:	b160      	cbz	r0, 8009896 <_dtoa_r+0xee>
 800987c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800987e:	2301      	movs	r3, #1
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 8568 	beq.w	800a35a <_dtoa_r+0xbb2>
 800988a:	4b86      	ldr	r3, [pc, #536]	; (8009aa4 <_dtoa_r+0x2fc>)
 800988c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	3b01      	subs	r3, #1
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	e7da      	b.n	800984c <_dtoa_r+0xa4>
 8009896:	aa10      	add	r2, sp, #64	; 0x40
 8009898:	a911      	add	r1, sp, #68	; 0x44
 800989a:	4620      	mov	r0, r4
 800989c:	eeb0 0a48 	vmov.f32	s0, s16
 80098a0:	eef0 0a68 	vmov.f32	s1, s17
 80098a4:	f001 f994 	bl	800abd0 <__d2b>
 80098a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80098ac:	4682      	mov	sl, r0
 80098ae:	2d00      	cmp	r5, #0
 80098b0:	d07f      	beq.n	80099b2 <_dtoa_r+0x20a>
 80098b2:	ee18 3a90 	vmov	r3, s17
 80098b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80098be:	ec51 0b18 	vmov	r0, r1, d8
 80098c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80098c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80098ce:	4619      	mov	r1, r3
 80098d0:	2200      	movs	r2, #0
 80098d2:	4b75      	ldr	r3, [pc, #468]	; (8009aa8 <_dtoa_r+0x300>)
 80098d4:	f7f6 fd00 	bl	80002d8 <__aeabi_dsub>
 80098d8:	a367      	add	r3, pc, #412	; (adr r3, 8009a78 <_dtoa_r+0x2d0>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f7f6 feb3 	bl	8000648 <__aeabi_dmul>
 80098e2:	a367      	add	r3, pc, #412	; (adr r3, 8009a80 <_dtoa_r+0x2d8>)
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	f7f6 fcf8 	bl	80002dc <__adddf3>
 80098ec:	4606      	mov	r6, r0
 80098ee:	4628      	mov	r0, r5
 80098f0:	460f      	mov	r7, r1
 80098f2:	f7f6 fe3f 	bl	8000574 <__aeabi_i2d>
 80098f6:	a364      	add	r3, pc, #400	; (adr r3, 8009a88 <_dtoa_r+0x2e0>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f6 fea4 	bl	8000648 <__aeabi_dmul>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	4630      	mov	r0, r6
 8009906:	4639      	mov	r1, r7
 8009908:	f7f6 fce8 	bl	80002dc <__adddf3>
 800990c:	4606      	mov	r6, r0
 800990e:	460f      	mov	r7, r1
 8009910:	f7f7 f94a 	bl	8000ba8 <__aeabi_d2iz>
 8009914:	2200      	movs	r2, #0
 8009916:	4683      	mov	fp, r0
 8009918:	2300      	movs	r3, #0
 800991a:	4630      	mov	r0, r6
 800991c:	4639      	mov	r1, r7
 800991e:	f7f7 f905 	bl	8000b2c <__aeabi_dcmplt>
 8009922:	b148      	cbz	r0, 8009938 <_dtoa_r+0x190>
 8009924:	4658      	mov	r0, fp
 8009926:	f7f6 fe25 	bl	8000574 <__aeabi_i2d>
 800992a:	4632      	mov	r2, r6
 800992c:	463b      	mov	r3, r7
 800992e:	f7f7 f8f3 	bl	8000b18 <__aeabi_dcmpeq>
 8009932:	b908      	cbnz	r0, 8009938 <_dtoa_r+0x190>
 8009934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009938:	f1bb 0f16 	cmp.w	fp, #22
 800993c:	d857      	bhi.n	80099ee <_dtoa_r+0x246>
 800993e:	4b5b      	ldr	r3, [pc, #364]	; (8009aac <_dtoa_r+0x304>)
 8009940:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	ec51 0b18 	vmov	r0, r1, d8
 800994c:	f7f7 f8ee 	bl	8000b2c <__aeabi_dcmplt>
 8009950:	2800      	cmp	r0, #0
 8009952:	d04e      	beq.n	80099f2 <_dtoa_r+0x24a>
 8009954:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009958:	2300      	movs	r3, #0
 800995a:	930c      	str	r3, [sp, #48]	; 0x30
 800995c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800995e:	1b5b      	subs	r3, r3, r5
 8009960:	1e5a      	subs	r2, r3, #1
 8009962:	bf45      	ittet	mi
 8009964:	f1c3 0301 	rsbmi	r3, r3, #1
 8009968:	9305      	strmi	r3, [sp, #20]
 800996a:	2300      	movpl	r3, #0
 800996c:	2300      	movmi	r3, #0
 800996e:	9206      	str	r2, [sp, #24]
 8009970:	bf54      	ite	pl
 8009972:	9305      	strpl	r3, [sp, #20]
 8009974:	9306      	strmi	r3, [sp, #24]
 8009976:	f1bb 0f00 	cmp.w	fp, #0
 800997a:	db3c      	blt.n	80099f6 <_dtoa_r+0x24e>
 800997c:	9b06      	ldr	r3, [sp, #24]
 800997e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009982:	445b      	add	r3, fp
 8009984:	9306      	str	r3, [sp, #24]
 8009986:	2300      	movs	r3, #0
 8009988:	9308      	str	r3, [sp, #32]
 800998a:	9b07      	ldr	r3, [sp, #28]
 800998c:	2b09      	cmp	r3, #9
 800998e:	d868      	bhi.n	8009a62 <_dtoa_r+0x2ba>
 8009990:	2b05      	cmp	r3, #5
 8009992:	bfc4      	itt	gt
 8009994:	3b04      	subgt	r3, #4
 8009996:	9307      	strgt	r3, [sp, #28]
 8009998:	9b07      	ldr	r3, [sp, #28]
 800999a:	f1a3 0302 	sub.w	r3, r3, #2
 800999e:	bfcc      	ite	gt
 80099a0:	2500      	movgt	r5, #0
 80099a2:	2501      	movle	r5, #1
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	f200 8085 	bhi.w	8009ab4 <_dtoa_r+0x30c>
 80099aa:	e8df f003 	tbb	[pc, r3]
 80099ae:	3b2e      	.short	0x3b2e
 80099b0:	5839      	.short	0x5839
 80099b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099b6:	441d      	add	r5, r3
 80099b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099bc:	2b20      	cmp	r3, #32
 80099be:	bfc1      	itttt	gt
 80099c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80099c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80099cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80099d0:	bfd6      	itet	le
 80099d2:	f1c3 0320 	rsble	r3, r3, #32
 80099d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80099da:	fa06 f003 	lslle.w	r0, r6, r3
 80099de:	f7f6 fdb9 	bl	8000554 <__aeabi_ui2d>
 80099e2:	2201      	movs	r2, #1
 80099e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80099e8:	3d01      	subs	r5, #1
 80099ea:	920e      	str	r2, [sp, #56]	; 0x38
 80099ec:	e76f      	b.n	80098ce <_dtoa_r+0x126>
 80099ee:	2301      	movs	r3, #1
 80099f0:	e7b3      	b.n	800995a <_dtoa_r+0x1b2>
 80099f2:	900c      	str	r0, [sp, #48]	; 0x30
 80099f4:	e7b2      	b.n	800995c <_dtoa_r+0x1b4>
 80099f6:	9b05      	ldr	r3, [sp, #20]
 80099f8:	eba3 030b 	sub.w	r3, r3, fp
 80099fc:	9305      	str	r3, [sp, #20]
 80099fe:	f1cb 0300 	rsb	r3, fp, #0
 8009a02:	9308      	str	r3, [sp, #32]
 8009a04:	2300      	movs	r3, #0
 8009a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a08:	e7bf      	b.n	800998a <_dtoa_r+0x1e2>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dc52      	bgt.n	8009aba <_dtoa_r+0x312>
 8009a14:	2301      	movs	r3, #1
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	920a      	str	r2, [sp, #40]	; 0x28
 8009a1e:	e00b      	b.n	8009a38 <_dtoa_r+0x290>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7f3      	b.n	8009a0c <_dtoa_r+0x264>
 8009a24:	2300      	movs	r3, #0
 8009a26:	9309      	str	r3, [sp, #36]	; 0x24
 8009a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2a:	445b      	add	r3, fp
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	bfb8      	it	lt
 8009a36:	2301      	movlt	r3, #1
 8009a38:	69e0      	ldr	r0, [r4, #28]
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	2204      	movs	r2, #4
 8009a3e:	f102 0614 	add.w	r6, r2, #20
 8009a42:	429e      	cmp	r6, r3
 8009a44:	d93d      	bls.n	8009ac2 <_dtoa_r+0x31a>
 8009a46:	6041      	str	r1, [r0, #4]
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fd9f 	bl	800a58c <_Balloc>
 8009a4e:	9000      	str	r0, [sp, #0]
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d139      	bne.n	8009ac8 <_dtoa_r+0x320>
 8009a54:	4b16      	ldr	r3, [pc, #88]	; (8009ab0 <_dtoa_r+0x308>)
 8009a56:	4602      	mov	r2, r0
 8009a58:	f240 11af 	movw	r1, #431	; 0x1af
 8009a5c:	e6bd      	b.n	80097da <_dtoa_r+0x32>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e7e1      	b.n	8009a26 <_dtoa_r+0x27e>
 8009a62:	2501      	movs	r5, #1
 8009a64:	2300      	movs	r3, #0
 8009a66:	9307      	str	r3, [sp, #28]
 8009a68:	9509      	str	r5, [sp, #36]	; 0x24
 8009a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a6e:	9301      	str	r3, [sp, #4]
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	2200      	movs	r2, #0
 8009a74:	2312      	movs	r3, #18
 8009a76:	e7d1      	b.n	8009a1c <_dtoa_r+0x274>
 8009a78:	636f4361 	.word	0x636f4361
 8009a7c:	3fd287a7 	.word	0x3fd287a7
 8009a80:	8b60c8b3 	.word	0x8b60c8b3
 8009a84:	3fc68a28 	.word	0x3fc68a28
 8009a88:	509f79fb 	.word	0x509f79fb
 8009a8c:	3fd34413 	.word	0x3fd34413
 8009a90:	0800b871 	.word	0x0800b871
 8009a94:	0800b888 	.word	0x0800b888
 8009a98:	7ff00000 	.word	0x7ff00000
 8009a9c:	0800b86d 	.word	0x0800b86d
 8009aa0:	0800b864 	.word	0x0800b864
 8009aa4:	0800b841 	.word	0x0800b841
 8009aa8:	3ff80000 	.word	0x3ff80000
 8009aac:	0800b978 	.word	0x0800b978
 8009ab0:	0800b8e0 	.word	0x0800b8e0
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab8:	e7d7      	b.n	8009a6a <_dtoa_r+0x2c2>
 8009aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	9304      	str	r3, [sp, #16]
 8009ac0:	e7ba      	b.n	8009a38 <_dtoa_r+0x290>
 8009ac2:	3101      	adds	r1, #1
 8009ac4:	0052      	lsls	r2, r2, #1
 8009ac6:	e7ba      	b.n	8009a3e <_dtoa_r+0x296>
 8009ac8:	69e3      	ldr	r3, [r4, #28]
 8009aca:	9a00      	ldr	r2, [sp, #0]
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	2b0e      	cmp	r3, #14
 8009ad2:	f200 80a8 	bhi.w	8009c26 <_dtoa_r+0x47e>
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	f000 80a5 	beq.w	8009c26 <_dtoa_r+0x47e>
 8009adc:	f1bb 0f00 	cmp.w	fp, #0
 8009ae0:	dd38      	ble.n	8009b54 <_dtoa_r+0x3ac>
 8009ae2:	4bc0      	ldr	r3, [pc, #768]	; (8009de4 <_dtoa_r+0x63c>)
 8009ae4:	f00b 020f 	and.w	r2, fp, #15
 8009ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009af0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009af4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009af8:	d019      	beq.n	8009b2e <_dtoa_r+0x386>
 8009afa:	4bbb      	ldr	r3, [pc, #748]	; (8009de8 <_dtoa_r+0x640>)
 8009afc:	ec51 0b18 	vmov	r0, r1, d8
 8009b00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b04:	f7f6 feca 	bl	800089c <__aeabi_ddiv>
 8009b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b0c:	f008 080f 	and.w	r8, r8, #15
 8009b10:	2503      	movs	r5, #3
 8009b12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009de8 <_dtoa_r+0x640>
 8009b16:	f1b8 0f00 	cmp.w	r8, #0
 8009b1a:	d10a      	bne.n	8009b32 <_dtoa_r+0x38a>
 8009b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b20:	4632      	mov	r2, r6
 8009b22:	463b      	mov	r3, r7
 8009b24:	f7f6 feba 	bl	800089c <__aeabi_ddiv>
 8009b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b2c:	e02b      	b.n	8009b86 <_dtoa_r+0x3de>
 8009b2e:	2502      	movs	r5, #2
 8009b30:	e7ef      	b.n	8009b12 <_dtoa_r+0x36a>
 8009b32:	f018 0f01 	tst.w	r8, #1
 8009b36:	d008      	beq.n	8009b4a <_dtoa_r+0x3a2>
 8009b38:	4630      	mov	r0, r6
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b40:	f7f6 fd82 	bl	8000648 <__aeabi_dmul>
 8009b44:	3501      	adds	r5, #1
 8009b46:	4606      	mov	r6, r0
 8009b48:	460f      	mov	r7, r1
 8009b4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009b4e:	f109 0908 	add.w	r9, r9, #8
 8009b52:	e7e0      	b.n	8009b16 <_dtoa_r+0x36e>
 8009b54:	f000 809f 	beq.w	8009c96 <_dtoa_r+0x4ee>
 8009b58:	f1cb 0600 	rsb	r6, fp, #0
 8009b5c:	4ba1      	ldr	r3, [pc, #644]	; (8009de4 <_dtoa_r+0x63c>)
 8009b5e:	4fa2      	ldr	r7, [pc, #648]	; (8009de8 <_dtoa_r+0x640>)
 8009b60:	f006 020f 	and.w	r2, r6, #15
 8009b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	ec51 0b18 	vmov	r0, r1, d8
 8009b70:	f7f6 fd6a 	bl	8000648 <__aeabi_dmul>
 8009b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b78:	1136      	asrs	r6, r6, #4
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2502      	movs	r5, #2
 8009b7e:	2e00      	cmp	r6, #0
 8009b80:	d17e      	bne.n	8009c80 <_dtoa_r+0x4d8>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1d0      	bne.n	8009b28 <_dtoa_r+0x380>
 8009b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 8084 	beq.w	8009c9a <_dtoa_r+0x4f2>
 8009b92:	4b96      	ldr	r3, [pc, #600]	; (8009dec <_dtoa_r+0x644>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	4640      	mov	r0, r8
 8009b98:	4649      	mov	r1, r9
 8009b9a:	f7f6 ffc7 	bl	8000b2c <__aeabi_dcmplt>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	d07b      	beq.n	8009c9a <_dtoa_r+0x4f2>
 8009ba2:	9b04      	ldr	r3, [sp, #16]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d078      	beq.n	8009c9a <_dtoa_r+0x4f2>
 8009ba8:	9b01      	ldr	r3, [sp, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	dd39      	ble.n	8009c22 <_dtoa_r+0x47a>
 8009bae:	4b90      	ldr	r3, [pc, #576]	; (8009df0 <_dtoa_r+0x648>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	f7f6 fd47 	bl	8000648 <__aeabi_dmul>
 8009bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bbe:	9e01      	ldr	r6, [sp, #4]
 8009bc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f7f6 fcd2 	bl	8000574 <__aeabi_i2d>
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	f7f6 fd38 	bl	8000648 <__aeabi_dmul>
 8009bd8:	4b86      	ldr	r3, [pc, #536]	; (8009df4 <_dtoa_r+0x64c>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f7f6 fb7e 	bl	80002dc <__adddf3>
 8009be0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009be8:	9303      	str	r3, [sp, #12]
 8009bea:	2e00      	cmp	r6, #0
 8009bec:	d158      	bne.n	8009ca0 <_dtoa_r+0x4f8>
 8009bee:	4b82      	ldr	r3, [pc, #520]	; (8009df8 <_dtoa_r+0x650>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	f7f6 fb6f 	bl	80002d8 <__aeabi_dsub>
 8009bfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bfe:	4680      	mov	r8, r0
 8009c00:	4689      	mov	r9, r1
 8009c02:	f7f6 ffb1 	bl	8000b68 <__aeabi_dcmpgt>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	f040 8296 	bne.w	800a138 <_dtoa_r+0x990>
 8009c0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c10:	4640      	mov	r0, r8
 8009c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c16:	4649      	mov	r1, r9
 8009c18:	f7f6 ff88 	bl	8000b2c <__aeabi_dcmplt>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	f040 8289 	bne.w	800a134 <_dtoa_r+0x98c>
 8009c22:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009c26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f2c0 814e 	blt.w	8009eca <_dtoa_r+0x722>
 8009c2e:	f1bb 0f0e 	cmp.w	fp, #14
 8009c32:	f300 814a 	bgt.w	8009eca <_dtoa_r+0x722>
 8009c36:	4b6b      	ldr	r3, [pc, #428]	; (8009de4 <_dtoa_r+0x63c>)
 8009c38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f280 80dc 	bge.w	8009e00 <_dtoa_r+0x658>
 8009c48:	9b04      	ldr	r3, [sp, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f300 80d8 	bgt.w	8009e00 <_dtoa_r+0x658>
 8009c50:	f040 826f 	bne.w	800a132 <_dtoa_r+0x98a>
 8009c54:	4b68      	ldr	r3, [pc, #416]	; (8009df8 <_dtoa_r+0x650>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	4640      	mov	r0, r8
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	f7f6 fcf4 	bl	8000648 <__aeabi_dmul>
 8009c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c64:	f7f6 ff76 	bl	8000b54 <__aeabi_dcmpge>
 8009c68:	9e04      	ldr	r6, [sp, #16]
 8009c6a:	4637      	mov	r7, r6
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	f040 8245 	bne.w	800a0fc <_dtoa_r+0x954>
 8009c72:	9d00      	ldr	r5, [sp, #0]
 8009c74:	2331      	movs	r3, #49	; 0x31
 8009c76:	f805 3b01 	strb.w	r3, [r5], #1
 8009c7a:	f10b 0b01 	add.w	fp, fp, #1
 8009c7e:	e241      	b.n	800a104 <_dtoa_r+0x95c>
 8009c80:	07f2      	lsls	r2, r6, #31
 8009c82:	d505      	bpl.n	8009c90 <_dtoa_r+0x4e8>
 8009c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c88:	f7f6 fcde 	bl	8000648 <__aeabi_dmul>
 8009c8c:	3501      	adds	r5, #1
 8009c8e:	2301      	movs	r3, #1
 8009c90:	1076      	asrs	r6, r6, #1
 8009c92:	3708      	adds	r7, #8
 8009c94:	e773      	b.n	8009b7e <_dtoa_r+0x3d6>
 8009c96:	2502      	movs	r5, #2
 8009c98:	e775      	b.n	8009b86 <_dtoa_r+0x3de>
 8009c9a:	9e04      	ldr	r6, [sp, #16]
 8009c9c:	465f      	mov	r7, fp
 8009c9e:	e792      	b.n	8009bc6 <_dtoa_r+0x41e>
 8009ca0:	9900      	ldr	r1, [sp, #0]
 8009ca2:	4b50      	ldr	r3, [pc, #320]	; (8009de4 <_dtoa_r+0x63c>)
 8009ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ca8:	4431      	add	r1, r6
 8009caa:	9102      	str	r1, [sp, #8]
 8009cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cae:	eeb0 9a47 	vmov.f32	s18, s14
 8009cb2:	eef0 9a67 	vmov.f32	s19, s15
 8009cb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009cba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d044      	beq.n	8009d4c <_dtoa_r+0x5a4>
 8009cc2:	494e      	ldr	r1, [pc, #312]	; (8009dfc <_dtoa_r+0x654>)
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	f7f6 fde9 	bl	800089c <__aeabi_ddiv>
 8009cca:	ec53 2b19 	vmov	r2, r3, d9
 8009cce:	f7f6 fb03 	bl	80002d8 <__aeabi_dsub>
 8009cd2:	9d00      	ldr	r5, [sp, #0]
 8009cd4:	ec41 0b19 	vmov	d9, r0, r1
 8009cd8:	4649      	mov	r1, r9
 8009cda:	4640      	mov	r0, r8
 8009cdc:	f7f6 ff64 	bl	8000ba8 <__aeabi_d2iz>
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	f7f6 fc47 	bl	8000574 <__aeabi_i2d>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4640      	mov	r0, r8
 8009cec:	4649      	mov	r1, r9
 8009cee:	f7f6 faf3 	bl	80002d8 <__aeabi_dsub>
 8009cf2:	3630      	adds	r6, #48	; 0x30
 8009cf4:	f805 6b01 	strb.w	r6, [r5], #1
 8009cf8:	ec53 2b19 	vmov	r2, r3, d9
 8009cfc:	4680      	mov	r8, r0
 8009cfe:	4689      	mov	r9, r1
 8009d00:	f7f6 ff14 	bl	8000b2c <__aeabi_dcmplt>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d164      	bne.n	8009dd2 <_dtoa_r+0x62a>
 8009d08:	4642      	mov	r2, r8
 8009d0a:	464b      	mov	r3, r9
 8009d0c:	4937      	ldr	r1, [pc, #220]	; (8009dec <_dtoa_r+0x644>)
 8009d0e:	2000      	movs	r0, #0
 8009d10:	f7f6 fae2 	bl	80002d8 <__aeabi_dsub>
 8009d14:	ec53 2b19 	vmov	r2, r3, d9
 8009d18:	f7f6 ff08 	bl	8000b2c <__aeabi_dcmplt>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	f040 80b6 	bne.w	8009e8e <_dtoa_r+0x6e6>
 8009d22:	9b02      	ldr	r3, [sp, #8]
 8009d24:	429d      	cmp	r5, r3
 8009d26:	f43f af7c 	beq.w	8009c22 <_dtoa_r+0x47a>
 8009d2a:	4b31      	ldr	r3, [pc, #196]	; (8009df0 <_dtoa_r+0x648>)
 8009d2c:	ec51 0b19 	vmov	r0, r1, d9
 8009d30:	2200      	movs	r2, #0
 8009d32:	f7f6 fc89 	bl	8000648 <__aeabi_dmul>
 8009d36:	4b2e      	ldr	r3, [pc, #184]	; (8009df0 <_dtoa_r+0x648>)
 8009d38:	ec41 0b19 	vmov	d9, r0, r1
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4640      	mov	r0, r8
 8009d40:	4649      	mov	r1, r9
 8009d42:	f7f6 fc81 	bl	8000648 <__aeabi_dmul>
 8009d46:	4680      	mov	r8, r0
 8009d48:	4689      	mov	r9, r1
 8009d4a:	e7c5      	b.n	8009cd8 <_dtoa_r+0x530>
 8009d4c:	ec51 0b17 	vmov	r0, r1, d7
 8009d50:	f7f6 fc7a 	bl	8000648 <__aeabi_dmul>
 8009d54:	9b02      	ldr	r3, [sp, #8]
 8009d56:	9d00      	ldr	r5, [sp, #0]
 8009d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d5a:	ec41 0b19 	vmov	d9, r0, r1
 8009d5e:	4649      	mov	r1, r9
 8009d60:	4640      	mov	r0, r8
 8009d62:	f7f6 ff21 	bl	8000ba8 <__aeabi_d2iz>
 8009d66:	4606      	mov	r6, r0
 8009d68:	f7f6 fc04 	bl	8000574 <__aeabi_i2d>
 8009d6c:	3630      	adds	r6, #48	; 0x30
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	4640      	mov	r0, r8
 8009d74:	4649      	mov	r1, r9
 8009d76:	f7f6 faaf 	bl	80002d8 <__aeabi_dsub>
 8009d7a:	f805 6b01 	strb.w	r6, [r5], #1
 8009d7e:	9b02      	ldr	r3, [sp, #8]
 8009d80:	429d      	cmp	r5, r3
 8009d82:	4680      	mov	r8, r0
 8009d84:	4689      	mov	r9, r1
 8009d86:	f04f 0200 	mov.w	r2, #0
 8009d8a:	d124      	bne.n	8009dd6 <_dtoa_r+0x62e>
 8009d8c:	4b1b      	ldr	r3, [pc, #108]	; (8009dfc <_dtoa_r+0x654>)
 8009d8e:	ec51 0b19 	vmov	r0, r1, d9
 8009d92:	f7f6 faa3 	bl	80002dc <__adddf3>
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	f7f6 fee3 	bl	8000b68 <__aeabi_dcmpgt>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d173      	bne.n	8009e8e <_dtoa_r+0x6e6>
 8009da6:	ec53 2b19 	vmov	r2, r3, d9
 8009daa:	4914      	ldr	r1, [pc, #80]	; (8009dfc <_dtoa_r+0x654>)
 8009dac:	2000      	movs	r0, #0
 8009dae:	f7f6 fa93 	bl	80002d8 <__aeabi_dsub>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4640      	mov	r0, r8
 8009db8:	4649      	mov	r1, r9
 8009dba:	f7f6 feb7 	bl	8000b2c <__aeabi_dcmplt>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f43f af2f 	beq.w	8009c22 <_dtoa_r+0x47a>
 8009dc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009dc6:	1e6b      	subs	r3, r5, #1
 8009dc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dce:	2b30      	cmp	r3, #48	; 0x30
 8009dd0:	d0f8      	beq.n	8009dc4 <_dtoa_r+0x61c>
 8009dd2:	46bb      	mov	fp, r7
 8009dd4:	e04a      	b.n	8009e6c <_dtoa_r+0x6c4>
 8009dd6:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <_dtoa_r+0x648>)
 8009dd8:	f7f6 fc36 	bl	8000648 <__aeabi_dmul>
 8009ddc:	4680      	mov	r8, r0
 8009dde:	4689      	mov	r9, r1
 8009de0:	e7bd      	b.n	8009d5e <_dtoa_r+0x5b6>
 8009de2:	bf00      	nop
 8009de4:	0800b978 	.word	0x0800b978
 8009de8:	0800b950 	.word	0x0800b950
 8009dec:	3ff00000 	.word	0x3ff00000
 8009df0:	40240000 	.word	0x40240000
 8009df4:	401c0000 	.word	0x401c0000
 8009df8:	40140000 	.word	0x40140000
 8009dfc:	3fe00000 	.word	0x3fe00000
 8009e00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e04:	9d00      	ldr	r5, [sp, #0]
 8009e06:	4642      	mov	r2, r8
 8009e08:	464b      	mov	r3, r9
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	4639      	mov	r1, r7
 8009e0e:	f7f6 fd45 	bl	800089c <__aeabi_ddiv>
 8009e12:	f7f6 fec9 	bl	8000ba8 <__aeabi_d2iz>
 8009e16:	9001      	str	r0, [sp, #4]
 8009e18:	f7f6 fbac 	bl	8000574 <__aeabi_i2d>
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	464b      	mov	r3, r9
 8009e20:	f7f6 fc12 	bl	8000648 <__aeabi_dmul>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4630      	mov	r0, r6
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	f7f6 fa54 	bl	80002d8 <__aeabi_dsub>
 8009e30:	9e01      	ldr	r6, [sp, #4]
 8009e32:	9f04      	ldr	r7, [sp, #16]
 8009e34:	3630      	adds	r6, #48	; 0x30
 8009e36:	f805 6b01 	strb.w	r6, [r5], #1
 8009e3a:	9e00      	ldr	r6, [sp, #0]
 8009e3c:	1bae      	subs	r6, r5, r6
 8009e3e:	42b7      	cmp	r7, r6
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	d134      	bne.n	8009eb0 <_dtoa_r+0x708>
 8009e46:	f7f6 fa49 	bl	80002dc <__adddf3>
 8009e4a:	4642      	mov	r2, r8
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	4606      	mov	r6, r0
 8009e50:	460f      	mov	r7, r1
 8009e52:	f7f6 fe89 	bl	8000b68 <__aeabi_dcmpgt>
 8009e56:	b9c8      	cbnz	r0, 8009e8c <_dtoa_r+0x6e4>
 8009e58:	4642      	mov	r2, r8
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	4639      	mov	r1, r7
 8009e60:	f7f6 fe5a 	bl	8000b18 <__aeabi_dcmpeq>
 8009e64:	b110      	cbz	r0, 8009e6c <_dtoa_r+0x6c4>
 8009e66:	9b01      	ldr	r3, [sp, #4]
 8009e68:	07db      	lsls	r3, r3, #31
 8009e6a:	d40f      	bmi.n	8009e8c <_dtoa_r+0x6e4>
 8009e6c:	4651      	mov	r1, sl
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 fbcc 	bl	800a60c <_Bfree>
 8009e74:	2300      	movs	r3, #0
 8009e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e78:	702b      	strb	r3, [r5, #0]
 8009e7a:	f10b 0301 	add.w	r3, fp, #1
 8009e7e:	6013      	str	r3, [r2, #0]
 8009e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f43f ace2 	beq.w	800984c <_dtoa_r+0xa4>
 8009e88:	601d      	str	r5, [r3, #0]
 8009e8a:	e4df      	b.n	800984c <_dtoa_r+0xa4>
 8009e8c:	465f      	mov	r7, fp
 8009e8e:	462b      	mov	r3, r5
 8009e90:	461d      	mov	r5, r3
 8009e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e96:	2a39      	cmp	r2, #57	; 0x39
 8009e98:	d106      	bne.n	8009ea8 <_dtoa_r+0x700>
 8009e9a:	9a00      	ldr	r2, [sp, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d1f7      	bne.n	8009e90 <_dtoa_r+0x6e8>
 8009ea0:	9900      	ldr	r1, [sp, #0]
 8009ea2:	2230      	movs	r2, #48	; 0x30
 8009ea4:	3701      	adds	r7, #1
 8009ea6:	700a      	strb	r2, [r1, #0]
 8009ea8:	781a      	ldrb	r2, [r3, #0]
 8009eaa:	3201      	adds	r2, #1
 8009eac:	701a      	strb	r2, [r3, #0]
 8009eae:	e790      	b.n	8009dd2 <_dtoa_r+0x62a>
 8009eb0:	4ba3      	ldr	r3, [pc, #652]	; (800a140 <_dtoa_r+0x998>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f7f6 fbc8 	bl	8000648 <__aeabi_dmul>
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2300      	movs	r3, #0
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	460f      	mov	r7, r1
 8009ec0:	f7f6 fe2a 	bl	8000b18 <__aeabi_dcmpeq>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d09e      	beq.n	8009e06 <_dtoa_r+0x65e>
 8009ec8:	e7d0      	b.n	8009e6c <_dtoa_r+0x6c4>
 8009eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ecc:	2a00      	cmp	r2, #0
 8009ece:	f000 80ca 	beq.w	800a066 <_dtoa_r+0x8be>
 8009ed2:	9a07      	ldr	r2, [sp, #28]
 8009ed4:	2a01      	cmp	r2, #1
 8009ed6:	f300 80ad 	bgt.w	800a034 <_dtoa_r+0x88c>
 8009eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009edc:	2a00      	cmp	r2, #0
 8009ede:	f000 80a5 	beq.w	800a02c <_dtoa_r+0x884>
 8009ee2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ee6:	9e08      	ldr	r6, [sp, #32]
 8009ee8:	9d05      	ldr	r5, [sp, #20]
 8009eea:	9a05      	ldr	r2, [sp, #20]
 8009eec:	441a      	add	r2, r3
 8009eee:	9205      	str	r2, [sp, #20]
 8009ef0:	9a06      	ldr	r2, [sp, #24]
 8009ef2:	2101      	movs	r1, #1
 8009ef4:	441a      	add	r2, r3
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	9206      	str	r2, [sp, #24]
 8009efa:	f000 fc3d 	bl	800a778 <__i2b>
 8009efe:	4607      	mov	r7, r0
 8009f00:	b165      	cbz	r5, 8009f1c <_dtoa_r+0x774>
 8009f02:	9b06      	ldr	r3, [sp, #24]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dd09      	ble.n	8009f1c <_dtoa_r+0x774>
 8009f08:	42ab      	cmp	r3, r5
 8009f0a:	9a05      	ldr	r2, [sp, #20]
 8009f0c:	bfa8      	it	ge
 8009f0e:	462b      	movge	r3, r5
 8009f10:	1ad2      	subs	r2, r2, r3
 8009f12:	9205      	str	r2, [sp, #20]
 8009f14:	9a06      	ldr	r2, [sp, #24]
 8009f16:	1aed      	subs	r5, r5, r3
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	9306      	str	r3, [sp, #24]
 8009f1c:	9b08      	ldr	r3, [sp, #32]
 8009f1e:	b1f3      	cbz	r3, 8009f5e <_dtoa_r+0x7b6>
 8009f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 80a3 	beq.w	800a06e <_dtoa_r+0x8c6>
 8009f28:	2e00      	cmp	r6, #0
 8009f2a:	dd10      	ble.n	8009f4e <_dtoa_r+0x7a6>
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	4632      	mov	r2, r6
 8009f30:	4620      	mov	r0, r4
 8009f32:	f000 fce1 	bl	800a8f8 <__pow5mult>
 8009f36:	4652      	mov	r2, sl
 8009f38:	4601      	mov	r1, r0
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fc31 	bl	800a7a4 <__multiply>
 8009f42:	4651      	mov	r1, sl
 8009f44:	4680      	mov	r8, r0
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 fb60 	bl	800a60c <_Bfree>
 8009f4c:	46c2      	mov	sl, r8
 8009f4e:	9b08      	ldr	r3, [sp, #32]
 8009f50:	1b9a      	subs	r2, r3, r6
 8009f52:	d004      	beq.n	8009f5e <_dtoa_r+0x7b6>
 8009f54:	4651      	mov	r1, sl
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 fcce 	bl	800a8f8 <__pow5mult>
 8009f5c:	4682      	mov	sl, r0
 8009f5e:	2101      	movs	r1, #1
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 fc09 	bl	800a778 <__i2b>
 8009f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	f340 8081 	ble.w	800a072 <_dtoa_r+0x8ca>
 8009f70:	461a      	mov	r2, r3
 8009f72:	4601      	mov	r1, r0
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 fcbf 	bl	800a8f8 <__pow5mult>
 8009f7a:	9b07      	ldr	r3, [sp, #28]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	4606      	mov	r6, r0
 8009f80:	dd7a      	ble.n	800a078 <_dtoa_r+0x8d0>
 8009f82:	f04f 0800 	mov.w	r8, #0
 8009f86:	6933      	ldr	r3, [r6, #16]
 8009f88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009f8c:	6918      	ldr	r0, [r3, #16]
 8009f8e:	f000 fba5 	bl	800a6dc <__hi0bits>
 8009f92:	f1c0 0020 	rsb	r0, r0, #32
 8009f96:	9b06      	ldr	r3, [sp, #24]
 8009f98:	4418      	add	r0, r3
 8009f9a:	f010 001f 	ands.w	r0, r0, #31
 8009f9e:	f000 8094 	beq.w	800a0ca <_dtoa_r+0x922>
 8009fa2:	f1c0 0320 	rsb	r3, r0, #32
 8009fa6:	2b04      	cmp	r3, #4
 8009fa8:	f340 8085 	ble.w	800a0b6 <_dtoa_r+0x90e>
 8009fac:	9b05      	ldr	r3, [sp, #20]
 8009fae:	f1c0 001c 	rsb	r0, r0, #28
 8009fb2:	4403      	add	r3, r0
 8009fb4:	9305      	str	r3, [sp, #20]
 8009fb6:	9b06      	ldr	r3, [sp, #24]
 8009fb8:	4403      	add	r3, r0
 8009fba:	4405      	add	r5, r0
 8009fbc:	9306      	str	r3, [sp, #24]
 8009fbe:	9b05      	ldr	r3, [sp, #20]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	dd05      	ble.n	8009fd0 <_dtoa_r+0x828>
 8009fc4:	4651      	mov	r1, sl
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fcef 	bl	800a9ac <__lshift>
 8009fce:	4682      	mov	sl, r0
 8009fd0:	9b06      	ldr	r3, [sp, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	dd05      	ble.n	8009fe2 <_dtoa_r+0x83a>
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	461a      	mov	r2, r3
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 fce6 	bl	800a9ac <__lshift>
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d072      	beq.n	800a0ce <_dtoa_r+0x926>
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4650      	mov	r0, sl
 8009fec:	f000 fd4a 	bl	800aa84 <__mcmp>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	da6c      	bge.n	800a0ce <_dtoa_r+0x926>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4651      	mov	r1, sl
 8009ff8:	220a      	movs	r2, #10
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 fb28 	bl	800a650 <__multadd>
 800a000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a002:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a006:	4682      	mov	sl, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 81b0 	beq.w	800a36e <_dtoa_r+0xbc6>
 800a00e:	2300      	movs	r3, #0
 800a010:	4639      	mov	r1, r7
 800a012:	220a      	movs	r2, #10
 800a014:	4620      	mov	r0, r4
 800a016:	f000 fb1b 	bl	800a650 <__multadd>
 800a01a:	9b01      	ldr	r3, [sp, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	4607      	mov	r7, r0
 800a020:	f300 8096 	bgt.w	800a150 <_dtoa_r+0x9a8>
 800a024:	9b07      	ldr	r3, [sp, #28]
 800a026:	2b02      	cmp	r3, #2
 800a028:	dc59      	bgt.n	800a0de <_dtoa_r+0x936>
 800a02a:	e091      	b.n	800a150 <_dtoa_r+0x9a8>
 800a02c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a02e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a032:	e758      	b.n	8009ee6 <_dtoa_r+0x73e>
 800a034:	9b04      	ldr	r3, [sp, #16]
 800a036:	1e5e      	subs	r6, r3, #1
 800a038:	9b08      	ldr	r3, [sp, #32]
 800a03a:	42b3      	cmp	r3, r6
 800a03c:	bfbf      	itttt	lt
 800a03e:	9b08      	ldrlt	r3, [sp, #32]
 800a040:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a042:	9608      	strlt	r6, [sp, #32]
 800a044:	1af3      	sublt	r3, r6, r3
 800a046:	bfb4      	ite	lt
 800a048:	18d2      	addlt	r2, r2, r3
 800a04a:	1b9e      	subge	r6, r3, r6
 800a04c:	9b04      	ldr	r3, [sp, #16]
 800a04e:	bfbc      	itt	lt
 800a050:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a052:	2600      	movlt	r6, #0
 800a054:	2b00      	cmp	r3, #0
 800a056:	bfb7      	itett	lt
 800a058:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a05c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a060:	1a9d      	sublt	r5, r3, r2
 800a062:	2300      	movlt	r3, #0
 800a064:	e741      	b.n	8009eea <_dtoa_r+0x742>
 800a066:	9e08      	ldr	r6, [sp, #32]
 800a068:	9d05      	ldr	r5, [sp, #20]
 800a06a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a06c:	e748      	b.n	8009f00 <_dtoa_r+0x758>
 800a06e:	9a08      	ldr	r2, [sp, #32]
 800a070:	e770      	b.n	8009f54 <_dtoa_r+0x7ac>
 800a072:	9b07      	ldr	r3, [sp, #28]
 800a074:	2b01      	cmp	r3, #1
 800a076:	dc19      	bgt.n	800a0ac <_dtoa_r+0x904>
 800a078:	9b02      	ldr	r3, [sp, #8]
 800a07a:	b9bb      	cbnz	r3, 800a0ac <_dtoa_r+0x904>
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a082:	b99b      	cbnz	r3, 800a0ac <_dtoa_r+0x904>
 800a084:	9b03      	ldr	r3, [sp, #12]
 800a086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a08a:	0d1b      	lsrs	r3, r3, #20
 800a08c:	051b      	lsls	r3, r3, #20
 800a08e:	b183      	cbz	r3, 800a0b2 <_dtoa_r+0x90a>
 800a090:	9b05      	ldr	r3, [sp, #20]
 800a092:	3301      	adds	r3, #1
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	9b06      	ldr	r3, [sp, #24]
 800a098:	3301      	adds	r3, #1
 800a09a:	9306      	str	r3, [sp, #24]
 800a09c:	f04f 0801 	mov.w	r8, #1
 800a0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f47f af6f 	bne.w	8009f86 <_dtoa_r+0x7de>
 800a0a8:	2001      	movs	r0, #1
 800a0aa:	e774      	b.n	8009f96 <_dtoa_r+0x7ee>
 800a0ac:	f04f 0800 	mov.w	r8, #0
 800a0b0:	e7f6      	b.n	800a0a0 <_dtoa_r+0x8f8>
 800a0b2:	4698      	mov	r8, r3
 800a0b4:	e7f4      	b.n	800a0a0 <_dtoa_r+0x8f8>
 800a0b6:	d082      	beq.n	8009fbe <_dtoa_r+0x816>
 800a0b8:	9a05      	ldr	r2, [sp, #20]
 800a0ba:	331c      	adds	r3, #28
 800a0bc:	441a      	add	r2, r3
 800a0be:	9205      	str	r2, [sp, #20]
 800a0c0:	9a06      	ldr	r2, [sp, #24]
 800a0c2:	441a      	add	r2, r3
 800a0c4:	441d      	add	r5, r3
 800a0c6:	9206      	str	r2, [sp, #24]
 800a0c8:	e779      	b.n	8009fbe <_dtoa_r+0x816>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	e7f4      	b.n	800a0b8 <_dtoa_r+0x910>
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	dc37      	bgt.n	800a144 <_dtoa_r+0x99c>
 800a0d4:	9b07      	ldr	r3, [sp, #28]
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	dd34      	ble.n	800a144 <_dtoa_r+0x99c>
 800a0da:	9b04      	ldr	r3, [sp, #16]
 800a0dc:	9301      	str	r3, [sp, #4]
 800a0de:	9b01      	ldr	r3, [sp, #4]
 800a0e0:	b963      	cbnz	r3, 800a0fc <_dtoa_r+0x954>
 800a0e2:	4631      	mov	r1, r6
 800a0e4:	2205      	movs	r2, #5
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f000 fab2 	bl	800a650 <__multadd>
 800a0ec:	4601      	mov	r1, r0
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	4650      	mov	r0, sl
 800a0f2:	f000 fcc7 	bl	800aa84 <__mcmp>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f73f adbb 	bgt.w	8009c72 <_dtoa_r+0x4ca>
 800a0fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0fe:	9d00      	ldr	r5, [sp, #0]
 800a100:	ea6f 0b03 	mvn.w	fp, r3
 800a104:	f04f 0800 	mov.w	r8, #0
 800a108:	4631      	mov	r1, r6
 800a10a:	4620      	mov	r0, r4
 800a10c:	f000 fa7e 	bl	800a60c <_Bfree>
 800a110:	2f00      	cmp	r7, #0
 800a112:	f43f aeab 	beq.w	8009e6c <_dtoa_r+0x6c4>
 800a116:	f1b8 0f00 	cmp.w	r8, #0
 800a11a:	d005      	beq.n	800a128 <_dtoa_r+0x980>
 800a11c:	45b8      	cmp	r8, r7
 800a11e:	d003      	beq.n	800a128 <_dtoa_r+0x980>
 800a120:	4641      	mov	r1, r8
 800a122:	4620      	mov	r0, r4
 800a124:	f000 fa72 	bl	800a60c <_Bfree>
 800a128:	4639      	mov	r1, r7
 800a12a:	4620      	mov	r0, r4
 800a12c:	f000 fa6e 	bl	800a60c <_Bfree>
 800a130:	e69c      	b.n	8009e6c <_dtoa_r+0x6c4>
 800a132:	2600      	movs	r6, #0
 800a134:	4637      	mov	r7, r6
 800a136:	e7e1      	b.n	800a0fc <_dtoa_r+0x954>
 800a138:	46bb      	mov	fp, r7
 800a13a:	4637      	mov	r7, r6
 800a13c:	e599      	b.n	8009c72 <_dtoa_r+0x4ca>
 800a13e:	bf00      	nop
 800a140:	40240000 	.word	0x40240000
 800a144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 80c8 	beq.w	800a2dc <_dtoa_r+0xb34>
 800a14c:	9b04      	ldr	r3, [sp, #16]
 800a14e:	9301      	str	r3, [sp, #4]
 800a150:	2d00      	cmp	r5, #0
 800a152:	dd05      	ble.n	800a160 <_dtoa_r+0x9b8>
 800a154:	4639      	mov	r1, r7
 800a156:	462a      	mov	r2, r5
 800a158:	4620      	mov	r0, r4
 800a15a:	f000 fc27 	bl	800a9ac <__lshift>
 800a15e:	4607      	mov	r7, r0
 800a160:	f1b8 0f00 	cmp.w	r8, #0
 800a164:	d05b      	beq.n	800a21e <_dtoa_r+0xa76>
 800a166:	6879      	ldr	r1, [r7, #4]
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fa0f 	bl	800a58c <_Balloc>
 800a16e:	4605      	mov	r5, r0
 800a170:	b928      	cbnz	r0, 800a17e <_dtoa_r+0x9d6>
 800a172:	4b83      	ldr	r3, [pc, #524]	; (800a380 <_dtoa_r+0xbd8>)
 800a174:	4602      	mov	r2, r0
 800a176:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a17a:	f7ff bb2e 	b.w	80097da <_dtoa_r+0x32>
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	3202      	adds	r2, #2
 800a182:	0092      	lsls	r2, r2, #2
 800a184:	f107 010c 	add.w	r1, r7, #12
 800a188:	300c      	adds	r0, #12
 800a18a:	f7ff fa76 	bl	800967a <memcpy>
 800a18e:	2201      	movs	r2, #1
 800a190:	4629      	mov	r1, r5
 800a192:	4620      	mov	r0, r4
 800a194:	f000 fc0a 	bl	800a9ac <__lshift>
 800a198:	9b00      	ldr	r3, [sp, #0]
 800a19a:	3301      	adds	r3, #1
 800a19c:	9304      	str	r3, [sp, #16]
 800a19e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	9308      	str	r3, [sp, #32]
 800a1a6:	9b02      	ldr	r3, [sp, #8]
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	46b8      	mov	r8, r7
 800a1ae:	9306      	str	r3, [sp, #24]
 800a1b0:	4607      	mov	r7, r0
 800a1b2:	9b04      	ldr	r3, [sp, #16]
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	f7ff fa6b 	bl	8009696 <quorem>
 800a1c0:	4641      	mov	r1, r8
 800a1c2:	9002      	str	r0, [sp, #8]
 800a1c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a1c8:	4650      	mov	r0, sl
 800a1ca:	f000 fc5b 	bl	800aa84 <__mcmp>
 800a1ce:	463a      	mov	r2, r7
 800a1d0:	9005      	str	r0, [sp, #20]
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f000 fc71 	bl	800aabc <__mdiff>
 800a1da:	68c2      	ldr	r2, [r0, #12]
 800a1dc:	4605      	mov	r5, r0
 800a1de:	bb02      	cbnz	r2, 800a222 <_dtoa_r+0xa7a>
 800a1e0:	4601      	mov	r1, r0
 800a1e2:	4650      	mov	r0, sl
 800a1e4:	f000 fc4e 	bl	800aa84 <__mcmp>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a1f0:	f000 fa0c 	bl	800a60c <_Bfree>
 800a1f4:	9b07      	ldr	r3, [sp, #28]
 800a1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1f8:	9d04      	ldr	r5, [sp, #16]
 800a1fa:	ea43 0102 	orr.w	r1, r3, r2
 800a1fe:	9b06      	ldr	r3, [sp, #24]
 800a200:	4319      	orrs	r1, r3
 800a202:	d110      	bne.n	800a226 <_dtoa_r+0xa7e>
 800a204:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a208:	d029      	beq.n	800a25e <_dtoa_r+0xab6>
 800a20a:	9b05      	ldr	r3, [sp, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dd02      	ble.n	800a216 <_dtoa_r+0xa6e>
 800a210:	9b02      	ldr	r3, [sp, #8]
 800a212:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a216:	9b01      	ldr	r3, [sp, #4]
 800a218:	f883 9000 	strb.w	r9, [r3]
 800a21c:	e774      	b.n	800a108 <_dtoa_r+0x960>
 800a21e:	4638      	mov	r0, r7
 800a220:	e7ba      	b.n	800a198 <_dtoa_r+0x9f0>
 800a222:	2201      	movs	r2, #1
 800a224:	e7e1      	b.n	800a1ea <_dtoa_r+0xa42>
 800a226:	9b05      	ldr	r3, [sp, #20]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	db04      	blt.n	800a236 <_dtoa_r+0xa8e>
 800a22c:	9907      	ldr	r1, [sp, #28]
 800a22e:	430b      	orrs	r3, r1
 800a230:	9906      	ldr	r1, [sp, #24]
 800a232:	430b      	orrs	r3, r1
 800a234:	d120      	bne.n	800a278 <_dtoa_r+0xad0>
 800a236:	2a00      	cmp	r2, #0
 800a238:	dded      	ble.n	800a216 <_dtoa_r+0xa6e>
 800a23a:	4651      	mov	r1, sl
 800a23c:	2201      	movs	r2, #1
 800a23e:	4620      	mov	r0, r4
 800a240:	f000 fbb4 	bl	800a9ac <__lshift>
 800a244:	4631      	mov	r1, r6
 800a246:	4682      	mov	sl, r0
 800a248:	f000 fc1c 	bl	800aa84 <__mcmp>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	dc03      	bgt.n	800a258 <_dtoa_r+0xab0>
 800a250:	d1e1      	bne.n	800a216 <_dtoa_r+0xa6e>
 800a252:	f019 0f01 	tst.w	r9, #1
 800a256:	d0de      	beq.n	800a216 <_dtoa_r+0xa6e>
 800a258:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a25c:	d1d8      	bne.n	800a210 <_dtoa_r+0xa68>
 800a25e:	9a01      	ldr	r2, [sp, #4]
 800a260:	2339      	movs	r3, #57	; 0x39
 800a262:	7013      	strb	r3, [r2, #0]
 800a264:	462b      	mov	r3, r5
 800a266:	461d      	mov	r5, r3
 800a268:	3b01      	subs	r3, #1
 800a26a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a26e:	2a39      	cmp	r2, #57	; 0x39
 800a270:	d06c      	beq.n	800a34c <_dtoa_r+0xba4>
 800a272:	3201      	adds	r2, #1
 800a274:	701a      	strb	r2, [r3, #0]
 800a276:	e747      	b.n	800a108 <_dtoa_r+0x960>
 800a278:	2a00      	cmp	r2, #0
 800a27a:	dd07      	ble.n	800a28c <_dtoa_r+0xae4>
 800a27c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a280:	d0ed      	beq.n	800a25e <_dtoa_r+0xab6>
 800a282:	9a01      	ldr	r2, [sp, #4]
 800a284:	f109 0301 	add.w	r3, r9, #1
 800a288:	7013      	strb	r3, [r2, #0]
 800a28a:	e73d      	b.n	800a108 <_dtoa_r+0x960>
 800a28c:	9b04      	ldr	r3, [sp, #16]
 800a28e:	9a08      	ldr	r2, [sp, #32]
 800a290:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a294:	4293      	cmp	r3, r2
 800a296:	d043      	beq.n	800a320 <_dtoa_r+0xb78>
 800a298:	4651      	mov	r1, sl
 800a29a:	2300      	movs	r3, #0
 800a29c:	220a      	movs	r2, #10
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 f9d6 	bl	800a650 <__multadd>
 800a2a4:	45b8      	cmp	r8, r7
 800a2a6:	4682      	mov	sl, r0
 800a2a8:	f04f 0300 	mov.w	r3, #0
 800a2ac:	f04f 020a 	mov.w	r2, #10
 800a2b0:	4641      	mov	r1, r8
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	d107      	bne.n	800a2c6 <_dtoa_r+0xb1e>
 800a2b6:	f000 f9cb 	bl	800a650 <__multadd>
 800a2ba:	4680      	mov	r8, r0
 800a2bc:	4607      	mov	r7, r0
 800a2be:	9b04      	ldr	r3, [sp, #16]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	e775      	b.n	800a1b2 <_dtoa_r+0xa0a>
 800a2c6:	f000 f9c3 	bl	800a650 <__multadd>
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	220a      	movs	r2, #10
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 f9bc 	bl	800a650 <__multadd>
 800a2d8:	4607      	mov	r7, r0
 800a2da:	e7f0      	b.n	800a2be <_dtoa_r+0xb16>
 800a2dc:	9b04      	ldr	r3, [sp, #16]
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	9d00      	ldr	r5, [sp, #0]
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	f7ff f9d6 	bl	8009696 <quorem>
 800a2ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a2ee:	9b00      	ldr	r3, [sp, #0]
 800a2f0:	f805 9b01 	strb.w	r9, [r5], #1
 800a2f4:	1aea      	subs	r2, r5, r3
 800a2f6:	9b01      	ldr	r3, [sp, #4]
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	dd07      	ble.n	800a30c <_dtoa_r+0xb64>
 800a2fc:	4651      	mov	r1, sl
 800a2fe:	2300      	movs	r3, #0
 800a300:	220a      	movs	r2, #10
 800a302:	4620      	mov	r0, r4
 800a304:	f000 f9a4 	bl	800a650 <__multadd>
 800a308:	4682      	mov	sl, r0
 800a30a:	e7ea      	b.n	800a2e2 <_dtoa_r+0xb3a>
 800a30c:	9b01      	ldr	r3, [sp, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	bfc8      	it	gt
 800a312:	461d      	movgt	r5, r3
 800a314:	9b00      	ldr	r3, [sp, #0]
 800a316:	bfd8      	it	le
 800a318:	2501      	movle	r5, #1
 800a31a:	441d      	add	r5, r3
 800a31c:	f04f 0800 	mov.w	r8, #0
 800a320:	4651      	mov	r1, sl
 800a322:	2201      	movs	r2, #1
 800a324:	4620      	mov	r0, r4
 800a326:	f000 fb41 	bl	800a9ac <__lshift>
 800a32a:	4631      	mov	r1, r6
 800a32c:	4682      	mov	sl, r0
 800a32e:	f000 fba9 	bl	800aa84 <__mcmp>
 800a332:	2800      	cmp	r0, #0
 800a334:	dc96      	bgt.n	800a264 <_dtoa_r+0xabc>
 800a336:	d102      	bne.n	800a33e <_dtoa_r+0xb96>
 800a338:	f019 0f01 	tst.w	r9, #1
 800a33c:	d192      	bne.n	800a264 <_dtoa_r+0xabc>
 800a33e:	462b      	mov	r3, r5
 800a340:	461d      	mov	r5, r3
 800a342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a346:	2a30      	cmp	r2, #48	; 0x30
 800a348:	d0fa      	beq.n	800a340 <_dtoa_r+0xb98>
 800a34a:	e6dd      	b.n	800a108 <_dtoa_r+0x960>
 800a34c:	9a00      	ldr	r2, [sp, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d189      	bne.n	800a266 <_dtoa_r+0xabe>
 800a352:	f10b 0b01 	add.w	fp, fp, #1
 800a356:	2331      	movs	r3, #49	; 0x31
 800a358:	e796      	b.n	800a288 <_dtoa_r+0xae0>
 800a35a:	4b0a      	ldr	r3, [pc, #40]	; (800a384 <_dtoa_r+0xbdc>)
 800a35c:	f7ff ba99 	b.w	8009892 <_dtoa_r+0xea>
 800a360:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a362:	2b00      	cmp	r3, #0
 800a364:	f47f aa6d 	bne.w	8009842 <_dtoa_r+0x9a>
 800a368:	4b07      	ldr	r3, [pc, #28]	; (800a388 <_dtoa_r+0xbe0>)
 800a36a:	f7ff ba92 	b.w	8009892 <_dtoa_r+0xea>
 800a36e:	9b01      	ldr	r3, [sp, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	dcb5      	bgt.n	800a2e0 <_dtoa_r+0xb38>
 800a374:	9b07      	ldr	r3, [sp, #28]
 800a376:	2b02      	cmp	r3, #2
 800a378:	f73f aeb1 	bgt.w	800a0de <_dtoa_r+0x936>
 800a37c:	e7b0      	b.n	800a2e0 <_dtoa_r+0xb38>
 800a37e:	bf00      	nop
 800a380:	0800b8e0 	.word	0x0800b8e0
 800a384:	0800b840 	.word	0x0800b840
 800a388:	0800b864 	.word	0x0800b864

0800a38c <_free_r>:
 800a38c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a38e:	2900      	cmp	r1, #0
 800a390:	d044      	beq.n	800a41c <_free_r+0x90>
 800a392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a396:	9001      	str	r0, [sp, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f1a1 0404 	sub.w	r4, r1, #4
 800a39e:	bfb8      	it	lt
 800a3a0:	18e4      	addlt	r4, r4, r3
 800a3a2:	f000 f8e7 	bl	800a574 <__malloc_lock>
 800a3a6:	4a1e      	ldr	r2, [pc, #120]	; (800a420 <_free_r+0x94>)
 800a3a8:	9801      	ldr	r0, [sp, #4]
 800a3aa:	6813      	ldr	r3, [r2, #0]
 800a3ac:	b933      	cbnz	r3, 800a3bc <_free_r+0x30>
 800a3ae:	6063      	str	r3, [r4, #4]
 800a3b0:	6014      	str	r4, [r2, #0]
 800a3b2:	b003      	add	sp, #12
 800a3b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3b8:	f000 b8e2 	b.w	800a580 <__malloc_unlock>
 800a3bc:	42a3      	cmp	r3, r4
 800a3be:	d908      	bls.n	800a3d2 <_free_r+0x46>
 800a3c0:	6825      	ldr	r5, [r4, #0]
 800a3c2:	1961      	adds	r1, r4, r5
 800a3c4:	428b      	cmp	r3, r1
 800a3c6:	bf01      	itttt	eq
 800a3c8:	6819      	ldreq	r1, [r3, #0]
 800a3ca:	685b      	ldreq	r3, [r3, #4]
 800a3cc:	1949      	addeq	r1, r1, r5
 800a3ce:	6021      	streq	r1, [r4, #0]
 800a3d0:	e7ed      	b.n	800a3ae <_free_r+0x22>
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	b10b      	cbz	r3, 800a3dc <_free_r+0x50>
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	d9fa      	bls.n	800a3d2 <_free_r+0x46>
 800a3dc:	6811      	ldr	r1, [r2, #0]
 800a3de:	1855      	adds	r5, r2, r1
 800a3e0:	42a5      	cmp	r5, r4
 800a3e2:	d10b      	bne.n	800a3fc <_free_r+0x70>
 800a3e4:	6824      	ldr	r4, [r4, #0]
 800a3e6:	4421      	add	r1, r4
 800a3e8:	1854      	adds	r4, r2, r1
 800a3ea:	42a3      	cmp	r3, r4
 800a3ec:	6011      	str	r1, [r2, #0]
 800a3ee:	d1e0      	bne.n	800a3b2 <_free_r+0x26>
 800a3f0:	681c      	ldr	r4, [r3, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	6053      	str	r3, [r2, #4]
 800a3f6:	440c      	add	r4, r1
 800a3f8:	6014      	str	r4, [r2, #0]
 800a3fa:	e7da      	b.n	800a3b2 <_free_r+0x26>
 800a3fc:	d902      	bls.n	800a404 <_free_r+0x78>
 800a3fe:	230c      	movs	r3, #12
 800a400:	6003      	str	r3, [r0, #0]
 800a402:	e7d6      	b.n	800a3b2 <_free_r+0x26>
 800a404:	6825      	ldr	r5, [r4, #0]
 800a406:	1961      	adds	r1, r4, r5
 800a408:	428b      	cmp	r3, r1
 800a40a:	bf04      	itt	eq
 800a40c:	6819      	ldreq	r1, [r3, #0]
 800a40e:	685b      	ldreq	r3, [r3, #4]
 800a410:	6063      	str	r3, [r4, #4]
 800a412:	bf04      	itt	eq
 800a414:	1949      	addeq	r1, r1, r5
 800a416:	6021      	streq	r1, [r4, #0]
 800a418:	6054      	str	r4, [r2, #4]
 800a41a:	e7ca      	b.n	800a3b2 <_free_r+0x26>
 800a41c:	b003      	add	sp, #12
 800a41e:	bd30      	pop	{r4, r5, pc}
 800a420:	200005ec 	.word	0x200005ec

0800a424 <malloc>:
 800a424:	4b02      	ldr	r3, [pc, #8]	; (800a430 <malloc+0xc>)
 800a426:	4601      	mov	r1, r0
 800a428:	6818      	ldr	r0, [r3, #0]
 800a42a:	f000 b823 	b.w	800a474 <_malloc_r>
 800a42e:	bf00      	nop
 800a430:	20000068 	.word	0x20000068

0800a434 <sbrk_aligned>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	4e0e      	ldr	r6, [pc, #56]	; (800a470 <sbrk_aligned+0x3c>)
 800a438:	460c      	mov	r4, r1
 800a43a:	6831      	ldr	r1, [r6, #0]
 800a43c:	4605      	mov	r5, r0
 800a43e:	b911      	cbnz	r1, 800a446 <sbrk_aligned+0x12>
 800a440:	f001 f81a 	bl	800b478 <_sbrk_r>
 800a444:	6030      	str	r0, [r6, #0]
 800a446:	4621      	mov	r1, r4
 800a448:	4628      	mov	r0, r5
 800a44a:	f001 f815 	bl	800b478 <_sbrk_r>
 800a44e:	1c43      	adds	r3, r0, #1
 800a450:	d00a      	beq.n	800a468 <sbrk_aligned+0x34>
 800a452:	1cc4      	adds	r4, r0, #3
 800a454:	f024 0403 	bic.w	r4, r4, #3
 800a458:	42a0      	cmp	r0, r4
 800a45a:	d007      	beq.n	800a46c <sbrk_aligned+0x38>
 800a45c:	1a21      	subs	r1, r4, r0
 800a45e:	4628      	mov	r0, r5
 800a460:	f001 f80a 	bl	800b478 <_sbrk_r>
 800a464:	3001      	adds	r0, #1
 800a466:	d101      	bne.n	800a46c <sbrk_aligned+0x38>
 800a468:	f04f 34ff 	mov.w	r4, #4294967295
 800a46c:	4620      	mov	r0, r4
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	200005f0 	.word	0x200005f0

0800a474 <_malloc_r>:
 800a474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a478:	1ccd      	adds	r5, r1, #3
 800a47a:	f025 0503 	bic.w	r5, r5, #3
 800a47e:	3508      	adds	r5, #8
 800a480:	2d0c      	cmp	r5, #12
 800a482:	bf38      	it	cc
 800a484:	250c      	movcc	r5, #12
 800a486:	2d00      	cmp	r5, #0
 800a488:	4607      	mov	r7, r0
 800a48a:	db01      	blt.n	800a490 <_malloc_r+0x1c>
 800a48c:	42a9      	cmp	r1, r5
 800a48e:	d905      	bls.n	800a49c <_malloc_r+0x28>
 800a490:	230c      	movs	r3, #12
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	2600      	movs	r6, #0
 800a496:	4630      	mov	r0, r6
 800a498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a49c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a570 <_malloc_r+0xfc>
 800a4a0:	f000 f868 	bl	800a574 <__malloc_lock>
 800a4a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a4a8:	461c      	mov	r4, r3
 800a4aa:	bb5c      	cbnz	r4, 800a504 <_malloc_r+0x90>
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	f7ff ffc0 	bl	800a434 <sbrk_aligned>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	d155      	bne.n	800a566 <_malloc_r+0xf2>
 800a4ba:	f8d8 4000 	ldr.w	r4, [r8]
 800a4be:	4626      	mov	r6, r4
 800a4c0:	2e00      	cmp	r6, #0
 800a4c2:	d145      	bne.n	800a550 <_malloc_r+0xdc>
 800a4c4:	2c00      	cmp	r4, #0
 800a4c6:	d048      	beq.n	800a55a <_malloc_r+0xe6>
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	eb04 0903 	add.w	r9, r4, r3
 800a4d2:	f000 ffd1 	bl	800b478 <_sbrk_r>
 800a4d6:	4581      	cmp	r9, r0
 800a4d8:	d13f      	bne.n	800a55a <_malloc_r+0xe6>
 800a4da:	6821      	ldr	r1, [r4, #0]
 800a4dc:	1a6d      	subs	r5, r5, r1
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f7ff ffa7 	bl	800a434 <sbrk_aligned>
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	d037      	beq.n	800a55a <_malloc_r+0xe6>
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	442b      	add	r3, r5
 800a4ee:	6023      	str	r3, [r4, #0]
 800a4f0:	f8d8 3000 	ldr.w	r3, [r8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d038      	beq.n	800a56a <_malloc_r+0xf6>
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	42a2      	cmp	r2, r4
 800a4fc:	d12b      	bne.n	800a556 <_malloc_r+0xe2>
 800a4fe:	2200      	movs	r2, #0
 800a500:	605a      	str	r2, [r3, #4]
 800a502:	e00f      	b.n	800a524 <_malloc_r+0xb0>
 800a504:	6822      	ldr	r2, [r4, #0]
 800a506:	1b52      	subs	r2, r2, r5
 800a508:	d41f      	bmi.n	800a54a <_malloc_r+0xd6>
 800a50a:	2a0b      	cmp	r2, #11
 800a50c:	d917      	bls.n	800a53e <_malloc_r+0xca>
 800a50e:	1961      	adds	r1, r4, r5
 800a510:	42a3      	cmp	r3, r4
 800a512:	6025      	str	r5, [r4, #0]
 800a514:	bf18      	it	ne
 800a516:	6059      	strne	r1, [r3, #4]
 800a518:	6863      	ldr	r3, [r4, #4]
 800a51a:	bf08      	it	eq
 800a51c:	f8c8 1000 	streq.w	r1, [r8]
 800a520:	5162      	str	r2, [r4, r5]
 800a522:	604b      	str	r3, [r1, #4]
 800a524:	4638      	mov	r0, r7
 800a526:	f104 060b 	add.w	r6, r4, #11
 800a52a:	f000 f829 	bl	800a580 <__malloc_unlock>
 800a52e:	f026 0607 	bic.w	r6, r6, #7
 800a532:	1d23      	adds	r3, r4, #4
 800a534:	1af2      	subs	r2, r6, r3
 800a536:	d0ae      	beq.n	800a496 <_malloc_r+0x22>
 800a538:	1b9b      	subs	r3, r3, r6
 800a53a:	50a3      	str	r3, [r4, r2]
 800a53c:	e7ab      	b.n	800a496 <_malloc_r+0x22>
 800a53e:	42a3      	cmp	r3, r4
 800a540:	6862      	ldr	r2, [r4, #4]
 800a542:	d1dd      	bne.n	800a500 <_malloc_r+0x8c>
 800a544:	f8c8 2000 	str.w	r2, [r8]
 800a548:	e7ec      	b.n	800a524 <_malloc_r+0xb0>
 800a54a:	4623      	mov	r3, r4
 800a54c:	6864      	ldr	r4, [r4, #4]
 800a54e:	e7ac      	b.n	800a4aa <_malloc_r+0x36>
 800a550:	4634      	mov	r4, r6
 800a552:	6876      	ldr	r6, [r6, #4]
 800a554:	e7b4      	b.n	800a4c0 <_malloc_r+0x4c>
 800a556:	4613      	mov	r3, r2
 800a558:	e7cc      	b.n	800a4f4 <_malloc_r+0x80>
 800a55a:	230c      	movs	r3, #12
 800a55c:	603b      	str	r3, [r7, #0]
 800a55e:	4638      	mov	r0, r7
 800a560:	f000 f80e 	bl	800a580 <__malloc_unlock>
 800a564:	e797      	b.n	800a496 <_malloc_r+0x22>
 800a566:	6025      	str	r5, [r4, #0]
 800a568:	e7dc      	b.n	800a524 <_malloc_r+0xb0>
 800a56a:	605b      	str	r3, [r3, #4]
 800a56c:	deff      	udf	#255	; 0xff
 800a56e:	bf00      	nop
 800a570:	200005ec 	.word	0x200005ec

0800a574 <__malloc_lock>:
 800a574:	4801      	ldr	r0, [pc, #4]	; (800a57c <__malloc_lock+0x8>)
 800a576:	f7ff b87e 	b.w	8009676 <__retarget_lock_acquire_recursive>
 800a57a:	bf00      	nop
 800a57c:	200005e8 	.word	0x200005e8

0800a580 <__malloc_unlock>:
 800a580:	4801      	ldr	r0, [pc, #4]	; (800a588 <__malloc_unlock+0x8>)
 800a582:	f7ff b879 	b.w	8009678 <__retarget_lock_release_recursive>
 800a586:	bf00      	nop
 800a588:	200005e8 	.word	0x200005e8

0800a58c <_Balloc>:
 800a58c:	b570      	push	{r4, r5, r6, lr}
 800a58e:	69c6      	ldr	r6, [r0, #28]
 800a590:	4604      	mov	r4, r0
 800a592:	460d      	mov	r5, r1
 800a594:	b976      	cbnz	r6, 800a5b4 <_Balloc+0x28>
 800a596:	2010      	movs	r0, #16
 800a598:	f7ff ff44 	bl	800a424 <malloc>
 800a59c:	4602      	mov	r2, r0
 800a59e:	61e0      	str	r0, [r4, #28]
 800a5a0:	b920      	cbnz	r0, 800a5ac <_Balloc+0x20>
 800a5a2:	4b18      	ldr	r3, [pc, #96]	; (800a604 <_Balloc+0x78>)
 800a5a4:	4818      	ldr	r0, [pc, #96]	; (800a608 <_Balloc+0x7c>)
 800a5a6:	216b      	movs	r1, #107	; 0x6b
 800a5a8:	f000 ff76 	bl	800b498 <__assert_func>
 800a5ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5b0:	6006      	str	r6, [r0, #0]
 800a5b2:	60c6      	str	r6, [r0, #12]
 800a5b4:	69e6      	ldr	r6, [r4, #28]
 800a5b6:	68f3      	ldr	r3, [r6, #12]
 800a5b8:	b183      	cbz	r3, 800a5dc <_Balloc+0x50>
 800a5ba:	69e3      	ldr	r3, [r4, #28]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5c2:	b9b8      	cbnz	r0, 800a5f4 <_Balloc+0x68>
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	fa01 f605 	lsl.w	r6, r1, r5
 800a5ca:	1d72      	adds	r2, r6, #5
 800a5cc:	0092      	lsls	r2, r2, #2
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f000 ff80 	bl	800b4d4 <_calloc_r>
 800a5d4:	b160      	cbz	r0, 800a5f0 <_Balloc+0x64>
 800a5d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5da:	e00e      	b.n	800a5fa <_Balloc+0x6e>
 800a5dc:	2221      	movs	r2, #33	; 0x21
 800a5de:	2104      	movs	r1, #4
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f000 ff77 	bl	800b4d4 <_calloc_r>
 800a5e6:	69e3      	ldr	r3, [r4, #28]
 800a5e8:	60f0      	str	r0, [r6, #12]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1e4      	bne.n	800a5ba <_Balloc+0x2e>
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	6802      	ldr	r2, [r0, #0]
 800a5f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a600:	e7f7      	b.n	800a5f2 <_Balloc+0x66>
 800a602:	bf00      	nop
 800a604:	0800b871 	.word	0x0800b871
 800a608:	0800b8f1 	.word	0x0800b8f1

0800a60c <_Bfree>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	69c6      	ldr	r6, [r0, #28]
 800a610:	4605      	mov	r5, r0
 800a612:	460c      	mov	r4, r1
 800a614:	b976      	cbnz	r6, 800a634 <_Bfree+0x28>
 800a616:	2010      	movs	r0, #16
 800a618:	f7ff ff04 	bl	800a424 <malloc>
 800a61c:	4602      	mov	r2, r0
 800a61e:	61e8      	str	r0, [r5, #28]
 800a620:	b920      	cbnz	r0, 800a62c <_Bfree+0x20>
 800a622:	4b09      	ldr	r3, [pc, #36]	; (800a648 <_Bfree+0x3c>)
 800a624:	4809      	ldr	r0, [pc, #36]	; (800a64c <_Bfree+0x40>)
 800a626:	218f      	movs	r1, #143	; 0x8f
 800a628:	f000 ff36 	bl	800b498 <__assert_func>
 800a62c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a630:	6006      	str	r6, [r0, #0]
 800a632:	60c6      	str	r6, [r0, #12]
 800a634:	b13c      	cbz	r4, 800a646 <_Bfree+0x3a>
 800a636:	69eb      	ldr	r3, [r5, #28]
 800a638:	6862      	ldr	r2, [r4, #4]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a640:	6021      	str	r1, [r4, #0]
 800a642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	0800b871 	.word	0x0800b871
 800a64c:	0800b8f1 	.word	0x0800b8f1

0800a650 <__multadd>:
 800a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a654:	690d      	ldr	r5, [r1, #16]
 800a656:	4607      	mov	r7, r0
 800a658:	460c      	mov	r4, r1
 800a65a:	461e      	mov	r6, r3
 800a65c:	f101 0c14 	add.w	ip, r1, #20
 800a660:	2000      	movs	r0, #0
 800a662:	f8dc 3000 	ldr.w	r3, [ip]
 800a666:	b299      	uxth	r1, r3
 800a668:	fb02 6101 	mla	r1, r2, r1, r6
 800a66c:	0c1e      	lsrs	r6, r3, #16
 800a66e:	0c0b      	lsrs	r3, r1, #16
 800a670:	fb02 3306 	mla	r3, r2, r6, r3
 800a674:	b289      	uxth	r1, r1
 800a676:	3001      	adds	r0, #1
 800a678:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a67c:	4285      	cmp	r5, r0
 800a67e:	f84c 1b04 	str.w	r1, [ip], #4
 800a682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a686:	dcec      	bgt.n	800a662 <__multadd+0x12>
 800a688:	b30e      	cbz	r6, 800a6ce <__multadd+0x7e>
 800a68a:	68a3      	ldr	r3, [r4, #8]
 800a68c:	42ab      	cmp	r3, r5
 800a68e:	dc19      	bgt.n	800a6c4 <__multadd+0x74>
 800a690:	6861      	ldr	r1, [r4, #4]
 800a692:	4638      	mov	r0, r7
 800a694:	3101      	adds	r1, #1
 800a696:	f7ff ff79 	bl	800a58c <_Balloc>
 800a69a:	4680      	mov	r8, r0
 800a69c:	b928      	cbnz	r0, 800a6aa <__multadd+0x5a>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	4b0c      	ldr	r3, [pc, #48]	; (800a6d4 <__multadd+0x84>)
 800a6a2:	480d      	ldr	r0, [pc, #52]	; (800a6d8 <__multadd+0x88>)
 800a6a4:	21ba      	movs	r1, #186	; 0xba
 800a6a6:	f000 fef7 	bl	800b498 <__assert_func>
 800a6aa:	6922      	ldr	r2, [r4, #16]
 800a6ac:	3202      	adds	r2, #2
 800a6ae:	f104 010c 	add.w	r1, r4, #12
 800a6b2:	0092      	lsls	r2, r2, #2
 800a6b4:	300c      	adds	r0, #12
 800a6b6:	f7fe ffe0 	bl	800967a <memcpy>
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	4638      	mov	r0, r7
 800a6be:	f7ff ffa5 	bl	800a60c <_Bfree>
 800a6c2:	4644      	mov	r4, r8
 800a6c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6c8:	3501      	adds	r5, #1
 800a6ca:	615e      	str	r6, [r3, #20]
 800a6cc:	6125      	str	r5, [r4, #16]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d4:	0800b8e0 	.word	0x0800b8e0
 800a6d8:	0800b8f1 	.word	0x0800b8f1

0800a6dc <__hi0bits>:
 800a6dc:	0c03      	lsrs	r3, r0, #16
 800a6de:	041b      	lsls	r3, r3, #16
 800a6e0:	b9d3      	cbnz	r3, 800a718 <__hi0bits+0x3c>
 800a6e2:	0400      	lsls	r0, r0, #16
 800a6e4:	2310      	movs	r3, #16
 800a6e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a6ea:	bf04      	itt	eq
 800a6ec:	0200      	lsleq	r0, r0, #8
 800a6ee:	3308      	addeq	r3, #8
 800a6f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a6f4:	bf04      	itt	eq
 800a6f6:	0100      	lsleq	r0, r0, #4
 800a6f8:	3304      	addeq	r3, #4
 800a6fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a6fe:	bf04      	itt	eq
 800a700:	0080      	lsleq	r0, r0, #2
 800a702:	3302      	addeq	r3, #2
 800a704:	2800      	cmp	r0, #0
 800a706:	db05      	blt.n	800a714 <__hi0bits+0x38>
 800a708:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a70c:	f103 0301 	add.w	r3, r3, #1
 800a710:	bf08      	it	eq
 800a712:	2320      	moveq	r3, #32
 800a714:	4618      	mov	r0, r3
 800a716:	4770      	bx	lr
 800a718:	2300      	movs	r3, #0
 800a71a:	e7e4      	b.n	800a6e6 <__hi0bits+0xa>

0800a71c <__lo0bits>:
 800a71c:	6803      	ldr	r3, [r0, #0]
 800a71e:	f013 0207 	ands.w	r2, r3, #7
 800a722:	d00c      	beq.n	800a73e <__lo0bits+0x22>
 800a724:	07d9      	lsls	r1, r3, #31
 800a726:	d422      	bmi.n	800a76e <__lo0bits+0x52>
 800a728:	079a      	lsls	r2, r3, #30
 800a72a:	bf49      	itett	mi
 800a72c:	085b      	lsrmi	r3, r3, #1
 800a72e:	089b      	lsrpl	r3, r3, #2
 800a730:	6003      	strmi	r3, [r0, #0]
 800a732:	2201      	movmi	r2, #1
 800a734:	bf5c      	itt	pl
 800a736:	6003      	strpl	r3, [r0, #0]
 800a738:	2202      	movpl	r2, #2
 800a73a:	4610      	mov	r0, r2
 800a73c:	4770      	bx	lr
 800a73e:	b299      	uxth	r1, r3
 800a740:	b909      	cbnz	r1, 800a746 <__lo0bits+0x2a>
 800a742:	0c1b      	lsrs	r3, r3, #16
 800a744:	2210      	movs	r2, #16
 800a746:	b2d9      	uxtb	r1, r3
 800a748:	b909      	cbnz	r1, 800a74e <__lo0bits+0x32>
 800a74a:	3208      	adds	r2, #8
 800a74c:	0a1b      	lsrs	r3, r3, #8
 800a74e:	0719      	lsls	r1, r3, #28
 800a750:	bf04      	itt	eq
 800a752:	091b      	lsreq	r3, r3, #4
 800a754:	3204      	addeq	r2, #4
 800a756:	0799      	lsls	r1, r3, #30
 800a758:	bf04      	itt	eq
 800a75a:	089b      	lsreq	r3, r3, #2
 800a75c:	3202      	addeq	r2, #2
 800a75e:	07d9      	lsls	r1, r3, #31
 800a760:	d403      	bmi.n	800a76a <__lo0bits+0x4e>
 800a762:	085b      	lsrs	r3, r3, #1
 800a764:	f102 0201 	add.w	r2, r2, #1
 800a768:	d003      	beq.n	800a772 <__lo0bits+0x56>
 800a76a:	6003      	str	r3, [r0, #0]
 800a76c:	e7e5      	b.n	800a73a <__lo0bits+0x1e>
 800a76e:	2200      	movs	r2, #0
 800a770:	e7e3      	b.n	800a73a <__lo0bits+0x1e>
 800a772:	2220      	movs	r2, #32
 800a774:	e7e1      	b.n	800a73a <__lo0bits+0x1e>
	...

0800a778 <__i2b>:
 800a778:	b510      	push	{r4, lr}
 800a77a:	460c      	mov	r4, r1
 800a77c:	2101      	movs	r1, #1
 800a77e:	f7ff ff05 	bl	800a58c <_Balloc>
 800a782:	4602      	mov	r2, r0
 800a784:	b928      	cbnz	r0, 800a792 <__i2b+0x1a>
 800a786:	4b05      	ldr	r3, [pc, #20]	; (800a79c <__i2b+0x24>)
 800a788:	4805      	ldr	r0, [pc, #20]	; (800a7a0 <__i2b+0x28>)
 800a78a:	f240 1145 	movw	r1, #325	; 0x145
 800a78e:	f000 fe83 	bl	800b498 <__assert_func>
 800a792:	2301      	movs	r3, #1
 800a794:	6144      	str	r4, [r0, #20]
 800a796:	6103      	str	r3, [r0, #16]
 800a798:	bd10      	pop	{r4, pc}
 800a79a:	bf00      	nop
 800a79c:	0800b8e0 	.word	0x0800b8e0
 800a7a0:	0800b8f1 	.word	0x0800b8f1

0800a7a4 <__multiply>:
 800a7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	4691      	mov	r9, r2
 800a7aa:	690a      	ldr	r2, [r1, #16]
 800a7ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	bfb8      	it	lt
 800a7b4:	460b      	movlt	r3, r1
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	bfbc      	itt	lt
 800a7ba:	464c      	movlt	r4, r9
 800a7bc:	4699      	movlt	r9, r3
 800a7be:	6927      	ldr	r7, [r4, #16]
 800a7c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7c4:	68a3      	ldr	r3, [r4, #8]
 800a7c6:	6861      	ldr	r1, [r4, #4]
 800a7c8:	eb07 060a 	add.w	r6, r7, sl
 800a7cc:	42b3      	cmp	r3, r6
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	bfb8      	it	lt
 800a7d2:	3101      	addlt	r1, #1
 800a7d4:	f7ff feda 	bl	800a58c <_Balloc>
 800a7d8:	b930      	cbnz	r0, 800a7e8 <__multiply+0x44>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	4b44      	ldr	r3, [pc, #272]	; (800a8f0 <__multiply+0x14c>)
 800a7de:	4845      	ldr	r0, [pc, #276]	; (800a8f4 <__multiply+0x150>)
 800a7e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a7e4:	f000 fe58 	bl	800b498 <__assert_func>
 800a7e8:	f100 0514 	add.w	r5, r0, #20
 800a7ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	4543      	cmp	r3, r8
 800a7f6:	d321      	bcc.n	800a83c <__multiply+0x98>
 800a7f8:	f104 0314 	add.w	r3, r4, #20
 800a7fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a800:	f109 0314 	add.w	r3, r9, #20
 800a804:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a808:	9202      	str	r2, [sp, #8]
 800a80a:	1b3a      	subs	r2, r7, r4
 800a80c:	3a15      	subs	r2, #21
 800a80e:	f022 0203 	bic.w	r2, r2, #3
 800a812:	3204      	adds	r2, #4
 800a814:	f104 0115 	add.w	r1, r4, #21
 800a818:	428f      	cmp	r7, r1
 800a81a:	bf38      	it	cc
 800a81c:	2204      	movcc	r2, #4
 800a81e:	9201      	str	r2, [sp, #4]
 800a820:	9a02      	ldr	r2, [sp, #8]
 800a822:	9303      	str	r3, [sp, #12]
 800a824:	429a      	cmp	r2, r3
 800a826:	d80c      	bhi.n	800a842 <__multiply+0x9e>
 800a828:	2e00      	cmp	r6, #0
 800a82a:	dd03      	ble.n	800a834 <__multiply+0x90>
 800a82c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a830:	2b00      	cmp	r3, #0
 800a832:	d05b      	beq.n	800a8ec <__multiply+0x148>
 800a834:	6106      	str	r6, [r0, #16]
 800a836:	b005      	add	sp, #20
 800a838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83c:	f843 2b04 	str.w	r2, [r3], #4
 800a840:	e7d8      	b.n	800a7f4 <__multiply+0x50>
 800a842:	f8b3 a000 	ldrh.w	sl, [r3]
 800a846:	f1ba 0f00 	cmp.w	sl, #0
 800a84a:	d024      	beq.n	800a896 <__multiply+0xf2>
 800a84c:	f104 0e14 	add.w	lr, r4, #20
 800a850:	46a9      	mov	r9, r5
 800a852:	f04f 0c00 	mov.w	ip, #0
 800a856:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a85a:	f8d9 1000 	ldr.w	r1, [r9]
 800a85e:	fa1f fb82 	uxth.w	fp, r2
 800a862:	b289      	uxth	r1, r1
 800a864:	fb0a 110b 	mla	r1, sl, fp, r1
 800a868:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a86c:	f8d9 2000 	ldr.w	r2, [r9]
 800a870:	4461      	add	r1, ip
 800a872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a876:	fb0a c20b 	mla	r2, sl, fp, ip
 800a87a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a87e:	b289      	uxth	r1, r1
 800a880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a884:	4577      	cmp	r7, lr
 800a886:	f849 1b04 	str.w	r1, [r9], #4
 800a88a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a88e:	d8e2      	bhi.n	800a856 <__multiply+0xb2>
 800a890:	9a01      	ldr	r2, [sp, #4]
 800a892:	f845 c002 	str.w	ip, [r5, r2]
 800a896:	9a03      	ldr	r2, [sp, #12]
 800a898:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a89c:	3304      	adds	r3, #4
 800a89e:	f1b9 0f00 	cmp.w	r9, #0
 800a8a2:	d021      	beq.n	800a8e8 <__multiply+0x144>
 800a8a4:	6829      	ldr	r1, [r5, #0]
 800a8a6:	f104 0c14 	add.w	ip, r4, #20
 800a8aa:	46ae      	mov	lr, r5
 800a8ac:	f04f 0a00 	mov.w	sl, #0
 800a8b0:	f8bc b000 	ldrh.w	fp, [ip]
 800a8b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a8b8:	fb09 220b 	mla	r2, r9, fp, r2
 800a8bc:	4452      	add	r2, sl
 800a8be:	b289      	uxth	r1, r1
 800a8c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8c4:	f84e 1b04 	str.w	r1, [lr], #4
 800a8c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a8cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8d0:	f8be 1000 	ldrh.w	r1, [lr]
 800a8d4:	fb09 110a 	mla	r1, r9, sl, r1
 800a8d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a8dc:	4567      	cmp	r7, ip
 800a8de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8e2:	d8e5      	bhi.n	800a8b0 <__multiply+0x10c>
 800a8e4:	9a01      	ldr	r2, [sp, #4]
 800a8e6:	50a9      	str	r1, [r5, r2]
 800a8e8:	3504      	adds	r5, #4
 800a8ea:	e799      	b.n	800a820 <__multiply+0x7c>
 800a8ec:	3e01      	subs	r6, #1
 800a8ee:	e79b      	b.n	800a828 <__multiply+0x84>
 800a8f0:	0800b8e0 	.word	0x0800b8e0
 800a8f4:	0800b8f1 	.word	0x0800b8f1

0800a8f8 <__pow5mult>:
 800a8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8fc:	4615      	mov	r5, r2
 800a8fe:	f012 0203 	ands.w	r2, r2, #3
 800a902:	4606      	mov	r6, r0
 800a904:	460f      	mov	r7, r1
 800a906:	d007      	beq.n	800a918 <__pow5mult+0x20>
 800a908:	4c25      	ldr	r4, [pc, #148]	; (800a9a0 <__pow5mult+0xa8>)
 800a90a:	3a01      	subs	r2, #1
 800a90c:	2300      	movs	r3, #0
 800a90e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a912:	f7ff fe9d 	bl	800a650 <__multadd>
 800a916:	4607      	mov	r7, r0
 800a918:	10ad      	asrs	r5, r5, #2
 800a91a:	d03d      	beq.n	800a998 <__pow5mult+0xa0>
 800a91c:	69f4      	ldr	r4, [r6, #28]
 800a91e:	b97c      	cbnz	r4, 800a940 <__pow5mult+0x48>
 800a920:	2010      	movs	r0, #16
 800a922:	f7ff fd7f 	bl	800a424 <malloc>
 800a926:	4602      	mov	r2, r0
 800a928:	61f0      	str	r0, [r6, #28]
 800a92a:	b928      	cbnz	r0, 800a938 <__pow5mult+0x40>
 800a92c:	4b1d      	ldr	r3, [pc, #116]	; (800a9a4 <__pow5mult+0xac>)
 800a92e:	481e      	ldr	r0, [pc, #120]	; (800a9a8 <__pow5mult+0xb0>)
 800a930:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a934:	f000 fdb0 	bl	800b498 <__assert_func>
 800a938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a93c:	6004      	str	r4, [r0, #0]
 800a93e:	60c4      	str	r4, [r0, #12]
 800a940:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a948:	b94c      	cbnz	r4, 800a95e <__pow5mult+0x66>
 800a94a:	f240 2171 	movw	r1, #625	; 0x271
 800a94e:	4630      	mov	r0, r6
 800a950:	f7ff ff12 	bl	800a778 <__i2b>
 800a954:	2300      	movs	r3, #0
 800a956:	f8c8 0008 	str.w	r0, [r8, #8]
 800a95a:	4604      	mov	r4, r0
 800a95c:	6003      	str	r3, [r0, #0]
 800a95e:	f04f 0900 	mov.w	r9, #0
 800a962:	07eb      	lsls	r3, r5, #31
 800a964:	d50a      	bpl.n	800a97c <__pow5mult+0x84>
 800a966:	4639      	mov	r1, r7
 800a968:	4622      	mov	r2, r4
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7ff ff1a 	bl	800a7a4 <__multiply>
 800a970:	4639      	mov	r1, r7
 800a972:	4680      	mov	r8, r0
 800a974:	4630      	mov	r0, r6
 800a976:	f7ff fe49 	bl	800a60c <_Bfree>
 800a97a:	4647      	mov	r7, r8
 800a97c:	106d      	asrs	r5, r5, #1
 800a97e:	d00b      	beq.n	800a998 <__pow5mult+0xa0>
 800a980:	6820      	ldr	r0, [r4, #0]
 800a982:	b938      	cbnz	r0, 800a994 <__pow5mult+0x9c>
 800a984:	4622      	mov	r2, r4
 800a986:	4621      	mov	r1, r4
 800a988:	4630      	mov	r0, r6
 800a98a:	f7ff ff0b 	bl	800a7a4 <__multiply>
 800a98e:	6020      	str	r0, [r4, #0]
 800a990:	f8c0 9000 	str.w	r9, [r0]
 800a994:	4604      	mov	r4, r0
 800a996:	e7e4      	b.n	800a962 <__pow5mult+0x6a>
 800a998:	4638      	mov	r0, r7
 800a99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a99e:	bf00      	nop
 800a9a0:	0800ba40 	.word	0x0800ba40
 800a9a4:	0800b871 	.word	0x0800b871
 800a9a8:	0800b8f1 	.word	0x0800b8f1

0800a9ac <__lshift>:
 800a9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	6849      	ldr	r1, [r1, #4]
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9ba:	68a3      	ldr	r3, [r4, #8]
 800a9bc:	4607      	mov	r7, r0
 800a9be:	4691      	mov	r9, r2
 800a9c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9c4:	f108 0601 	add.w	r6, r8, #1
 800a9c8:	42b3      	cmp	r3, r6
 800a9ca:	db0b      	blt.n	800a9e4 <__lshift+0x38>
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	f7ff fddd 	bl	800a58c <_Balloc>
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	b948      	cbnz	r0, 800a9ea <__lshift+0x3e>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	4b28      	ldr	r3, [pc, #160]	; (800aa7c <__lshift+0xd0>)
 800a9da:	4829      	ldr	r0, [pc, #164]	; (800aa80 <__lshift+0xd4>)
 800a9dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a9e0:	f000 fd5a 	bl	800b498 <__assert_func>
 800a9e4:	3101      	adds	r1, #1
 800a9e6:	005b      	lsls	r3, r3, #1
 800a9e8:	e7ee      	b.n	800a9c8 <__lshift+0x1c>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f100 0114 	add.w	r1, r0, #20
 800a9f0:	f100 0210 	add.w	r2, r0, #16
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	4553      	cmp	r3, sl
 800a9f8:	db33      	blt.n	800aa62 <__lshift+0xb6>
 800a9fa:	6920      	ldr	r0, [r4, #16]
 800a9fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa00:	f104 0314 	add.w	r3, r4, #20
 800aa04:	f019 091f 	ands.w	r9, r9, #31
 800aa08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa10:	d02b      	beq.n	800aa6a <__lshift+0xbe>
 800aa12:	f1c9 0e20 	rsb	lr, r9, #32
 800aa16:	468a      	mov	sl, r1
 800aa18:	2200      	movs	r2, #0
 800aa1a:	6818      	ldr	r0, [r3, #0]
 800aa1c:	fa00 f009 	lsl.w	r0, r0, r9
 800aa20:	4310      	orrs	r0, r2
 800aa22:	f84a 0b04 	str.w	r0, [sl], #4
 800aa26:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa2a:	459c      	cmp	ip, r3
 800aa2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa30:	d8f3      	bhi.n	800aa1a <__lshift+0x6e>
 800aa32:	ebac 0304 	sub.w	r3, ip, r4
 800aa36:	3b15      	subs	r3, #21
 800aa38:	f023 0303 	bic.w	r3, r3, #3
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	f104 0015 	add.w	r0, r4, #21
 800aa42:	4584      	cmp	ip, r0
 800aa44:	bf38      	it	cc
 800aa46:	2304      	movcc	r3, #4
 800aa48:	50ca      	str	r2, [r1, r3]
 800aa4a:	b10a      	cbz	r2, 800aa50 <__lshift+0xa4>
 800aa4c:	f108 0602 	add.w	r6, r8, #2
 800aa50:	3e01      	subs	r6, #1
 800aa52:	4638      	mov	r0, r7
 800aa54:	612e      	str	r6, [r5, #16]
 800aa56:	4621      	mov	r1, r4
 800aa58:	f7ff fdd8 	bl	800a60c <_Bfree>
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa62:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa66:	3301      	adds	r3, #1
 800aa68:	e7c5      	b.n	800a9f6 <__lshift+0x4a>
 800aa6a:	3904      	subs	r1, #4
 800aa6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa70:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa74:	459c      	cmp	ip, r3
 800aa76:	d8f9      	bhi.n	800aa6c <__lshift+0xc0>
 800aa78:	e7ea      	b.n	800aa50 <__lshift+0xa4>
 800aa7a:	bf00      	nop
 800aa7c:	0800b8e0 	.word	0x0800b8e0
 800aa80:	0800b8f1 	.word	0x0800b8f1

0800aa84 <__mcmp>:
 800aa84:	b530      	push	{r4, r5, lr}
 800aa86:	6902      	ldr	r2, [r0, #16]
 800aa88:	690c      	ldr	r4, [r1, #16]
 800aa8a:	1b12      	subs	r2, r2, r4
 800aa8c:	d10e      	bne.n	800aaac <__mcmp+0x28>
 800aa8e:	f100 0314 	add.w	r3, r0, #20
 800aa92:	3114      	adds	r1, #20
 800aa94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aaa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aaa4:	42a5      	cmp	r5, r4
 800aaa6:	d003      	beq.n	800aab0 <__mcmp+0x2c>
 800aaa8:	d305      	bcc.n	800aab6 <__mcmp+0x32>
 800aaaa:	2201      	movs	r2, #1
 800aaac:	4610      	mov	r0, r2
 800aaae:	bd30      	pop	{r4, r5, pc}
 800aab0:	4283      	cmp	r3, r0
 800aab2:	d3f3      	bcc.n	800aa9c <__mcmp+0x18>
 800aab4:	e7fa      	b.n	800aaac <__mcmp+0x28>
 800aab6:	f04f 32ff 	mov.w	r2, #4294967295
 800aaba:	e7f7      	b.n	800aaac <__mcmp+0x28>

0800aabc <__mdiff>:
 800aabc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac0:	460c      	mov	r4, r1
 800aac2:	4606      	mov	r6, r0
 800aac4:	4611      	mov	r1, r2
 800aac6:	4620      	mov	r0, r4
 800aac8:	4690      	mov	r8, r2
 800aaca:	f7ff ffdb 	bl	800aa84 <__mcmp>
 800aace:	1e05      	subs	r5, r0, #0
 800aad0:	d110      	bne.n	800aaf4 <__mdiff+0x38>
 800aad2:	4629      	mov	r1, r5
 800aad4:	4630      	mov	r0, r6
 800aad6:	f7ff fd59 	bl	800a58c <_Balloc>
 800aada:	b930      	cbnz	r0, 800aaea <__mdiff+0x2e>
 800aadc:	4b3a      	ldr	r3, [pc, #232]	; (800abc8 <__mdiff+0x10c>)
 800aade:	4602      	mov	r2, r0
 800aae0:	f240 2137 	movw	r1, #567	; 0x237
 800aae4:	4839      	ldr	r0, [pc, #228]	; (800abcc <__mdiff+0x110>)
 800aae6:	f000 fcd7 	bl	800b498 <__assert_func>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aaf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf4:	bfa4      	itt	ge
 800aaf6:	4643      	movge	r3, r8
 800aaf8:	46a0      	movge	r8, r4
 800aafa:	4630      	mov	r0, r6
 800aafc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab00:	bfa6      	itte	ge
 800ab02:	461c      	movge	r4, r3
 800ab04:	2500      	movge	r5, #0
 800ab06:	2501      	movlt	r5, #1
 800ab08:	f7ff fd40 	bl	800a58c <_Balloc>
 800ab0c:	b920      	cbnz	r0, 800ab18 <__mdiff+0x5c>
 800ab0e:	4b2e      	ldr	r3, [pc, #184]	; (800abc8 <__mdiff+0x10c>)
 800ab10:	4602      	mov	r2, r0
 800ab12:	f240 2145 	movw	r1, #581	; 0x245
 800ab16:	e7e5      	b.n	800aae4 <__mdiff+0x28>
 800ab18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab1c:	6926      	ldr	r6, [r4, #16]
 800ab1e:	60c5      	str	r5, [r0, #12]
 800ab20:	f104 0914 	add.w	r9, r4, #20
 800ab24:	f108 0514 	add.w	r5, r8, #20
 800ab28:	f100 0e14 	add.w	lr, r0, #20
 800ab2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab34:	f108 0210 	add.w	r2, r8, #16
 800ab38:	46f2      	mov	sl, lr
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab44:	fa11 f88b 	uxtah	r8, r1, fp
 800ab48:	b299      	uxth	r1, r3
 800ab4a:	0c1b      	lsrs	r3, r3, #16
 800ab4c:	eba8 0801 	sub.w	r8, r8, r1
 800ab50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab58:	fa1f f888 	uxth.w	r8, r8
 800ab5c:	1419      	asrs	r1, r3, #16
 800ab5e:	454e      	cmp	r6, r9
 800ab60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab64:	f84a 3b04 	str.w	r3, [sl], #4
 800ab68:	d8e8      	bhi.n	800ab3c <__mdiff+0x80>
 800ab6a:	1b33      	subs	r3, r6, r4
 800ab6c:	3b15      	subs	r3, #21
 800ab6e:	f023 0303 	bic.w	r3, r3, #3
 800ab72:	3304      	adds	r3, #4
 800ab74:	3415      	adds	r4, #21
 800ab76:	42a6      	cmp	r6, r4
 800ab78:	bf38      	it	cc
 800ab7a:	2304      	movcc	r3, #4
 800ab7c:	441d      	add	r5, r3
 800ab7e:	4473      	add	r3, lr
 800ab80:	469e      	mov	lr, r3
 800ab82:	462e      	mov	r6, r5
 800ab84:	4566      	cmp	r6, ip
 800ab86:	d30e      	bcc.n	800aba6 <__mdiff+0xea>
 800ab88:	f10c 0203 	add.w	r2, ip, #3
 800ab8c:	1b52      	subs	r2, r2, r5
 800ab8e:	f022 0203 	bic.w	r2, r2, #3
 800ab92:	3d03      	subs	r5, #3
 800ab94:	45ac      	cmp	ip, r5
 800ab96:	bf38      	it	cc
 800ab98:	2200      	movcc	r2, #0
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aba0:	b17a      	cbz	r2, 800abc2 <__mdiff+0x106>
 800aba2:	6107      	str	r7, [r0, #16]
 800aba4:	e7a4      	b.n	800aaf0 <__mdiff+0x34>
 800aba6:	f856 8b04 	ldr.w	r8, [r6], #4
 800abaa:	fa11 f288 	uxtah	r2, r1, r8
 800abae:	1414      	asrs	r4, r2, #16
 800abb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800abb4:	b292      	uxth	r2, r2
 800abb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800abba:	f84e 2b04 	str.w	r2, [lr], #4
 800abbe:	1421      	asrs	r1, r4, #16
 800abc0:	e7e0      	b.n	800ab84 <__mdiff+0xc8>
 800abc2:	3f01      	subs	r7, #1
 800abc4:	e7ea      	b.n	800ab9c <__mdiff+0xe0>
 800abc6:	bf00      	nop
 800abc8:	0800b8e0 	.word	0x0800b8e0
 800abcc:	0800b8f1 	.word	0x0800b8f1

0800abd0 <__d2b>:
 800abd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abd4:	460f      	mov	r7, r1
 800abd6:	2101      	movs	r1, #1
 800abd8:	ec59 8b10 	vmov	r8, r9, d0
 800abdc:	4616      	mov	r6, r2
 800abde:	f7ff fcd5 	bl	800a58c <_Balloc>
 800abe2:	4604      	mov	r4, r0
 800abe4:	b930      	cbnz	r0, 800abf4 <__d2b+0x24>
 800abe6:	4602      	mov	r2, r0
 800abe8:	4b24      	ldr	r3, [pc, #144]	; (800ac7c <__d2b+0xac>)
 800abea:	4825      	ldr	r0, [pc, #148]	; (800ac80 <__d2b+0xb0>)
 800abec:	f240 310f 	movw	r1, #783	; 0x30f
 800abf0:	f000 fc52 	bl	800b498 <__assert_func>
 800abf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abfc:	bb2d      	cbnz	r5, 800ac4a <__d2b+0x7a>
 800abfe:	9301      	str	r3, [sp, #4]
 800ac00:	f1b8 0300 	subs.w	r3, r8, #0
 800ac04:	d026      	beq.n	800ac54 <__d2b+0x84>
 800ac06:	4668      	mov	r0, sp
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	f7ff fd87 	bl	800a71c <__lo0bits>
 800ac0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac12:	b1e8      	cbz	r0, 800ac50 <__d2b+0x80>
 800ac14:	f1c0 0320 	rsb	r3, r0, #32
 800ac18:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	40c2      	lsrs	r2, r0
 800ac20:	6163      	str	r3, [r4, #20]
 800ac22:	9201      	str	r2, [sp, #4]
 800ac24:	9b01      	ldr	r3, [sp, #4]
 800ac26:	61a3      	str	r3, [r4, #24]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	bf14      	ite	ne
 800ac2c:	2202      	movne	r2, #2
 800ac2e:	2201      	moveq	r2, #1
 800ac30:	6122      	str	r2, [r4, #16]
 800ac32:	b1bd      	cbz	r5, 800ac64 <__d2b+0x94>
 800ac34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac38:	4405      	add	r5, r0
 800ac3a:	603d      	str	r5, [r7, #0]
 800ac3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac40:	6030      	str	r0, [r6, #0]
 800ac42:	4620      	mov	r0, r4
 800ac44:	b003      	add	sp, #12
 800ac46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac4e:	e7d6      	b.n	800abfe <__d2b+0x2e>
 800ac50:	6161      	str	r1, [r4, #20]
 800ac52:	e7e7      	b.n	800ac24 <__d2b+0x54>
 800ac54:	a801      	add	r0, sp, #4
 800ac56:	f7ff fd61 	bl	800a71c <__lo0bits>
 800ac5a:	9b01      	ldr	r3, [sp, #4]
 800ac5c:	6163      	str	r3, [r4, #20]
 800ac5e:	3020      	adds	r0, #32
 800ac60:	2201      	movs	r2, #1
 800ac62:	e7e5      	b.n	800ac30 <__d2b+0x60>
 800ac64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac6c:	6038      	str	r0, [r7, #0]
 800ac6e:	6918      	ldr	r0, [r3, #16]
 800ac70:	f7ff fd34 	bl	800a6dc <__hi0bits>
 800ac74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac78:	e7e2      	b.n	800ac40 <__d2b+0x70>
 800ac7a:	bf00      	nop
 800ac7c:	0800b8e0 	.word	0x0800b8e0
 800ac80:	0800b8f1 	.word	0x0800b8f1

0800ac84 <__ssputs_r>:
 800ac84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac88:	688e      	ldr	r6, [r1, #8]
 800ac8a:	461f      	mov	r7, r3
 800ac8c:	42be      	cmp	r6, r7
 800ac8e:	680b      	ldr	r3, [r1, #0]
 800ac90:	4682      	mov	sl, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	4690      	mov	r8, r2
 800ac96:	d82c      	bhi.n	800acf2 <__ssputs_r+0x6e>
 800ac98:	898a      	ldrh	r2, [r1, #12]
 800ac9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac9e:	d026      	beq.n	800acee <__ssputs_r+0x6a>
 800aca0:	6965      	ldr	r5, [r4, #20]
 800aca2:	6909      	ldr	r1, [r1, #16]
 800aca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aca8:	eba3 0901 	sub.w	r9, r3, r1
 800acac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acb0:	1c7b      	adds	r3, r7, #1
 800acb2:	444b      	add	r3, r9
 800acb4:	106d      	asrs	r5, r5, #1
 800acb6:	429d      	cmp	r5, r3
 800acb8:	bf38      	it	cc
 800acba:	461d      	movcc	r5, r3
 800acbc:	0553      	lsls	r3, r2, #21
 800acbe:	d527      	bpl.n	800ad10 <__ssputs_r+0x8c>
 800acc0:	4629      	mov	r1, r5
 800acc2:	f7ff fbd7 	bl	800a474 <_malloc_r>
 800acc6:	4606      	mov	r6, r0
 800acc8:	b360      	cbz	r0, 800ad24 <__ssputs_r+0xa0>
 800acca:	6921      	ldr	r1, [r4, #16]
 800accc:	464a      	mov	r2, r9
 800acce:	f7fe fcd4 	bl	800967a <memcpy>
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	6126      	str	r6, [r4, #16]
 800ace0:	6165      	str	r5, [r4, #20]
 800ace2:	444e      	add	r6, r9
 800ace4:	eba5 0509 	sub.w	r5, r5, r9
 800ace8:	6026      	str	r6, [r4, #0]
 800acea:	60a5      	str	r5, [r4, #8]
 800acec:	463e      	mov	r6, r7
 800acee:	42be      	cmp	r6, r7
 800acf0:	d900      	bls.n	800acf4 <__ssputs_r+0x70>
 800acf2:	463e      	mov	r6, r7
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	4632      	mov	r2, r6
 800acf8:	4641      	mov	r1, r8
 800acfa:	f000 fba3 	bl	800b444 <memmove>
 800acfe:	68a3      	ldr	r3, [r4, #8]
 800ad00:	1b9b      	subs	r3, r3, r6
 800ad02:	60a3      	str	r3, [r4, #8]
 800ad04:	6823      	ldr	r3, [r4, #0]
 800ad06:	4433      	add	r3, r6
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad10:	462a      	mov	r2, r5
 800ad12:	f000 fc07 	bl	800b524 <_realloc_r>
 800ad16:	4606      	mov	r6, r0
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d1e0      	bne.n	800acde <__ssputs_r+0x5a>
 800ad1c:	6921      	ldr	r1, [r4, #16]
 800ad1e:	4650      	mov	r0, sl
 800ad20:	f7ff fb34 	bl	800a38c <_free_r>
 800ad24:	230c      	movs	r3, #12
 800ad26:	f8ca 3000 	str.w	r3, [sl]
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad30:	81a3      	strh	r3, [r4, #12]
 800ad32:	f04f 30ff 	mov.w	r0, #4294967295
 800ad36:	e7e9      	b.n	800ad0c <__ssputs_r+0x88>

0800ad38 <_svfiprintf_r>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	4698      	mov	r8, r3
 800ad3e:	898b      	ldrh	r3, [r1, #12]
 800ad40:	061b      	lsls	r3, r3, #24
 800ad42:	b09d      	sub	sp, #116	; 0x74
 800ad44:	4607      	mov	r7, r0
 800ad46:	460d      	mov	r5, r1
 800ad48:	4614      	mov	r4, r2
 800ad4a:	d50e      	bpl.n	800ad6a <_svfiprintf_r+0x32>
 800ad4c:	690b      	ldr	r3, [r1, #16]
 800ad4e:	b963      	cbnz	r3, 800ad6a <_svfiprintf_r+0x32>
 800ad50:	2140      	movs	r1, #64	; 0x40
 800ad52:	f7ff fb8f 	bl	800a474 <_malloc_r>
 800ad56:	6028      	str	r0, [r5, #0]
 800ad58:	6128      	str	r0, [r5, #16]
 800ad5a:	b920      	cbnz	r0, 800ad66 <_svfiprintf_r+0x2e>
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	603b      	str	r3, [r7, #0]
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295
 800ad64:	e0d0      	b.n	800af08 <_svfiprintf_r+0x1d0>
 800ad66:	2340      	movs	r3, #64	; 0x40
 800ad68:	616b      	str	r3, [r5, #20]
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6e:	2320      	movs	r3, #32
 800ad70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad78:	2330      	movs	r3, #48	; 0x30
 800ad7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af20 <_svfiprintf_r+0x1e8>
 800ad7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad82:	f04f 0901 	mov.w	r9, #1
 800ad86:	4623      	mov	r3, r4
 800ad88:	469a      	mov	sl, r3
 800ad8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad8e:	b10a      	cbz	r2, 800ad94 <_svfiprintf_r+0x5c>
 800ad90:	2a25      	cmp	r2, #37	; 0x25
 800ad92:	d1f9      	bne.n	800ad88 <_svfiprintf_r+0x50>
 800ad94:	ebba 0b04 	subs.w	fp, sl, r4
 800ad98:	d00b      	beq.n	800adb2 <_svfiprintf_r+0x7a>
 800ad9a:	465b      	mov	r3, fp
 800ad9c:	4622      	mov	r2, r4
 800ad9e:	4629      	mov	r1, r5
 800ada0:	4638      	mov	r0, r7
 800ada2:	f7ff ff6f 	bl	800ac84 <__ssputs_r>
 800ada6:	3001      	adds	r0, #1
 800ada8:	f000 80a9 	beq.w	800aefe <_svfiprintf_r+0x1c6>
 800adac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adae:	445a      	add	r2, fp
 800adb0:	9209      	str	r2, [sp, #36]	; 0x24
 800adb2:	f89a 3000 	ldrb.w	r3, [sl]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f000 80a1 	beq.w	800aefe <_svfiprintf_r+0x1c6>
 800adbc:	2300      	movs	r3, #0
 800adbe:	f04f 32ff 	mov.w	r2, #4294967295
 800adc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adc6:	f10a 0a01 	add.w	sl, sl, #1
 800adca:	9304      	str	r3, [sp, #16]
 800adcc:	9307      	str	r3, [sp, #28]
 800adce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800add2:	931a      	str	r3, [sp, #104]	; 0x68
 800add4:	4654      	mov	r4, sl
 800add6:	2205      	movs	r2, #5
 800add8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800addc:	4850      	ldr	r0, [pc, #320]	; (800af20 <_svfiprintf_r+0x1e8>)
 800adde:	f7f5 fa1f 	bl	8000220 <memchr>
 800ade2:	9a04      	ldr	r2, [sp, #16]
 800ade4:	b9d8      	cbnz	r0, 800ae1e <_svfiprintf_r+0xe6>
 800ade6:	06d0      	lsls	r0, r2, #27
 800ade8:	bf44      	itt	mi
 800adea:	2320      	movmi	r3, #32
 800adec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adf0:	0711      	lsls	r1, r2, #28
 800adf2:	bf44      	itt	mi
 800adf4:	232b      	movmi	r3, #43	; 0x2b
 800adf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adfa:	f89a 3000 	ldrb.w	r3, [sl]
 800adfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ae00:	d015      	beq.n	800ae2e <_svfiprintf_r+0xf6>
 800ae02:	9a07      	ldr	r2, [sp, #28]
 800ae04:	4654      	mov	r4, sl
 800ae06:	2000      	movs	r0, #0
 800ae08:	f04f 0c0a 	mov.w	ip, #10
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae12:	3b30      	subs	r3, #48	; 0x30
 800ae14:	2b09      	cmp	r3, #9
 800ae16:	d94d      	bls.n	800aeb4 <_svfiprintf_r+0x17c>
 800ae18:	b1b0      	cbz	r0, 800ae48 <_svfiprintf_r+0x110>
 800ae1a:	9207      	str	r2, [sp, #28]
 800ae1c:	e014      	b.n	800ae48 <_svfiprintf_r+0x110>
 800ae1e:	eba0 0308 	sub.w	r3, r0, r8
 800ae22:	fa09 f303 	lsl.w	r3, r9, r3
 800ae26:	4313      	orrs	r3, r2
 800ae28:	9304      	str	r3, [sp, #16]
 800ae2a:	46a2      	mov	sl, r4
 800ae2c:	e7d2      	b.n	800add4 <_svfiprintf_r+0x9c>
 800ae2e:	9b03      	ldr	r3, [sp, #12]
 800ae30:	1d19      	adds	r1, r3, #4
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	9103      	str	r1, [sp, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	bfbb      	ittet	lt
 800ae3a:	425b      	neglt	r3, r3
 800ae3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae40:	9307      	strge	r3, [sp, #28]
 800ae42:	9307      	strlt	r3, [sp, #28]
 800ae44:	bfb8      	it	lt
 800ae46:	9204      	strlt	r2, [sp, #16]
 800ae48:	7823      	ldrb	r3, [r4, #0]
 800ae4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae4c:	d10c      	bne.n	800ae68 <_svfiprintf_r+0x130>
 800ae4e:	7863      	ldrb	r3, [r4, #1]
 800ae50:	2b2a      	cmp	r3, #42	; 0x2a
 800ae52:	d134      	bne.n	800aebe <_svfiprintf_r+0x186>
 800ae54:	9b03      	ldr	r3, [sp, #12]
 800ae56:	1d1a      	adds	r2, r3, #4
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	9203      	str	r2, [sp, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	bfb8      	it	lt
 800ae60:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae64:	3402      	adds	r4, #2
 800ae66:	9305      	str	r3, [sp, #20]
 800ae68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800af30 <_svfiprintf_r+0x1f8>
 800ae6c:	7821      	ldrb	r1, [r4, #0]
 800ae6e:	2203      	movs	r2, #3
 800ae70:	4650      	mov	r0, sl
 800ae72:	f7f5 f9d5 	bl	8000220 <memchr>
 800ae76:	b138      	cbz	r0, 800ae88 <_svfiprintf_r+0x150>
 800ae78:	9b04      	ldr	r3, [sp, #16]
 800ae7a:	eba0 000a 	sub.w	r0, r0, sl
 800ae7e:	2240      	movs	r2, #64	; 0x40
 800ae80:	4082      	lsls	r2, r0
 800ae82:	4313      	orrs	r3, r2
 800ae84:	3401      	adds	r4, #1
 800ae86:	9304      	str	r3, [sp, #16]
 800ae88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae8c:	4825      	ldr	r0, [pc, #148]	; (800af24 <_svfiprintf_r+0x1ec>)
 800ae8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae92:	2206      	movs	r2, #6
 800ae94:	f7f5 f9c4 	bl	8000220 <memchr>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d038      	beq.n	800af0e <_svfiprintf_r+0x1d6>
 800ae9c:	4b22      	ldr	r3, [pc, #136]	; (800af28 <_svfiprintf_r+0x1f0>)
 800ae9e:	bb1b      	cbnz	r3, 800aee8 <_svfiprintf_r+0x1b0>
 800aea0:	9b03      	ldr	r3, [sp, #12]
 800aea2:	3307      	adds	r3, #7
 800aea4:	f023 0307 	bic.w	r3, r3, #7
 800aea8:	3308      	adds	r3, #8
 800aeaa:	9303      	str	r3, [sp, #12]
 800aeac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeae:	4433      	add	r3, r6
 800aeb0:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb2:	e768      	b.n	800ad86 <_svfiprintf_r+0x4e>
 800aeb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeb8:	460c      	mov	r4, r1
 800aeba:	2001      	movs	r0, #1
 800aebc:	e7a6      	b.n	800ae0c <_svfiprintf_r+0xd4>
 800aebe:	2300      	movs	r3, #0
 800aec0:	3401      	adds	r4, #1
 800aec2:	9305      	str	r3, [sp, #20]
 800aec4:	4619      	mov	r1, r3
 800aec6:	f04f 0c0a 	mov.w	ip, #10
 800aeca:	4620      	mov	r0, r4
 800aecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aed0:	3a30      	subs	r2, #48	; 0x30
 800aed2:	2a09      	cmp	r2, #9
 800aed4:	d903      	bls.n	800aede <_svfiprintf_r+0x1a6>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0c6      	beq.n	800ae68 <_svfiprintf_r+0x130>
 800aeda:	9105      	str	r1, [sp, #20]
 800aedc:	e7c4      	b.n	800ae68 <_svfiprintf_r+0x130>
 800aede:	fb0c 2101 	mla	r1, ip, r1, r2
 800aee2:	4604      	mov	r4, r0
 800aee4:	2301      	movs	r3, #1
 800aee6:	e7f0      	b.n	800aeca <_svfiprintf_r+0x192>
 800aee8:	ab03      	add	r3, sp, #12
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	462a      	mov	r2, r5
 800aeee:	4b0f      	ldr	r3, [pc, #60]	; (800af2c <_svfiprintf_r+0x1f4>)
 800aef0:	a904      	add	r1, sp, #16
 800aef2:	4638      	mov	r0, r7
 800aef4:	f7fd fe56 	bl	8008ba4 <_printf_float>
 800aef8:	1c42      	adds	r2, r0, #1
 800aefa:	4606      	mov	r6, r0
 800aefc:	d1d6      	bne.n	800aeac <_svfiprintf_r+0x174>
 800aefe:	89ab      	ldrh	r3, [r5, #12]
 800af00:	065b      	lsls	r3, r3, #25
 800af02:	f53f af2d 	bmi.w	800ad60 <_svfiprintf_r+0x28>
 800af06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af08:	b01d      	add	sp, #116	; 0x74
 800af0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0e:	ab03      	add	r3, sp, #12
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	462a      	mov	r2, r5
 800af14:	4b05      	ldr	r3, [pc, #20]	; (800af2c <_svfiprintf_r+0x1f4>)
 800af16:	a904      	add	r1, sp, #16
 800af18:	4638      	mov	r0, r7
 800af1a:	f7fe f8e7 	bl	80090ec <_printf_i>
 800af1e:	e7eb      	b.n	800aef8 <_svfiprintf_r+0x1c0>
 800af20:	0800ba4c 	.word	0x0800ba4c
 800af24:	0800ba56 	.word	0x0800ba56
 800af28:	08008ba5 	.word	0x08008ba5
 800af2c:	0800ac85 	.word	0x0800ac85
 800af30:	0800ba52 	.word	0x0800ba52

0800af34 <__sfputc_r>:
 800af34:	6893      	ldr	r3, [r2, #8]
 800af36:	3b01      	subs	r3, #1
 800af38:	2b00      	cmp	r3, #0
 800af3a:	b410      	push	{r4}
 800af3c:	6093      	str	r3, [r2, #8]
 800af3e:	da08      	bge.n	800af52 <__sfputc_r+0x1e>
 800af40:	6994      	ldr	r4, [r2, #24]
 800af42:	42a3      	cmp	r3, r4
 800af44:	db01      	blt.n	800af4a <__sfputc_r+0x16>
 800af46:	290a      	cmp	r1, #10
 800af48:	d103      	bne.n	800af52 <__sfputc_r+0x1e>
 800af4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af4e:	f000 b9e3 	b.w	800b318 <__swbuf_r>
 800af52:	6813      	ldr	r3, [r2, #0]
 800af54:	1c58      	adds	r0, r3, #1
 800af56:	6010      	str	r0, [r2, #0]
 800af58:	7019      	strb	r1, [r3, #0]
 800af5a:	4608      	mov	r0, r1
 800af5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <__sfputs_r>:
 800af62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af64:	4606      	mov	r6, r0
 800af66:	460f      	mov	r7, r1
 800af68:	4614      	mov	r4, r2
 800af6a:	18d5      	adds	r5, r2, r3
 800af6c:	42ac      	cmp	r4, r5
 800af6e:	d101      	bne.n	800af74 <__sfputs_r+0x12>
 800af70:	2000      	movs	r0, #0
 800af72:	e007      	b.n	800af84 <__sfputs_r+0x22>
 800af74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af78:	463a      	mov	r2, r7
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7ff ffda 	bl	800af34 <__sfputc_r>
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	d1f3      	bne.n	800af6c <__sfputs_r+0xa>
 800af84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af88 <_vfiprintf_r>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	460d      	mov	r5, r1
 800af8e:	b09d      	sub	sp, #116	; 0x74
 800af90:	4614      	mov	r4, r2
 800af92:	4698      	mov	r8, r3
 800af94:	4606      	mov	r6, r0
 800af96:	b118      	cbz	r0, 800afa0 <_vfiprintf_r+0x18>
 800af98:	6a03      	ldr	r3, [r0, #32]
 800af9a:	b90b      	cbnz	r3, 800afa0 <_vfiprintf_r+0x18>
 800af9c:	f7fe fa54 	bl	8009448 <__sinit>
 800afa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa2:	07d9      	lsls	r1, r3, #31
 800afa4:	d405      	bmi.n	800afb2 <_vfiprintf_r+0x2a>
 800afa6:	89ab      	ldrh	r3, [r5, #12]
 800afa8:	059a      	lsls	r2, r3, #22
 800afaa:	d402      	bmi.n	800afb2 <_vfiprintf_r+0x2a>
 800afac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afae:	f7fe fb62 	bl	8009676 <__retarget_lock_acquire_recursive>
 800afb2:	89ab      	ldrh	r3, [r5, #12]
 800afb4:	071b      	lsls	r3, r3, #28
 800afb6:	d501      	bpl.n	800afbc <_vfiprintf_r+0x34>
 800afb8:	692b      	ldr	r3, [r5, #16]
 800afba:	b99b      	cbnz	r3, 800afe4 <_vfiprintf_r+0x5c>
 800afbc:	4629      	mov	r1, r5
 800afbe:	4630      	mov	r0, r6
 800afc0:	f000 f9e8 	bl	800b394 <__swsetup_r>
 800afc4:	b170      	cbz	r0, 800afe4 <_vfiprintf_r+0x5c>
 800afc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afc8:	07dc      	lsls	r4, r3, #31
 800afca:	d504      	bpl.n	800afd6 <_vfiprintf_r+0x4e>
 800afcc:	f04f 30ff 	mov.w	r0, #4294967295
 800afd0:	b01d      	add	sp, #116	; 0x74
 800afd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd6:	89ab      	ldrh	r3, [r5, #12]
 800afd8:	0598      	lsls	r0, r3, #22
 800afda:	d4f7      	bmi.n	800afcc <_vfiprintf_r+0x44>
 800afdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afde:	f7fe fb4b 	bl	8009678 <__retarget_lock_release_recursive>
 800afe2:	e7f3      	b.n	800afcc <_vfiprintf_r+0x44>
 800afe4:	2300      	movs	r3, #0
 800afe6:	9309      	str	r3, [sp, #36]	; 0x24
 800afe8:	2320      	movs	r3, #32
 800afea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afee:	f8cd 800c 	str.w	r8, [sp, #12]
 800aff2:	2330      	movs	r3, #48	; 0x30
 800aff4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b1a8 <_vfiprintf_r+0x220>
 800aff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800affc:	f04f 0901 	mov.w	r9, #1
 800b000:	4623      	mov	r3, r4
 800b002:	469a      	mov	sl, r3
 800b004:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b008:	b10a      	cbz	r2, 800b00e <_vfiprintf_r+0x86>
 800b00a:	2a25      	cmp	r2, #37	; 0x25
 800b00c:	d1f9      	bne.n	800b002 <_vfiprintf_r+0x7a>
 800b00e:	ebba 0b04 	subs.w	fp, sl, r4
 800b012:	d00b      	beq.n	800b02c <_vfiprintf_r+0xa4>
 800b014:	465b      	mov	r3, fp
 800b016:	4622      	mov	r2, r4
 800b018:	4629      	mov	r1, r5
 800b01a:	4630      	mov	r0, r6
 800b01c:	f7ff ffa1 	bl	800af62 <__sfputs_r>
 800b020:	3001      	adds	r0, #1
 800b022:	f000 80a9 	beq.w	800b178 <_vfiprintf_r+0x1f0>
 800b026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b028:	445a      	add	r2, fp
 800b02a:	9209      	str	r2, [sp, #36]	; 0x24
 800b02c:	f89a 3000 	ldrb.w	r3, [sl]
 800b030:	2b00      	cmp	r3, #0
 800b032:	f000 80a1 	beq.w	800b178 <_vfiprintf_r+0x1f0>
 800b036:	2300      	movs	r3, #0
 800b038:	f04f 32ff 	mov.w	r2, #4294967295
 800b03c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b040:	f10a 0a01 	add.w	sl, sl, #1
 800b044:	9304      	str	r3, [sp, #16]
 800b046:	9307      	str	r3, [sp, #28]
 800b048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b04c:	931a      	str	r3, [sp, #104]	; 0x68
 800b04e:	4654      	mov	r4, sl
 800b050:	2205      	movs	r2, #5
 800b052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b056:	4854      	ldr	r0, [pc, #336]	; (800b1a8 <_vfiprintf_r+0x220>)
 800b058:	f7f5 f8e2 	bl	8000220 <memchr>
 800b05c:	9a04      	ldr	r2, [sp, #16]
 800b05e:	b9d8      	cbnz	r0, 800b098 <_vfiprintf_r+0x110>
 800b060:	06d1      	lsls	r1, r2, #27
 800b062:	bf44      	itt	mi
 800b064:	2320      	movmi	r3, #32
 800b066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b06a:	0713      	lsls	r3, r2, #28
 800b06c:	bf44      	itt	mi
 800b06e:	232b      	movmi	r3, #43	; 0x2b
 800b070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b074:	f89a 3000 	ldrb.w	r3, [sl]
 800b078:	2b2a      	cmp	r3, #42	; 0x2a
 800b07a:	d015      	beq.n	800b0a8 <_vfiprintf_r+0x120>
 800b07c:	9a07      	ldr	r2, [sp, #28]
 800b07e:	4654      	mov	r4, sl
 800b080:	2000      	movs	r0, #0
 800b082:	f04f 0c0a 	mov.w	ip, #10
 800b086:	4621      	mov	r1, r4
 800b088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b08c:	3b30      	subs	r3, #48	; 0x30
 800b08e:	2b09      	cmp	r3, #9
 800b090:	d94d      	bls.n	800b12e <_vfiprintf_r+0x1a6>
 800b092:	b1b0      	cbz	r0, 800b0c2 <_vfiprintf_r+0x13a>
 800b094:	9207      	str	r2, [sp, #28]
 800b096:	e014      	b.n	800b0c2 <_vfiprintf_r+0x13a>
 800b098:	eba0 0308 	sub.w	r3, r0, r8
 800b09c:	fa09 f303 	lsl.w	r3, r9, r3
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	46a2      	mov	sl, r4
 800b0a6:	e7d2      	b.n	800b04e <_vfiprintf_r+0xc6>
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	1d19      	adds	r1, r3, #4
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	9103      	str	r1, [sp, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	bfbb      	ittet	lt
 800b0b4:	425b      	neglt	r3, r3
 800b0b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ba:	9307      	strge	r3, [sp, #28]
 800b0bc:	9307      	strlt	r3, [sp, #28]
 800b0be:	bfb8      	it	lt
 800b0c0:	9204      	strlt	r2, [sp, #16]
 800b0c2:	7823      	ldrb	r3, [r4, #0]
 800b0c4:	2b2e      	cmp	r3, #46	; 0x2e
 800b0c6:	d10c      	bne.n	800b0e2 <_vfiprintf_r+0x15a>
 800b0c8:	7863      	ldrb	r3, [r4, #1]
 800b0ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b0cc:	d134      	bne.n	800b138 <_vfiprintf_r+0x1b0>
 800b0ce:	9b03      	ldr	r3, [sp, #12]
 800b0d0:	1d1a      	adds	r2, r3, #4
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	9203      	str	r2, [sp, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	bfb8      	it	lt
 800b0da:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0de:	3402      	adds	r4, #2
 800b0e0:	9305      	str	r3, [sp, #20]
 800b0e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b1b8 <_vfiprintf_r+0x230>
 800b0e6:	7821      	ldrb	r1, [r4, #0]
 800b0e8:	2203      	movs	r2, #3
 800b0ea:	4650      	mov	r0, sl
 800b0ec:	f7f5 f898 	bl	8000220 <memchr>
 800b0f0:	b138      	cbz	r0, 800b102 <_vfiprintf_r+0x17a>
 800b0f2:	9b04      	ldr	r3, [sp, #16]
 800b0f4:	eba0 000a 	sub.w	r0, r0, sl
 800b0f8:	2240      	movs	r2, #64	; 0x40
 800b0fa:	4082      	lsls	r2, r0
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	3401      	adds	r4, #1
 800b100:	9304      	str	r3, [sp, #16]
 800b102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b106:	4829      	ldr	r0, [pc, #164]	; (800b1ac <_vfiprintf_r+0x224>)
 800b108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b10c:	2206      	movs	r2, #6
 800b10e:	f7f5 f887 	bl	8000220 <memchr>
 800b112:	2800      	cmp	r0, #0
 800b114:	d03f      	beq.n	800b196 <_vfiprintf_r+0x20e>
 800b116:	4b26      	ldr	r3, [pc, #152]	; (800b1b0 <_vfiprintf_r+0x228>)
 800b118:	bb1b      	cbnz	r3, 800b162 <_vfiprintf_r+0x1da>
 800b11a:	9b03      	ldr	r3, [sp, #12]
 800b11c:	3307      	adds	r3, #7
 800b11e:	f023 0307 	bic.w	r3, r3, #7
 800b122:	3308      	adds	r3, #8
 800b124:	9303      	str	r3, [sp, #12]
 800b126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b128:	443b      	add	r3, r7
 800b12a:	9309      	str	r3, [sp, #36]	; 0x24
 800b12c:	e768      	b.n	800b000 <_vfiprintf_r+0x78>
 800b12e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b132:	460c      	mov	r4, r1
 800b134:	2001      	movs	r0, #1
 800b136:	e7a6      	b.n	800b086 <_vfiprintf_r+0xfe>
 800b138:	2300      	movs	r3, #0
 800b13a:	3401      	adds	r4, #1
 800b13c:	9305      	str	r3, [sp, #20]
 800b13e:	4619      	mov	r1, r3
 800b140:	f04f 0c0a 	mov.w	ip, #10
 800b144:	4620      	mov	r0, r4
 800b146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b14a:	3a30      	subs	r2, #48	; 0x30
 800b14c:	2a09      	cmp	r2, #9
 800b14e:	d903      	bls.n	800b158 <_vfiprintf_r+0x1d0>
 800b150:	2b00      	cmp	r3, #0
 800b152:	d0c6      	beq.n	800b0e2 <_vfiprintf_r+0x15a>
 800b154:	9105      	str	r1, [sp, #20]
 800b156:	e7c4      	b.n	800b0e2 <_vfiprintf_r+0x15a>
 800b158:	fb0c 2101 	mla	r1, ip, r1, r2
 800b15c:	4604      	mov	r4, r0
 800b15e:	2301      	movs	r3, #1
 800b160:	e7f0      	b.n	800b144 <_vfiprintf_r+0x1bc>
 800b162:	ab03      	add	r3, sp, #12
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	462a      	mov	r2, r5
 800b168:	4b12      	ldr	r3, [pc, #72]	; (800b1b4 <_vfiprintf_r+0x22c>)
 800b16a:	a904      	add	r1, sp, #16
 800b16c:	4630      	mov	r0, r6
 800b16e:	f7fd fd19 	bl	8008ba4 <_printf_float>
 800b172:	4607      	mov	r7, r0
 800b174:	1c78      	adds	r0, r7, #1
 800b176:	d1d6      	bne.n	800b126 <_vfiprintf_r+0x19e>
 800b178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b17a:	07d9      	lsls	r1, r3, #31
 800b17c:	d405      	bmi.n	800b18a <_vfiprintf_r+0x202>
 800b17e:	89ab      	ldrh	r3, [r5, #12]
 800b180:	059a      	lsls	r2, r3, #22
 800b182:	d402      	bmi.n	800b18a <_vfiprintf_r+0x202>
 800b184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b186:	f7fe fa77 	bl	8009678 <__retarget_lock_release_recursive>
 800b18a:	89ab      	ldrh	r3, [r5, #12]
 800b18c:	065b      	lsls	r3, r3, #25
 800b18e:	f53f af1d 	bmi.w	800afcc <_vfiprintf_r+0x44>
 800b192:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b194:	e71c      	b.n	800afd0 <_vfiprintf_r+0x48>
 800b196:	ab03      	add	r3, sp, #12
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	462a      	mov	r2, r5
 800b19c:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <_vfiprintf_r+0x22c>)
 800b19e:	a904      	add	r1, sp, #16
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7fd ffa3 	bl	80090ec <_printf_i>
 800b1a6:	e7e4      	b.n	800b172 <_vfiprintf_r+0x1ea>
 800b1a8:	0800ba4c 	.word	0x0800ba4c
 800b1ac:	0800ba56 	.word	0x0800ba56
 800b1b0:	08008ba5 	.word	0x08008ba5
 800b1b4:	0800af63 	.word	0x0800af63
 800b1b8:	0800ba52 	.word	0x0800ba52

0800b1bc <__sflush_r>:
 800b1bc:	898a      	ldrh	r2, [r1, #12]
 800b1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	0710      	lsls	r0, r2, #28
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	d458      	bmi.n	800b27c <__sflush_r+0xc0>
 800b1ca:	684b      	ldr	r3, [r1, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	dc05      	bgt.n	800b1dc <__sflush_r+0x20>
 800b1d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	dc02      	bgt.n	800b1dc <__sflush_r+0x20>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1de:	2e00      	cmp	r6, #0
 800b1e0:	d0f9      	beq.n	800b1d6 <__sflush_r+0x1a>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1e8:	682f      	ldr	r7, [r5, #0]
 800b1ea:	6a21      	ldr	r1, [r4, #32]
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	d032      	beq.n	800b256 <__sflush_r+0x9a>
 800b1f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	075a      	lsls	r2, r3, #29
 800b1f6:	d505      	bpl.n	800b204 <__sflush_r+0x48>
 800b1f8:	6863      	ldr	r3, [r4, #4]
 800b1fa:	1ac0      	subs	r0, r0, r3
 800b1fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1fe:	b10b      	cbz	r3, 800b204 <__sflush_r+0x48>
 800b200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b202:	1ac0      	subs	r0, r0, r3
 800b204:	2300      	movs	r3, #0
 800b206:	4602      	mov	r2, r0
 800b208:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b20a:	6a21      	ldr	r1, [r4, #32]
 800b20c:	4628      	mov	r0, r5
 800b20e:	47b0      	blx	r6
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	d106      	bne.n	800b224 <__sflush_r+0x68>
 800b216:	6829      	ldr	r1, [r5, #0]
 800b218:	291d      	cmp	r1, #29
 800b21a:	d82b      	bhi.n	800b274 <__sflush_r+0xb8>
 800b21c:	4a29      	ldr	r2, [pc, #164]	; (800b2c4 <__sflush_r+0x108>)
 800b21e:	410a      	asrs	r2, r1
 800b220:	07d6      	lsls	r6, r2, #31
 800b222:	d427      	bmi.n	800b274 <__sflush_r+0xb8>
 800b224:	2200      	movs	r2, #0
 800b226:	6062      	str	r2, [r4, #4]
 800b228:	04d9      	lsls	r1, r3, #19
 800b22a:	6922      	ldr	r2, [r4, #16]
 800b22c:	6022      	str	r2, [r4, #0]
 800b22e:	d504      	bpl.n	800b23a <__sflush_r+0x7e>
 800b230:	1c42      	adds	r2, r0, #1
 800b232:	d101      	bne.n	800b238 <__sflush_r+0x7c>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b903      	cbnz	r3, 800b23a <__sflush_r+0x7e>
 800b238:	6560      	str	r0, [r4, #84]	; 0x54
 800b23a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b23c:	602f      	str	r7, [r5, #0]
 800b23e:	2900      	cmp	r1, #0
 800b240:	d0c9      	beq.n	800b1d6 <__sflush_r+0x1a>
 800b242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b246:	4299      	cmp	r1, r3
 800b248:	d002      	beq.n	800b250 <__sflush_r+0x94>
 800b24a:	4628      	mov	r0, r5
 800b24c:	f7ff f89e 	bl	800a38c <_free_r>
 800b250:	2000      	movs	r0, #0
 800b252:	6360      	str	r0, [r4, #52]	; 0x34
 800b254:	e7c0      	b.n	800b1d8 <__sflush_r+0x1c>
 800b256:	2301      	movs	r3, #1
 800b258:	4628      	mov	r0, r5
 800b25a:	47b0      	blx	r6
 800b25c:	1c41      	adds	r1, r0, #1
 800b25e:	d1c8      	bne.n	800b1f2 <__sflush_r+0x36>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0c5      	beq.n	800b1f2 <__sflush_r+0x36>
 800b266:	2b1d      	cmp	r3, #29
 800b268:	d001      	beq.n	800b26e <__sflush_r+0xb2>
 800b26a:	2b16      	cmp	r3, #22
 800b26c:	d101      	bne.n	800b272 <__sflush_r+0xb6>
 800b26e:	602f      	str	r7, [r5, #0]
 800b270:	e7b1      	b.n	800b1d6 <__sflush_r+0x1a>
 800b272:	89a3      	ldrh	r3, [r4, #12]
 800b274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b278:	81a3      	strh	r3, [r4, #12]
 800b27a:	e7ad      	b.n	800b1d8 <__sflush_r+0x1c>
 800b27c:	690f      	ldr	r7, [r1, #16]
 800b27e:	2f00      	cmp	r7, #0
 800b280:	d0a9      	beq.n	800b1d6 <__sflush_r+0x1a>
 800b282:	0793      	lsls	r3, r2, #30
 800b284:	680e      	ldr	r6, [r1, #0]
 800b286:	bf08      	it	eq
 800b288:	694b      	ldreq	r3, [r1, #20]
 800b28a:	600f      	str	r7, [r1, #0]
 800b28c:	bf18      	it	ne
 800b28e:	2300      	movne	r3, #0
 800b290:	eba6 0807 	sub.w	r8, r6, r7
 800b294:	608b      	str	r3, [r1, #8]
 800b296:	f1b8 0f00 	cmp.w	r8, #0
 800b29a:	dd9c      	ble.n	800b1d6 <__sflush_r+0x1a>
 800b29c:	6a21      	ldr	r1, [r4, #32]
 800b29e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2a0:	4643      	mov	r3, r8
 800b2a2:	463a      	mov	r2, r7
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b0      	blx	r6
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	dc06      	bgt.n	800b2ba <__sflush_r+0xfe>
 800b2ac:	89a3      	ldrh	r3, [r4, #12]
 800b2ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b8:	e78e      	b.n	800b1d8 <__sflush_r+0x1c>
 800b2ba:	4407      	add	r7, r0
 800b2bc:	eba8 0800 	sub.w	r8, r8, r0
 800b2c0:	e7e9      	b.n	800b296 <__sflush_r+0xda>
 800b2c2:	bf00      	nop
 800b2c4:	dfbffffe 	.word	0xdfbffffe

0800b2c8 <_fflush_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	690b      	ldr	r3, [r1, #16]
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	b913      	cbnz	r3, 800b2d8 <_fflush_r+0x10>
 800b2d2:	2500      	movs	r5, #0
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	b118      	cbz	r0, 800b2e2 <_fflush_r+0x1a>
 800b2da:	6a03      	ldr	r3, [r0, #32]
 800b2dc:	b90b      	cbnz	r3, 800b2e2 <_fflush_r+0x1a>
 800b2de:	f7fe f8b3 	bl	8009448 <__sinit>
 800b2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0f3      	beq.n	800b2d2 <_fflush_r+0xa>
 800b2ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2ec:	07d0      	lsls	r0, r2, #31
 800b2ee:	d404      	bmi.n	800b2fa <_fflush_r+0x32>
 800b2f0:	0599      	lsls	r1, r3, #22
 800b2f2:	d402      	bmi.n	800b2fa <_fflush_r+0x32>
 800b2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2f6:	f7fe f9be 	bl	8009676 <__retarget_lock_acquire_recursive>
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	f7ff ff5d 	bl	800b1bc <__sflush_r>
 800b302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b304:	07da      	lsls	r2, r3, #31
 800b306:	4605      	mov	r5, r0
 800b308:	d4e4      	bmi.n	800b2d4 <_fflush_r+0xc>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	059b      	lsls	r3, r3, #22
 800b30e:	d4e1      	bmi.n	800b2d4 <_fflush_r+0xc>
 800b310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b312:	f7fe f9b1 	bl	8009678 <__retarget_lock_release_recursive>
 800b316:	e7dd      	b.n	800b2d4 <_fflush_r+0xc>

0800b318 <__swbuf_r>:
 800b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31a:	460e      	mov	r6, r1
 800b31c:	4614      	mov	r4, r2
 800b31e:	4605      	mov	r5, r0
 800b320:	b118      	cbz	r0, 800b32a <__swbuf_r+0x12>
 800b322:	6a03      	ldr	r3, [r0, #32]
 800b324:	b90b      	cbnz	r3, 800b32a <__swbuf_r+0x12>
 800b326:	f7fe f88f 	bl	8009448 <__sinit>
 800b32a:	69a3      	ldr	r3, [r4, #24]
 800b32c:	60a3      	str	r3, [r4, #8]
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	071a      	lsls	r2, r3, #28
 800b332:	d525      	bpl.n	800b380 <__swbuf_r+0x68>
 800b334:	6923      	ldr	r3, [r4, #16]
 800b336:	b31b      	cbz	r3, 800b380 <__swbuf_r+0x68>
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	6922      	ldr	r2, [r4, #16]
 800b33c:	1a98      	subs	r0, r3, r2
 800b33e:	6963      	ldr	r3, [r4, #20]
 800b340:	b2f6      	uxtb	r6, r6
 800b342:	4283      	cmp	r3, r0
 800b344:	4637      	mov	r7, r6
 800b346:	dc04      	bgt.n	800b352 <__swbuf_r+0x3a>
 800b348:	4621      	mov	r1, r4
 800b34a:	4628      	mov	r0, r5
 800b34c:	f7ff ffbc 	bl	800b2c8 <_fflush_r>
 800b350:	b9e0      	cbnz	r0, 800b38c <__swbuf_r+0x74>
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	3b01      	subs	r3, #1
 800b356:	60a3      	str	r3, [r4, #8]
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	6022      	str	r2, [r4, #0]
 800b35e:	701e      	strb	r6, [r3, #0]
 800b360:	6962      	ldr	r2, [r4, #20]
 800b362:	1c43      	adds	r3, r0, #1
 800b364:	429a      	cmp	r2, r3
 800b366:	d004      	beq.n	800b372 <__swbuf_r+0x5a>
 800b368:	89a3      	ldrh	r3, [r4, #12]
 800b36a:	07db      	lsls	r3, r3, #31
 800b36c:	d506      	bpl.n	800b37c <__swbuf_r+0x64>
 800b36e:	2e0a      	cmp	r6, #10
 800b370:	d104      	bne.n	800b37c <__swbuf_r+0x64>
 800b372:	4621      	mov	r1, r4
 800b374:	4628      	mov	r0, r5
 800b376:	f7ff ffa7 	bl	800b2c8 <_fflush_r>
 800b37a:	b938      	cbnz	r0, 800b38c <__swbuf_r+0x74>
 800b37c:	4638      	mov	r0, r7
 800b37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b380:	4621      	mov	r1, r4
 800b382:	4628      	mov	r0, r5
 800b384:	f000 f806 	bl	800b394 <__swsetup_r>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d0d5      	beq.n	800b338 <__swbuf_r+0x20>
 800b38c:	f04f 37ff 	mov.w	r7, #4294967295
 800b390:	e7f4      	b.n	800b37c <__swbuf_r+0x64>
	...

0800b394 <__swsetup_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4b2a      	ldr	r3, [pc, #168]	; (800b440 <__swsetup_r+0xac>)
 800b398:	4605      	mov	r5, r0
 800b39a:	6818      	ldr	r0, [r3, #0]
 800b39c:	460c      	mov	r4, r1
 800b39e:	b118      	cbz	r0, 800b3a8 <__swsetup_r+0x14>
 800b3a0:	6a03      	ldr	r3, [r0, #32]
 800b3a2:	b90b      	cbnz	r3, 800b3a8 <__swsetup_r+0x14>
 800b3a4:	f7fe f850 	bl	8009448 <__sinit>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3ae:	0718      	lsls	r0, r3, #28
 800b3b0:	d422      	bmi.n	800b3f8 <__swsetup_r+0x64>
 800b3b2:	06d9      	lsls	r1, r3, #27
 800b3b4:	d407      	bmi.n	800b3c6 <__swsetup_r+0x32>
 800b3b6:	2309      	movs	r3, #9
 800b3b8:	602b      	str	r3, [r5, #0]
 800b3ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3be:	81a3      	strh	r3, [r4, #12]
 800b3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c4:	e034      	b.n	800b430 <__swsetup_r+0x9c>
 800b3c6:	0758      	lsls	r0, r3, #29
 800b3c8:	d512      	bpl.n	800b3f0 <__swsetup_r+0x5c>
 800b3ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3cc:	b141      	cbz	r1, 800b3e0 <__swsetup_r+0x4c>
 800b3ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3d2:	4299      	cmp	r1, r3
 800b3d4:	d002      	beq.n	800b3dc <__swsetup_r+0x48>
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f7fe ffd8 	bl	800a38c <_free_r>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	6363      	str	r3, [r4, #52]	; 0x34
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3e6:	81a3      	strh	r3, [r4, #12]
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	6063      	str	r3, [r4, #4]
 800b3ec:	6923      	ldr	r3, [r4, #16]
 800b3ee:	6023      	str	r3, [r4, #0]
 800b3f0:	89a3      	ldrh	r3, [r4, #12]
 800b3f2:	f043 0308 	orr.w	r3, r3, #8
 800b3f6:	81a3      	strh	r3, [r4, #12]
 800b3f8:	6923      	ldr	r3, [r4, #16]
 800b3fa:	b94b      	cbnz	r3, 800b410 <__swsetup_r+0x7c>
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b406:	d003      	beq.n	800b410 <__swsetup_r+0x7c>
 800b408:	4621      	mov	r1, r4
 800b40a:	4628      	mov	r0, r5
 800b40c:	f000 f8fe 	bl	800b60c <__smakebuf_r>
 800b410:	89a0      	ldrh	r0, [r4, #12]
 800b412:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b416:	f010 0301 	ands.w	r3, r0, #1
 800b41a:	d00a      	beq.n	800b432 <__swsetup_r+0x9e>
 800b41c:	2300      	movs	r3, #0
 800b41e:	60a3      	str	r3, [r4, #8]
 800b420:	6963      	ldr	r3, [r4, #20]
 800b422:	425b      	negs	r3, r3
 800b424:	61a3      	str	r3, [r4, #24]
 800b426:	6923      	ldr	r3, [r4, #16]
 800b428:	b943      	cbnz	r3, 800b43c <__swsetup_r+0xa8>
 800b42a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b42e:	d1c4      	bne.n	800b3ba <__swsetup_r+0x26>
 800b430:	bd38      	pop	{r3, r4, r5, pc}
 800b432:	0781      	lsls	r1, r0, #30
 800b434:	bf58      	it	pl
 800b436:	6963      	ldrpl	r3, [r4, #20]
 800b438:	60a3      	str	r3, [r4, #8]
 800b43a:	e7f4      	b.n	800b426 <__swsetup_r+0x92>
 800b43c:	2000      	movs	r0, #0
 800b43e:	e7f7      	b.n	800b430 <__swsetup_r+0x9c>
 800b440:	20000068 	.word	0x20000068

0800b444 <memmove>:
 800b444:	4288      	cmp	r0, r1
 800b446:	b510      	push	{r4, lr}
 800b448:	eb01 0402 	add.w	r4, r1, r2
 800b44c:	d902      	bls.n	800b454 <memmove+0x10>
 800b44e:	4284      	cmp	r4, r0
 800b450:	4623      	mov	r3, r4
 800b452:	d807      	bhi.n	800b464 <memmove+0x20>
 800b454:	1e43      	subs	r3, r0, #1
 800b456:	42a1      	cmp	r1, r4
 800b458:	d008      	beq.n	800b46c <memmove+0x28>
 800b45a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b45e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b462:	e7f8      	b.n	800b456 <memmove+0x12>
 800b464:	4402      	add	r2, r0
 800b466:	4601      	mov	r1, r0
 800b468:	428a      	cmp	r2, r1
 800b46a:	d100      	bne.n	800b46e <memmove+0x2a>
 800b46c:	bd10      	pop	{r4, pc}
 800b46e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b476:	e7f7      	b.n	800b468 <memmove+0x24>

0800b478 <_sbrk_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4d06      	ldr	r5, [pc, #24]	; (800b494 <_sbrk_r+0x1c>)
 800b47c:	2300      	movs	r3, #0
 800b47e:	4604      	mov	r4, r0
 800b480:	4608      	mov	r0, r1
 800b482:	602b      	str	r3, [r5, #0]
 800b484:	f7f6 ffa2 	bl	80023cc <_sbrk>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_sbrk_r+0x1a>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_sbrk_r+0x1a>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	200005e4 	.word	0x200005e4

0800b498 <__assert_func>:
 800b498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b49a:	4614      	mov	r4, r2
 800b49c:	461a      	mov	r2, r3
 800b49e:	4b09      	ldr	r3, [pc, #36]	; (800b4c4 <__assert_func+0x2c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	68d8      	ldr	r0, [r3, #12]
 800b4a6:	b14c      	cbz	r4, 800b4bc <__assert_func+0x24>
 800b4a8:	4b07      	ldr	r3, [pc, #28]	; (800b4c8 <__assert_func+0x30>)
 800b4aa:	9100      	str	r1, [sp, #0]
 800b4ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4b0:	4906      	ldr	r1, [pc, #24]	; (800b4cc <__assert_func+0x34>)
 800b4b2:	462b      	mov	r3, r5
 800b4b4:	f000 f872 	bl	800b59c <fiprintf>
 800b4b8:	f000 f906 	bl	800b6c8 <abort>
 800b4bc:	4b04      	ldr	r3, [pc, #16]	; (800b4d0 <__assert_func+0x38>)
 800b4be:	461c      	mov	r4, r3
 800b4c0:	e7f3      	b.n	800b4aa <__assert_func+0x12>
 800b4c2:	bf00      	nop
 800b4c4:	20000068 	.word	0x20000068
 800b4c8:	0800ba67 	.word	0x0800ba67
 800b4cc:	0800ba74 	.word	0x0800ba74
 800b4d0:	0800baa2 	.word	0x0800baa2

0800b4d4 <_calloc_r>:
 800b4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b4d6:	fba1 2402 	umull	r2, r4, r1, r2
 800b4da:	b94c      	cbnz	r4, 800b4f0 <_calloc_r+0x1c>
 800b4dc:	4611      	mov	r1, r2
 800b4de:	9201      	str	r2, [sp, #4]
 800b4e0:	f7fe ffc8 	bl	800a474 <_malloc_r>
 800b4e4:	9a01      	ldr	r2, [sp, #4]
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	b930      	cbnz	r0, 800b4f8 <_calloc_r+0x24>
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	b003      	add	sp, #12
 800b4ee:	bd30      	pop	{r4, r5, pc}
 800b4f0:	220c      	movs	r2, #12
 800b4f2:	6002      	str	r2, [r0, #0]
 800b4f4:	2500      	movs	r5, #0
 800b4f6:	e7f8      	b.n	800b4ea <_calloc_r+0x16>
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	f7fe f83e 	bl	800957a <memset>
 800b4fe:	e7f4      	b.n	800b4ea <_calloc_r+0x16>

0800b500 <__ascii_mbtowc>:
 800b500:	b082      	sub	sp, #8
 800b502:	b901      	cbnz	r1, 800b506 <__ascii_mbtowc+0x6>
 800b504:	a901      	add	r1, sp, #4
 800b506:	b142      	cbz	r2, 800b51a <__ascii_mbtowc+0x1a>
 800b508:	b14b      	cbz	r3, 800b51e <__ascii_mbtowc+0x1e>
 800b50a:	7813      	ldrb	r3, [r2, #0]
 800b50c:	600b      	str	r3, [r1, #0]
 800b50e:	7812      	ldrb	r2, [r2, #0]
 800b510:	1e10      	subs	r0, r2, #0
 800b512:	bf18      	it	ne
 800b514:	2001      	movne	r0, #1
 800b516:	b002      	add	sp, #8
 800b518:	4770      	bx	lr
 800b51a:	4610      	mov	r0, r2
 800b51c:	e7fb      	b.n	800b516 <__ascii_mbtowc+0x16>
 800b51e:	f06f 0001 	mvn.w	r0, #1
 800b522:	e7f8      	b.n	800b516 <__ascii_mbtowc+0x16>

0800b524 <_realloc_r>:
 800b524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b528:	4680      	mov	r8, r0
 800b52a:	4614      	mov	r4, r2
 800b52c:	460e      	mov	r6, r1
 800b52e:	b921      	cbnz	r1, 800b53a <_realloc_r+0x16>
 800b530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	4611      	mov	r1, r2
 800b536:	f7fe bf9d 	b.w	800a474 <_malloc_r>
 800b53a:	b92a      	cbnz	r2, 800b548 <_realloc_r+0x24>
 800b53c:	f7fe ff26 	bl	800a38c <_free_r>
 800b540:	4625      	mov	r5, r4
 800b542:	4628      	mov	r0, r5
 800b544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b548:	f000 f8c5 	bl	800b6d6 <_malloc_usable_size_r>
 800b54c:	4284      	cmp	r4, r0
 800b54e:	4607      	mov	r7, r0
 800b550:	d802      	bhi.n	800b558 <_realloc_r+0x34>
 800b552:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b556:	d812      	bhi.n	800b57e <_realloc_r+0x5a>
 800b558:	4621      	mov	r1, r4
 800b55a:	4640      	mov	r0, r8
 800b55c:	f7fe ff8a 	bl	800a474 <_malloc_r>
 800b560:	4605      	mov	r5, r0
 800b562:	2800      	cmp	r0, #0
 800b564:	d0ed      	beq.n	800b542 <_realloc_r+0x1e>
 800b566:	42bc      	cmp	r4, r7
 800b568:	4622      	mov	r2, r4
 800b56a:	4631      	mov	r1, r6
 800b56c:	bf28      	it	cs
 800b56e:	463a      	movcs	r2, r7
 800b570:	f7fe f883 	bl	800967a <memcpy>
 800b574:	4631      	mov	r1, r6
 800b576:	4640      	mov	r0, r8
 800b578:	f7fe ff08 	bl	800a38c <_free_r>
 800b57c:	e7e1      	b.n	800b542 <_realloc_r+0x1e>
 800b57e:	4635      	mov	r5, r6
 800b580:	e7df      	b.n	800b542 <_realloc_r+0x1e>

0800b582 <__ascii_wctomb>:
 800b582:	b149      	cbz	r1, 800b598 <__ascii_wctomb+0x16>
 800b584:	2aff      	cmp	r2, #255	; 0xff
 800b586:	bf85      	ittet	hi
 800b588:	238a      	movhi	r3, #138	; 0x8a
 800b58a:	6003      	strhi	r3, [r0, #0]
 800b58c:	700a      	strbls	r2, [r1, #0]
 800b58e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b592:	bf98      	it	ls
 800b594:	2001      	movls	r0, #1
 800b596:	4770      	bx	lr
 800b598:	4608      	mov	r0, r1
 800b59a:	4770      	bx	lr

0800b59c <fiprintf>:
 800b59c:	b40e      	push	{r1, r2, r3}
 800b59e:	b503      	push	{r0, r1, lr}
 800b5a0:	4601      	mov	r1, r0
 800b5a2:	ab03      	add	r3, sp, #12
 800b5a4:	4805      	ldr	r0, [pc, #20]	; (800b5bc <fiprintf+0x20>)
 800b5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5aa:	6800      	ldr	r0, [r0, #0]
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	f7ff fceb 	bl	800af88 <_vfiprintf_r>
 800b5b2:	b002      	add	sp, #8
 800b5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5b8:	b003      	add	sp, #12
 800b5ba:	4770      	bx	lr
 800b5bc:	20000068 	.word	0x20000068

0800b5c0 <__swhatbuf_r>:
 800b5c0:	b570      	push	{r4, r5, r6, lr}
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c8:	2900      	cmp	r1, #0
 800b5ca:	b096      	sub	sp, #88	; 0x58
 800b5cc:	4615      	mov	r5, r2
 800b5ce:	461e      	mov	r6, r3
 800b5d0:	da0d      	bge.n	800b5ee <__swhatbuf_r+0x2e>
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b5d8:	f04f 0100 	mov.w	r1, #0
 800b5dc:	bf0c      	ite	eq
 800b5de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b5e2:	2340      	movne	r3, #64	; 0x40
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	6031      	str	r1, [r6, #0]
 800b5e8:	602b      	str	r3, [r5, #0]
 800b5ea:	b016      	add	sp, #88	; 0x58
 800b5ec:	bd70      	pop	{r4, r5, r6, pc}
 800b5ee:	466a      	mov	r2, sp
 800b5f0:	f000 f848 	bl	800b684 <_fstat_r>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	dbec      	blt.n	800b5d2 <__swhatbuf_r+0x12>
 800b5f8:	9901      	ldr	r1, [sp, #4]
 800b5fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b5fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b602:	4259      	negs	r1, r3
 800b604:	4159      	adcs	r1, r3
 800b606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b60a:	e7eb      	b.n	800b5e4 <__swhatbuf_r+0x24>

0800b60c <__smakebuf_r>:
 800b60c:	898b      	ldrh	r3, [r1, #12]
 800b60e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b610:	079d      	lsls	r5, r3, #30
 800b612:	4606      	mov	r6, r0
 800b614:	460c      	mov	r4, r1
 800b616:	d507      	bpl.n	800b628 <__smakebuf_r+0x1c>
 800b618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b61c:	6023      	str	r3, [r4, #0]
 800b61e:	6123      	str	r3, [r4, #16]
 800b620:	2301      	movs	r3, #1
 800b622:	6163      	str	r3, [r4, #20]
 800b624:	b002      	add	sp, #8
 800b626:	bd70      	pop	{r4, r5, r6, pc}
 800b628:	ab01      	add	r3, sp, #4
 800b62a:	466a      	mov	r2, sp
 800b62c:	f7ff ffc8 	bl	800b5c0 <__swhatbuf_r>
 800b630:	9900      	ldr	r1, [sp, #0]
 800b632:	4605      	mov	r5, r0
 800b634:	4630      	mov	r0, r6
 800b636:	f7fe ff1d 	bl	800a474 <_malloc_r>
 800b63a:	b948      	cbnz	r0, 800b650 <__smakebuf_r+0x44>
 800b63c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b640:	059a      	lsls	r2, r3, #22
 800b642:	d4ef      	bmi.n	800b624 <__smakebuf_r+0x18>
 800b644:	f023 0303 	bic.w	r3, r3, #3
 800b648:	f043 0302 	orr.w	r3, r3, #2
 800b64c:	81a3      	strh	r3, [r4, #12]
 800b64e:	e7e3      	b.n	800b618 <__smakebuf_r+0xc>
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	6020      	str	r0, [r4, #0]
 800b654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b658:	81a3      	strh	r3, [r4, #12]
 800b65a:	9b00      	ldr	r3, [sp, #0]
 800b65c:	6163      	str	r3, [r4, #20]
 800b65e:	9b01      	ldr	r3, [sp, #4]
 800b660:	6120      	str	r0, [r4, #16]
 800b662:	b15b      	cbz	r3, 800b67c <__smakebuf_r+0x70>
 800b664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b668:	4630      	mov	r0, r6
 800b66a:	f000 f81d 	bl	800b6a8 <_isatty_r>
 800b66e:	b128      	cbz	r0, 800b67c <__smakebuf_r+0x70>
 800b670:	89a3      	ldrh	r3, [r4, #12]
 800b672:	f023 0303 	bic.w	r3, r3, #3
 800b676:	f043 0301 	orr.w	r3, r3, #1
 800b67a:	81a3      	strh	r3, [r4, #12]
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	431d      	orrs	r5, r3
 800b680:	81a5      	strh	r5, [r4, #12]
 800b682:	e7cf      	b.n	800b624 <__smakebuf_r+0x18>

0800b684 <_fstat_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4d07      	ldr	r5, [pc, #28]	; (800b6a4 <_fstat_r+0x20>)
 800b688:	2300      	movs	r3, #0
 800b68a:	4604      	mov	r4, r0
 800b68c:	4608      	mov	r0, r1
 800b68e:	4611      	mov	r1, r2
 800b690:	602b      	str	r3, [r5, #0]
 800b692:	f7f6 fe72 	bl	800237a <_fstat>
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	d102      	bne.n	800b6a0 <_fstat_r+0x1c>
 800b69a:	682b      	ldr	r3, [r5, #0]
 800b69c:	b103      	cbz	r3, 800b6a0 <_fstat_r+0x1c>
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	bd38      	pop	{r3, r4, r5, pc}
 800b6a2:	bf00      	nop
 800b6a4:	200005e4 	.word	0x200005e4

0800b6a8 <_isatty_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4d06      	ldr	r5, [pc, #24]	; (800b6c4 <_isatty_r+0x1c>)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	602b      	str	r3, [r5, #0]
 800b6b4:	f7f6 fe71 	bl	800239a <_isatty>
 800b6b8:	1c43      	adds	r3, r0, #1
 800b6ba:	d102      	bne.n	800b6c2 <_isatty_r+0x1a>
 800b6bc:	682b      	ldr	r3, [r5, #0]
 800b6be:	b103      	cbz	r3, 800b6c2 <_isatty_r+0x1a>
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	bd38      	pop	{r3, r4, r5, pc}
 800b6c4:	200005e4 	.word	0x200005e4

0800b6c8 <abort>:
 800b6c8:	b508      	push	{r3, lr}
 800b6ca:	2006      	movs	r0, #6
 800b6cc:	f000 f834 	bl	800b738 <raise>
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	f7f6 fe03 	bl	80022dc <_exit>

0800b6d6 <_malloc_usable_size_r>:
 800b6d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6da:	1f18      	subs	r0, r3, #4
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bfbc      	itt	lt
 800b6e0:	580b      	ldrlt	r3, [r1, r0]
 800b6e2:	18c0      	addlt	r0, r0, r3
 800b6e4:	4770      	bx	lr

0800b6e6 <_raise_r>:
 800b6e6:	291f      	cmp	r1, #31
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	460d      	mov	r5, r1
 800b6ee:	d904      	bls.n	800b6fa <_raise_r+0x14>
 800b6f0:	2316      	movs	r3, #22
 800b6f2:	6003      	str	r3, [r0, #0]
 800b6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f8:	bd38      	pop	{r3, r4, r5, pc}
 800b6fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b6fc:	b112      	cbz	r2, 800b704 <_raise_r+0x1e>
 800b6fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b702:	b94b      	cbnz	r3, 800b718 <_raise_r+0x32>
 800b704:	4620      	mov	r0, r4
 800b706:	f000 f831 	bl	800b76c <_getpid_r>
 800b70a:	462a      	mov	r2, r5
 800b70c:	4601      	mov	r1, r0
 800b70e:	4620      	mov	r0, r4
 800b710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b714:	f000 b818 	b.w	800b748 <_kill_r>
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d00a      	beq.n	800b732 <_raise_r+0x4c>
 800b71c:	1c59      	adds	r1, r3, #1
 800b71e:	d103      	bne.n	800b728 <_raise_r+0x42>
 800b720:	2316      	movs	r3, #22
 800b722:	6003      	str	r3, [r0, #0]
 800b724:	2001      	movs	r0, #1
 800b726:	e7e7      	b.n	800b6f8 <_raise_r+0x12>
 800b728:	2400      	movs	r4, #0
 800b72a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b72e:	4628      	mov	r0, r5
 800b730:	4798      	blx	r3
 800b732:	2000      	movs	r0, #0
 800b734:	e7e0      	b.n	800b6f8 <_raise_r+0x12>
	...

0800b738 <raise>:
 800b738:	4b02      	ldr	r3, [pc, #8]	; (800b744 <raise+0xc>)
 800b73a:	4601      	mov	r1, r0
 800b73c:	6818      	ldr	r0, [r3, #0]
 800b73e:	f7ff bfd2 	b.w	800b6e6 <_raise_r>
 800b742:	bf00      	nop
 800b744:	20000068 	.word	0x20000068

0800b748 <_kill_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4d07      	ldr	r5, [pc, #28]	; (800b768 <_kill_r+0x20>)
 800b74c:	2300      	movs	r3, #0
 800b74e:	4604      	mov	r4, r0
 800b750:	4608      	mov	r0, r1
 800b752:	4611      	mov	r1, r2
 800b754:	602b      	str	r3, [r5, #0]
 800b756:	f7f6 fdb1 	bl	80022bc <_kill>
 800b75a:	1c43      	adds	r3, r0, #1
 800b75c:	d102      	bne.n	800b764 <_kill_r+0x1c>
 800b75e:	682b      	ldr	r3, [r5, #0]
 800b760:	b103      	cbz	r3, 800b764 <_kill_r+0x1c>
 800b762:	6023      	str	r3, [r4, #0]
 800b764:	bd38      	pop	{r3, r4, r5, pc}
 800b766:	bf00      	nop
 800b768:	200005e4 	.word	0x200005e4

0800b76c <_getpid_r>:
 800b76c:	f7f6 bd9e 	b.w	80022ac <_getpid>

0800b770 <_init>:
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	bf00      	nop
 800b774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b776:	bc08      	pop	{r3}
 800b778:	469e      	mov	lr, r3
 800b77a:	4770      	bx	lr

0800b77c <_fini>:
 800b77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b77e:	bf00      	nop
 800b780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b782:	bc08      	pop	{r3}
 800b784:	469e      	mov	lr, r3
 800b786:	4770      	bx	lr
